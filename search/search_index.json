{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-github Welcome! Prefect tasks and subflows for GitHub. The tasks within this collection were created by a code generator using the GitHub GraphQL schema. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-github with pip : pip install prefect-github Write and run a flow from prefect import flow from prefect_github import GitHubCredentials from prefect_github.repository import query_repository from prefect_github.mutations import add_star_starrable @flow () async def github_add_star_flow (): github_credentials = GitHubCredentials ( token ) repository_id_future = await query_repository ( \"PrefectHQ\" , \"Prefect\" , github_credentials = github_credentials , return_fields = \"id\" ) repository_id = ( await repository_id_future . result ())[ \"id\" ] starrable = await add_star_starrable ( repository_id , github_credentials ) return starrable await github_add_star_flow () Resources If you encounter any bugs while using prefect-github , feel free to open an issue in the prefect-github repository. If you have any questions or issues while using prefect-github , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-github for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-github.git cd prefect-github/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-github","text":"","title":"prefect-github"},{"location":"#welcome","text":"Prefect tasks and subflows for GitHub. The tasks within this collection were created by a code generator using the GitHub GraphQL schema.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-github with pip : pip install prefect-github","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_github import GitHubCredentials from prefect_github.repository import query_repository from prefect_github.mutations import add_star_starrable @flow () async def github_add_star_flow (): github_credentials = GitHubCredentials ( token ) repository_id_future = await query_repository ( \"PrefectHQ\" , \"Prefect\" , github_credentials = github_credentials , return_fields = \"id\" ) repository_id = ( await repository_id_future . result ())[ \"id\" ] starrable = await add_star_starrable ( repository_id , github_credentials ) return starrable await github_add_star_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-github , feel free to open an issue in the prefect-github repository. If you have any questions or issues while using prefect-github , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-github for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-github.git cd prefect-github/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_github.credentials Credential classes used to perform authenticated interactions with GitHub GitHubCredentials dataclass Dataclass used to manage GitHub authentication. Parameters: Name Type Description Default token str the token to authenticate into GitHub. required Source code in prefect_github/credentials.py class GitHubCredentials : \"\"\" Dataclass used to manage GitHub authentication. Args: token: the token to authenticate into GitHub. \"\"\" token : str def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"consumer_key\" github_credentials = GitHubCredentials(token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , { \"Authorization\" : f \"Bearer { self . token } \" } ) return endpoint get_endpoint Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: Type Description HTTPEndpoint An authenticated GitHub GraphQL HTTPEndpoint Examples: Gets an authenticated GitHub GraphQL HTTPEndpoint. from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow (): token = \"consumer_key\" github_credentials = GitHubCredentials ( token ) endpoint = github_credentials . get_endpoint () return endpoint example_get_endpoint_flow () Source code in prefect_github/credentials.py def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"consumer_key\" github_credentials = GitHubCredentials(token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , { \"Authorization\" : f \"Bearer { self . token } \" } ) return endpoint","title":"Credentials"},{"location":"credentials/#prefect_github.credentials","text":"Credential classes used to perform authenticated interactions with GitHub","title":"credentials"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials","text":"Dataclass used to manage GitHub authentication. Parameters: Name Type Description Default token str the token to authenticate into GitHub. required Source code in prefect_github/credentials.py class GitHubCredentials : \"\"\" Dataclass used to manage GitHub authentication. Args: token: the token to authenticate into GitHub. \"\"\" token : str def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"consumer_key\" github_credentials = GitHubCredentials(token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , { \"Authorization\" : f \"Bearer { self . token } \" } ) return endpoint","title":"GitHubCredentials"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials.get_endpoint","text":"Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: Type Description HTTPEndpoint An authenticated GitHub GraphQL HTTPEndpoint Examples: Gets an authenticated GitHub GraphQL HTTPEndpoint. from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow (): token = \"consumer_key\" github_credentials = GitHubCredentials ( token ) endpoint = github_credentials . get_endpoint () return endpoint example_get_endpoint_flow () Source code in prefect_github/credentials.py def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"consumer_key\" github_credentials = GitHubCredentials(token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , { \"Authorization\" : f \"Bearer { self . token } \" } ) return endpoint","title":"get_endpoint()"},{"location":"graphql/","text":"prefect_github.graphql This is a module for interacting with generic GraphQL tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. execute_graphql async Generic function for executing GraphQL operations. Parameters: Name Type Description Default op Union[sgqlc.operation.Operation, str] The operation, either as a valid GraphQL string or sgqlc.Operation. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required Returns: Type Description Dict[str, Any] A dict of the returned fields. Examples: NOTE: Maintainers can update these examples to match their collection! Queries the first three issues from the Prefect repository using a string query. from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials ( token ) params = dict ( owner = \"PrefectHQ\" , name = \"Prefect\" ) result = execute_graphql ( op , github_credentials , ** params ) return result example_execute_graphql_flow () Queries the first three issues from Prefect repository using a sgqlc.Operation. from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = Operation ( graphql_schema . Query ) op_settings = op . repository ( owner = \"PrefectHQ\" , name = \"Prefect\" ) . issues ( first = 3 ) . nodes () op_settings . __fields__ ( \"id\" , \"title\" ) token = \"ghp_...\" github_credentials = GitHubCredentials ( token ) result = execute_graphql ( op , github_credentials , ) return result example_execute_graphql_flow () Source code in prefect_github/graphql.py @task async def execute_graphql ( op : Union [ Operation , str ], github_credentials : GitHubCredentials , ** vars ) -> Dict [ str , Any ]: \"\"\" Generic function for executing GraphQL operations. Args: op: The operation, either as a valid GraphQL string or sgqlc.Operation. github_credentials: Credentials to use for authentication with GitHub. Returns: A dict of the returned fields. Examples: # NOTE: Maintainers can update these examples to match their collection! Queries the first three issues from the Prefect repository using a string query. ```python from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials(token) params = dict(owner=\"PrefectHQ\", name=\"Prefect\") result = execute_graphql(op, github_credentials, **params) return result example_execute_graphql_flow() ``` Queries the first three issues from Prefect repository using a sgqlc.Operation. ```python from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = Operation(graphql_schema.Query) op_settings = op.repository( owner=\"PrefectHQ\", name=\"Prefect\" ).issues( first=3 ).nodes() op_settings.__fields__(\"id\", \"title\") token = \"ghp_...\" github_credentials = GitHubCredentials(token) result = execute_graphql( op, github_credentials, ) return result example_execute_graphql_flow() ``` \"\"\" result = await _execute_graphql_op ( op , github_credentials , ** vars ) return result","title":"Graphql"},{"location":"graphql/#prefect_github.graphql","text":"This is a module for interacting with generic GraphQL tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended.","title":"graphql"},{"location":"graphql/#prefect_github.graphql.execute_graphql","text":"Generic function for executing GraphQL operations. Parameters: Name Type Description Default op Union[sgqlc.operation.Operation, str] The operation, either as a valid GraphQL string or sgqlc.Operation. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required Returns: Type Description Dict[str, Any] A dict of the returned fields. Examples:","title":"execute_graphql()"},{"location":"graphql/#prefect_github.graphql.execute_graphql--note-maintainers-can-update-these-examples-to-match-their-collection","text":"Queries the first three issues from the Prefect repository using a string query. from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials ( token ) params = dict ( owner = \"PrefectHQ\" , name = \"Prefect\" ) result = execute_graphql ( op , github_credentials , ** params ) return result example_execute_graphql_flow () Queries the first three issues from Prefect repository using a sgqlc.Operation. from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = Operation ( graphql_schema . Query ) op_settings = op . repository ( owner = \"PrefectHQ\" , name = \"Prefect\" ) . issues ( first = 3 ) . nodes () op_settings . __fields__ ( \"id\" , \"title\" ) token = \"ghp_...\" github_credentials = GitHubCredentials ( token ) result = execute_graphql ( op , github_credentials , ) return result example_execute_graphql_flow () Source code in prefect_github/graphql.py @task async def execute_graphql ( op : Union [ Operation , str ], github_credentials : GitHubCredentials , ** vars ) -> Dict [ str , Any ]: \"\"\" Generic function for executing GraphQL operations. Args: op: The operation, either as a valid GraphQL string or sgqlc.Operation. github_credentials: Credentials to use for authentication with GitHub. Returns: A dict of the returned fields. Examples: # NOTE: Maintainers can update these examples to match their collection! Queries the first three issues from the Prefect repository using a string query. ```python from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials(token) params = dict(owner=\"PrefectHQ\", name=\"Prefect\") result = execute_graphql(op, github_credentials, **params) return result example_execute_graphql_flow() ``` Queries the first three issues from Prefect repository using a sgqlc.Operation. ```python from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = Operation(graphql_schema.Query) op_settings = op.repository( owner=\"PrefectHQ\", name=\"Prefect\" ).issues( first=3 ).nodes() op_settings.__fields__(\"id\", \"title\") token = \"ghp_...\" github_credentials = GitHubCredentials(token) result = execute_graphql( op, github_credentials, ) return result example_execute_graphql_flow() ``` \"\"\" result = await _execute_graphql_op ( op , github_credentials , ** vars ) return result","title":"NOTE: Maintainers can update these examples to match their collection!"},{"location":"mutations/","text":"prefect_github.mutations This is a module for interacting with GitHub Mutation tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. add_comment_comment_edge async Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_comment_comment_edge ( subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . comment_edge ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"commentEdge\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"commentEdge\" ] add_comment_subject async Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_comment_subject ( subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"subject\" ] add_comment_timeline_edge async Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_comment_timeline_edge ( subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . timeline_edge ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"timelineEdge\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"timelineEdge\" ] add_reaction async Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_reaction ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"reaction\" ] add_reaction_subject async Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_reaction_subject ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"subject\" ] add_star_starrable async Adds a star to a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to star. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_star_starrable ( starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a star to a Starrable. Args: starrable_id: The Starrable ID to star. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"addStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addStar\" ][ \"starrable\" ] close_issue async Close an issue. Parameters: Name Type Description Default issue_id str ID of the issue to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def close_issue ( issue_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Close an issue. Args: issue_id: ID of the issue to be closed. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_issue ( ** strip_kwargs ( input = dict ( issue_id = issue_id , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"closeIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closeIssue\" ][ \"issue\" ] close_pull_request async Close a pull request. Parameters: Name Type Description Default pull_request_id str ID of the pull request to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def close_pull_request ( pull_request_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Close a pull request. Args: pull_request_id: ID of the pull request to be closed. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_pull_request ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"closePullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closePullRequest\" ][ \"pullRequest\" ] create_issue async Creates a new issue. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required title str The title for the issue. required assignee_ids Iterable[str] The Node ID for the user assignee for this issue. required label_ids Iterable[str] An array of Node IDs of labels for this issue. required project_ids Iterable[str] An array of Node IDs for projects associated with this issue. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The body for the issue description. None milestone_id str The Node ID of the milestone for this issue. None issue_template str The name of an issue template in the repository, assigns labels and assignees from the template to the issue. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def create_issue ( repository_id : str , title : str , assignee_ids : Iterable [ str ], label_ids : Iterable [ str ], project_ids : Iterable [ str ], github_credentials : GitHubCredentials , body : str = None , milestone_id : str = None , issue_template : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Creates a new issue. Args: repository_id: The Node ID of the repository. title: The title for the issue. assignee_ids: The Node ID for the user assignee for this issue. label_ids: An array of Node IDs of labels for this issue. project_ids: An array of Node IDs for projects associated with this issue. github_credentials: Credentials to use for authentication with GitHub. body: The body for the issue description. milestone_id: The Node ID of the milestone for this issue. issue_template: The name of an issue template in the repository, assigns labels and assignees from the template to the issue. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_issue ( ** strip_kwargs ( input = dict ( repository_id = repository_id , title = title , assignee_ids = assignee_ids , label_ids = label_ids , project_ids = project_ids , body = body , milestone_id = milestone_id , issue_template = issue_template , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"createIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createIssue\" ][ \"issue\" ] create_pull_request async Create a new pull request. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required base_ref_name str The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. required head_ref_name str The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head_ref_name with a user like this: username:branch . required title str The title of the pull request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The contents of the pull request. None maintainer_can_modify bool Indicates whether maintainers can modify the pull request. None draft bool Indicates whether this pull request should be a draft. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def create_pull_request ( repository_id : str , base_ref_name : str , head_ref_name : str , title : str , github_credentials : GitHubCredentials , body : str = None , maintainer_can_modify : bool = None , draft : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Create a new pull request. Args: repository_id: The Node ID of the repository. base_ref_name: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. head_ref_name: The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head_ref_name` with a user like this: `username:branch`. title: The title of the pull request. github_credentials: Credentials to use for authentication with GitHub. body: The contents of the pull request. maintainer_can_modify: Indicates whether maintainers can modify the pull request. draft: Indicates whether this pull request should be a draft. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_pull_request ( ** strip_kwargs ( input = dict ( repository_id = repository_id , base_ref_name = base_ref_name , head_ref_name = head_ref_name , title = title , body = body , maintainer_can_modify = maintainer_can_modify , draft = draft , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"createPullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createPullRequest\" ][ \"pullRequest\" ] remove_reaction async Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def remove_reaction ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"reaction\" ] remove_reaction_subject async Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def remove_reaction_subject ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"subject\" ] remove_star_starrable async Removes a star from a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to unstar. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def remove_star_starrable ( starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a star from a Starrable. Args: starrable_id: The Starrable ID to unstar. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"removeStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeStar\" ][ \"starrable\" ] request_reviews async Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable[str] The Node IDs of the user to request. required team_ids Iterable[str] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def request_reviews ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) op_stack = ( \"requestReviews\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ] request_reviews_pull_request async Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable[str] The Node IDs of the user to request. required team_ids Iterable[str] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def request_reviews_pull_request ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"requestReviews\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ][ \"pullRequest\" ] request_reviews_requested_reviewers_edge async Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable[str] The Node IDs of the user to request. required team_ids Iterable[str] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def request_reviews_requested_reviewers_edge ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) . requested_reviewers_edge ( ** strip_kwargs ()) op_stack = ( \"requestReviews\" , \"requestedReviewersEdge\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ][ \"requestedReviewersEdge\" ]","title":"Mutations"},{"location":"mutations/#prefect_github.mutations","text":"This is a module for interacting with GitHub Mutation tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended.","title":"mutations"},{"location":"mutations/#prefect_github.mutations.add_comment_comment_edge","text":"Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_comment_comment_edge ( subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . comment_edge ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"commentEdge\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"commentEdge\" ]","title":"add_comment_comment_edge()"},{"location":"mutations/#prefect_github.mutations.add_comment_subject","text":"Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_comment_subject ( subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"subject\" ]","title":"add_comment_subject()"},{"location":"mutations/#prefect_github.mutations.add_comment_timeline_edge","text":"Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_comment_timeline_edge ( subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . timeline_edge ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"timelineEdge\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"timelineEdge\" ]","title":"add_comment_timeline_edge()"},{"location":"mutations/#prefect_github.mutations.add_reaction","text":"Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_reaction ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"reaction\" ]","title":"add_reaction()"},{"location":"mutations/#prefect_github.mutations.add_reaction_subject","text":"Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_reaction_subject ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"subject\" ]","title":"add_reaction_subject()"},{"location":"mutations/#prefect_github.mutations.add_star_starrable","text":"Adds a star to a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to star. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def add_star_starrable ( starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a star to a Starrable. Args: starrable_id: The Starrable ID to star. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"addStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addStar\" ][ \"starrable\" ]","title":"add_star_starrable()"},{"location":"mutations/#prefect_github.mutations.close_issue","text":"Close an issue. Parameters: Name Type Description Default issue_id str ID of the issue to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def close_issue ( issue_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Close an issue. Args: issue_id: ID of the issue to be closed. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_issue ( ** strip_kwargs ( input = dict ( issue_id = issue_id , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"closeIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closeIssue\" ][ \"issue\" ]","title":"close_issue()"},{"location":"mutations/#prefect_github.mutations.close_pull_request","text":"Close a pull request. Parameters: Name Type Description Default pull_request_id str ID of the pull request to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def close_pull_request ( pull_request_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Close a pull request. Args: pull_request_id: ID of the pull request to be closed. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_pull_request ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"closePullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closePullRequest\" ][ \"pullRequest\" ]","title":"close_pull_request()"},{"location":"mutations/#prefect_github.mutations.create_issue","text":"Creates a new issue. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required title str The title for the issue. required assignee_ids Iterable[str] The Node ID for the user assignee for this issue. required label_ids Iterable[str] An array of Node IDs of labels for this issue. required project_ids Iterable[str] An array of Node IDs for projects associated with this issue. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The body for the issue description. None milestone_id str The Node ID of the milestone for this issue. None issue_template str The name of an issue template in the repository, assigns labels and assignees from the template to the issue. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def create_issue ( repository_id : str , title : str , assignee_ids : Iterable [ str ], label_ids : Iterable [ str ], project_ids : Iterable [ str ], github_credentials : GitHubCredentials , body : str = None , milestone_id : str = None , issue_template : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Creates a new issue. Args: repository_id: The Node ID of the repository. title: The title for the issue. assignee_ids: The Node ID for the user assignee for this issue. label_ids: An array of Node IDs of labels for this issue. project_ids: An array of Node IDs for projects associated with this issue. github_credentials: Credentials to use for authentication with GitHub. body: The body for the issue description. milestone_id: The Node ID of the milestone for this issue. issue_template: The name of an issue template in the repository, assigns labels and assignees from the template to the issue. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_issue ( ** strip_kwargs ( input = dict ( repository_id = repository_id , title = title , assignee_ids = assignee_ids , label_ids = label_ids , project_ids = project_ids , body = body , milestone_id = milestone_id , issue_template = issue_template , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"createIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createIssue\" ][ \"issue\" ]","title":"create_issue()"},{"location":"mutations/#prefect_github.mutations.create_pull_request","text":"Create a new pull request. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required base_ref_name str The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. required head_ref_name str The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head_ref_name with a user like this: username:branch . required title str The title of the pull request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The contents of the pull request. None maintainer_can_modify bool Indicates whether maintainers can modify the pull request. None draft bool Indicates whether this pull request should be a draft. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def create_pull_request ( repository_id : str , base_ref_name : str , head_ref_name : str , title : str , github_credentials : GitHubCredentials , body : str = None , maintainer_can_modify : bool = None , draft : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Create a new pull request. Args: repository_id: The Node ID of the repository. base_ref_name: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. head_ref_name: The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head_ref_name` with a user like this: `username:branch`. title: The title of the pull request. github_credentials: Credentials to use for authentication with GitHub. body: The contents of the pull request. maintainer_can_modify: Indicates whether maintainers can modify the pull request. draft: Indicates whether this pull request should be a draft. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_pull_request ( ** strip_kwargs ( input = dict ( repository_id = repository_id , base_ref_name = base_ref_name , head_ref_name = head_ref_name , title = title , body = body , maintainer_can_modify = maintainer_can_modify , draft = draft , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"createPullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createPullRequest\" ][ \"pullRequest\" ]","title":"create_pull_request()"},{"location":"mutations/#prefect_github.mutations.remove_reaction","text":"Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def remove_reaction ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"reaction\" ]","title":"remove_reaction()"},{"location":"mutations/#prefect_github.mutations.remove_reaction_subject","text":"Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def remove_reaction_subject ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"subject\" ]","title":"remove_reaction_subject()"},{"location":"mutations/#prefect_github.mutations.remove_star_starrable","text":"Removes a star from a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to unstar. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def remove_star_starrable ( starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a star from a Starrable. Args: starrable_id: The Starrable ID to unstar. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"removeStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeStar\" ][ \"starrable\" ]","title":"remove_star_starrable()"},{"location":"mutations/#prefect_github.mutations.request_reviews","text":"Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable[str] The Node IDs of the user to request. required team_ids Iterable[str] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def request_reviews ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) op_stack = ( \"requestReviews\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ]","title":"request_reviews()"},{"location":"mutations/#prefect_github.mutations.request_reviews_pull_request","text":"Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable[str] The Node IDs of the user to request. required team_ids Iterable[str] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def request_reviews_pull_request ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"requestReviews\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ][ \"pullRequest\" ]","title":"request_reviews_pull_request()"},{"location":"mutations/#prefect_github.mutations.request_reviews_requested_reviewers_edge","text":"Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable[str] The Node IDs of the user to request. required team_ids Iterable[str] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/mutations.py @task async def request_reviews_requested_reviewers_edge ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) . requested_reviewers_edge ( ** strip_kwargs ()) op_stack = ( \"requestReviews\" , \"requestedReviewersEdge\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ][ \"requestedReviewersEdge\" ]","title":"request_reviews_requested_reviewers_edge()"},{"location":"organization/","text":"prefect_github.organization This is a module for interacting with GitHub Query organization tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. query_organization async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"organization\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ] query_organization_audit_log async Audit log entries of the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str The query string to filter audit entries. None order_by AuditLogOrder Ordering options for the returned audit log entries. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_audit_log ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . AuditLogOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Audit log entries of the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: The query string to filter audit entries. order_by: Ordering options for the returned audit log entries. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . audit_log ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"organization\" , \"auditLog\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"auditLog\" ] query_organization_domains async A list of domains owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_verified bool Filter by if the domain is verified. None is_approved bool Filter by if the domain is approved. None order_by VerifiableDomainOrder Ordering options for verifiable domains returned. {'field': 'DOMAIN', 'direction': 'ASC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_domains ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , is_verified : bool = None , is_approved : bool = None , order_by : graphql_schema . VerifiableDomainOrder = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of domains owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_verified: Filter by if the domain is verified. is_approved: Filter by if the domain is approved. order_by: Ordering options for verifiable domains returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . domains ( ** strip_kwargs ( after = after , before = before , first = first , last = last , is_verified = is_verified , is_approved = is_approved , order_by = order_by , ) ) op_stack = ( \"organization\" , \"domains\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"domains\" ] query_organization_enterprise_owners async A list of owners of the organization's enterprise account. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str The search string to look for. None organization_role RoleInOrganization The organization role to filter by. None order_by OrgEnterpriseOwnerOrder Ordering options for enterprise owners returned from the connection. {'field': 'LOGIN', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_enterprise_owners ( login : str , github_credentials : GitHubCredentials , query : str = None , organization_role : graphql_schema . RoleInOrganization = None , order_by : graphql_schema . OrgEnterpriseOwnerOrder = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of owners of the organization's enterprise account. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: The search string to look for. organization_role: The organization role to filter by. order_by: Ordering options for enterprise owners returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . enterprise_owners ( ** strip_kwargs ( query = query , organization_role = organization_role , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"enterpriseOwners\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"enterpriseOwners\" ] query_organization_interaction_ability async The interaction ability settings for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_interaction_ability ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"interactionAbility\" ] query_organization_ip_allow_list_entries async The IP addresses that are allowed to access resources owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by IpAllowListEntryOrder Ordering options for IP allow list entries returned. {'field': 'ALLOW_LIST_VALUE', 'direction': 'ASC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_ip_allow_list_entries ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . IpAllowListEntryOrder = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The IP addresses that are allowed to access resources owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for IP allow list entries returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . ip_allow_list_entries ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"ipAllowListEntries\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"ipAllowListEntries\" ] query_organization_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_item_showcase ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"itemShowcase\" ] query_organization_member_statuses async Get the status messages members of this entity have set that are either public or visible only to the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by UserStatusOrder Ordering options for user statuses returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_member_statuses ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . UserStatusOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Get the status messages members of this entity have set that are either public or visible only to the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for user statuses returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . member_statuses ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"memberStatuses\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"memberStatuses\" ] query_organization_members_with_role async A list of users who are members of this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_members_with_role ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who are members of this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . members_with_role ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"membersWithRole\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"membersWithRole\" ] query_organization_packages async A list of packages under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable[str] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type PackageType Filter registry package by type. None order_by PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_packages ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"organization\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"packages\" ] query_organization_pending_members async A list of users who have been invited to join this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_pending_members ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who have been invited to join this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pending_members ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pendingMembers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pendingMembers\" ] query_organization_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_pinnable_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The organization's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnableItems\" ] query_organization_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_pinned_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The organization's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnedItems\" ] query_organization_project async Find project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_project ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: login: The organization's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"project\" ] query_organization_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default login str The organization's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_project_next ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: login: The organization's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectNext\" ] query_organization_projects async A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required states Iterable[prefect_github.schemas.graphql_schema.ProjectState] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_projects ( login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The organization's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projects\" ] query_organization_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_projects_next ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"organization\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsNext\" ] query_organization_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"organization\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositories\" ] query_organization_repository async Find Repository. Parameters: Name Type Description Default login str The organization's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The organization's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"organization\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repository\" ] query_organization_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repository_discussion_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"organization\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussionComments\" ] query_organization_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repository_discussions ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"organization\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussions\" ] query_organization_repository_migrations async A list of all repository migrations for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None state MigrationState Filter repository migrations by state. None order_by RepositoryMigrationOrder Ordering options for repository migrations returned. {'field': 'CREATED_AT', 'direction': 'ASC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repository_migrations ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , state : graphql_schema . MigrationState = None , order_by : graphql_schema . RepositoryMigrationOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of all repository migrations for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. state: Filter repository migrations by state. order_by: Ordering options for repository migrations returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_migrations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , state = state , order_by = order_by , ) ) op_stack = ( \"organization\" , \"repositoryMigrations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryMigrations\" ] query_organization_saml_identity_provider async The Organization's SAML identity providers. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_saml_identity_provider ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The Organization's SAML identity providers. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . saml_identity_provider ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"samlIdentityProvider\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"samlIdentityProvider\" ] query_organization_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsoring ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsoring\" ] query_organization_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsors ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsors\" ] query_organization_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period SponsorsActivityPeriod Filter activities returned to only those that occurred in a given time range. 'MONTH' order_by SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsors_activities ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in a given time range. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsActivities\" ] query_organization_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsors_listing ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsListing\" ] query_organization_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorship_for_viewer_as_sponsor ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsor\" ] query_organization_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorship_for_viewer_as_sponsorable ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_organization_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorship_newsletters ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipNewsletters\" ] query_organization_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorships_as_maintainer ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsMaintainer\" ] query_organization_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorships_as_sponsor ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsSponsor\" ] query_organization_team async Find an organization's team by its slug. Parameters: Name Type Description Default login str The organization's login. required slug str The name or slug of the team to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_team ( login : str , slug : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization's team by its slug. Args: login: The organization's login. slug: The name or slug of the team to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . team ( ** strip_kwargs ( slug = slug , ) ) op_stack = ( \"organization\" , \"team\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"team\" ] query_organization_teams async A list of teams in this organization. Parameters: Name Type Description Default login str The organization's login. required user_logins Iterable[str] User logins to filter by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy TeamPrivacy If non-null, filters teams according to privacy. None role TeamRole If non-null, filters teams according to whether the viewer is an admin or member on team. None query str If non-null, filters teams with query on team name and team slug. None order_by TeamOrder Ordering options for teams returned from the connection. None ldap_mapped bool If true, filters teams that are mapped to an LDAP Group (Enterprise only). None root_teams_only bool If true, restrict to only root teams. False after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_teams ( login : str , user_logins : Iterable [ str ], github_credentials : GitHubCredentials , privacy : graphql_schema . TeamPrivacy = None , role : graphql_schema . TeamRole = None , query : str = None , order_by : graphql_schema . TeamOrder = None , ldap_mapped : bool = None , root_teams_only : bool = False , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of teams in this organization. Args: login: The organization's login. user_logins: User logins to filter by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters teams according to privacy. role: If non-null, filters teams according to whether the viewer is an admin or member on team. query: If non-null, filters teams with query on team name and team slug. order_by: Ordering options for teams returned from the connection. ldap_mapped: If true, filters teams that are mapped to an LDAP Group (Enterprise only). root_teams_only: If true, restrict to only root teams. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . teams ( ** strip_kwargs ( user_logins = user_logins , privacy = privacy , role = role , query = query , order_by = order_by , ldap_mapped = ldap_mapped , root_teams_only = root_teams_only , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"teams\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"teams\" ]","title":"Organization"},{"location":"organization/#prefect_github.organization","text":"This is a module for interacting with GitHub Query organization tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended.","title":"organization"},{"location":"organization/#prefect_github.organization.query_organization","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"organization\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ]","title":"query_organization()"},{"location":"organization/#prefect_github.organization.query_organization_audit_log","text":"Audit log entries of the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str The query string to filter audit entries. None order_by AuditLogOrder Ordering options for the returned audit log entries. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_audit_log ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . AuditLogOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Audit log entries of the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: The query string to filter audit entries. order_by: Ordering options for the returned audit log entries. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . audit_log ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"organization\" , \"auditLog\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"auditLog\" ]","title":"query_organization_audit_log()"},{"location":"organization/#prefect_github.organization.query_organization_domains","text":"A list of domains owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_verified bool Filter by if the domain is verified. None is_approved bool Filter by if the domain is approved. None order_by VerifiableDomainOrder Ordering options for verifiable domains returned. {'field': 'DOMAIN', 'direction': 'ASC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_domains ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , is_verified : bool = None , is_approved : bool = None , order_by : graphql_schema . VerifiableDomainOrder = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of domains owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_verified: Filter by if the domain is verified. is_approved: Filter by if the domain is approved. order_by: Ordering options for verifiable domains returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . domains ( ** strip_kwargs ( after = after , before = before , first = first , last = last , is_verified = is_verified , is_approved = is_approved , order_by = order_by , ) ) op_stack = ( \"organization\" , \"domains\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"domains\" ]","title":"query_organization_domains()"},{"location":"organization/#prefect_github.organization.query_organization_enterprise_owners","text":"A list of owners of the organization's enterprise account. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str The search string to look for. None organization_role RoleInOrganization The organization role to filter by. None order_by OrgEnterpriseOwnerOrder Ordering options for enterprise owners returned from the connection. {'field': 'LOGIN', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_enterprise_owners ( login : str , github_credentials : GitHubCredentials , query : str = None , organization_role : graphql_schema . RoleInOrganization = None , order_by : graphql_schema . OrgEnterpriseOwnerOrder = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of owners of the organization's enterprise account. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: The search string to look for. organization_role: The organization role to filter by. order_by: Ordering options for enterprise owners returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . enterprise_owners ( ** strip_kwargs ( query = query , organization_role = organization_role , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"enterpriseOwners\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"enterpriseOwners\" ]","title":"query_organization_enterprise_owners()"},{"location":"organization/#prefect_github.organization.query_organization_interaction_ability","text":"The interaction ability settings for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_interaction_ability ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"interactionAbility\" ]","title":"query_organization_interaction_ability()"},{"location":"organization/#prefect_github.organization.query_organization_ip_allow_list_entries","text":"The IP addresses that are allowed to access resources owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by IpAllowListEntryOrder Ordering options for IP allow list entries returned. {'field': 'ALLOW_LIST_VALUE', 'direction': 'ASC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_ip_allow_list_entries ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . IpAllowListEntryOrder = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The IP addresses that are allowed to access resources owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for IP allow list entries returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . ip_allow_list_entries ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"ipAllowListEntries\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"ipAllowListEntries\" ]","title":"query_organization_ip_allow_list_entries()"},{"location":"organization/#prefect_github.organization.query_organization_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_item_showcase ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"itemShowcase\" ]","title":"query_organization_item_showcase()"},{"location":"organization/#prefect_github.organization.query_organization_member_statuses","text":"Get the status messages members of this entity have set that are either public or visible only to the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by UserStatusOrder Ordering options for user statuses returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_member_statuses ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . UserStatusOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Get the status messages members of this entity have set that are either public or visible only to the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for user statuses returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . member_statuses ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"memberStatuses\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"memberStatuses\" ]","title":"query_organization_member_statuses()"},{"location":"organization/#prefect_github.organization.query_organization_members_with_role","text":"A list of users who are members of this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_members_with_role ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who are members of this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . members_with_role ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"membersWithRole\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"membersWithRole\" ]","title":"query_organization_members_with_role()"},{"location":"organization/#prefect_github.organization.query_organization_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable[str] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type PackageType Filter registry package by type. None order_by PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_packages ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"organization\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"packages\" ]","title":"query_organization_packages()"},{"location":"organization/#prefect_github.organization.query_organization_pending_members","text":"A list of users who have been invited to join this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_pending_members ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who have been invited to join this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pending_members ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pendingMembers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pendingMembers\" ]","title":"query_organization_pending_members()"},{"location":"organization/#prefect_github.organization.query_organization_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_pinnable_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The organization's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnableItems\" ]","title":"query_organization_pinnable_items()"},{"location":"organization/#prefect_github.organization.query_organization_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_pinned_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The organization's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnedItems\" ]","title":"query_organization_pinned_items()"},{"location":"organization/#prefect_github.organization.query_organization_project","text":"Find project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_project ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: login: The organization's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"project\" ]","title":"query_organization_project()"},{"location":"organization/#prefect_github.organization.query_organization_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default login str The organization's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_project_next ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: login: The organization's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectNext\" ]","title":"query_organization_project_next()"},{"location":"organization/#prefect_github.organization.query_organization_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required states Iterable[prefect_github.schemas.graphql_schema.ProjectState] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_projects ( login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The organization's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projects\" ]","title":"query_organization_projects()"},{"location":"organization/#prefect_github.organization.query_organization_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_projects_next ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"organization\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsNext\" ]","title":"query_organization_projects_next()"},{"location":"organization/#prefect_github.organization.query_organization_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"organization\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositories\" ]","title":"query_organization_repositories()"},{"location":"organization/#prefect_github.organization.query_organization_repository","text":"Find Repository. Parameters: Name Type Description Default login str The organization's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The organization's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"organization\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repository\" ]","title":"query_organization_repository()"},{"location":"organization/#prefect_github.organization.query_organization_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repository_discussion_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"organization\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussionComments\" ]","title":"query_organization_repository_discussion_comments()"},{"location":"organization/#prefect_github.organization.query_organization_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repository_discussions ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"organization\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussions\" ]","title":"query_organization_repository_discussions()"},{"location":"organization/#prefect_github.organization.query_organization_repository_migrations","text":"A list of all repository migrations for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None state MigrationState Filter repository migrations by state. None order_by RepositoryMigrationOrder Ordering options for repository migrations returned. {'field': 'CREATED_AT', 'direction': 'ASC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_repository_migrations ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , state : graphql_schema . MigrationState = None , order_by : graphql_schema . RepositoryMigrationOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of all repository migrations for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. state: Filter repository migrations by state. order_by: Ordering options for repository migrations returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_migrations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , state = state , order_by = order_by , ) ) op_stack = ( \"organization\" , \"repositoryMigrations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryMigrations\" ]","title":"query_organization_repository_migrations()"},{"location":"organization/#prefect_github.organization.query_organization_saml_identity_provider","text":"The Organization's SAML identity providers. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_saml_identity_provider ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The Organization's SAML identity providers. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . saml_identity_provider ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"samlIdentityProvider\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"samlIdentityProvider\" ]","title":"query_organization_saml_identity_provider()"},{"location":"organization/#prefect_github.organization.query_organization_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsoring ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsoring\" ]","title":"query_organization_sponsoring()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsors ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsors\" ]","title":"query_organization_sponsors()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period SponsorsActivityPeriod Filter activities returned to only those that occurred in a given time range. 'MONTH' order_by SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsors_activities ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in a given time range. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsActivities\" ]","title":"query_organization_sponsors_activities()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsors_listing ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsListing\" ]","title":"query_organization_sponsors_listing()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorship_for_viewer_as_sponsor ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_organization_sponsorship_for_viewer_as_sponsor()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorship_for_viewer_as_sponsorable ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_organization_sponsorship_for_viewer_as_sponsorable()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorship_newsletters ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipNewsletters\" ]","title":"query_organization_sponsorship_newsletters()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorships_as_maintainer ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_organization_sponsorships_as_maintainer()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_sponsorships_as_sponsor ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_organization_sponsorships_as_sponsor()"},{"location":"organization/#prefect_github.organization.query_organization_team","text":"Find an organization's team by its slug. Parameters: Name Type Description Default login str The organization's login. required slug str The name or slug of the team to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_team ( login : str , slug : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization's team by its slug. Args: login: The organization's login. slug: The name or slug of the team to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . team ( ** strip_kwargs ( slug = slug , ) ) op_stack = ( \"organization\" , \"team\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"team\" ]","title":"query_organization_team()"},{"location":"organization/#prefect_github.organization.query_organization_teams","text":"A list of teams in this organization. Parameters: Name Type Description Default login str The organization's login. required user_logins Iterable[str] User logins to filter by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy TeamPrivacy If non-null, filters teams according to privacy. None role TeamRole If non-null, filters teams according to whether the viewer is an admin or member on team. None query str If non-null, filters teams with query on team name and team slug. None order_by TeamOrder Ordering options for teams returned from the connection. None ldap_mapped bool If true, filters teams that are mapped to an LDAP Group (Enterprise only). None root_teams_only bool If true, restrict to only root teams. False after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/organization.py @task async def query_organization_teams ( login : str , user_logins : Iterable [ str ], github_credentials : GitHubCredentials , privacy : graphql_schema . TeamPrivacy = None , role : graphql_schema . TeamRole = None , query : str = None , order_by : graphql_schema . TeamOrder = None , ldap_mapped : bool = None , root_teams_only : bool = False , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of teams in this organization. Args: login: The organization's login. user_logins: User logins to filter by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters teams according to privacy. role: If non-null, filters teams according to whether the viewer is an admin or member on team. query: If non-null, filters teams with query on team name and team slug. order_by: Ordering options for teams returned from the connection. ldap_mapped: If true, filters teams that are mapped to an LDAP Group (Enterprise only). root_teams_only: If true, restrict to only root teams. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . teams ( ** strip_kwargs ( user_logins = user_logins , privacy = privacy , role = role , query = query , order_by = order_by , ldap_mapped = ldap_mapped , root_teams_only = root_teams_only , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"teams\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"teams\" ]","title":"query_organization_teams()"},{"location":"repository/","text":"prefect_github.repository This is a module for interacting with GitHub Query repository tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. query_repository async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repository\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ] query_repository_assignable_users async A list of users that can be assigned to issues in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_assignable_users ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users that can be assigned to issues in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . assignable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"assignableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"assignableUsers\" ] query_repository_branch_protection_rules async A list of branch protection rules for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_branch_protection_rules ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of branch protection rules for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . branch_protection_rules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"branchProtectionRules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"branchProtectionRules\" ] query_repository_code_of_conduct async Returns the code of conduct for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_code_of_conduct ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns the code of conduct for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . code_of_conduct ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"codeOfConduct\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"codeOfConduct\" ] query_repository_collaborators async A list of collaborators associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True affiliation CollaboratorAffiliation Collaborators affiliation level with a repository. None query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_collaborators ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , affiliation : graphql_schema . CollaboratorAffiliation = None , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of collaborators associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. affiliation: Collaborators affiliation level with a repository. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . collaborators ( ** strip_kwargs ( affiliation = affiliation , query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"collaborators\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"collaborators\" ] query_repository_commit_comments async A list of commit comments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_commit_comments ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"commitComments\" ] query_repository_contact_links async Returns a list of contact links associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_contact_links ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of contact links associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . contact_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"contactLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"contactLinks\" ] query_repository_default_branch_ref async The Ref associated with the repository's default branch. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_default_branch_ref ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The Ref associated with the repository's default branch. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . default_branch_ref ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"defaultBranchRef\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"defaultBranchRef\" ] query_repository_deploy_keys async A list of deploy keys that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_deploy_keys ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of deploy keys that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deploy_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployKeys\" ] query_repository_deployments async Deployments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environments Iterable[str] Environments to list deployments for. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by DeploymentOrder Ordering options for deployments returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_deployments ( owner : str , name : str , environments : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . DeploymentOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Deployments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. environments: Environments to list deployments for. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for deployments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deployments ( ** strip_kwargs ( environments = environments , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployments\" ] query_repository_discussion async Returns a single discussion from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the discussion to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_discussion ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single discussion from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the discussion to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"discussion\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussion\" ] query_repository_discussion_categories async A list of discussion categories that are available in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None filter_by_assignable bool Filter by categories that are assignable by the viewer. False return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_discussion_categories ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , filter_by_assignable : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussion categories that are available in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. filter_by_assignable: Filter by categories that are assignable by the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion_categories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , filter_by_assignable = filter_by_assignable , ) ) op_stack = ( \"repository\" , \"discussionCategories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussionCategories\" ] query_repository_discussions async A list of discussions that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None category_id str Only include discussions that belong to the category with this ID. None order_by DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_discussions ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , category_id : str = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussions that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. category_id: Only include discussions that belong to the category with this ID. order_by: Ordering options for discussions returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , category_id = category_id , order_by = order_by , ) ) op_stack = ( \"repository\" , \"discussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussions\" ] query_repository_environment async Returns a single active environment from the current repository by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environment_name str The name of the environment to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_environment ( owner : str , name : str , environment_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single active environment from the current repository by name. Args: owner: The login field of a user or organization. name: The name of the repository. environment_name: The name of the environment to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environment ( ** strip_kwargs ( name = environment_name , ) ) op_stack = ( \"repository\" , \"environment\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environment\" ] query_repository_environments async A list of environments that are in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_environments ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of environments that are in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"environments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environments\" ] query_repository_forks async A list of direct forked repositories. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_forks ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of direct forked repositories. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . forks ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"forks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"forks\" ] query_repository_funding_links async The funding links for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_funding_links ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The funding links for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . funding_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"fundingLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"fundingLinks\" ] query_repository_interaction_ability async The interaction ability settings for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_interaction_ability ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"interactionAbility\" ] query_repository_issue async Returns a single issue from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_issue ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single issue from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issue\" ] query_repository_issue_or_pull_request async Returns a single issue-like object from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_issue_or_pull_request ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single issue-like object from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_or_pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issueOrPullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueOrPullRequest\" ] query_repository_issue_templates async Returns a list of issue templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_issue_templates ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of issue templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"issueTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueTemplates\" ] query_repository_issues async A list of issues that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required labels Iterable[str] A list of label names to filter the pull requests by. required states Iterable[prefect_github.schemas.graphql_schema.IssueState] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by IssueOrder Ordering options for issues returned from the connection. None filter_by IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_issues ( owner : str , name : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issues\" ] query_repository_label async Returns a single label by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required label_name str Label name. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_label ( owner : str , name : str , label_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single label by name. Args: owner: The login field of a user or organization. name: The name of the repository. label_name: Label name. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . label ( ** strip_kwargs ( name = label_name , ) ) op_stack = ( \"repository\" , \"label\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"label\" ] query_repository_labels async A list of labels associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by LabelOrder Ordering options for labels returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str If provided, searches labels by name and description. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_labels ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . LabelOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of labels associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for labels returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: If provided, searches labels by name and description. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . labels ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , query = query , ) ) op_stack = ( \"repository\" , \"labels\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"labels\" ] query_repository_languages async A list containing a breakdown of the language composition of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by LanguageOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_languages ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . LanguageOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list containing a breakdown of the language composition of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . languages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"languages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"languages\" ] query_repository_latest_release async Get the latest release for the repository if one exists. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_latest_release ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Get the latest release for the repository if one exists. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . latest_release ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"latestRelease\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"latestRelease\" ] query_repository_license_info async The license associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_license_info ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The license associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . license_info ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"licenseInfo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"licenseInfo\" ] query_repository_mentionable_users async A list of Users that can be mentioned in the context of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_mentionable_users ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of Users that can be mentioned in the context of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . mentionable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"mentionableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"mentionableUsers\" ] query_repository_milestone async Returns a single milestone from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the milestone to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_milestone ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single milestone from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the milestone to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestone ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"milestone\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestone\" ] query_repository_milestones async A list of milestones associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable[prefect_github.schemas.graphql_schema.MilestoneState] Filter by the state of the milestones. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by MilestoneOrder Ordering options for milestones. None query str Filters milestones with a query on the title. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_milestones ( owner : str , name : str , states : Iterable [ graphql_schema . MilestoneState ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . MilestoneOrder = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of milestones associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the milestones. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for milestones. query: Filters milestones with a query on the title. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestones ( ** strip_kwargs ( states = states , after = after , before = before , first = first , last = last , order_by = order_by , query = query , ) ) op_stack = ( \"repository\" , \"milestones\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestones\" ] query_repository_object async A Git object in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True oid datetime The Git object ID. None expression str A Git revision expression suitable for rev-parse. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_object ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , oid : datetime = None , expression : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A Git object in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. oid: The Git object ID. expression: A Git revision expression suitable for rev-parse. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . object ( ** strip_kwargs ( oid = oid , expression = expression , ) ) op_stack = ( \"repository\" , \"object\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"object\" ] query_repository_owner async The User owner of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_owner ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The User owner of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . owner ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"owner\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"owner\" ] query_repository_packages async A list of packages under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable[str] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type PackageType Filter registry package by type. None order_by PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_packages ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"repository\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"packages\" ] query_repository_pinned_discussions async A list of discussions that have been pinned in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pinned_discussions ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussions that have been pinned in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedDiscussions\" ] query_repository_pinned_issues async A list of pinned issues for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pinned_issues ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pinned issues for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_issues ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedIssues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedIssues\" ] query_repository_primary_language async The primary language of the repository's code. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_primary_language ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The primary language of the repository's code. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . primary_language ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"primaryLanguage\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"primaryLanguage\" ] query_repository_project async Find project by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_project ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"project\" ] query_repository_project_next async Finds and returns the Project (beta) according to the provided Project (beta) number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The ProjectNext number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_project_next ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Finds and returns the Project (beta) according to the provided Project (beta) number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The ProjectNext number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectNext\" ] query_repository_projects async A list of projects under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable[prefect_github.schemas.graphql_schema.ProjectState] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_projects ( owner : str , name : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projects\" ] query_repository_projects_next async List of projects (beta) linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for linked to the repo. None sort_by ProjectNextOrderField How to order the returned project (beta) objects. 'TITLE' return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_projects_next ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of projects (beta) linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for linked to the repo. sort_by: How to order the returned project (beta) objects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"repository\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsNext\" ] query_repository_pull_request async Returns a single pull request from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the pull request to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pull_request ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single pull request from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the pull request to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequest\" ] query_repository_pull_request_templates async Returns a list of pull request templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pull_request_templates ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of pull request templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"pullRequestTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequestTemplates\" ] query_repository_pull_requests async A list of pull requests that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable[prefect_github.schemas.graphql_schema.PullRequestState] A list of states to filter the pull requests by. required labels Iterable[str] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pull_requests ( owner : str , name : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequests\" ] query_repository_ref async Fetch a given ref from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required qualified_name str The ref to retrieve. Fully qualified matches are checked in order ( refs/heads/master ) before falling back onto checks for short name matches ( master ). required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_ref ( owner : str , name : str , qualified_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Fetch a given ref from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. qualified_name: The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`). github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . ref ( ** strip_kwargs ( qualified_name = qualified_name , ) ) op_stack = ( \"repository\" , \"ref\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"ref\" ] query_repository_refs async Fetch a list of refs from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required ref_prefix str A ref name prefix like refs/heads/ , refs/tags/ , etc. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters refs with query on name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None direction OrderDirection None order_by RefOrder Ordering options for refs returned from the connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_refs ( owner : str , name : str , ref_prefix : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , direction : graphql_schema . OrderDirection = None , order_by : graphql_schema . RefOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Fetch a list of refs from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. ref_prefix: A ref name prefix like `refs/heads/`, `refs/tags/`, etc. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters refs with query on name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. direction: DEPRECATED: use orderBy. The ordering direction. order_by: Ordering options for refs returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . refs ( ** strip_kwargs ( ref_prefix = ref_prefix , query = query , after = after , before = before , first = first , last = last , direction = direction , order_by = order_by , ) ) op_stack = ( \"repository\" , \"refs\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"refs\" ] query_repository_release async Lookup a single release given various criteria. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required tag_name str The name of the Tag the Release was created from. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_release ( owner : str , name : str , tag_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Lookup a single release given various criteria. Args: owner: The login field of a user or organization. name: The name of the repository. tag_name: The name of the Tag the Release was created from. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . release ( ** strip_kwargs ( tag_name = tag_name , ) ) op_stack = ( \"repository\" , \"release\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"release\" ] query_repository_releases async List of releases which are dependent on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by ReleaseOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_releases ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . ReleaseOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of releases which are dependent on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . releases ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"releases\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"releases\" ] query_repository_repository_topics async A list of applied repository-topic associations for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_repository_topics ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of applied repository-topic associations for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . repository_topics ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"repositoryTopics\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"repositoryTopics\" ] query_repository_stargazers async A list of users who have starred this starrable. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by StarOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_stargazers ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who have starred this starrable. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . stargazers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"stargazers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"stargazers\" ] query_repository_submodules async Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_submodules ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . submodules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"submodules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"submodules\" ] query_repository_vulnerability_alerts async A list of vulnerability alerts that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable[prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertState] Filter by the state of the alert. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_vulnerability_alerts ( owner : str , name : str , states : Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of vulnerability alerts that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the alert. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . vulnerability_alerts ( ** strip_kwargs ( states = states , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"vulnerabilityAlerts\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"vulnerabilityAlerts\" ] query_repository_watchers async A list of users watching the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_watchers ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users watching the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . watchers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"watchers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"watchers\" ]","title":"Repository"},{"location":"repository/#prefect_github.repository","text":"This is a module for interacting with GitHub Query repository tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended.","title":"repository"},{"location":"repository/#prefect_github.repository.query_repository","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repository\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ]","title":"query_repository()"},{"location":"repository/#prefect_github.repository.query_repository_assignable_users","text":"A list of users that can be assigned to issues in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_assignable_users ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users that can be assigned to issues in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . assignable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"assignableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"assignableUsers\" ]","title":"query_repository_assignable_users()"},{"location":"repository/#prefect_github.repository.query_repository_branch_protection_rules","text":"A list of branch protection rules for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_branch_protection_rules ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of branch protection rules for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . branch_protection_rules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"branchProtectionRules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"branchProtectionRules\" ]","title":"query_repository_branch_protection_rules()"},{"location":"repository/#prefect_github.repository.query_repository_code_of_conduct","text":"Returns the code of conduct for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_code_of_conduct ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns the code of conduct for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . code_of_conduct ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"codeOfConduct\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"codeOfConduct\" ]","title":"query_repository_code_of_conduct()"},{"location":"repository/#prefect_github.repository.query_repository_collaborators","text":"A list of collaborators associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True affiliation CollaboratorAffiliation Collaborators affiliation level with a repository. None query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_collaborators ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , affiliation : graphql_schema . CollaboratorAffiliation = None , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of collaborators associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. affiliation: Collaborators affiliation level with a repository. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . collaborators ( ** strip_kwargs ( affiliation = affiliation , query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"collaborators\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"collaborators\" ]","title":"query_repository_collaborators()"},{"location":"repository/#prefect_github.repository.query_repository_commit_comments","text":"A list of commit comments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_commit_comments ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"commitComments\" ]","title":"query_repository_commit_comments()"},{"location":"repository/#prefect_github.repository.query_repository_contact_links","text":"Returns a list of contact links associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_contact_links ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of contact links associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . contact_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"contactLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"contactLinks\" ]","title":"query_repository_contact_links()"},{"location":"repository/#prefect_github.repository.query_repository_default_branch_ref","text":"The Ref associated with the repository's default branch. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_default_branch_ref ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The Ref associated with the repository's default branch. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . default_branch_ref ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"defaultBranchRef\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"defaultBranchRef\" ]","title":"query_repository_default_branch_ref()"},{"location":"repository/#prefect_github.repository.query_repository_deploy_keys","text":"A list of deploy keys that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_deploy_keys ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of deploy keys that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deploy_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployKeys\" ]","title":"query_repository_deploy_keys()"},{"location":"repository/#prefect_github.repository.query_repository_deployments","text":"Deployments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environments Iterable[str] Environments to list deployments for. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by DeploymentOrder Ordering options for deployments returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_deployments ( owner : str , name : str , environments : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . DeploymentOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Deployments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. environments: Environments to list deployments for. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for deployments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deployments ( ** strip_kwargs ( environments = environments , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployments\" ]","title":"query_repository_deployments()"},{"location":"repository/#prefect_github.repository.query_repository_discussion","text":"Returns a single discussion from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the discussion to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_discussion ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single discussion from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the discussion to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"discussion\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussion\" ]","title":"query_repository_discussion()"},{"location":"repository/#prefect_github.repository.query_repository_discussion_categories","text":"A list of discussion categories that are available in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None filter_by_assignable bool Filter by categories that are assignable by the viewer. False return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_discussion_categories ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , filter_by_assignable : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussion categories that are available in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. filter_by_assignable: Filter by categories that are assignable by the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion_categories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , filter_by_assignable = filter_by_assignable , ) ) op_stack = ( \"repository\" , \"discussionCategories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussionCategories\" ]","title":"query_repository_discussion_categories()"},{"location":"repository/#prefect_github.repository.query_repository_discussions","text":"A list of discussions that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None category_id str Only include discussions that belong to the category with this ID. None order_by DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_discussions ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , category_id : str = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussions that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. category_id: Only include discussions that belong to the category with this ID. order_by: Ordering options for discussions returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , category_id = category_id , order_by = order_by , ) ) op_stack = ( \"repository\" , \"discussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussions\" ]","title":"query_repository_discussions()"},{"location":"repository/#prefect_github.repository.query_repository_environment","text":"Returns a single active environment from the current repository by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environment_name str The name of the environment to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_environment ( owner : str , name : str , environment_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single active environment from the current repository by name. Args: owner: The login field of a user or organization. name: The name of the repository. environment_name: The name of the environment to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environment ( ** strip_kwargs ( name = environment_name , ) ) op_stack = ( \"repository\" , \"environment\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environment\" ]","title":"query_repository_environment()"},{"location":"repository/#prefect_github.repository.query_repository_environments","text":"A list of environments that are in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_environments ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of environments that are in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"environments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environments\" ]","title":"query_repository_environments()"},{"location":"repository/#prefect_github.repository.query_repository_forks","text":"A list of direct forked repositories. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_forks ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of direct forked repositories. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . forks ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"forks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"forks\" ]","title":"query_repository_forks()"},{"location":"repository/#prefect_github.repository.query_repository_funding_links","text":"The funding links for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_funding_links ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The funding links for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . funding_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"fundingLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"fundingLinks\" ]","title":"query_repository_funding_links()"},{"location":"repository/#prefect_github.repository.query_repository_interaction_ability","text":"The interaction ability settings for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_interaction_ability ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"interactionAbility\" ]","title":"query_repository_interaction_ability()"},{"location":"repository/#prefect_github.repository.query_repository_issue","text":"Returns a single issue from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_issue ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single issue from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issue\" ]","title":"query_repository_issue()"},{"location":"repository/#prefect_github.repository.query_repository_issue_or_pull_request","text":"Returns a single issue-like object from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_issue_or_pull_request ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single issue-like object from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_or_pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issueOrPullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueOrPullRequest\" ]","title":"query_repository_issue_or_pull_request()"},{"location":"repository/#prefect_github.repository.query_repository_issue_templates","text":"Returns a list of issue templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_issue_templates ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of issue templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"issueTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueTemplates\" ]","title":"query_repository_issue_templates()"},{"location":"repository/#prefect_github.repository.query_repository_issues","text":"A list of issues that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required labels Iterable[str] A list of label names to filter the pull requests by. required states Iterable[prefect_github.schemas.graphql_schema.IssueState] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by IssueOrder Ordering options for issues returned from the connection. None filter_by IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_issues ( owner : str , name : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issues\" ]","title":"query_repository_issues()"},{"location":"repository/#prefect_github.repository.query_repository_label","text":"Returns a single label by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required label_name str Label name. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_label ( owner : str , name : str , label_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single label by name. Args: owner: The login field of a user or organization. name: The name of the repository. label_name: Label name. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . label ( ** strip_kwargs ( name = label_name , ) ) op_stack = ( \"repository\" , \"label\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"label\" ]","title":"query_repository_label()"},{"location":"repository/#prefect_github.repository.query_repository_labels","text":"A list of labels associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by LabelOrder Ordering options for labels returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str If provided, searches labels by name and description. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_labels ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . LabelOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of labels associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for labels returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: If provided, searches labels by name and description. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . labels ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , query = query , ) ) op_stack = ( \"repository\" , \"labels\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"labels\" ]","title":"query_repository_labels()"},{"location":"repository/#prefect_github.repository.query_repository_languages","text":"A list containing a breakdown of the language composition of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by LanguageOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_languages ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . LanguageOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list containing a breakdown of the language composition of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . languages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"languages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"languages\" ]","title":"query_repository_languages()"},{"location":"repository/#prefect_github.repository.query_repository_latest_release","text":"Get the latest release for the repository if one exists. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_latest_release ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Get the latest release for the repository if one exists. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . latest_release ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"latestRelease\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"latestRelease\" ]","title":"query_repository_latest_release()"},{"location":"repository/#prefect_github.repository.query_repository_license_info","text":"The license associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_license_info ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The license associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . license_info ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"licenseInfo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"licenseInfo\" ]","title":"query_repository_license_info()"},{"location":"repository/#prefect_github.repository.query_repository_mentionable_users","text":"A list of Users that can be mentioned in the context of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_mentionable_users ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of Users that can be mentioned in the context of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . mentionable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"mentionableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"mentionableUsers\" ]","title":"query_repository_mentionable_users()"},{"location":"repository/#prefect_github.repository.query_repository_milestone","text":"Returns a single milestone from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the milestone to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_milestone ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single milestone from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the milestone to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestone ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"milestone\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestone\" ]","title":"query_repository_milestone()"},{"location":"repository/#prefect_github.repository.query_repository_milestones","text":"A list of milestones associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable[prefect_github.schemas.graphql_schema.MilestoneState] Filter by the state of the milestones. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by MilestoneOrder Ordering options for milestones. None query str Filters milestones with a query on the title. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_milestones ( owner : str , name : str , states : Iterable [ graphql_schema . MilestoneState ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . MilestoneOrder = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of milestones associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the milestones. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for milestones. query: Filters milestones with a query on the title. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestones ( ** strip_kwargs ( states = states , after = after , before = before , first = first , last = last , order_by = order_by , query = query , ) ) op_stack = ( \"repository\" , \"milestones\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestones\" ]","title":"query_repository_milestones()"},{"location":"repository/#prefect_github.repository.query_repository_object","text":"A Git object in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True oid datetime The Git object ID. None expression str A Git revision expression suitable for rev-parse. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_object ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , oid : datetime = None , expression : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A Git object in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. oid: The Git object ID. expression: A Git revision expression suitable for rev-parse. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . object ( ** strip_kwargs ( oid = oid , expression = expression , ) ) op_stack = ( \"repository\" , \"object\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"object\" ]","title":"query_repository_object()"},{"location":"repository/#prefect_github.repository.query_repository_owner","text":"The User owner of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_owner ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The User owner of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . owner ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"owner\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"owner\" ]","title":"query_repository_owner()"},{"location":"repository/#prefect_github.repository.query_repository_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable[str] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type PackageType Filter registry package by type. None order_by PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_packages ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"repository\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"packages\" ]","title":"query_repository_packages()"},{"location":"repository/#prefect_github.repository.query_repository_pinned_discussions","text":"A list of discussions that have been pinned in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pinned_discussions ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussions that have been pinned in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedDiscussions\" ]","title":"query_repository_pinned_discussions()"},{"location":"repository/#prefect_github.repository.query_repository_pinned_issues","text":"A list of pinned issues for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pinned_issues ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pinned issues for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_issues ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedIssues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedIssues\" ]","title":"query_repository_pinned_issues()"},{"location":"repository/#prefect_github.repository.query_repository_primary_language","text":"The primary language of the repository's code. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_primary_language ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The primary language of the repository's code. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . primary_language ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"primaryLanguage\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"primaryLanguage\" ]","title":"query_repository_primary_language()"},{"location":"repository/#prefect_github.repository.query_repository_project","text":"Find project by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_project ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"project\" ]","title":"query_repository_project()"},{"location":"repository/#prefect_github.repository.query_repository_project_next","text":"Finds and returns the Project (beta) according to the provided Project (beta) number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The ProjectNext number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_project_next ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Finds and returns the Project (beta) according to the provided Project (beta) number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The ProjectNext number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectNext\" ]","title":"query_repository_project_next()"},{"location":"repository/#prefect_github.repository.query_repository_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable[prefect_github.schemas.graphql_schema.ProjectState] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_projects ( owner : str , name : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projects\" ]","title":"query_repository_projects()"},{"location":"repository/#prefect_github.repository.query_repository_projects_next","text":"List of projects (beta) linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for linked to the repo. None sort_by ProjectNextOrderField How to order the returned project (beta) objects. 'TITLE' return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_projects_next ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of projects (beta) linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for linked to the repo. sort_by: How to order the returned project (beta) objects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"repository\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsNext\" ]","title":"query_repository_projects_next()"},{"location":"repository/#prefect_github.repository.query_repository_pull_request","text":"Returns a single pull request from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the pull request to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pull_request ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single pull request from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the pull request to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequest\" ]","title":"query_repository_pull_request()"},{"location":"repository/#prefect_github.repository.query_repository_pull_request_templates","text":"Returns a list of pull request templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pull_request_templates ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of pull request templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"pullRequestTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequestTemplates\" ]","title":"query_repository_pull_request_templates()"},{"location":"repository/#prefect_github.repository.query_repository_pull_requests","text":"A list of pull requests that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable[prefect_github.schemas.graphql_schema.PullRequestState] A list of states to filter the pull requests by. required labels Iterable[str] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_pull_requests ( owner : str , name : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequests\" ]","title":"query_repository_pull_requests()"},{"location":"repository/#prefect_github.repository.query_repository_ref","text":"Fetch a given ref from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required qualified_name str The ref to retrieve. Fully qualified matches are checked in order ( refs/heads/master ) before falling back onto checks for short name matches ( master ). required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_ref ( owner : str , name : str , qualified_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Fetch a given ref from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. qualified_name: The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`). github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . ref ( ** strip_kwargs ( qualified_name = qualified_name , ) ) op_stack = ( \"repository\" , \"ref\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"ref\" ]","title":"query_repository_ref()"},{"location":"repository/#prefect_github.repository.query_repository_refs","text":"Fetch a list of refs from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required ref_prefix str A ref name prefix like refs/heads/ , refs/tags/ , etc. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters refs with query on name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None direction OrderDirection None order_by RefOrder Ordering options for refs returned from the connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_refs ( owner : str , name : str , ref_prefix : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , direction : graphql_schema . OrderDirection = None , order_by : graphql_schema . RefOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Fetch a list of refs from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. ref_prefix: A ref name prefix like `refs/heads/`, `refs/tags/`, etc. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters refs with query on name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. direction: DEPRECATED: use orderBy. The ordering direction. order_by: Ordering options for refs returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . refs ( ** strip_kwargs ( ref_prefix = ref_prefix , query = query , after = after , before = before , first = first , last = last , direction = direction , order_by = order_by , ) ) op_stack = ( \"repository\" , \"refs\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"refs\" ]","title":"query_repository_refs()"},{"location":"repository/#prefect_github.repository.query_repository_release","text":"Lookup a single release given various criteria. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required tag_name str The name of the Tag the Release was created from. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_release ( owner : str , name : str , tag_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Lookup a single release given various criteria. Args: owner: The login field of a user or organization. name: The name of the repository. tag_name: The name of the Tag the Release was created from. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . release ( ** strip_kwargs ( tag_name = tag_name , ) ) op_stack = ( \"repository\" , \"release\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"release\" ]","title":"query_repository_release()"},{"location":"repository/#prefect_github.repository.query_repository_releases","text":"List of releases which are dependent on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by ReleaseOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_releases ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . ReleaseOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of releases which are dependent on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . releases ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"releases\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"releases\" ]","title":"query_repository_releases()"},{"location":"repository/#prefect_github.repository.query_repository_repository_topics","text":"A list of applied repository-topic associations for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_repository_topics ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of applied repository-topic associations for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . repository_topics ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"repositoryTopics\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"repositoryTopics\" ]","title":"query_repository_repository_topics()"},{"location":"repository/#prefect_github.repository.query_repository_stargazers","text":"A list of users who have starred this starrable. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by StarOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_stargazers ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who have starred this starrable. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . stargazers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"stargazers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"stargazers\" ]","title":"query_repository_stargazers()"},{"location":"repository/#prefect_github.repository.query_repository_submodules","text":"Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_submodules ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . submodules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"submodules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"submodules\" ]","title":"query_repository_submodules()"},{"location":"repository/#prefect_github.repository.query_repository_vulnerability_alerts","text":"A list of vulnerability alerts that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable[prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertState] Filter by the state of the alert. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_vulnerability_alerts ( owner : str , name : str , states : Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of vulnerability alerts that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the alert. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . vulnerability_alerts ( ** strip_kwargs ( states = states , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"vulnerabilityAlerts\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"vulnerabilityAlerts\" ]","title":"query_repository_vulnerability_alerts()"},{"location":"repository/#prefect_github.repository.query_repository_watchers","text":"A list of users watching the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository.py @task async def query_repository_watchers ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users watching the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . watchers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"watchers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"watchers\" ]","title":"query_repository_watchers()"},{"location":"repository_owner/","text":"prefect_github.repository_owner This is a module for interacting with GitHub Query repository_owner tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. query_repository_owner async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository_owner.py @task async def query_repository_owner ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"repositoryOwner\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ] query_repository_owner_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository_owner.py @task async def query_repository_owner_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"repositoryOwner\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repositories\" ] query_repository_owner_repository async Find Repository. Parameters: Name Type Description Default login str The username to lookup the owner by. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository_owner.py @task async def query_repository_owner_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The username to lookup the owner by. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repositoryOwner\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repository\" ]","title":"Repository Owner"},{"location":"repository_owner/#prefect_github.repository_owner","text":"This is a module for interacting with GitHub Query repository_owner tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended.","title":"repository_owner"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository_owner.py @task async def query_repository_owner ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"repositoryOwner\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ]","title":"query_repository_owner()"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository_owner.py @task async def query_repository_owner_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"repositoryOwner\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repositories\" ]","title":"query_repository_owner_repositories()"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner_repository","text":"Find Repository. Parameters: Name Type Description Default login str The username to lookup the owner by. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/repository_owner.py @task async def query_repository_owner_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The username to lookup the owner by. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repositoryOwner\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repository\" ]","title":"query_repository_owner_repository()"},{"location":"user/","text":"prefect_github.user This is a module for interacting with GitHub Query user tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. query_user async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"user\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ] query_user_commit_comments async A list of commit comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_commit_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"commitComments\" ] query_user_contributions_collection async The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_contributions_collection ( login : str , github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The collection of contributions this user has made to different repositories. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"user\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"contributionsCollection\" ] query_user_followers async A list of users the given user is followed by. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_followers ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is followed by. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"followers\" ] query_user_following async A list of users the given user is following. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_following ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is following. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"following\" ] query_user_gist async Find gist by repo name. Parameters: Name Type Description Default login str The user's login. required name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_gist ( login : str , name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find gist by repo name. Args: login: The user's login. name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"user\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gist\" ] query_user_gist_comments async A list of gist comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_gist_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of gist comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gistComments\" ] query_user_gists async A list of the Gists the user has created. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy GistPrivacy Filters Gists according to privacy. None order_by GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_gists ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of the Gists the user has created. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gists\" ] query_user_interaction_ability async The interaction ability settings for this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_interaction_ability ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"user\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"interactionAbility\" ] query_user_issue_comments async A list of issue comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_issue_comments ( login : str , github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issue comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issueComments\" ] query_user_issues async A list of issues associated with this user. Parameters: Name Type Description Default login str The user's login. required labels Iterable[str] A list of label names to filter the pull requests by. required states Iterable[prefect_github.schemas.graphql_schema.IssueState] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by IssueOrder Ordering options for issues returned from the connection. None filter_by IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_issues ( login : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues associated with this user. Args: login: The user's login. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issues\" ] query_user_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_item_showcase ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"user\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"itemShowcase\" ] query_user_organization async Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The user's login. required organization_login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_organization ( login : str , organization_login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization by its login that the user belongs to. Args: login: The user's login. organization_login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organization ( ** strip_kwargs ( login = organization_login , ) ) op_stack = ( \"user\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organization\" ] query_user_organizations async A list of organizations the user belongs to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_organizations ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of organizations the user belongs to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organizations\" ] query_user_packages async A list of packages under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable[str] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type PackageType Filter registry package by type. None order_by PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_packages ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"user\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"packages\" ] query_user_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_pinnable_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The user's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnableItems\" ] query_user_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_pinned_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The user's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnedItems\" ] query_user_project async Find project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_project ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: login: The user's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"project\" ] query_user_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default login str The user's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_project_next ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: login: The user's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectNext\" ] query_user_projects async A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required states Iterable[prefect_github.schemas.graphql_schema.ProjectState] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_projects ( login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The user's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projects\" ] query_user_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_projects_next ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"user\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsNext\" ] query_user_public_keys async A list of public keys associated with this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_public_keys ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of public keys associated with this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"publicKeys\" ] query_user_pull_requests async A list of pull requests associated with this user. Parameters: Name Type Description Default login str The user's login. required states Iterable[prefect_github.schemas.graphql_schema.PullRequestState] A list of states to filter the pull requests by. required labels Iterable[str] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_pull_requests ( login : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests associated with this user. Args: login: The user's login. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pullRequests\" ] query_user_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"user\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositories\" ] query_user_repositories_contributed_to async A list of repositories that the user recently contributed to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable[prefect_github.schemas.graphql_schema.RepositoryContributionType] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repositories_contributed_to ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user recently contributed to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoriesContributedTo\" ] query_user_repository async Find Repository. Parameters: Name Type Description Default login str The user's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The user's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"user\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repository\" ] query_user_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repository_discussion_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"user\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussionComments\" ] query_user_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repository_discussions ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"user\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussions\" ] query_user_saved_replies async Replies this user has saved. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_saved_replies ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Replies this user has saved. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"savedReplies\" ] query_user_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsoring ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsoring\" ] query_user_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsors ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsors\" ] query_user_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period SponsorsActivityPeriod Filter activities returned to only those that occurred in a given time range. 'MONTH' order_by SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsors_activities ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in a given time range. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsActivities\" ] query_user_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsors_listing ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsListing\" ] query_user_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorship_for_viewer_as_sponsor ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsor\" ] query_user_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorship_for_viewer_as_sponsorable ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_user_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorship_newsletters ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipNewsletters\" ] query_user_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorships_as_maintainer ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsMaintainer\" ] query_user_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorships_as_sponsor ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsSponsor\" ] query_user_starred_repositories async Repositories the user has starred. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by StarOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_starred_repositories ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has starred. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"user\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"starredRepositories\" ] query_user_status async The user's description of what they're currently doing. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_status ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The user's description of what they're currently doing. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . status ( ** strip_kwargs ()) op_stack = ( \"user\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"status\" ] query_user_top_repositories async Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default login str The user's login. required order_by RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_top_repositories ( login : str , order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: login: The user's login. order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"user\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"topRepositories\" ] query_user_watching async A list of repositories the given user is watching. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_watching ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories the given user is watching. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"watching\" ]","title":"User"},{"location":"user/#prefect_github.user","text":"This is a module for interacting with GitHub Query user tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended.","title":"user"},{"location":"user/#prefect_github.user.query_user","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"user\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ]","title":"query_user()"},{"location":"user/#prefect_github.user.query_user_commit_comments","text":"A list of commit comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_commit_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"commitComments\" ]","title":"query_user_commit_comments()"},{"location":"user/#prefect_github.user.query_user_contributions_collection","text":"The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_contributions_collection ( login : str , github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The collection of contributions this user has made to different repositories. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"user\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"contributionsCollection\" ]","title":"query_user_contributions_collection()"},{"location":"user/#prefect_github.user.query_user_followers","text":"A list of users the given user is followed by. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_followers ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is followed by. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"followers\" ]","title":"query_user_followers()"},{"location":"user/#prefect_github.user.query_user_following","text":"A list of users the given user is following. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_following ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is following. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"following\" ]","title":"query_user_following()"},{"location":"user/#prefect_github.user.query_user_gist","text":"Find gist by repo name. Parameters: Name Type Description Default login str The user's login. required name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_gist ( login : str , name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find gist by repo name. Args: login: The user's login. name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"user\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gist\" ]","title":"query_user_gist()"},{"location":"user/#prefect_github.user.query_user_gist_comments","text":"A list of gist comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_gist_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of gist comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gistComments\" ]","title":"query_user_gist_comments()"},{"location":"user/#prefect_github.user.query_user_gists","text":"A list of the Gists the user has created. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy GistPrivacy Filters Gists according to privacy. None order_by GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_gists ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of the Gists the user has created. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gists\" ]","title":"query_user_gists()"},{"location":"user/#prefect_github.user.query_user_interaction_ability","text":"The interaction ability settings for this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_interaction_ability ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"user\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"interactionAbility\" ]","title":"query_user_interaction_ability()"},{"location":"user/#prefect_github.user.query_user_issue_comments","text":"A list of issue comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_issue_comments ( login : str , github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issue comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issueComments\" ]","title":"query_user_issue_comments()"},{"location":"user/#prefect_github.user.query_user_issues","text":"A list of issues associated with this user. Parameters: Name Type Description Default login str The user's login. required labels Iterable[str] A list of label names to filter the pull requests by. required states Iterable[prefect_github.schemas.graphql_schema.IssueState] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by IssueOrder Ordering options for issues returned from the connection. None filter_by IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_issues ( login : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues associated with this user. Args: login: The user's login. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issues\" ]","title":"query_user_issues()"},{"location":"user/#prefect_github.user.query_user_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_item_showcase ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"user\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"itemShowcase\" ]","title":"query_user_item_showcase()"},{"location":"user/#prefect_github.user.query_user_organization","text":"Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The user's login. required organization_login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_organization ( login : str , organization_login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization by its login that the user belongs to. Args: login: The user's login. organization_login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organization ( ** strip_kwargs ( login = organization_login , ) ) op_stack = ( \"user\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organization\" ]","title":"query_user_organization()"},{"location":"user/#prefect_github.user.query_user_organizations","text":"A list of organizations the user belongs to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_organizations ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of organizations the user belongs to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organizations\" ]","title":"query_user_organizations()"},{"location":"user/#prefect_github.user.query_user_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable[str] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type PackageType Filter registry package by type. None order_by PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_packages ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"user\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"packages\" ]","title":"query_user_packages()"},{"location":"user/#prefect_github.user.query_user_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_pinnable_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The user's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnableItems\" ]","title":"query_user_pinnable_items()"},{"location":"user/#prefect_github.user.query_user_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_pinned_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The user's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnedItems\" ]","title":"query_user_pinned_items()"},{"location":"user/#prefect_github.user.query_user_project","text":"Find project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_project ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: login: The user's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"project\" ]","title":"query_user_project()"},{"location":"user/#prefect_github.user.query_user_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default login str The user's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_project_next ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: login: The user's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectNext\" ]","title":"query_user_project_next()"},{"location":"user/#prefect_github.user.query_user_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required states Iterable[prefect_github.schemas.graphql_schema.ProjectState] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_projects ( login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The user's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projects\" ]","title":"query_user_projects()"},{"location":"user/#prefect_github.user.query_user_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_projects_next ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"user\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsNext\" ]","title":"query_user_projects_next()"},{"location":"user/#prefect_github.user.query_user_public_keys","text":"A list of public keys associated with this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_public_keys ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of public keys associated with this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"publicKeys\" ]","title":"query_user_public_keys()"},{"location":"user/#prefect_github.user.query_user_pull_requests","text":"A list of pull requests associated with this user. Parameters: Name Type Description Default login str The user's login. required states Iterable[prefect_github.schemas.graphql_schema.PullRequestState] A list of states to filter the pull requests by. required labels Iterable[str] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_pull_requests ( login : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests associated with this user. Args: login: The user's login. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pullRequests\" ]","title":"query_user_pull_requests()"},{"location":"user/#prefect_github.user.query_user_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"user\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositories\" ]","title":"query_user_repositories()"},{"location":"user/#prefect_github.user.query_user_repositories_contributed_to","text":"A list of repositories that the user recently contributed to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable[prefect_github.schemas.graphql_schema.RepositoryContributionType] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repositories_contributed_to ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user recently contributed to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoriesContributedTo\" ]","title":"query_user_repositories_contributed_to()"},{"location":"user/#prefect_github.user.query_user_repository","text":"Find Repository. Parameters: Name Type Description Default login str The user's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The user's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"user\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repository\" ]","title":"query_user_repository()"},{"location":"user/#prefect_github.user.query_user_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repository_discussion_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"user\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussionComments\" ]","title":"query_user_repository_discussion_comments()"},{"location":"user/#prefect_github.user.query_user_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_repository_discussions ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"user\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussions\" ]","title":"query_user_repository_discussions()"},{"location":"user/#prefect_github.user.query_user_saved_replies","text":"Replies this user has saved. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_saved_replies ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Replies this user has saved. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"savedReplies\" ]","title":"query_user_saved_replies()"},{"location":"user/#prefect_github.user.query_user_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsoring ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsoring\" ]","title":"query_user_sponsoring()"},{"location":"user/#prefect_github.user.query_user_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsors ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsors\" ]","title":"query_user_sponsors()"},{"location":"user/#prefect_github.user.query_user_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period SponsorsActivityPeriod Filter activities returned to only those that occurred in a given time range. 'MONTH' order_by SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsors_activities ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in a given time range. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsActivities\" ]","title":"query_user_sponsors_activities()"},{"location":"user/#prefect_github.user.query_user_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsors_listing ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsListing\" ]","title":"query_user_sponsors_listing()"},{"location":"user/#prefect_github.user.query_user_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorship_for_viewer_as_sponsor ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_user_sponsorship_for_viewer_as_sponsor()"},{"location":"user/#prefect_github.user.query_user_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorship_for_viewer_as_sponsorable ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_user_sponsorship_for_viewer_as_sponsorable()"},{"location":"user/#prefect_github.user.query_user_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorship_newsletters ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipNewsletters\" ]","title":"query_user_sponsorship_newsletters()"},{"location":"user/#prefect_github.user.query_user_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorships_as_maintainer ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_user_sponsorships_as_maintainer()"},{"location":"user/#prefect_github.user.query_user_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_sponsorships_as_sponsor ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_user_sponsorships_as_sponsor()"},{"location":"user/#prefect_github.user.query_user_starred_repositories","text":"Repositories the user has starred. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by StarOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_starred_repositories ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has starred. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"user\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"starredRepositories\" ]","title":"query_user_starred_repositories()"},{"location":"user/#prefect_github.user.query_user_status","text":"The user's description of what they're currently doing. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_status ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The user's description of what they're currently doing. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . status ( ** strip_kwargs ()) op_stack = ( \"user\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"status\" ]","title":"query_user_status()"},{"location":"user/#prefect_github.user.query_user_top_repositories","text":"Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default login str The user's login. required order_by RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_top_repositories ( login : str , order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: login: The user's login. order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"user\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"topRepositories\" ]","title":"query_user_top_repositories()"},{"location":"user/#prefect_github.user.query_user_watching","text":"A list of repositories the given user is watching. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/user.py @task async def query_user_watching ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories the given user is watching. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"watching\" ]","title":"query_user_watching()"},{"location":"utils/","text":"prefect_github.utils Utilities to assist with using generated collections. camel_to_snake_case Converts CamelCase and lowerCamelCase to snake_case. Parameters: Name Type Description Default string str The string in CamelCase or lowerCamelCase to convert. required Returns: Type Description str A snake_case version of the string. Source code in prefect_github/utils.py def camel_to_snake_case ( string : str ) -> str : \"\"\" Converts CamelCase and lowerCamelCase to snake_case. Args: string: The string in CamelCase or lowerCamelCase to convert. Returns: A snake_case version of the string. \"\"\" string = SNAKE_CASE_REGEX1 . sub ( r \"\\1_\\2\" , string ) return SNAKE_CASE_REGEX2 . sub ( r \"\\1_\\2\" , string ) . lower () initialize_return_fields_defaults Reads config_path to parse out the desired default fields to return. Parameters: Name Type Description Default config_path Union[pathlib.Path, str] The path to the config file. required Source code in prefect_github/utils.py def initialize_return_fields_defaults ( config_path : Union [ Path , str ]) -> List : \"\"\" Reads config_path to parse out the desired default fields to return. Args: config_path: The path to the config file. \"\"\" with open ( config_path , \"r\" ) as f : config = json . load ( f ) return_fields_defaults = defaultdict ( lambda : []) for op_type , sub_op_types in config . items (): for sub_op_type in sub_op_types : if isinstance ( sub_op_type , str ): return_fields_defaults [( op_type ,)] . append ( camel_to_snake_case ( sub_op_type ) ) elif isinstance ( sub_op_type , dict ): sub_op_type_key = list ( sub_op_type . keys ())[ 0 ] return_fields_defaults [( op_type , sub_op_type_key )] = [ camel_to_snake_case ( field ) for field in sub_op_type [ sub_op_type_key ] ] return return_fields_defaults strip_kwargs Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_github/utils.py def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" return { key : val for key , val in kwargs . items () if val is not None }","title":"Utils"},{"location":"utils/#prefect_github.utils","text":"Utilities to assist with using generated collections.","title":"utils"},{"location":"utils/#prefect_github.utils.camel_to_snake_case","text":"Converts CamelCase and lowerCamelCase to snake_case. Parameters: Name Type Description Default string str The string in CamelCase or lowerCamelCase to convert. required Returns: Type Description str A snake_case version of the string. Source code in prefect_github/utils.py def camel_to_snake_case ( string : str ) -> str : \"\"\" Converts CamelCase and lowerCamelCase to snake_case. Args: string: The string in CamelCase or lowerCamelCase to convert. Returns: A snake_case version of the string. \"\"\" string = SNAKE_CASE_REGEX1 . sub ( r \"\\1_\\2\" , string ) return SNAKE_CASE_REGEX2 . sub ( r \"\\1_\\2\" , string ) . lower ()","title":"camel_to_snake_case()"},{"location":"utils/#prefect_github.utils.initialize_return_fields_defaults","text":"Reads config_path to parse out the desired default fields to return. Parameters: Name Type Description Default config_path Union[pathlib.Path, str] The path to the config file. required Source code in prefect_github/utils.py def initialize_return_fields_defaults ( config_path : Union [ Path , str ]) -> List : \"\"\" Reads config_path to parse out the desired default fields to return. Args: config_path: The path to the config file. \"\"\" with open ( config_path , \"r\" ) as f : config = json . load ( f ) return_fields_defaults = defaultdict ( lambda : []) for op_type , sub_op_types in config . items (): for sub_op_type in sub_op_types : if isinstance ( sub_op_type , str ): return_fields_defaults [( op_type ,)] . append ( camel_to_snake_case ( sub_op_type ) ) elif isinstance ( sub_op_type , dict ): sub_op_type_key = list ( sub_op_type . keys ())[ 0 ] return_fields_defaults [( op_type , sub_op_type_key )] = [ camel_to_snake_case ( field ) for field in sub_op_type [ sub_op_type_key ] ] return return_fields_defaults","title":"initialize_return_fields_defaults()"},{"location":"utils/#prefect_github.utils.strip_kwargs","text":"Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_github/utils.py def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" return { key : val for key , val in kwargs . items () if val is not None }","title":"strip_kwargs()"},{"location":"viewer/","text":"prefect_github.viewer This is a module for interacting with GitHub Query viewer tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. query_viewer async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) op_stack = ( \"viewer\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ] query_viewer_commit_comments async A list of commit comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_commit_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"commitComments\" ] query_viewer_contributions_collection async The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_contributions_collection ( github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The collection of contributions this user has made to different repositories. Args: github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"viewer\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"contributionsCollection\" ] query_viewer_followers async A list of users the given user is followed by. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_followers ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is followed by. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"followers\" ] query_viewer_following async A list of users the given user is following. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_following ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is following. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"following\" ] query_viewer_gist async Find gist by repo name. Parameters: Name Type Description Default name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_gist ( name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find gist by repo name. Args: name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"viewer\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gist\" ] query_viewer_gist_comments async A list of gist comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_gist_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of gist comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gistComments\" ] query_viewer_gists async A list of the Gists the user has created. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy GistPrivacy Filters Gists according to privacy. None order_by GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_gists ( github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of the Gists the user has created. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gists\" ] query_viewer_interaction_ability async The interaction ability settings for this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_interaction_ability ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this user. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"interactionAbility\" ] query_viewer_issue_comments async A list of issue comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_issue_comments ( github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issue comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issueComments\" ] query_viewer_issues async A list of issues associated with this user. Parameters: Name Type Description Default labels Iterable[str] A list of label names to filter the pull requests by. required states Iterable[prefect_github.schemas.graphql_schema.IssueState] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by IssueOrder Ordering options for issues returned from the connection. None filter_by IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_issues ( labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues associated with this user. Args: labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issues\" ] query_viewer_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_item_showcase ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"itemShowcase\" ] query_viewer_organization async Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_organization ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization by its login that the user belongs to. Args: login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"viewer\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organization\" ] query_viewer_organizations async A list of organizations the user belongs to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_organizations ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of organizations the user belongs to. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organizations\" ] query_viewer_packages async A list of packages under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable[str] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type PackageType Filter registry package by type. None order_by PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_packages ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"packages\" ] query_viewer_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_pinnable_items ( types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnableItems\" ] query_viewer_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_pinned_items ( types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnedItems\" ] query_viewer_project async Find project by number. Parameters: Name Type Description Default number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_project ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"project\" ] query_viewer_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_project_next ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectNext\" ] query_viewer_projects async A list of projects under the owner. Parameters: Name Type Description Default states Iterable[prefect_github.schemas.graphql_schema.ProjectState] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_projects ( states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projects\" ] query_viewer_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_projects_next ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"viewer\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsNext\" ] query_viewer_public_keys async A list of public keys associated with this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_public_keys ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of public keys associated with this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"publicKeys\" ] query_viewer_pull_requests async A list of pull requests associated with this user. Parameters: Name Type Description Default states Iterable[prefect_github.schemas.graphql_schema.PullRequestState] A list of states to filter the pull requests by. required labels Iterable[str] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_pull_requests ( states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests associated with this user. Args: states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pullRequests\" ] query_viewer_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repositories ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"viewer\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositories\" ] query_viewer_repositories_contributed_to async A list of repositories that the user recently contributed to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable[prefect_github.schemas.graphql_schema.RepositoryContributionType] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repositories_contributed_to ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user recently contributed to. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoriesContributedTo\" ] query_viewer_repository async Find Repository. Parameters: Name Type Description Default name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repository ( name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"viewer\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repository\" ] query_viewer_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repository_discussion_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussionComments\" ] query_viewer_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repository_discussions ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussions\" ] query_viewer_saved_replies async Replies this user has saved. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_saved_replies ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Replies this user has saved. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"savedReplies\" ] query_viewer_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsoring ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsoring\" ] query_viewer_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsors ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsors\" ] query_viewer_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period SponsorsActivityPeriod Filter activities returned to only those that occurred in a given time range. 'MONTH' order_by SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsors_activities ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in a given time range. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_activities ( ** strip_kwargs ( after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsActivities\" ] query_viewer_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsors_listing ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsListing\" ] query_viewer_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorship_for_viewer_as_sponsor ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsor\" ] query_viewer_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorship_for_viewer_as_sponsorable ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_viewer_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorship_newsletters ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipNewsletters\" ] query_viewer_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorships_as_maintainer ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsMaintainer\" ] query_viewer_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorships_as_sponsor ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsSponsor\" ] query_viewer_starred_repositories async Repositories the user has starred. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by StarOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_starred_repositories ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has starred. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"starredRepositories\" ] query_viewer_status async The user's description of what they're currently doing. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_status ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The user's description of what they're currently doing. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . status ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"status\" ] query_viewer_top_repositories async Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default order_by RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_top_repositories ( order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"viewer\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"topRepositories\" ] query_viewer_watching async A list of repositories the given user is watching. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_watching ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories the given user is watching. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"watching\" ]","title":"Viewer"},{"location":"viewer/#prefect_github.viewer","text":"This is a module for interacting with GitHub Query viewer tasks. It was auto-generated using prefect-collection-generator so manually editing this file is not recommended.","title":"viewer"},{"location":"viewer/#prefect_github.viewer.query_viewer","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) op_stack = ( \"viewer\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ]","title":"query_viewer()"},{"location":"viewer/#prefect_github.viewer.query_viewer_commit_comments","text":"A list of commit comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_commit_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"commitComments\" ]","title":"query_viewer_commit_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_contributions_collection","text":"The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_contributions_collection ( github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The collection of contributions this user has made to different repositories. Args: github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"viewer\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"contributionsCollection\" ]","title":"query_viewer_contributions_collection()"},{"location":"viewer/#prefect_github.viewer.query_viewer_followers","text":"A list of users the given user is followed by. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_followers ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is followed by. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"followers\" ]","title":"query_viewer_followers()"},{"location":"viewer/#prefect_github.viewer.query_viewer_following","text":"A list of users the given user is following. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_following ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is following. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"following\" ]","title":"query_viewer_following()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gist","text":"Find gist by repo name. Parameters: Name Type Description Default name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_gist ( name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find gist by repo name. Args: name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"viewer\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gist\" ]","title":"query_viewer_gist()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gist_comments","text":"A list of gist comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_gist_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of gist comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gistComments\" ]","title":"query_viewer_gist_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gists","text":"A list of the Gists the user has created. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy GistPrivacy Filters Gists according to privacy. None order_by GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_gists ( github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of the Gists the user has created. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gists\" ]","title":"query_viewer_gists()"},{"location":"viewer/#prefect_github.viewer.query_viewer_interaction_ability","text":"The interaction ability settings for this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_interaction_ability ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this user. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"interactionAbility\" ]","title":"query_viewer_interaction_ability()"},{"location":"viewer/#prefect_github.viewer.query_viewer_issue_comments","text":"A list of issue comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_issue_comments ( github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issue comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issueComments\" ]","title":"query_viewer_issue_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_issues","text":"A list of issues associated with this user. Parameters: Name Type Description Default labels Iterable[str] A list of label names to filter the pull requests by. required states Iterable[prefect_github.schemas.graphql_schema.IssueState] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by IssueOrder Ordering options for issues returned from the connection. None filter_by IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_issues ( labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues associated with this user. Args: labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issues\" ]","title":"query_viewer_issues()"},{"location":"viewer/#prefect_github.viewer.query_viewer_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_item_showcase ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"itemShowcase\" ]","title":"query_viewer_item_showcase()"},{"location":"viewer/#prefect_github.viewer.query_viewer_organization","text":"Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_organization ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization by its login that the user belongs to. Args: login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"viewer\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organization\" ]","title":"query_viewer_organization()"},{"location":"viewer/#prefect_github.viewer.query_viewer_organizations","text":"A list of organizations the user belongs to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_organizations ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of organizations the user belongs to. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organizations\" ]","title":"query_viewer_organizations()"},{"location":"viewer/#prefect_github.viewer.query_viewer_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable[str] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type PackageType Filter registry package by type. None order_by PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_packages ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"packages\" ]","title":"query_viewer_packages()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_pinnable_items ( types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnableItems\" ]","title":"query_viewer_pinnable_items()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default types Iterable[prefect_github.schemas.graphql_schema.PinnableItemType] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_pinned_items ( types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnedItems\" ]","title":"query_viewer_pinned_items()"},{"location":"viewer/#prefect_github.viewer.query_viewer_project","text":"Find project by number. Parameters: Name Type Description Default number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_project ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"project\" ]","title":"query_viewer_project()"},{"location":"viewer/#prefect_github.viewer.query_viewer_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_project_next ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectNext\" ]","title":"query_viewer_project_next()"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default states Iterable[prefect_github.schemas.graphql_schema.ProjectState] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_projects ( states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projects\" ]","title":"query_viewer_projects()"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_projects_next ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"viewer\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsNext\" ]","title":"query_viewer_projects_next()"},{"location":"viewer/#prefect_github.viewer.query_viewer_public_keys","text":"A list of public keys associated with this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_public_keys ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of public keys associated with this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"publicKeys\" ]","title":"query_viewer_public_keys()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pull_requests","text":"A list of pull requests associated with this user. Parameters: Name Type Description Default states Iterable[prefect_github.schemas.graphql_schema.PullRequestState] A list of states to filter the pull requests by. required labels Iterable[str] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_pull_requests ( states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests associated with this user. Args: states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pullRequests\" ]","title":"query_viewer_pull_requests()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repositories ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"viewer\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositories\" ]","title":"query_viewer_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repositories_contributed_to","text":"A list of repositories that the user recently contributed to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable[prefect_github.schemas.graphql_schema.RepositoryContributionType] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repositories_contributed_to ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user recently contributed to. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoriesContributedTo\" ]","title":"query_viewer_repositories_contributed_to()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository","text":"Find Repository. Parameters: Name Type Description Default name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repository ( name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"viewer\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repository\" ]","title":"query_viewer_repository()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repository_discussion_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussionComments\" ]","title":"query_viewer_repository_discussion_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_repository_discussions ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussions\" ]","title":"query_viewer_repository_discussions()"},{"location":"viewer/#prefect_github.viewer.query_viewer_saved_replies","text":"Replies this user has saved. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_saved_replies ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Replies this user has saved. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"savedReplies\" ]","title":"query_viewer_saved_replies()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsoring ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsoring\" ]","title":"query_viewer_sponsoring()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsors ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsors\" ]","title":"query_viewer_sponsors()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period SponsorsActivityPeriod Filter activities returned to only those that occurred in a given time range. 'MONTH' order_by SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsors_activities ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in a given time range. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_activities ( ** strip_kwargs ( after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsActivities\" ]","title":"query_viewer_sponsors_activities()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsors_listing ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsListing\" ]","title":"query_viewer_sponsors_listing()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorship_for_viewer_as_sponsor ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_viewer_sponsorship_for_viewer_as_sponsor()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorship_for_viewer_as_sponsorable ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_viewer_sponsorship_for_viewer_as_sponsorable()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorship_newsletters ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipNewsletters\" ]","title":"query_viewer_sponsorship_newsletters()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorships_as_maintainer ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_viewer_sponsorships_as_maintainer()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_sponsorships_as_sponsor ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_viewer_sponsorships_as_sponsor()"},{"location":"viewer/#prefect_github.viewer.query_viewer_starred_repositories","text":"Repositories the user has starred. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by StarOrder Order for connection. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_starred_repositories ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has starred. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"starredRepositories\" ]","title":"query_viewer_starred_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_status","text":"The user's description of what they're currently doing. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_status ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The user's description of what they're currently doing. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . status ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"status\" ]","title":"query_viewer_status()"},{"location":"viewer/#prefect_github.viewer.query_viewer_top_repositories","text":"Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default order_by RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_top_repositories ( order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"viewer\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"topRepositories\" ]","title":"query_viewer_top_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_watching","text":"A list of repositories the given user is watching. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable[prefect_github.schemas.graphql_schema.RepositoryAffiliation] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable[str] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict[str, Any] A dict of the returned fields. Source code in prefect_github/viewer.py @task async def query_viewer_watching ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories the given user is watching. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"watching\" ]","title":"query_viewer_watching()"}]}