{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-github","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect integrations interacting with GitHub.</p> <p>The tasks within this collection were created by a code generator using the GitHub GraphQL schema.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-github</code> with <code>pip</code>:</p> <pre><code>pip install prefect-github\n</code></pre> <p>Then, register to view the block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_github\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<pre><code>from prefect import flow\nfrom prefect_github import GitHubCredentials\nfrom prefect_github.repository import query_repository\nfrom prefect_github.mutations import add_star_starrable\n\n\n@flow()\ndef github_add_star_flow():\n    github_credentials = GitHubCredentials.load(\"github-token\")\n    repository_id = query_repository(\n        \"PrefectHQ\",\n        \"Prefect\",\n        github_credentials=github_credentials,\n        return_fields=\"id\"\n    )[\"id\"]\n    starrable = add_star_starrable(\n        repository_id,\n        github_credentials\n    )\n    return starrable\n\n\ngithub_add_star_flow()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-github</code>, feel free to open an issue in the prefect-github repository.</p> <p>If you have any questions or issues while using <code>prefect-github</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-github</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-github</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/PrefectHQ/prefect-github.git\n\ncd prefect-github/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_github.credentials","title":"<code>prefect_github.credentials</code>","text":"<p>Credential classes used to perform authenticated interactions with GitHub</p>"},{"location":"credentials/#prefect_github.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_github.credentials.GitHubCredentials","title":"<code>GitHubCredentials</code>","text":"<p>             Bases: <code>CredentialsBlock</code></p> <p>Block used to manage GitHub authentication.</p> <p>Attributes:</p> Name Type Description <code>token</code> <code>SecretStr</code> <p>the token to authenticate into GitHub.</p> <p>Examples:</p> <p>Load stored GitHub credentials: <pre><code>from prefect_github import GitHubCredentials\ngithub_credentials_block = GitHubCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_github/credentials.py</code> <pre><code>class GitHubCredentials(CredentialsBlock):\n    \"\"\"\n    Block used to manage GitHub authentication.\n\n    Attributes:\n        token: the token to authenticate into GitHub.\n\n    Examples:\n        Load stored GitHub credentials:\n        ```python\n        from prefect_github import GitHubCredentials\n        github_credentials_block = GitHubCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"GitHub Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250\"  # noqa\n    _documentation_url = \"https://prefecthq.github.io/prefect-github/credentials/#prefect_github.credentials.GitHubCredentials\"  # noqa\n\n    token: SecretStr = Field(\n        default=None, description=\"A GitHub personal access token (PAT).\"\n    )\n\n    def get_client(self) -&gt; HTTPEndpoint:\n        \"\"\"\n        Gets an authenticated GitHub GraphQL HTTPEndpoint client.\n\n        Returns:\n            An authenticated GitHub GraphQL HTTPEndpoint client.\n\n        Example:\n            Gets an authenticated GitHub GraphQL HTTPEndpoint client.\n            ```python\n            from prefect_github import GitHubCredentials\n\n            github_credentials = GitHubCredentials(token=token)\n            client = github_credentials.get_client()\n            ```\n        \"\"\"\n\n        if self.token is not None:\n            base_headers = {\"Authorization\": f\"Bearer {self.token.get_secret_value()}\"}\n        else:\n            base_headers = None\n\n        endpoint = HTTPEndpoint(\n            \"https://api.github.com/graphql\", base_headers=base_headers\n        )\n        return endpoint\n\n    def get_endpoint(self) -&gt; HTTPEndpoint:\n        \"\"\"\n        Gets an authenticated GitHub GraphQL HTTPEndpoint.\n\n        Returns:\n            An authenticated GitHub GraphQL HTTPEndpoint\n\n        Example:\n            Gets an authenticated GitHub GraphQL HTTPEndpoint.\n            ```python\n            from prefect import flow\n            from prefect_github import GitHubCredentials\n\n            @flow\n            def example_get_endpoint_flow():\n                token = \"token_xxxxxxx\"\n                github_credentials = GitHubCredentials(token=token)\n                endpoint = github_credentials.get_endpoint()\n                return endpoint\n\n            example_get_endpoint_flow()\n            ```\n        \"\"\"\n        warnings.warn(\n            \"`get_endpoint` is deprecated and will be removed March 31st, 2023, \"\n            \"use `get_client` instead.\",\n            DeprecationWarning,\n        )\n        return self.get_client()\n</code></pre>"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_github.credentials.GitHubCredentials.get_client","title":"<code>get_client</code>","text":"<p>Gets an authenticated GitHub GraphQL HTTPEndpoint client.</p> <p>Returns:</p> Type Description <code>HTTPEndpoint</code> <p>An authenticated GitHub GraphQL HTTPEndpoint client.</p> Example <p>Gets an authenticated GitHub GraphQL HTTPEndpoint client. <pre><code>from prefect_github import GitHubCredentials\n\ngithub_credentials = GitHubCredentials(token=token)\nclient = github_credentials.get_client()\n</code></pre></p> Source code in <code>prefect_github/credentials.py</code> <pre><code>def get_client(self) -&gt; HTTPEndpoint:\n    \"\"\"\n    Gets an authenticated GitHub GraphQL HTTPEndpoint client.\n\n    Returns:\n        An authenticated GitHub GraphQL HTTPEndpoint client.\n\n    Example:\n        Gets an authenticated GitHub GraphQL HTTPEndpoint client.\n        ```python\n        from prefect_github import GitHubCredentials\n\n        github_credentials = GitHubCredentials(token=token)\n        client = github_credentials.get_client()\n        ```\n    \"\"\"\n\n    if self.token is not None:\n        base_headers = {\"Authorization\": f\"Bearer {self.token.get_secret_value()}\"}\n    else:\n        base_headers = None\n\n    endpoint = HTTPEndpoint(\n        \"https://api.github.com/graphql\", base_headers=base_headers\n    )\n    return endpoint\n</code></pre>"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials.get_endpoint","title":"<code>get_endpoint</code>","text":"<p>Gets an authenticated GitHub GraphQL HTTPEndpoint.</p> <p>Returns:</p> Type Description <code>HTTPEndpoint</code> <p>An authenticated GitHub GraphQL HTTPEndpoint</p> Example <p>Gets an authenticated GitHub GraphQL HTTPEndpoint. <pre><code>from prefect import flow\nfrom prefect_github import GitHubCredentials\n\n@flow\ndef example_get_endpoint_flow():\n    token = \"token_xxxxxxx\"\n    github_credentials = GitHubCredentials(token=token)\n    endpoint = github_credentials.get_endpoint()\n    return endpoint\n\nexample_get_endpoint_flow()\n</code></pre></p> Source code in <code>prefect_github/credentials.py</code> <pre><code>def get_endpoint(self) -&gt; HTTPEndpoint:\n    \"\"\"\n    Gets an authenticated GitHub GraphQL HTTPEndpoint.\n\n    Returns:\n        An authenticated GitHub GraphQL HTTPEndpoint\n\n    Example:\n        Gets an authenticated GitHub GraphQL HTTPEndpoint.\n        ```python\n        from prefect import flow\n        from prefect_github import GitHubCredentials\n\n        @flow\n        def example_get_endpoint_flow():\n            token = \"token_xxxxxxx\"\n            github_credentials = GitHubCredentials(token=token)\n            endpoint = github_credentials.get_endpoint()\n            return endpoint\n\n        example_get_endpoint_flow()\n        ```\n    \"\"\"\n    warnings.warn(\n        \"`get_endpoint` is deprecated and will be removed March 31st, 2023, \"\n        \"use `get_client` instead.\",\n        DeprecationWarning,\n    )\n    return self.get_client()\n</code></pre>"},{"location":"graphql/","title":"Graphql","text":""},{"location":"graphql/#prefect_github.graphql","title":"<code>prefect_github.graphql</code>","text":"<p>This is a module containing generic GraphQL tasks</p>"},{"location":"graphql/#prefect_github.graphql-classes","title":"Classes","text":""},{"location":"graphql/#prefect_github.graphql-functions","title":"Functions","text":""},{"location":"graphql/#prefect_github.graphql.execute_graphql","title":"<code>execute_graphql</code>  <code>async</code>","text":"<p>Generic function for executing GraphQL operations.</p> <p>Parameters:</p> Name Type Description Default <code>op</code> <code>Union[Operation, str]</code> <p>The operation, either as a valid GraphQL string or sgqlc.Operation.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>error_key</code> <code>str</code> <p>The key name to look out for in the response that indicates an error has occurred with the request.</p> <code>'errors'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> <p>Examples:</p> <p>Queries the first three issues from the Prefect repository using a string query. <pre><code>from prefect import flow\nfrom prefect_github import GitHubCredentials\nfrom prefect_github.graphql import execute_graphql\n\n@flow()\ndef example_execute_graphql_flow():\n    op = '''\n        query GitHubRepoIssues($owner: String!, $name: String!) {\n            repository(owner: $owner, name: $name) {\n                issues(last: 3) {\n                    nodes {\n                        number\n                        title\n                    }\n                }\n            }\n        }\n    '''\n    token = \"ghp_...\"\n    github_credentials = GitHubCredentials(token=token)\n    params = dict(owner=\"PrefectHQ\", name=\"Prefect\")\n    result = execute_graphql(op, github_credentials, **params)\n    return result\n\nexample_execute_graphql_flow()\n</code></pre></p> <p>Queries the first three issues from Prefect repository using a sgqlc.Operation. <pre><code>from prefect import flow\nfrom sgqlc.operation import Operation\nfrom prefect_github import GitHubCredentials\nfrom prefect_github.schemas import graphql_schema\nfrom prefect_github.graphql import execute_graphql\n\n@flow()\ndef example_execute_graphql_flow():\n    op = Operation(graphql_schema.Query)\n    op_settings = op.repository(\n        owner=\"PrefectHQ\", name=\"Prefect\"\n    ).issues(\n        first=3\n    ).nodes()\n    op_settings.__fields__(\"id\", \"title\")\n    token = \"ghp_...\"\n    github_credentials = GitHubCredentials(token=token)\n    result = execute_graphql(\n        op,\n        github_credentials,\n    )\n    return result\n\nexample_execute_graphql_flow()\n</code></pre></p> Source code in <code>prefect_github/graphql.py</code> <pre><code>@task\nasync def execute_graphql(\n    op: Union[Operation, str],\n    github_credentials: GitHubCredentials,\n    error_key: str = \"errors\",\n    **vars,\n) -&gt; Dict[str, Any]:\n    # NOTE: Maintainers can update these examples to match their collection!\n    \"\"\"\n    Generic function for executing GraphQL operations.\n\n    Args:\n        op: The operation, either as a valid GraphQL string or sgqlc.Operation.\n        github_credentials: Credentials to use for authentication with GitHub.\n        error_key: The key name to look out for in the response\n            that indicates an error has occurred with the request.\n\n    Returns:\n        A dict of the returned fields.\n\n    Examples:\n        Queries the first three issues from the Prefect repository\n        using a string query.\n        ```python\n        from prefect import flow\n        from prefect_github import GitHubCredentials\n        from prefect_github.graphql import execute_graphql\n\n        @flow()\n        def example_execute_graphql_flow():\n            op = '''\n                query GitHubRepoIssues($owner: String!, $name: String!) {\n                    repository(owner: $owner, name: $name) {\n                        issues(last: 3) {\n                            nodes {\n                                number\n                                title\n                            }\n                        }\n                    }\n                }\n            '''\n            token = \"ghp_...\"\n            github_credentials = GitHubCredentials(token=token)\n            params = dict(owner=\"PrefectHQ\", name=\"Prefect\")\n            result = execute_graphql(op, github_credentials, **params)\n            return result\n\n        example_execute_graphql_flow()\n        ```\n\n        Queries the first three issues from Prefect repository\n        using a sgqlc.Operation.\n        ```python\n        from prefect import flow\n        from sgqlc.operation import Operation\n        from prefect_github import GitHubCredentials\n        from prefect_github.schemas import graphql_schema\n        from prefect_github.graphql import execute_graphql\n\n        @flow()\n        def example_execute_graphql_flow():\n            op = Operation(graphql_schema.Query)\n            op_settings = op.repository(\n                owner=\"PrefectHQ\", name=\"Prefect\"\n            ).issues(\n                first=3\n            ).nodes()\n            op_settings.__fields__(\"id\", \"title\")\n            token = \"ghp_...\"\n            github_credentials = GitHubCredentials(token=token)\n            result = execute_graphql(\n                op,\n                github_credentials,\n            )\n            return result\n\n        example_execute_graphql_flow()\n        ```\n    \"\"\"\n    result = await _execute_graphql_op(\n        op, github_credentials, error_key=error_key, **vars\n    )\n    return result\n</code></pre>"},{"location":"mutations/","title":"Mutations","text":""},{"location":"mutations/#prefect_github.mutations","title":"<code>prefect_github.mutations</code>","text":"<p>This is a module containing: GitHub mutation tasks</p>"},{"location":"mutations/#prefect_github.mutations-classes","title":"Classes","text":""},{"location":"mutations/#prefect_github.mutations-functions","title":"Functions","text":""},{"location":"mutations/#prefect_github.mutations.add_comment_subject","title":"<code>add_comment_subject</code>  <code>async</code>","text":"<p>Adds a comment to an Issue or Pull Request.</p> <p>Parameters:</p> Name Type Description Default <code>subject_id</code> <code>str</code> <p>The Node ID of the subject to modify.</p> required <code>body</code> <code>str</code> <p>The contents of the comment.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def add_comment_subject(  # noqa\n    subject_id: str,\n    body: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Adds a comment to an Issue or Pull Request.\n\n    Args:\n        subject_id: The Node ID of the subject to modify.\n        body: The contents of the comment.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_comment(\n        **strip_kwargs(\n            input=dict(\n                subject_id=subject_id,\n                body=body,\n            )\n        )\n    ).subject(**strip_kwargs())\n\n    op_stack = (\n        \"addComment\",\n        \"subject\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"addComment\"][\"subject\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.add_pull_request_review","title":"<code>add_pull_request_review</code>  <code>async</code>","text":"<p>Adds a review to a Pull Request.</p> <p>Parameters:</p> Name Type Description Default <code>pull_request_id</code> <code>str</code> <p>The Node ID of the pull request to modify.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>commit_oid</code> <code>datetime</code> <p>The commit OID the review pertains to.</p> <code>None</code> <code>body</code> <code>str</code> <p>The contents of the review body comment.</p> <code>None</code> <code>event</code> <code>PullRequestReviewEvent</code> <p>The event to perform on the pull request review.</p> <code>None</code> <code>comments</code> <code>Iterable[DraftPullRequestReviewComment]</code> <p>The review line comments.</p> <code>None</code> <code>threads</code> <code>Iterable[DraftPullRequestReviewThread]</code> <p>The review line comment threads.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def add_pull_request_review(  # noqa\n    pull_request_id: str,\n    github_credentials: GitHubCredentials,\n    commit_oid: datetime = None,\n    body: str = None,\n    event: graphql_schema.PullRequestReviewEvent = None,\n    comments: Iterable[graphql_schema.DraftPullRequestReviewComment] = None,\n    threads: Iterable[graphql_schema.DraftPullRequestReviewThread] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Adds a review to a Pull Request.\n\n    Args:\n        pull_request_id: The Node ID of the pull request to modify.\n        github_credentials: Credentials to use for authentication with GitHub.\n        commit_oid: The commit OID the review pertains to.\n        body: The contents of the review body comment.\n        event: The event to perform on the pull request review.\n        comments: The review line comments.\n        threads: The review line comment threads.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_pull_request_review(\n        **strip_kwargs(\n            input=dict(\n                pull_request_id=pull_request_id,\n                commit_oid=commit_oid,\n                body=body,\n                event=event,\n                comments=comments,\n                threads=threads,\n            )\n        )\n    ).pull_request_review(**strip_kwargs())\n\n    op_stack = (\n        \"addPullRequestReview\",\n        \"pullRequestReview\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"addPullRequestReview\"][\"pullRequestReview\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.add_reaction","title":"<code>add_reaction</code>  <code>async</code>","text":"<p>Adds a reaction to a subject.</p> <p>Parameters:</p> Name Type Description Default <code>subject_id</code> <code>str</code> <p>The Node ID of the subject to modify.</p> required <code>content</code> <code>ReactionContent</code> <p>The name of the emoji to react with.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def add_reaction(  # noqa\n    subject_id: str,\n    content: graphql_schema.ReactionContent,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Adds a reaction to a subject.\n\n    Args:\n        subject_id: The Node ID of the subject to modify.\n        content: The name of the emoji to react with.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_reaction(\n        **strip_kwargs(\n            input=dict(\n                subject_id=subject_id,\n                content=content,\n            )\n        )\n    ).reaction(**strip_kwargs())\n\n    op_stack = (\n        \"addReaction\",\n        \"reaction\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"addReaction\"][\"reaction\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.add_reaction_subject","title":"<code>add_reaction_subject</code>  <code>async</code>","text":"<p>Adds a reaction to a subject.</p> <p>Parameters:</p> Name Type Description Default <code>subject_id</code> <code>str</code> <p>The Node ID of the subject to modify.</p> required <code>content</code> <code>ReactionContent</code> <p>The name of the emoji to react with.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def add_reaction_subject(  # noqa\n    subject_id: str,\n    content: graphql_schema.ReactionContent,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Adds a reaction to a subject.\n\n    Args:\n        subject_id: The Node ID of the subject to modify.\n        content: The name of the emoji to react with.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_reaction(\n        **strip_kwargs(\n            input=dict(\n                subject_id=subject_id,\n                content=content,\n            )\n        )\n    ).subject(**strip_kwargs())\n\n    op_stack = (\n        \"addReaction\",\n        \"subject\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"addReaction\"][\"subject\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.add_star_starrable","title":"<code>add_star_starrable</code>  <code>async</code>","text":"<p>Adds a star to a Starrable.</p> <p>Parameters:</p> Name Type Description Default <code>starrable_id</code> <code>str</code> <p>The Starrable ID to star.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def add_star_starrable(  # noqa\n    starrable_id: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Adds a star to a Starrable.\n\n    Args:\n        starrable_id: The Starrable ID to star.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_star(\n        **strip_kwargs(\n            input=dict(\n                starrable_id=starrable_id,\n            )\n        )\n    ).starrable(**strip_kwargs())\n\n    op_stack = (\n        \"addStar\",\n        \"starrable\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"addStar\"][\"starrable\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.close_issue","title":"<code>close_issue</code>  <code>async</code>","text":"<p>Close an issue.</p> <p>Parameters:</p> Name Type Description Default <code>issue_id</code> <code>str</code> <p>ID of the issue to be closed.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>state_reason</code> <code>IssueClosedStateReason</code> <p>The reason the issue is to be closed.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def close_issue(  # noqa\n    issue_id: str,\n    github_credentials: GitHubCredentials,\n    state_reason: graphql_schema.IssueClosedStateReason = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Close an issue.\n\n    Args:\n        issue_id: ID of the issue to be closed.\n        github_credentials: Credentials to use for authentication with GitHub.\n        state_reason: The reason the issue is to be closed.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.close_issue(\n        **strip_kwargs(\n            input=dict(\n                issue_id=issue_id,\n                state_reason=state_reason,\n            )\n        )\n    ).issue(**strip_kwargs())\n\n    op_stack = (\n        \"closeIssue\",\n        \"issue\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"closeIssue\"][\"issue\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.close_pull_request","title":"<code>close_pull_request</code>  <code>async</code>","text":"<p>Close a pull request.</p> <p>Parameters:</p> Name Type Description Default <code>pull_request_id</code> <code>str</code> <p>ID of the pull request to be closed.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def close_pull_request(  # noqa\n    pull_request_id: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Close a pull request.\n\n    Args:\n        pull_request_id: ID of the pull request to be closed.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.close_pull_request(\n        **strip_kwargs(\n            input=dict(\n                pull_request_id=pull_request_id,\n            )\n        )\n    ).pull_request(**strip_kwargs())\n\n    op_stack = (\n        \"closePullRequest\",\n        \"pullRequest\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"closePullRequest\"][\"pullRequest\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.create_issue","title":"<code>create_issue</code>  <code>async</code>","text":"<p>Creates a new issue.</p> <p>Parameters:</p> Name Type Description Default <code>repository_id</code> <code>str</code> <p>The Node ID of the repository.</p> required <code>title</code> <code>str</code> <p>The title for the issue.</p> required <code>assignee_ids</code> <code>Iterable[str]</code> <p>The Node ID for the user assignee for this issue.</p> required <code>label_ids</code> <code>Iterable[str]</code> <p>An array of Node IDs of labels for this issue.</p> required <code>project_ids</code> <code>Iterable[str]</code> <p>An array of Node IDs for projects associated with this issue.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>body</code> <code>str</code> <p>The body for the issue description.</p> <code>None</code> <code>milestone_id</code> <code>str</code> <p>The Node ID of the milestone for this issue.</p> <code>None</code> <code>issue_template</code> <code>str</code> <p>The name of an issue template in the repository, assigns labels and assignees from the template to the issue.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def create_issue(  # noqa\n    repository_id: str,\n    title: str,\n    assignee_ids: Iterable[str],\n    label_ids: Iterable[str],\n    project_ids: Iterable[str],\n    github_credentials: GitHubCredentials,\n    body: str = None,\n    milestone_id: str = None,\n    issue_template: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Creates a new issue.\n\n    Args:\n        repository_id: The Node ID of the repository.\n        title: The title for the issue.\n        assignee_ids: The Node ID for the user assignee for this issue.\n        label_ids: An array of Node IDs of labels for this issue.\n        project_ids: An array of Node IDs for projects associated with this\n            issue.\n        github_credentials: Credentials to use for authentication with GitHub.\n        body: The body for the issue description.\n        milestone_id: The Node ID of the milestone for this issue.\n        issue_template: The name of an issue template in the repository, assigns\n            labels and assignees from the template to the issue.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_issue(\n        **strip_kwargs(\n            input=dict(\n                repository_id=repository_id,\n                title=title,\n                assignee_ids=assignee_ids,\n                label_ids=label_ids,\n                project_ids=project_ids,\n                body=body,\n                milestone_id=milestone_id,\n                issue_template=issue_template,\n            )\n        )\n    ).issue(**strip_kwargs())\n\n    op_stack = (\n        \"createIssue\",\n        \"issue\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"createIssue\"][\"issue\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.create_pull_request","title":"<code>create_pull_request</code>  <code>async</code>","text":"<p>Create a new pull request.</p> <p>Parameters:</p> Name Type Description Default <code>repository_id</code> <code>str</code> <p>The Node ID of the repository.</p> required <code>base_ref_name</code> <code>str</code> <p>The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.</p> required <code>head_ref_name</code> <code>str</code> <p>The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace <code>head_ref_name</code> with a user like this: <code>username:branch</code>.</p> required <code>title</code> <code>str</code> <p>The title of the pull request.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>body</code> <code>str</code> <p>The contents of the pull request.</p> <code>None</code> <code>maintainer_can_modify</code> <code>bool</code> <p>Indicates whether maintainers can modify the pull request.</p> <code>None</code> <code>draft</code> <code>bool</code> <p>Indicates whether this pull request should be a draft.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def create_pull_request(  # noqa\n    repository_id: str,\n    base_ref_name: str,\n    head_ref_name: str,\n    title: str,\n    github_credentials: GitHubCredentials,\n    body: str = None,\n    maintainer_can_modify: bool = None,\n    draft: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Create a new pull request.\n\n    Args:\n        repository_id: The Node ID of the repository.\n        base_ref_name: The name of the branch you want your changes pulled into.\n            This should be an existing branch on the current repository.\n            You cannot update the base branch on a pull request to point\n            to another repository.\n        head_ref_name: The name of the branch where your changes are\n            implemented. For cross-repository pull requests in the same\n            network, namespace `head_ref_name` with a user like this:\n            `username:branch`.\n        title: The title of the pull request.\n        github_credentials: Credentials to use for authentication with GitHub.\n        body: The contents of the pull request.\n        maintainer_can_modify: Indicates whether maintainers can modify the pull\n            request.\n        draft: Indicates whether this pull request should be a draft.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_pull_request(\n        **strip_kwargs(\n            input=dict(\n                repository_id=repository_id,\n                base_ref_name=base_ref_name,\n                head_ref_name=head_ref_name,\n                title=title,\n                body=body,\n                maintainer_can_modify=maintainer_can_modify,\n                draft=draft,\n            )\n        )\n    ).pull_request(**strip_kwargs())\n\n    op_stack = (\n        \"createPullRequest\",\n        \"pullRequest\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"createPullRequest\"][\"pullRequest\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.remove_reaction","title":"<code>remove_reaction</code>  <code>async</code>","text":"<p>Removes a reaction from a subject.</p> <p>Parameters:</p> Name Type Description Default <code>subject_id</code> <code>str</code> <p>The Node ID of the subject to modify.</p> required <code>content</code> <code>ReactionContent</code> <p>The name of the emoji reaction to remove.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def remove_reaction(  # noqa\n    subject_id: str,\n    content: graphql_schema.ReactionContent,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Removes a reaction from a subject.\n\n    Args:\n        subject_id: The Node ID of the subject to modify.\n        content: The name of the emoji reaction to remove.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.remove_reaction(\n        **strip_kwargs(\n            input=dict(\n                subject_id=subject_id,\n                content=content,\n            )\n        )\n    ).reaction(**strip_kwargs())\n\n    op_stack = (\n        \"removeReaction\",\n        \"reaction\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"removeReaction\"][\"reaction\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.remove_reaction_subject","title":"<code>remove_reaction_subject</code>  <code>async</code>","text":"<p>Removes a reaction from a subject.</p> <p>Parameters:</p> Name Type Description Default <code>subject_id</code> <code>str</code> <p>The Node ID of the subject to modify.</p> required <code>content</code> <code>ReactionContent</code> <p>The name of the emoji reaction to remove.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def remove_reaction_subject(  # noqa\n    subject_id: str,\n    content: graphql_schema.ReactionContent,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Removes a reaction from a subject.\n\n    Args:\n        subject_id: The Node ID of the subject to modify.\n        content: The name of the emoji reaction to remove.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.remove_reaction(\n        **strip_kwargs(\n            input=dict(\n                subject_id=subject_id,\n                content=content,\n            )\n        )\n    ).subject(**strip_kwargs())\n\n    op_stack = (\n        \"removeReaction\",\n        \"subject\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"removeReaction\"][\"subject\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.remove_star_starrable","title":"<code>remove_star_starrable</code>  <code>async</code>","text":"<p>Removes a star from a Starrable.</p> <p>Parameters:</p> Name Type Description Default <code>starrable_id</code> <code>str</code> <p>The Starrable ID to unstar.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def remove_star_starrable(  # noqa\n    starrable_id: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Removes a star from a Starrable.\n\n    Args:\n        starrable_id: The Starrable ID to unstar.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.remove_star(\n        **strip_kwargs(\n            input=dict(\n                starrable_id=starrable_id,\n            )\n        )\n    ).starrable(**strip_kwargs())\n\n    op_stack = (\n        \"removeStar\",\n        \"starrable\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"removeStar\"][\"starrable\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.request_reviews","title":"<code>request_reviews</code>  <code>async</code>","text":"<p>Set review requests on a pull request.</p> <p>Parameters:</p> Name Type Description Default <code>pull_request_id</code> <code>str</code> <p>The Node ID of the pull request to modify.</p> required <code>user_ids</code> <code>Iterable[str]</code> <p>The Node IDs of the user to request.</p> required <code>team_ids</code> <code>Iterable[str]</code> <p>The Node IDs of the team to request.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>union</code> <code>bool</code> <p>Add users to the set rather than replace.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def request_reviews(  # noqa\n    pull_request_id: str,\n    user_ids: Iterable[str],\n    team_ids: Iterable[str],\n    github_credentials: GitHubCredentials,\n    union: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Set review requests on a pull request.\n\n    Args:\n        pull_request_id: The Node ID of the pull request to modify.\n        user_ids: The Node IDs of the user to request.\n        team_ids: The Node IDs of the team to request.\n        github_credentials: Credentials to use for authentication with GitHub.\n        union: Add users to the set rather than replace.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.request_reviews(\n        **strip_kwargs(\n            input=dict(\n                pull_request_id=pull_request_id,\n                user_ids=user_ids,\n                team_ids=team_ids,\n                union=union,\n            )\n        )\n    )\n\n    op_stack = (\"requestReviews\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"requestReviews\"]\n</code></pre>"},{"location":"mutations/#prefect_github.mutations.request_reviews_pull_request","title":"<code>request_reviews_pull_request</code>  <code>async</code>","text":"<p>Set review requests on a pull request.</p> <p>Parameters:</p> Name Type Description Default <code>pull_request_id</code> <code>str</code> <p>The Node ID of the pull request to modify.</p> required <code>user_ids</code> <code>Iterable[str]</code> <p>The Node IDs of the user to request.</p> required <code>team_ids</code> <code>Iterable[str]</code> <p>The Node IDs of the team to request.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>union</code> <code>bool</code> <p>Add users to the set rather than replace.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/mutations.py</code> <pre><code>@task\nasync def request_reviews_pull_request(  # noqa\n    pull_request_id: str,\n    user_ids: Iterable[str],\n    team_ids: Iterable[str],\n    github_credentials: GitHubCredentials,\n    union: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Set review requests on a pull request.\n\n    Args:\n        pull_request_id: The Node ID of the pull request to modify.\n        user_ids: The Node IDs of the user to request.\n        team_ids: The Node IDs of the team to request.\n        github_credentials: Credentials to use for authentication with GitHub.\n        union: Add users to the set rather than replace.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.request_reviews(\n        **strip_kwargs(\n            input=dict(\n                pull_request_id=pull_request_id,\n                user_ids=user_ids,\n                team_ids=team_ids,\n                union=union,\n            )\n        )\n    ).pull_request(**strip_kwargs())\n\n    op_stack = (\n        \"requestReviews\",\n        \"pullRequest\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"requestReviews\"][\"pullRequest\"]\n</code></pre>"},{"location":"organization/","title":"Organization","text":""},{"location":"organization/#prefect_github.organization","title":"<code>prefect_github.organization</code>","text":"<p>This is a module containing: GitHub query_organization* tasks</p>"},{"location":"organization/#prefect_github.organization-classes","title":"Classes","text":""},{"location":"organization/#prefect_github.organization-functions","title":"Functions","text":""},{"location":"organization/#prefect_github.organization.query_organization","title":"<code>query_organization</code>  <code>async</code>","text":"<p>The query root of GitHub's GraphQL interface.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The query root of GitHub's GraphQL interface.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    )\n\n    op_stack = (\"organization\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_audit_log","title":"<code>query_organization_audit_log</code>  <code>async</code>","text":"<p>Audit log entries of the organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>query</code> <code>str</code> <p>The query string to filter audit entries.</p> <code>None</code> <code>order_by</code> <code>AuditLogOrder</code> <p>Ordering options for the returned audit log entries.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_audit_log(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    query: str = None,\n    order_by: graphql_schema.AuditLogOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Audit log entries of the organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        query: The query string to filter audit entries.\n        order_by: Ordering options for the returned audit log entries.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).audit_log(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            query=query,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"auditLog\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"auditLog\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_domains","title":"<code>query_organization_domains</code>  <code>async</code>","text":"<p>A list of domains owned by the organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>is_verified</code> <code>bool</code> <p>Filter by if the domain is verified.</p> <code>None</code> <code>is_approved</code> <code>bool</code> <p>Filter by if the domain is approved.</p> <code>None</code> <code>order_by</code> <code>VerifiableDomainOrder</code> <p>Ordering options for verifiable domains returned.</p> <code>{'field': 'DOMAIN', 'direction': 'ASC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_domains(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    is_verified: bool = None,\n    is_approved: bool = None,\n    order_by: graphql_schema.VerifiableDomainOrder = {\n        \"field\": \"DOMAIN\",\n        \"direction\": \"ASC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of domains owned by the organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        is_verified: Filter by if the domain is verified.\n        is_approved: Filter by if the domain is approved.\n        order_by: Ordering options for verifiable domains returned.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).domains(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            is_verified=is_verified,\n            is_approved=is_approved,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"domains\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"domains\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_enterprise_owners","title":"<code>query_organization_enterprise_owners</code>  <code>async</code>","text":"<p>A list of owners of the organization's enterprise account.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>query</code> <code>str</code> <p>The search string to look for.</p> <code>None</code> <code>organization_role</code> <code>RoleInOrganization</code> <p>The organization role to filter by.</p> <code>None</code> <code>order_by</code> <code>OrgEnterpriseOwnerOrder</code> <p>Ordering options for enterprise owners returned from the connection.</p> <code>{'field': 'LOGIN', 'direction': 'ASC'}</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_enterprise_owners(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    query: str = None,\n    organization_role: graphql_schema.RoleInOrganization = None,\n    order_by: graphql_schema.OrgEnterpriseOwnerOrder = {\n        \"field\": \"LOGIN\",\n        \"direction\": \"ASC\",\n    },\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of owners of the organization's enterprise account.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        query: The search string to look for.\n        organization_role: The organization role to filter by.\n        order_by: Ordering options for enterprise owners\n            returned from the connection.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).enterprise_owners(\n        **strip_kwargs(\n            query=query,\n            organization_role=organization_role,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"enterpriseOwners\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"enterpriseOwners\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_interaction_ability","title":"<code>query_organization_interaction_ability</code>  <code>async</code>","text":"<p>The interaction ability settings for this organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_interaction_ability(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The interaction ability settings for this organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).interaction_ability(**strip_kwargs())\n\n    op_stack = (\n        \"organization\",\n        \"interactionAbility\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"interactionAbility\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_ip_allow_list_entries","title":"<code>query_organization_ip_allow_list_entries</code>  <code>async</code>","text":"<p>The IP addresses that are allowed to access resources owned by the organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>IpAllowListEntryOrder</code> <p>Ordering options for IP allow list entries returned.</p> <code>{'field': 'ALLOW_LIST_VALUE', 'direction': 'ASC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_ip_allow_list_entries(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.IpAllowListEntryOrder = {\n        \"field\": \"ALLOW_LIST_VALUE\",\n        \"direction\": \"ASC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The IP addresses that are allowed to access resources owned by the organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Ordering options for IP allow list\n            entries returned.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).ip_allow_list_entries(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"ipAllowListEntries\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"ipAllowListEntries\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_item_showcase","title":"<code>query_organization_item_showcase</code>  <code>async</code>","text":"<p>Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_item_showcase(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Showcases a selection of repositories and gists that the profile owner has\n    either curated or that have been selected automatically based on popularity.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).item_showcase(**strip_kwargs())\n\n    op_stack = (\n        \"organization\",\n        \"itemShowcase\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"itemShowcase\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_member_statuses","title":"<code>query_organization_member_statuses</code>  <code>async</code>","text":"<p>Get the status messages members of this entity have set that are either public or visible only to the organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>UserStatusOrder</code> <p>Ordering options for user statuses returned from the connection.</p> <code>{'field': 'UPDATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_member_statuses(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.UserStatusOrder = {\n        \"field\": \"UPDATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Get the status messages members of this entity have set that are either public\n    or visible only to the organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Ordering options for user statuses returned\n            from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).member_statuses(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"memberStatuses\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"memberStatuses\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_members_with_role","title":"<code>query_organization_members_with_role</code>  <code>async</code>","text":"<p>A list of users who are members of this organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_members_with_role(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users who are members of this organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).members_with_role(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"membersWithRole\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"membersWithRole\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_packages","title":"<code>query_organization_packages</code>  <code>async</code>","text":"<p>A list of packages under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>names</code> <code>Iterable[str]</code> <p>Find packages by their names.</p> <code>None</code> <code>repository_id</code> <code>str</code> <p>Find packages in a repository by ID.</p> <code>None</code> <code>package_type</code> <code>PackageType</code> <p>Filter registry package by type.</p> <code>None</code> <code>order_by</code> <code>PackageOrder</code> <p>Ordering of the returned packages.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_packages(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    names: Iterable[str] = None,\n    repository_id: str = None,\n    package_type: graphql_schema.PackageType = None,\n    order_by: graphql_schema.PackageOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of packages under the owner.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        names: Find packages by their names.\n        repository_id: Find packages in a repository by ID.\n        package_type: Filter registry package by type.\n        order_by: Ordering of the returned packages.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).packages(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            names=names,\n            repository_id=repository_id,\n            package_type=package_type,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"packages\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"packages\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_pending_members","title":"<code>query_organization_pending_members</code>  <code>async</code>","text":"<p>A list of users who have been invited to join this organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_pending_members(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users who have been invited to join this organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).pending_members(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"pendingMembers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"pendingMembers\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_pinnable_items","title":"<code>query_organization_pinnable_items</code>  <code>async</code>","text":"<p>A list of repositories and gists this profile owner can pin to their profile.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>types</code> <code>Iterable[PinnableItemType]</code> <p>Filter the types of pinnable items that are returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_pinnable_items(  # noqa\n    login: str,\n    types: Iterable[graphql_schema.PinnableItemType],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories and gists this profile owner can pin to their profile.\n\n    Args:\n        login: The organization's login.\n        types: Filter the types of pinnable items that are\n            returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).pinnable_items(\n        **strip_kwargs(\n            types=types,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"pinnableItems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"pinnableItems\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_pinned_items","title":"<code>query_organization_pinned_items</code>  <code>async</code>","text":"<p>A list of repositories and gists this profile owner has pinned to their profile.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>types</code> <code>Iterable[PinnableItemType]</code> <p>Filter the types of pinned items that are returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_pinned_items(  # noqa\n    login: str,\n    types: Iterable[graphql_schema.PinnableItemType],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories and gists this profile owner has pinned to their profile.\n\n    Args:\n        login: The organization's login.\n        types: Filter the types of pinned items that are returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).pinned_items(\n        **strip_kwargs(\n            types=types,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"pinnedItems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"pinnedItems\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_project","title":"<code>query_organization_project</code>  <code>async</code>","text":"<p>Find project by number.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>number</code> <code>int</code> <p>The project number to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_project(  # noqa\n    login: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find project by number.\n\n    Args:\n        login: The organization's login.\n        number: The project number to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).project(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"project\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"project\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_project_next","title":"<code>query_organization_project_next</code>  <code>async</code>","text":"<p>Find a project by project (beta) number.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>number</code> <code>int</code> <p>The project (beta) number.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_project_next(  # noqa\n    login: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find a project by project (beta) number.\n\n    Args:\n        login: The organization's login.\n        number: The project (beta) number.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).project_next(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"projectNext\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"projectNext\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_project_v2","title":"<code>query_organization_project_v2</code>  <code>async</code>","text":"<p>Find a project by number.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>number</code> <code>int</code> <p>The project number.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_project_v2(  # noqa\n    login: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find a project by number.\n\n    Args:\n        login: The organization's login.\n        number: The project number.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).project_v2(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"projectV2\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"projectV2\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_projects","title":"<code>query_organization_projects</code>  <code>async</code>","text":"<p>A list of projects under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>states</code> <code>Iterable[ProjectState]</code> <p>A list of states to filter the projects by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>order_by</code> <code>ProjectOrder</code> <p>Ordering options for projects returned from the connection.</p> <code>None</code> <code>search</code> <code>str</code> <p>Query to search projects by, currently only searching by name.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_projects(  # noqa\n    login: str,\n    states: Iterable[graphql_schema.ProjectState],\n    github_credentials: GitHubCredentials,\n    order_by: graphql_schema.ProjectOrder = None,\n    search: str = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects under the owner.\n\n    Args:\n        login: The organization's login.\n        states: A list of states to filter the projects by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        order_by: Ordering options for projects returned from the\n            connection.\n        search: Query to search projects by, currently only searching\n            by name.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).projects(\n        **strip_kwargs(\n            states=states,\n            order_by=order_by,\n            search=search,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"projects\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"projects\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_projects_next","title":"<code>query_organization_projects_next</code>  <code>async</code>","text":"<p>A list of projects (beta) under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>query</code> <code>str</code> <p>A project (beta) to search for under the the owner.</p> <code>None</code> <code>sort_by</code> <code>ProjectNextOrderField</code> <p>How to order the returned projects (beta).</p> <code>'TITLE'</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_projects_next(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    query: str = None,\n    sort_by: graphql_schema.ProjectNextOrderField = \"TITLE\",\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects (beta) under the owner.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        query: A project (beta) to search for under the the owner.\n        sort_by: How to order the returned projects (beta).\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).projects_next(\n        **strip_kwargs(\n            query=query,\n            sort_by=sort_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"projectsNext\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"projectsNext\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_projects_v2","title":"<code>query_organization_projects_v2</code>  <code>async</code>","text":"<p>A list of projects under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>query</code> <code>str</code> <p>A project to search for under the the owner.</p> <code>None</code> <code>order_by</code> <code>ProjectV2Order</code> <p>How to order the returned projects.</p> <code>{'field': 'NUMBER', 'direction': 'DESC'}</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_projects_v2(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    query: str = None,\n    order_by: graphql_schema.ProjectV2Order = {\"field\": \"NUMBER\", \"direction\": \"DESC\"},\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects under the owner.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        query: A project to search for under the the owner.\n        order_by: How to order the returned projects.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).projects_v2(\n        **strip_kwargs(\n            query=query,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"projectsV2\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"projectsV2\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_recent_projects","title":"<code>query_organization_recent_projects</code>  <code>async</code>","text":"<p>Recent projects that this user has modified in the context of the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_recent_projects(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Recent projects that this user has modified in the context of the owner.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).recent_projects(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"recentProjects\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"recentProjects\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_repositories","title":"<code>query_organization_repositories</code>  <code>async</code>","text":"<p>A list of repositories that the user owns.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.</p> <code>None</code> <code>owner_affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.</p> <code>('OWNER', 'COLLABORATOR')</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>is_fork</code> <code>bool</code> <p>If non-null, filters repositories according to whether they are forks of another repository.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_repositories(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    affiliations: Iterable[graphql_schema.RepositoryAffiliation] = None,\n    owner_affiliations: Iterable[graphql_schema.RepositoryAffiliation] = (\n        \"OWNER\",\n        \"COLLABORATOR\",\n    ),\n    is_locked: bool = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    is_fork: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories that the user owns.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters repositories according to\n            privacy.\n        order_by: Ordering options for repositories returned from\n            the connection.\n        affiliations: Array of viewer's affiliation options for\n            repositories returned from the connection. For example,\n            OWNER will include only repositories that the current viewer\n            owns.\n        owner_affiliations: Array of owner's affiliation options\n            for repositories returned from the connection. For example,\n            OWNER will include only repositories that the organization\n            or user being viewed owns.\n        is_locked: If non-null, filters repositories according to\n            whether they have been locked.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        is_fork: If non-null, filters repositories according to\n            whether they are forks of another repository.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).repositories(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            affiliations=affiliations,\n            owner_affiliations=owner_affiliations,\n            is_locked=is_locked,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            is_fork=is_fork,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"repositories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"repositories\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_repository","title":"<code>query_organization_repository</code>  <code>async</code>","text":"<p>Find Repository.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>name</code> <code>str</code> <p>Name of Repository to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_repository(  # noqa\n    login: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find Repository.\n\n    Args:\n        login: The organization's login.\n        name: Name of Repository to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).repository(\n        **strip_kwargs(\n            name=name,\n            follow_renames=follow_renames,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"repository\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"repository\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_repository_discussion_comments","title":"<code>query_organization_repository_discussion_comments</code>  <code>async</code>","text":"<p>Discussion comments this user has authored.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>repository_id</code> <code>str</code> <p>Filter discussion comments to only those in a specific repository.</p> <code>None</code> <code>only_answers</code> <code>bool</code> <p>Filter discussion comments to only those that were marked as the answer.</p> <code>False</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_repository_discussion_comments(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    repository_id: str = None,\n    only_answers: bool = False,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Discussion comments this user has authored.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list\n            that come after the specified cursor.\n        before: Returns the elements in the list\n            that come before the specified cursor.\n        first: Returns the first _n_ elements\n            from the list.\n        last: Returns the last _n_ elements from\n            the list.\n        repository_id: Filter discussion comments\n            to only those in a specific repository.\n        only_answers: Filter discussion comments\n            to only those that were marked as the answer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).repository_discussion_comments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            repository_id=repository_id,\n            only_answers=only_answers,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"repositoryDiscussionComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"repositoryDiscussionComments\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_repository_discussions","title":"<code>query_organization_repository_discussions</code>  <code>async</code>","text":"<p>Discussions this user has started.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>DiscussionOrder</code> <p>Ordering options for discussions returned from the connection.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>repository_id</code> <code>str</code> <p>Filter discussions to only those in a specific repository.</p> <code>None</code> <code>answered</code> <code>bool</code> <p>Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_repository_discussions(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.DiscussionOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    repository_id: str = None,\n    answered: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Discussions this user has started.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for discussions\n            returned from the connection.\n        repository_id: Filter discussions to only those\n            in a specific repository.\n        answered: Filter discussions to only those that\n            have been answered or not. Defaults to including both\n            answered and unanswered discussions.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).repository_discussions(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n            repository_id=repository_id,\n            answered=answered,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"repositoryDiscussions\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"repositoryDiscussions\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_repository_migrations","title":"<code>query_organization_repository_migrations</code>  <code>async</code>","text":"<p>A list of all repository migrations for this organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>state</code> <code>MigrationState</code> <p>Filter repository migrations by state.</p> <code>None</code> <code>repository_name</code> <code>str</code> <p>Filter repository migrations by repository name.</p> <code>None</code> <code>order_by</code> <code>RepositoryMigrationOrder</code> <p>Ordering options for repository migrations returned.</p> <code>{'field': 'CREATED_AT', 'direction': 'ASC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_repository_migrations(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    state: graphql_schema.MigrationState = None,\n    repository_name: str = None,\n    order_by: graphql_schema.RepositoryMigrationOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"ASC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of all repository migrations for this organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the list.\n        state: Filter repository migrations by state.\n        repository_name: Filter repository migrations by\n            repository name.\n        order_by: Ordering options for repository\n            migrations returned.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).repository_migrations(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            state=state,\n            repository_name=repository_name,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"repositoryMigrations\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"repositoryMigrations\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_saml_identity_provider","title":"<code>query_organization_saml_identity_provider</code>  <code>async</code>","text":"<p>The Organization's SAML identity providers.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_saml_identity_provider(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The Organization's SAML identity providers.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).saml_identity_provider(**strip_kwargs())\n\n    op_stack = (\n        \"organization\",\n        \"samlIdentityProvider\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"samlIdentityProvider\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsoring","title":"<code>query_organization_sponsoring</code>  <code>async</code>","text":"<p>List of users and organizations this entity is sponsoring.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorOrder</code> <p>Ordering options for the users and organizations returned from the connection.</p> <code>{'field': 'RELEVANCE', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsoring(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorOrder = {\"field\": \"RELEVANCE\", \"direction\": \"DESC\"},\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of users and organizations this entity is sponsoring.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Ordering options for the users and organizations\n            returned from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).sponsoring(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"sponsoring\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsoring\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsors","title":"<code>query_organization_sponsors</code>  <code>async</code>","text":"<p>List of sponsors for this user or organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>tier_id</code> <code>str</code> <p>If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.</p> <code>None</code> <code>order_by</code> <code>SponsorOrder</code> <p>Ordering options for sponsors returned from the connection.</p> <code>{'field': 'RELEVANCE', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsors(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    tier_id: str = None,\n    order_by: graphql_schema.SponsorOrder = {\"field\": \"RELEVANCE\", \"direction\": \"DESC\"},\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of sponsors for this user or organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        tier_id: If given, will filter for sponsors at the given tier.\n            Will only return sponsors whose tier the viewer is permitted\n            to see.\n        order_by: Ordering options for sponsors returned from the\n            connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).sponsors(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            tier_id=tier_id,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"sponsors\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsors\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsors_activities","title":"<code>query_organization_sponsors_activities</code>  <code>async</code>","text":"<p>Events involving this sponsorable, such as new sponsorships.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>actions</code> <code>Iterable[SponsorsActivityAction]</code> <p>Filter activities to only the specified actions.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>period</code> <code>SponsorsActivityPeriod</code> <p>Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred.</p> <code>'MONTH'</code> <code>order_by</code> <code>SponsorsActivityOrder</code> <p>Ordering options for activity returned from the connection.</p> <code>{'field': 'TIMESTAMP', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsors_activities(  # noqa\n    login: str,\n    actions: Iterable[graphql_schema.SponsorsActivityAction],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    period: graphql_schema.SponsorsActivityPeriod = \"MONTH\",\n    order_by: graphql_schema.SponsorsActivityOrder = {\n        \"field\": \"TIMESTAMP\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Events involving this sponsorable, such as new sponsorships.\n\n    Args:\n        login: The organization's login.\n        actions: Filter activities to only the specified\n            actions.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        period: Filter activities returned to only those\n            that occurred in the most recent specified time period. Set\n            to ALL to avoid filtering by when the activity occurred.\n        order_by: Ordering options for activity returned\n            from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).sponsors_activities(\n        **strip_kwargs(\n            actions=actions,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            period=period,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"sponsorsActivities\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsorsActivities\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsors_listing","title":"<code>query_organization_sponsors_listing</code>  <code>async</code>","text":"<p>The GitHub Sponsors listing for this user or organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsors_listing(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The GitHub Sponsors listing for this user or organization.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsors_listing(**strip_kwargs())\n\n    op_stack = (\n        \"organization\",\n        \"sponsorsListing\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsorsListing\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_for_viewer_as_sponsor","title":"<code>query_organization_sponsorship_for_viewer_as_sponsor</code>  <code>async</code>","text":"<p>The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsorship_for_viewer_as_sponsor(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The sponsorship from the viewer to this user/organization; that is, the\n    sponsorship where you're the sponsor. Only returns a sponsorship if it is\n    active.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsorship_for_viewer_as_sponsor(**strip_kwargs())\n\n    op_stack = (\n        \"organization\",\n        \"sponsorshipForViewerAsSponsor\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsorshipForViewerAsSponsor\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_for_viewer_as_sponsorable","title":"<code>query_organization_sponsorship_for_viewer_as_sponsorable</code>  <code>async</code>","text":"<p>The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsorship_for_viewer_as_sponsorable(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The sponsorship from this user/organization to the viewer; that is, the\n    sponsorship you're receiving. Only returns a sponsorship if it is active.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsorship_for_viewer_as_sponsorable(**strip_kwargs())\n\n    op_stack = (\n        \"organization\",\n        \"sponsorshipForViewerAsSponsorable\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsorshipForViewerAsSponsorable\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_newsletters","title":"<code>query_organization_sponsorship_newsletters</code>  <code>async</code>","text":"<p>List of sponsorship updates sent from this sponsorable to sponsors.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorshipNewsletterOrder</code> <p>Ordering options for sponsorship updates returned from the connection.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsorship_newsletters(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorshipNewsletterOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of sponsorship updates sent from this sponsorable to sponsors.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for sponsorship\n            updates returned from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsorship_newsletters(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"sponsorshipNewsletters\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsorshipNewsletters\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsorships_as_maintainer","title":"<code>query_organization_sponsorships_as_maintainer</code>  <code>async</code>","text":"<p>This object's sponsorships as the maintainer.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>include_private</code> <code>bool</code> <p>Whether or not to include private sponsorships in the result set.</p> <code>False</code> <code>order_by</code> <code>SponsorshipOrder</code> <p>Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsorships_as_maintainer(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    include_private: bool = False,\n    order_by: graphql_schema.SponsorshipOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    This object's sponsorships as the maintainer.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from\n            the list.\n        last: Returns the last _n_ elements from the\n            list.\n        include_private: Whether or not to include\n            private sponsorships in the result set.\n        order_by: Ordering options for sponsorships\n            returned from this connection. If left blank, the\n            sponsorships will be ordered based on relevancy to the\n            viewer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsorships_as_maintainer(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            include_private=include_private,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"sponsorshipsAsMaintainer\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsorshipsAsMaintainer\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_sponsorships_as_sponsor","title":"<code>query_organization_sponsorships_as_sponsor</code>  <code>async</code>","text":"<p>This object's sponsorships as the sponsor.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorshipOrder</code> <p>Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_sponsorships_as_sponsor(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorshipOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    This object's sponsorships as the sponsor.\n\n    Args:\n        login: The organization's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for sponsorships\n            returned from this connection. If left blank, the\n            sponsorships will be ordered based on relevancy to the\n            viewer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsorships_as_sponsor(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"sponsorshipsAsSponsor\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"sponsorshipsAsSponsor\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_team","title":"<code>query_organization_team</code>  <code>async</code>","text":"<p>Find an organization's team by its slug.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>slug</code> <code>str</code> <p>The name or slug of the team to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_team(  # noqa\n    login: str,\n    slug: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find an organization's team by its slug.\n\n    Args:\n        login: The organization's login.\n        slug: The name or slug of the team to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).team(\n        **strip_kwargs(\n            slug=slug,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"team\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"team\"]\n</code></pre>"},{"location":"organization/#prefect_github.organization.query_organization_teams","title":"<code>query_organization_teams</code>  <code>async</code>","text":"<p>A list of teams in this organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The organization's login.</p> required <code>user_logins</code> <code>Iterable[str]</code> <p>User logins to filter by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>TeamPrivacy</code> <p>If non-null, filters teams according to privacy.</p> <code>None</code> <code>role</code> <code>TeamRole</code> <p>If non-null, filters teams according to whether the viewer is an admin or member on team.</p> <code>None</code> <code>query</code> <code>str</code> <p>If non-null, filters teams with query on team name and team slug.</p> <code>None</code> <code>order_by</code> <code>TeamOrder</code> <p>Ordering options for teams returned from the connection.</p> <code>None</code> <code>ldap_mapped</code> <code>bool</code> <p>If true, filters teams that are mapped to an LDAP Group (Enterprise only).</p> <code>None</code> <code>root_teams_only</code> <code>bool</code> <p>If true, restrict to only root teams.</p> <code>False</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/organization.py</code> <pre><code>@task\nasync def query_organization_teams(  # noqa\n    login: str,\n    user_logins: Iterable[str],\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.TeamPrivacy = None,\n    role: graphql_schema.TeamRole = None,\n    query: str = None,\n    order_by: graphql_schema.TeamOrder = None,\n    ldap_mapped: bool = None,\n    root_teams_only: bool = False,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of teams in this organization.\n\n    Args:\n        login: The organization's login.\n        user_logins: User logins to filter by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters teams according to privacy.\n        role: If non-null, filters teams according to whether the viewer\n            is an admin or member on team.\n        query: If non-null, filters teams with query on team name and team\n            slug.\n        order_by: Ordering options for teams returned from the connection.\n        ldap_mapped: If true, filters teams that are mapped to an LDAP\n            Group (Enterprise only).\n        root_teams_only: If true, restrict to only root teams.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.organization(**strip_kwargs(login=login,)).teams(\n        **strip_kwargs(\n            user_logins=user_logins,\n            privacy=privacy,\n            role=role,\n            query=query,\n            order_by=order_by,\n            ldap_mapped=ldap_mapped,\n            root_teams_only=root_teams_only,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"organization\",\n        \"teams\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"organization\"][\"teams\"]\n</code></pre>"},{"location":"repository/","title":"Repository","text":""},{"location":"repository/#prefect_github.repository","title":"<code>prefect_github.repository</code>","text":"<p>This is a module containing: GitHub query_repository* tasks and the GitHub storage block.</p>"},{"location":"repository/#prefect_github.repository-classes","title":"Classes","text":""},{"location":"repository/#prefect_github.repository.GitHubRepository","title":"<code>GitHubRepository</code>","text":"<p>             Bases: <code>ReadableDeploymentStorage</code></p> <p>Interact with files stored on GitHub repositories.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>class GitHubRepository(ReadableDeploymentStorage):\n    \"\"\"\n    Interact with files stored on GitHub repositories.\n    \"\"\"\n\n    _block_type_name = \"GitHub Repository\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250\"  # noqa: E501\n    _documentation_url = \"https://prefecthq.github.io/prefect-github/repository/#prefect_github.repository.GitHubRepository\"  # noqa\n\n    repository_url: str = Field(\n        default=...,\n        title=\"Repository URL\",\n        description=(\n            \"The URL of a GitHub repository to read from, in either HTTPS or SSH \"\n            \"format. If you are using a private repo, it must be in the HTTPS format.\"\n        ),\n    )\n    reference: Optional[str] = Field(\n        default=None,\n        description=\"An optional reference to pin to; can be a branch name or tag.\",\n    )\n    credentials: Optional[GitHubCredentials] = Field(\n        default=None,\n        description=\"An optional GitHubCredentials block for using private GitHub repos.\",  # noqa: E501\n    )\n\n    @validator(\"credentials\")\n    def _ensure_credentials_go_with_https(cls, v: str, values: dict):\n        \"\"\"Ensure that credentials are not provided with 'SSH' formatted GitHub URLs.\"\"\"\n        if v is not None:\n            if urlparse(values[\"repository_url\"]).scheme != \"https\":\n                raise InvalidRepositoryURLError(\n                    (\n                        \"Crendentials can only be used with GitHub repositories \"\n                        \"using the 'HTTPS' format. You must either remove the \"\n                        \"credential if you wish to use the 'SSH' format and are not \"\n                        \"using a private repository, or you must change the repository \"\n                        \"url to the 'HTTPS' format. \"\n                    )\n                )\n\n        return v\n\n    def _create_repo_url(self) -&gt; str:\n        \"\"\"Format the URL provided to the `git clone` command.\n\n        For private repos: https://&lt;oauth-key&gt;@github.com/&lt;username&gt;/&lt;repo&gt;.git\n        All other repos should be the same as `self.repository`.\n        \"\"\"\n        url_components = urlparse(self.repository_url)\n        if url_components.scheme == \"https\" and self.credentials is not None:\n            token_value = self.credentials.token.get_secret_value()\n            updated_components = url_components._replace(\n                netloc=f\"{token_value}@{url_components.netloc}\"\n            )\n            full_url = urlunparse(updated_components)\n        else:\n            full_url = self.repository_url\n\n        return full_url\n\n    @staticmethod\n    def _get_paths(\n        dst_dir: Union[str, None], src_dir: str, sub_directory: str\n    ) -&gt; Tuple[str, str]:\n        \"\"\"Returns the fully formed paths for GitHubRepository contents in the form\n        (content_source, content_destination).\n        \"\"\"\n        if dst_dir is None:\n            content_destination = Path(\".\").absolute()\n        else:\n            content_destination = Path(dst_dir)\n\n        content_source = Path(src_dir)\n\n        if sub_directory:\n            content_destination = content_destination.joinpath(sub_directory)\n            content_source = content_source.joinpath(sub_directory)\n\n        return str(content_source), str(content_destination)\n\n    @sync_compatible\n    async def get_directory(\n        self, from_path: Optional[str] = None, local_path: Optional[str] = None\n    ) -&gt; None:\n        \"\"\"\n        Clones a GitHub project specified in `from_path` to the provided `local_path`;\n        defaults to cloning the repository reference configured on the Block to the\n        present working directory.\n\n        Args:\n            from_path: If provided, interpreted as a subdirectory of the underlying\n                repository that will be copied to the provided local path.\n            local_path: A local path to clone to; defaults to present working directory.\n        \"\"\"\n        # CONSTRUCT COMMAND\n        cmd = f\"git clone {self._create_repo_url()}\"\n        if self.reference:\n            cmd += f\" -b {self.reference}\"\n\n        # Limit git history\n        cmd += \" --depth 1\"\n\n        # Clone to a temporary directory and move the subdirectory over\n        with TemporaryDirectory(suffix=\"prefect\") as tmp_dir:\n            tmp_path_str = tmp_dir\n            cmd += f\" {tmp_path_str}\"\n            cmd = shlex.split(cmd)\n\n            err_stream = io.StringIO()\n            out_stream = io.StringIO()\n            process = await run_process(cmd, stream_output=(out_stream, err_stream))\n            if process.returncode != 0:\n                err_stream.seek(0)\n                raise RuntimeError(f\"Failed to pull from remote:\\n {err_stream.read()}\")\n\n            content_source, content_destination = self._get_paths(\n                dst_dir=local_path, src_dir=tmp_path_str, sub_directory=from_path\n            )\n\n            copy_tree(src=content_source, dst=content_destination)\n</code></pre>"},{"location":"repository/#prefect_github.repository.GitHubRepository-functions","title":"Functions","text":""},{"location":"repository/#prefect_github.repository.GitHubRepository.get_directory","title":"<code>get_directory</code>  <code>async</code>","text":"<p>Clones a GitHub project specified in <code>from_path</code> to the provided <code>local_path</code>; defaults to cloning the repository reference configured on the Block to the present working directory.</p> <p>Parameters:</p> Name Type Description Default <code>from_path</code> <code>Optional[str]</code> <p>If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path.</p> <code>None</code> <code>local_path</code> <code>Optional[str]</code> <p>A local path to clone to; defaults to present working directory.</p> <code>None</code> Source code in <code>prefect_github/repository.py</code> <pre><code>@sync_compatible\nasync def get_directory(\n    self, from_path: Optional[str] = None, local_path: Optional[str] = None\n) -&gt; None:\n    \"\"\"\n    Clones a GitHub project specified in `from_path` to the provided `local_path`;\n    defaults to cloning the repository reference configured on the Block to the\n    present working directory.\n\n    Args:\n        from_path: If provided, interpreted as a subdirectory of the underlying\n            repository that will be copied to the provided local path.\n        local_path: A local path to clone to; defaults to present working directory.\n    \"\"\"\n    # CONSTRUCT COMMAND\n    cmd = f\"git clone {self._create_repo_url()}\"\n    if self.reference:\n        cmd += f\" -b {self.reference}\"\n\n    # Limit git history\n    cmd += \" --depth 1\"\n\n    # Clone to a temporary directory and move the subdirectory over\n    with TemporaryDirectory(suffix=\"prefect\") as tmp_dir:\n        tmp_path_str = tmp_dir\n        cmd += f\" {tmp_path_str}\"\n        cmd = shlex.split(cmd)\n\n        err_stream = io.StringIO()\n        out_stream = io.StringIO()\n        process = await run_process(cmd, stream_output=(out_stream, err_stream))\n        if process.returncode != 0:\n            err_stream.seek(0)\n            raise RuntimeError(f\"Failed to pull from remote:\\n {err_stream.read()}\")\n\n        content_source, content_destination = self._get_paths(\n            dst_dir=local_path, src_dir=tmp_path_str, sub_directory=from_path\n        )\n\n        copy_tree(src=content_source, dst=content_destination)\n</code></pre>"},{"location":"repository/#prefect_github.repository-functions","title":"Functions","text":""},{"location":"repository/#prefect_github.repository.query_repository","title":"<code>query_repository</code>  <code>async</code>","text":"<p>The query root of GitHub's GraphQL interface.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The query root of GitHub's GraphQL interface.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a repository\n            referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    )\n\n    op_stack = (\"repository\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_assignable_users","title":"<code>query_repository_assignable_users</code>  <code>async</code>","text":"<p>A list of users that can be assigned to issues in this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>query</code> <code>str</code> <p>Filters users with query on user name and login.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_assignable_users(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    query: str = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users that can be assigned to issues in this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        query: Filters users with query on user name and login.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).assignable_users(\n        **strip_kwargs(\n            query=query,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"assignableUsers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"assignableUsers\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_branch_protection_rules","title":"<code>query_repository_branch_protection_rules</code>  <code>async</code>","text":"<p>A list of branch protection rules for this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_branch_protection_rules(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of branch protection rules for this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).branch_protection_rules(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"branchProtectionRules\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"branchProtectionRules\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_code_of_conduct","title":"<code>query_repository_code_of_conduct</code>  <code>async</code>","text":"<p>Returns the code of conduct for this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_code_of_conduct(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns the code of conduct for this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).code_of_conduct(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"codeOfConduct\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"codeOfConduct\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_collaborators","title":"<code>query_repository_collaborators</code>  <code>async</code>","text":"<p>A list of collaborators associated with the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>affiliation</code> <code>CollaboratorAffiliation</code> <p>Collaborators affiliation level with a repository.</p> <code>None</code> <code>query</code> <code>str</code> <p>Filters users with query on user name and login.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_collaborators(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    affiliation: graphql_schema.CollaboratorAffiliation = None,\n    query: str = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of collaborators associated with the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        affiliation: Collaborators affiliation level with a\n            repository.\n        query: Filters users with query on user name and login.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).collaborators(\n        **strip_kwargs(\n            affiliation=affiliation,\n            query=query,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"collaborators\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"collaborators\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_commit_comments","title":"<code>query_repository_commit_comments</code>  <code>async</code>","text":"<p>A list of commit comments associated with the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_commit_comments(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of commit comments associated with the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).commit_comments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"commitComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"commitComments\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_contact_links","title":"<code>query_repository_contact_links</code>  <code>async</code>","text":"<p>Returns a list of contact links associated to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_contact_links(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a list of contact links associated to the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).contact_links(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"contactLinks\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"contactLinks\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_default_branch_ref","title":"<code>query_repository_default_branch_ref</code>  <code>async</code>","text":"<p>The Ref associated with the repository's default branch.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_default_branch_ref(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The Ref associated with the repository's default branch.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).default_branch_ref(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"defaultBranchRef\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"defaultBranchRef\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_deploy_keys","title":"<code>query_repository_deploy_keys</code>  <code>async</code>","text":"<p>A list of deploy keys that are on this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_deploy_keys(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of deploy keys that are on this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).deploy_keys(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"deployKeys\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"deployKeys\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_deployments","title":"<code>query_repository_deployments</code>  <code>async</code>","text":"<p>Deployments associated with the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>environments</code> <code>Iterable[str]</code> <p>Environments to list deployments for.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>order_by</code> <code>DeploymentOrder</code> <p>Ordering options for deployments returned from the connection.</p> <code>{'field': 'CREATED_AT', 'direction': 'ASC'}</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_deployments(  # noqa\n    owner: str,\n    name: str,\n    environments: Iterable[str],\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    order_by: graphql_schema.DeploymentOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"ASC\",\n    },\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Deployments associated with the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        environments: Environments to list deployments for.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        order_by: Ordering options for deployments returned from the\n            connection.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).deployments(\n        **strip_kwargs(\n            environments=environments,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"deployments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"deployments\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_discussion","title":"<code>query_repository_discussion</code>  <code>async</code>","text":"<p>Returns a single discussion from the current repository by number.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>number</code> <code>int</code> <p>The number for the discussion to be returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_discussion(  # noqa\n    owner: str,\n    name: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a single discussion from the current repository by number.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        number: The number for the discussion to be returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).discussion(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"discussion\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"discussion\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_discussion_categories","title":"<code>query_repository_discussion_categories</code>  <code>async</code>","text":"<p>A list of discussion categories that are available in the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>filter_by_assignable</code> <code>bool</code> <p>Filter by categories that are assignable by the viewer.</p> <code>False</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_discussion_categories(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    filter_by_assignable: bool = False,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of discussion categories that are available in the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the list.\n        filter_by_assignable: Filter by categories that\n            are assignable by the viewer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).discussion_categories(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            filter_by_assignable=filter_by_assignable,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"discussionCategories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"discussionCategories\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_discussion_category","title":"<code>query_repository_discussion_category</code>  <code>async</code>","text":"<p>A discussion category by slug.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>slug</code> <code>str</code> <p>The slug of the discussion category to be returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_discussion_category(  # noqa\n    owner: str,\n    name: str,\n    slug: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A discussion category by slug.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        slug: The slug of the discussion category to be\n            returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).discussion_category(\n        **strip_kwargs(\n            slug=slug,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"discussionCategory\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"discussionCategory\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_discussions","title":"<code>query_repository_discussions</code>  <code>async</code>","text":"<p>A list of discussions that have been opened in the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>category_id</code> <code>str</code> <p>Only include discussions that belong to the category with this ID.</p> <code>None</code> <code>order_by</code> <code>DiscussionOrder</code> <p>Ordering options for discussions returned from the connection.</p> <code>{'field': 'UPDATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_discussions(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    category_id: str = None,\n    order_by: graphql_schema.DiscussionOrder = {\n        \"field\": \"UPDATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of discussions that have been opened in the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        category_id: Only include discussions that belong to the\n            category with this ID.\n        order_by: Ordering options for discussions returned from the\n            connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).discussions(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            category_id=category_id,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"discussions\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"discussions\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_environment","title":"<code>query_repository_environment</code>  <code>async</code>","text":"<p>Returns a single active environment from the current repository by name.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>environment_name</code> <code>str</code> <p>The name of the environment to be returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_environment(  # noqa\n    owner: str,\n    name: str,\n    environment_name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a single active environment from the current repository by name.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        environment_name: The name of the environment to be returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).environment(\n        **strip_kwargs(\n            name=environment_name,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"environment\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"environment\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_environments","title":"<code>query_repository_environments</code>  <code>async</code>","text":"<p>A list of environments that are in this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_environments(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of environments that are in this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).environments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"environments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"environments\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_forks","title":"<code>query_repository_forks</code>  <code>async</code>","text":"<p>A list of direct forked repositories.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.</p> <code>None</code> <code>owner_affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.</p> <code>('OWNER', 'COLLABORATOR')</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_forks(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    affiliations: Iterable[graphql_schema.RepositoryAffiliation] = None,\n    owner_affiliations: Iterable[graphql_schema.RepositoryAffiliation] = (\n        \"OWNER\",\n        \"COLLABORATOR\",\n    ),\n    is_locked: bool = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of direct forked repositories.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        privacy: If non-null, filters repositories according to privacy.\n        order_by: Ordering options for repositories returned from the\n            connection.\n        affiliations: Array of viewer's affiliation options for\n            repositories returned from the connection. For example,\n            OWNER will include only repositories that the current viewer\n            owns.\n        owner_affiliations: Array of owner's affiliation options for\n            repositories returned from the connection. For example,\n            OWNER will include only repositories that the organization\n            or user being viewed owns.\n        is_locked: If non-null, filters repositories according to whether\n            they have been locked.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).forks(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            affiliations=affiliations,\n            owner_affiliations=owner_affiliations,\n            is_locked=is_locked,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"forks\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"forks\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_funding_links","title":"<code>query_repository_funding_links</code>  <code>async</code>","text":"<p>The funding links for this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_funding_links(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The funding links for this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).funding_links(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"fundingLinks\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"fundingLinks\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_interaction_ability","title":"<code>query_repository_interaction_ability</code>  <code>async</code>","text":"<p>The interaction ability settings for this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_interaction_ability(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The interaction ability settings for this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).interaction_ability(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"interactionAbility\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"interactionAbility\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_issue","title":"<code>query_repository_issue</code>  <code>async</code>","text":"<p>Returns a single issue from the current repository by number.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>number</code> <code>int</code> <p>The number for the issue to be returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_issue(  # noqa\n    owner: str,\n    name: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a single issue from the current repository by number.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        number: The number for the issue to be returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).issue(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"issue\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"issue\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_issue_or_pull_request","title":"<code>query_repository_issue_or_pull_request</code>  <code>async</code>","text":"<p>Returns a single issue-like object from the current repository by number.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>number</code> <code>int</code> <p>The number for the issue to be returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_issue_or_pull_request(  # noqa\n    owner: str,\n    name: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a single issue-like object from the current repository by number.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        number: The number for the issue to be returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).issue_or_pull_request(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"issueOrPullRequest\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"issueOrPullRequest\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_issue_templates","title":"<code>query_repository_issue_templates</code>  <code>async</code>","text":"<p>Returns a list of issue templates associated to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_issue_templates(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a list of issue templates associated to the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).issue_templates(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"issueTemplates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"issueTemplates\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_issues","title":"<code>query_repository_issues</code>  <code>async</code>","text":"<p>A list of issues that have been opened in the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>labels</code> <code>Iterable[str]</code> <p>A list of label names to filter the pull requests by.</p> required <code>states</code> <code>Iterable[IssueState]</code> <p>A list of states to filter the issues by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>order_by</code> <code>IssueOrder</code> <p>Ordering options for issues returned from the connection.</p> <code>None</code> <code>filter_by</code> <code>IssueFilters</code> <p>Filtering options for issues returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_issues(  # noqa\n    owner: str,\n    name: str,\n    labels: Iterable[str],\n    states: Iterable[graphql_schema.IssueState],\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    order_by: graphql_schema.IssueOrder = None,\n    filter_by: graphql_schema.IssueFilters = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of issues that have been opened in the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        labels: A list of label names to filter the pull requests by.\n        states: A list of states to filter the issues by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        order_by: Ordering options for issues returned from the\n            connection.\n        filter_by: Filtering options for issues returned from the\n            connection.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).issues(\n        **strip_kwargs(\n            labels=labels,\n            states=states,\n            order_by=order_by,\n            filter_by=filter_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"issues\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"issues\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_label","title":"<code>query_repository_label</code>  <code>async</code>","text":"<p>Returns a single label by name.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>label_name</code> <code>str</code> <p>Label name.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_label(  # noqa\n    owner: str,\n    name: str,\n    label_name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a single label by name.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        label_name: Label name.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).label(\n        **strip_kwargs(\n            name=label_name,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"label\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"label\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_labels","title":"<code>query_repository_labels</code>  <code>async</code>","text":"<p>A list of labels associated with the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>order_by</code> <code>LabelOrder</code> <p>Ordering options for labels returned from the connection.</p> <code>{'field': 'CREATED_AT', 'direction': 'ASC'}</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>query</code> <code>str</code> <p>If provided, searches labels by name and description.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_labels(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    order_by: graphql_schema.LabelOrder = {\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    query: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of labels associated with the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        order_by: Ordering options for labels returned from the\n            connection.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        query: If provided, searches labels by name and description.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).labels(\n        **strip_kwargs(\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            query=query,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"labels\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"labels\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_languages","title":"<code>query_repository_languages</code>  <code>async</code>","text":"<p>A list containing a breakdown of the language composition of the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>LanguageOrder</code> <p>Order for connection.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_languages(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.LanguageOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list containing a breakdown of the language composition of the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Order for connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).languages(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"languages\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"languages\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_latest_release","title":"<code>query_repository_latest_release</code>  <code>async</code>","text":"<p>Get the latest release for the repository if one exists.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_latest_release(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Get the latest release for the repository if one exists.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).latest_release(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"latestRelease\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"latestRelease\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_license_info","title":"<code>query_repository_license_info</code>  <code>async</code>","text":"<p>The license associated with the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_license_info(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The license associated with the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).license_info(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"licenseInfo\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"licenseInfo\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_mentionable_users","title":"<code>query_repository_mentionable_users</code>  <code>async</code>","text":"<p>A list of Users that can be mentioned in the context of the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>query</code> <code>str</code> <p>Filters users with query on user name and login.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_mentionable_users(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    query: str = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of Users that can be mentioned in the context of the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        query: Filters users with query on user name and login.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).mentionable_users(\n        **strip_kwargs(\n            query=query,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"mentionableUsers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"mentionableUsers\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_milestone","title":"<code>query_repository_milestone</code>  <code>async</code>","text":"<p>Returns a single milestone from the current repository by number.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>number</code> <code>int</code> <p>The number for the milestone to be returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_milestone(  # noqa\n    owner: str,\n    name: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a single milestone from the current repository by number.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        number: The number for the milestone to be returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).milestone(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"milestone\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"milestone\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_milestones","title":"<code>query_repository_milestones</code>  <code>async</code>","text":"<p>A list of milestones associated with the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>states</code> <code>Iterable[MilestoneState]</code> <p>Filter by the state of the milestones.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>MilestoneOrder</code> <p>Ordering options for milestones.</p> <code>None</code> <code>query</code> <code>str</code> <p>Filters milestones with a query on the title.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_milestones(  # noqa\n    owner: str,\n    name: str,\n    states: Iterable[graphql_schema.MilestoneState],\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.MilestoneOrder = None,\n    query: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of milestones associated with the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        states: Filter by the state of the milestones.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Ordering options for milestones.\n        query: Filters milestones with a query on the title.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).milestones(\n        **strip_kwargs(\n            states=states,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n            query=query,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"milestones\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"milestones\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_object","title":"<code>query_repository_object</code>  <code>async</code>","text":"<p>A Git object in the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>oid</code> <code>datetime</code> <p>The Git object ID.</p> <code>None</code> <code>expression</code> <code>str</code> <p>A Git revision expression suitable for rev-parse.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_object(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    oid: datetime = None,\n    expression: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A Git object in the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        oid: The Git object ID.\n        expression: A Git revision expression suitable for rev-parse.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).object(\n        **strip_kwargs(\n            oid=oid,\n            expression=expression,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"object\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"object\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_owner","title":"<code>query_repository_owner</code>  <code>async</code>","text":"<p>The User owner of the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_owner(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The User owner of the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).owner(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"owner\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"owner\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_packages","title":"<code>query_repository_packages</code>  <code>async</code>","text":"<p>A list of packages under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>names</code> <code>Iterable[str]</code> <p>Find packages by their names.</p> <code>None</code> <code>repository_id</code> <code>str</code> <p>Find packages in a repository by ID.</p> <code>None</code> <code>package_type</code> <code>PackageType</code> <p>Filter registry package by type.</p> <code>None</code> <code>order_by</code> <code>PackageOrder</code> <p>Ordering of the returned packages.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_packages(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    names: Iterable[str] = None,\n    repository_id: str = None,\n    package_type: graphql_schema.PackageType = None,\n    order_by: graphql_schema.PackageOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of packages under the owner.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        names: Find packages by their names.\n        repository_id: Find packages in a repository by ID.\n        package_type: Filter registry package by type.\n        order_by: Ordering of the returned packages.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).packages(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            names=names,\n            repository_id=repository_id,\n            package_type=package_type,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"packages\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"packages\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_pinned_discussions","title":"<code>query_repository_pinned_discussions</code>  <code>async</code>","text":"<p>A list of discussions that have been pinned in this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_pinned_discussions(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of discussions that have been pinned in this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).pinned_discussions(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"pinnedDiscussions\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"pinnedDiscussions\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_pinned_issues","title":"<code>query_repository_pinned_issues</code>  <code>async</code>","text":"<p>A list of pinned issues for this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_pinned_issues(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of pinned issues for this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).pinned_issues(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"pinnedIssues\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"pinnedIssues\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_primary_language","title":"<code>query_repository_primary_language</code>  <code>async</code>","text":"<p>The primary language of the repository's code.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_primary_language(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The primary language of the repository's code.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).primary_language(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"primaryLanguage\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"primaryLanguage\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_project","title":"<code>query_repository_project</code>  <code>async</code>","text":"<p>Find project by number.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>number</code> <code>int</code> <p>The project number to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_project(  # noqa\n    owner: str,\n    name: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find project by number.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        number: The project number to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).project(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"project\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"project\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_project_next","title":"<code>query_repository_project_next</code>  <code>async</code>","text":"<p>Finds and returns the Project (beta) according to the provided Project (beta) number.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>number</code> <code>int</code> <p>The ProjectNext number.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_project_next(  # noqa\n    owner: str,\n    name: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Finds and returns the Project (beta) according to the provided Project (beta)\n    number.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        number: The ProjectNext number.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).project_next(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"projectNext\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"projectNext\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_project_v2","title":"<code>query_repository_project_v2</code>  <code>async</code>","text":"<p>Finds and returns the Project according to the provided Project number.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>number</code> <code>int</code> <p>The Project number.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_project_v2(  # noqa\n    owner: str,\n    name: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Finds and returns the Project according to the provided Project number.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        number: The Project number.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).project_v2(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"projectV2\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"projectV2\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_projects","title":"<code>query_repository_projects</code>  <code>async</code>","text":"<p>A list of projects under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>states</code> <code>Iterable[ProjectState]</code> <p>A list of states to filter the projects by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>order_by</code> <code>ProjectOrder</code> <p>Ordering options for projects returned from the connection.</p> <code>None</code> <code>search</code> <code>str</code> <p>Query to search projects by, currently only searching by name.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_projects(  # noqa\n    owner: str,\n    name: str,\n    states: Iterable[graphql_schema.ProjectState],\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    order_by: graphql_schema.ProjectOrder = None,\n    search: str = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects under the owner.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        states: A list of states to filter the projects by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        order_by: Ordering options for projects returned from the\n            connection.\n        search: Query to search projects by, currently only searching\n            by name.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).projects(\n        **strip_kwargs(\n            states=states,\n            order_by=order_by,\n            search=search,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"projects\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"projects\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_projects_next","title":"<code>query_repository_projects_next</code>  <code>async</code>","text":"<p>List of projects (beta) linked to this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>query</code> <code>str</code> <p>A project (beta) to search for linked to the repo.</p> <code>None</code> <code>sort_by</code> <code>ProjectNextOrderField</code> <p>How to order the returned project (beta) objects.</p> <code>'TITLE'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_projects_next(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    query: str = None,\n    sort_by: graphql_schema.ProjectNextOrderField = \"TITLE\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of projects (beta) linked to this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        query: A project (beta) to search for linked to the repo.\n        sort_by: How to order the returned project (beta) objects.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).projects_next(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            query=query,\n            sort_by=sort_by,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"projectsNext\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"projectsNext\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_projects_v2","title":"<code>query_repository_projects_v2</code>  <code>async</code>","text":"<p>List of projects linked to this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>query</code> <code>str</code> <p>A project to search for linked to the repo.</p> <code>None</code> <code>order_by</code> <code>ProjectV2Order</code> <p>How to order the returned projects.</p> <code>{'field': 'NUMBER', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_projects_v2(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    query: str = None,\n    order_by: graphql_schema.ProjectV2Order = {\"field\": \"NUMBER\", \"direction\": \"DESC\"},\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of projects linked to this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        query: A project to search for linked to the repo.\n        order_by: How to order the returned projects.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).projects_v2(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            query=query,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"projectsV2\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"projectsV2\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_pull_request","title":"<code>query_repository_pull_request</code>  <code>async</code>","text":"<p>Returns a single pull request from the current repository by number.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>number</code> <code>int</code> <p>The number for the pull request to be returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_pull_request(  # noqa\n    owner: str,\n    name: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a single pull request from the current repository by number.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        number: The number for the pull request to be returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).pull_request(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"pullRequest\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"pullRequest\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_pull_request_templates","title":"<code>query_repository_pull_request_templates</code>  <code>async</code>","text":"<p>Returns a list of pull request templates associated to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_pull_request_templates(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a list of pull request templates associated to the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).pull_request_templates(**strip_kwargs())\n\n    op_stack = (\n        \"repository\",\n        \"pullRequestTemplates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"pullRequestTemplates\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_pull_requests","title":"<code>query_repository_pull_requests</code>  <code>async</code>","text":"<p>A list of pull requests that have been opened in the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>states</code> <code>Iterable[PullRequestState]</code> <p>A list of states to filter the pull requests by.</p> required <code>labels</code> <code>Iterable[str]</code> <p>A list of label names to filter the pull requests by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>head_ref_name</code> <code>str</code> <p>The head ref name to filter the pull requests by.</p> <code>None</code> <code>base_ref_name</code> <code>str</code> <p>The base ref name to filter the pull requests by.</p> <code>None</code> <code>order_by</code> <code>IssueOrder</code> <p>Ordering options for pull requests returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_pull_requests(  # noqa\n    owner: str,\n    name: str,\n    states: Iterable[graphql_schema.PullRequestState],\n    labels: Iterable[str],\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    head_ref_name: str = None,\n    base_ref_name: str = None,\n    order_by: graphql_schema.IssueOrder = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of pull requests that have been opened in the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        states: A list of states to filter the pull requests by.\n        labels: A list of label names to filter the pull requests\n            by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        head_ref_name: The head ref name to filter the pull\n            requests by.\n        base_ref_name: The base ref name to filter the pull\n            requests by.\n        order_by: Ordering options for pull requests returned from\n            the connection.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).pull_requests(\n        **strip_kwargs(\n            states=states,\n            labels=labels,\n            head_ref_name=head_ref_name,\n            base_ref_name=base_ref_name,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"pullRequests\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"pullRequests\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_recent_projects","title":"<code>query_repository_recent_projects</code>  <code>async</code>","text":"<p>Recent projects that this user has modified in the context of the owner.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_recent_projects(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Recent projects that this user has modified in the context of the owner.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).recent_projects(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"recentProjects\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"recentProjects\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_ref","title":"<code>query_repository_ref</code>  <code>async</code>","text":"<p>Fetch a given ref from the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>qualified_name</code> <code>str</code> <p>The ref to retrieve. Fully qualified matches are checked in order (<code>refs/heads/master</code>) before falling back onto checks for short name matches (<code>master</code>).</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_ref(  # noqa\n    owner: str,\n    name: str,\n    qualified_name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Fetch a given ref from the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        qualified_name: The ref to retrieve. Fully qualified matches are\n            checked in order (`refs/heads/master`) before falling back\n            onto checks for short name matches (`master`).\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).ref(\n        **strip_kwargs(\n            qualified_name=qualified_name,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"ref\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"ref\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_refs","title":"<code>query_repository_refs</code>  <code>async</code>","text":"<p>Fetch a list of refs from the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>ref_prefix</code> <code>str</code> <p>A ref name prefix like <code>refs/heads/</code>, <code>refs/tags/</code>, etc.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>query</code> <code>str</code> <p>Filters refs with query on name.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>direction</code> <code>OrderDirection</code> <code>None</code> <code>order_by</code> <code>RefOrder</code> <p>Ordering options for refs returned from the connection.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_refs(  # noqa\n    owner: str,\n    name: str,\n    ref_prefix: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    query: str = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    direction: graphql_schema.OrderDirection = None,\n    order_by: graphql_schema.RefOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Fetch a list of refs from the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        ref_prefix: A ref name prefix like `refs/heads/`, `refs/tags/`,\n            etc.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        query: Filters refs with query on name.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        direction: DEPRECATED: use orderBy. The ordering direction.\n        order_by: Ordering options for refs returned from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).refs(\n        **strip_kwargs(\n            ref_prefix=ref_prefix,\n            query=query,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            direction=direction,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"refs\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"refs\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_release","title":"<code>query_repository_release</code>  <code>async</code>","text":"<p>Lookup a single release given various criteria.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>tag_name</code> <code>str</code> <p>The name of the Tag the Release was created from.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_release(  # noqa\n    owner: str,\n    name: str,\n    tag_name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Lookup a single release given various criteria.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        tag_name: The name of the Tag the Release was created from.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).release(\n        **strip_kwargs(\n            tag_name=tag_name,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"release\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"release\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_releases","title":"<code>query_repository_releases</code>  <code>async</code>","text":"<p>List of releases which are dependent on this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>ReleaseOrder</code> <p>Order for connection.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_releases(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.ReleaseOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of releases which are dependent on this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Order for connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).releases(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"releases\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"releases\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_repository_topics","title":"<code>query_repository_repository_topics</code>  <code>async</code>","text":"<p>A list of applied repository-topic associations for this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_repository_topics(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of applied repository-topic associations for this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).repository_topics(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"repositoryTopics\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"repositoryTopics\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_stargazers","title":"<code>query_repository_stargazers</code>  <code>async</code>","text":"<p>A list of users who have starred this starrable.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>StarOrder</code> <p>Order for connection.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_stargazers(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.StarOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users who have starred this starrable.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Order for connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).stargazers(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"stargazers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"stargazers\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_submodules","title":"<code>query_repository_submodules</code>  <code>async</code>","text":"<p>Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_submodules(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Returns a list of all submodules in this repository parsed from the .gitmodules\n    file as of the default branch's HEAD commit.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).submodules(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"submodules\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"submodules\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_vulnerability_alerts","title":"<code>query_repository_vulnerability_alerts</code>  <code>async</code>","text":"<p>A list of vulnerability alerts that are on this repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>states</code> <code>Iterable[RepositoryVulnerabilityAlertState]</code> <p>Filter by the state of the alert.</p> required <code>dependency_scopes</code> <code>Iterable[RepositoryVulnerabilityAlertDependencyScope]</code> <p>Filter by the scope of the alert's dependency.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_vulnerability_alerts(  # noqa\n    owner: str,\n    name: str,\n    states: Iterable[graphql_schema.RepositoryVulnerabilityAlertState],\n    dependency_scopes: Iterable[\n        graphql_schema.RepositoryVulnerabilityAlertDependencyScope\n    ],\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of vulnerability alerts that are on this repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        states: Filter by the state of the alert.\n        dependency_scopes: Filter by the scope of the\n            alert's dependency.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).vulnerability_alerts(\n        **strip_kwargs(\n            states=states,\n            dependency_scopes=dependency_scopes,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"vulnerabilityAlerts\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"vulnerabilityAlerts\"]\n</code></pre>"},{"location":"repository/#prefect_github.repository.query_repository_watchers","title":"<code>query_repository_watchers</code>  <code>async</code>","text":"<p>A list of users watching the repository.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The login field of a user or organization.</p> required <code>name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository.py</code> <pre><code>@task\nasync def query_repository_watchers(  # noqa\n    owner: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users watching the repository.\n\n    Args:\n        owner: The login field of a user or organization.\n        name: The name of the repository.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository(\n        **strip_kwargs(\n            owner=owner,\n            name=name,\n            follow_renames=follow_renames,\n        )\n    ).watchers(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"repository\",\n        \"watchers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repository\"][\"watchers\"]\n</code></pre>"},{"location":"repository_owner/","title":"Repository Owner","text":""},{"location":"repository_owner/#prefect_github.repository_owner","title":"<code>prefect_github.repository_owner</code>","text":"<p>This is a module containing: GitHub query_repository_owner* tasks</p>"},{"location":"repository_owner/#prefect_github.repository_owner-classes","title":"Classes","text":""},{"location":"repository_owner/#prefect_github.repository_owner-functions","title":"Functions","text":""},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner","title":"<code>query_repository_owner</code>  <code>async</code>","text":"<p>The query root of GitHub's GraphQL interface.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The username to lookup the owner by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository_owner.py</code> <pre><code>@task\nasync def query_repository_owner(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The query root of GitHub's GraphQL interface.\n\n    Args:\n        login: The username to lookup the owner by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository_owner(\n        **strip_kwargs(\n            login=login,\n        )\n    )\n\n    op_stack = (\"repositoryOwner\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repositoryOwner\"]\n</code></pre>"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner_repositories","title":"<code>query_repository_owner_repositories</code>  <code>async</code>","text":"<p>A list of repositories that the user owns.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The username to lookup the owner by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.</p> <code>None</code> <code>owner_affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.</p> <code>('OWNER', 'COLLABORATOR')</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>is_fork</code> <code>bool</code> <p>If non-null, filters repositories according to whether they are forks of another repository.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository_owner.py</code> <pre><code>@task\nasync def query_repository_owner_repositories(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    affiliations: Iterable[graphql_schema.RepositoryAffiliation] = None,\n    owner_affiliations: Iterable[graphql_schema.RepositoryAffiliation] = (\n        \"OWNER\",\n        \"COLLABORATOR\",\n    ),\n    is_locked: bool = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    is_fork: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories that the user owns.\n\n    Args:\n        login: The username to lookup the owner by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters repositories according to\n            privacy.\n        order_by: Ordering options for repositories returned from\n            the connection.\n        affiliations: Array of viewer's affiliation options for\n            repositories returned from the connection. For example,\n            OWNER will include only repositories that the current viewer\n            owns.\n        owner_affiliations: Array of owner's affiliation options\n            for repositories returned from the connection. For example,\n            OWNER will include only repositories that the organization\n            or user being viewed owns.\n        is_locked: If non-null, filters repositories according to\n            whether they have been locked.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        is_fork: If non-null, filters repositories according to\n            whether they are forks of another repository.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository_owner(**strip_kwargs(login=login,)).repositories(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            affiliations=affiliations,\n            owner_affiliations=owner_affiliations,\n            is_locked=is_locked,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            is_fork=is_fork,\n        )\n    )\n\n    op_stack = (\n        \"repositoryOwner\",\n        \"repositories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repositoryOwner\"][\"repositories\"]\n</code></pre>"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner_repository","title":"<code>query_repository_owner_repository</code>  <code>async</code>","text":"<p>Find Repository.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The username to lookup the owner by.</p> required <code>name</code> <code>str</code> <p>Name of Repository to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/repository_owner.py</code> <pre><code>@task\nasync def query_repository_owner_repository(  # noqa\n    login: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find Repository.\n\n    Args:\n        login: The username to lookup the owner by.\n        name: Name of Repository to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.repository_owner(**strip_kwargs(login=login,)).repository(\n        **strip_kwargs(\n            name=name,\n            follow_renames=follow_renames,\n        )\n    )\n\n    op_stack = (\n        \"repositoryOwner\",\n        \"repository\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"repositoryOwner\"][\"repository\"]\n</code></pre>"},{"location":"user/","title":"User","text":""},{"location":"user/#prefect_github.user","title":"<code>prefect_github.user</code>","text":"<p>This is a module containing: GitHub query_user* tasks</p>"},{"location":"user/#prefect_github.user-classes","title":"Classes","text":""},{"location":"user/#prefect_github.user-functions","title":"Functions","text":""},{"location":"user/#prefect_github.user.query_user","title":"<code>query_user</code>  <code>async</code>","text":"<p>The query root of GitHub's GraphQL interface.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The query root of GitHub's GraphQL interface.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(\n        **strip_kwargs(\n            login=login,\n        )\n    )\n\n    op_stack = (\"user\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_commit_comments","title":"<code>query_user_commit_comments</code>  <code>async</code>","text":"<p>A list of commit comments made by this user.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_commit_comments(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of commit comments made by this user.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).commit_comments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"commitComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"commitComments\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_contributions_collection","title":"<code>query_user_contributions_collection</code>  <code>async</code>","text":"<p>The collection of contributions this user has made to different repositories.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>organization_id</code> <code>str</code> <p>The ID of the organization used to filter contributions.</p> <code>None</code> <code>from_</code> <code>datetime</code> <p>Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.</p> <code>None</code> <code>to</code> <code>datetime</code> <p>Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_contributions_collection(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    organization_id: str = None,\n    from_: datetime = None,\n    to: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The collection of contributions this user has made to different repositories.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        organization_id: The ID of the organization\n            used to filter contributions.\n        from_: Only contributions made at this time or\n            later will be counted. If omitted, defaults to a year ago.\n        to: Only contributions made before and up to\n            (including) this time will be counted. If omitted, defaults\n            to the current time or one year from the provided from\n            argument.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).contributions_collection(\n        **strip_kwargs(\n            organization_id=organization_id,\n            from_=from_,\n            to=to,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"contributionsCollection\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"contributionsCollection\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_followers","title":"<code>query_user_followers</code>  <code>async</code>","text":"<p>A list of users the given user is followed by.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_followers(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users the given user is followed by.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).followers(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"followers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"followers\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_following","title":"<code>query_user_following</code>  <code>async</code>","text":"<p>A list of users the given user is following.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_following(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users the given user is following.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).following(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"following\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"following\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_gist","title":"<code>query_user_gist</code>  <code>async</code>","text":"<p>Find gist by repo name.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>name</code> <code>str</code> <p>The gist name to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_gist(  # noqa\n    login: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find gist by repo name.\n\n    Args:\n        login: The user's login.\n        name: The gist name to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).gist(\n        **strip_kwargs(\n            name=name,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"gist\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"gist\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_gist_comments","title":"<code>query_user_gist_comments</code>  <code>async</code>","text":"<p>A list of gist comments made by this user.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_gist_comments(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of gist comments made by this user.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).gist_comments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"gistComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"gistComments\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_gists","title":"<code>query_user_gists</code>  <code>async</code>","text":"<p>A list of the Gists the user has created.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>GistPrivacy</code> <p>Filters Gists according to privacy.</p> <code>None</code> <code>order_by</code> <code>GistOrder</code> <p>Ordering options for gists returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_gists(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.GistPrivacy = None,\n    order_by: graphql_schema.GistOrder = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of the Gists the user has created.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: Filters Gists according to privacy.\n        order_by: Ordering options for gists returned from the connection.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).gists(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"gists\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"gists\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_interaction_ability","title":"<code>query_user_interaction_ability</code>  <code>async</code>","text":"<p>The interaction ability settings for this user.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_interaction_ability(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The interaction ability settings for this user.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(\n        **strip_kwargs(\n            login=login,\n        )\n    ).interaction_ability(**strip_kwargs())\n\n    op_stack = (\n        \"user\",\n        \"interactionAbility\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"interactionAbility\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_issue_comments","title":"<code>query_user_issue_comments</code>  <code>async</code>","text":"<p>A list of issue comments made by this user.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>order_by</code> <code>IssueCommentOrder</code> <p>Ordering options for issue comments returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_issue_comments(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    order_by: graphql_schema.IssueCommentOrder = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of issue comments made by this user.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        order_by: Ordering options for issue comments returned\n            from the connection.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).issue_comments(\n        **strip_kwargs(\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"issueComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"issueComments\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_issues","title":"<code>query_user_issues</code>  <code>async</code>","text":"<p>A list of issues associated with this user.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>labels</code> <code>Iterable[str]</code> <p>A list of label names to filter the pull requests by.</p> required <code>states</code> <code>Iterable[IssueState]</code> <p>A list of states to filter the issues by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>order_by</code> <code>IssueOrder</code> <p>Ordering options for issues returned from the connection.</p> <code>None</code> <code>filter_by</code> <code>IssueFilters</code> <p>Filtering options for issues returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_issues(  # noqa\n    login: str,\n    labels: Iterable[str],\n    states: Iterable[graphql_schema.IssueState],\n    github_credentials: GitHubCredentials,\n    order_by: graphql_schema.IssueOrder = None,\n    filter_by: graphql_schema.IssueFilters = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of issues associated with this user.\n\n    Args:\n        login: The user's login.\n        labels: A list of label names to filter the pull requests by.\n        states: A list of states to filter the issues by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        order_by: Ordering options for issues returned from the\n            connection.\n        filter_by: Filtering options for issues returned from the\n            connection.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).issues(\n        **strip_kwargs(\n            labels=labels,\n            states=states,\n            order_by=order_by,\n            filter_by=filter_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"issues\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"issues\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_item_showcase","title":"<code>query_user_item_showcase</code>  <code>async</code>","text":"<p>Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_item_showcase(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Showcases a selection of repositories and gists that the profile owner has\n    either curated or that have been selected automatically based on popularity.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(\n        **strip_kwargs(\n            login=login,\n        )\n    ).item_showcase(**strip_kwargs())\n\n    op_stack = (\n        \"user\",\n        \"itemShowcase\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"itemShowcase\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_organization","title":"<code>query_user_organization</code>  <code>async</code>","text":"<p>Find an organization by its login that the user belongs to.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>organization_login</code> <code>str</code> <p>The login of the organization to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_organization(  # noqa\n    login: str,\n    organization_login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find an organization by its login that the user belongs to.\n\n    Args:\n        login: The user's login.\n        organization_login: The login of the organization to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).organization(\n        **strip_kwargs(\n            login=organization_login,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"organization\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"organization\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_organizations","title":"<code>query_user_organizations</code>  <code>async</code>","text":"<p>A list of organizations the user belongs to.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_organizations(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of organizations the user belongs to.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).organizations(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"organizations\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"organizations\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_packages","title":"<code>query_user_packages</code>  <code>async</code>","text":"<p>A list of packages under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>names</code> <code>Iterable[str]</code> <p>Find packages by their names.</p> <code>None</code> <code>repository_id</code> <code>str</code> <p>Find packages in a repository by ID.</p> <code>None</code> <code>package_type</code> <code>PackageType</code> <p>Filter registry package by type.</p> <code>None</code> <code>order_by</code> <code>PackageOrder</code> <p>Ordering of the returned packages.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_packages(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    names: Iterable[str] = None,\n    repository_id: str = None,\n    package_type: graphql_schema.PackageType = None,\n    order_by: graphql_schema.PackageOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of packages under the owner.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        names: Find packages by their names.\n        repository_id: Find packages in a repository by ID.\n        package_type: Filter registry package by type.\n        order_by: Ordering of the returned packages.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).packages(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            names=names,\n            repository_id=repository_id,\n            package_type=package_type,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"packages\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"packages\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_pinnable_items","title":"<code>query_user_pinnable_items</code>  <code>async</code>","text":"<p>A list of repositories and gists this profile owner can pin to their profile.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>types</code> <code>Iterable[PinnableItemType]</code> <p>Filter the types of pinnable items that are returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_pinnable_items(  # noqa\n    login: str,\n    types: Iterable[graphql_schema.PinnableItemType],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories and gists this profile owner can pin to their profile.\n\n    Args:\n        login: The user's login.\n        types: Filter the types of pinnable items that are\n            returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).pinnable_items(\n        **strip_kwargs(\n            types=types,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"pinnableItems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"pinnableItems\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_pinned_items","title":"<code>query_user_pinned_items</code>  <code>async</code>","text":"<p>A list of repositories and gists this profile owner has pinned to their profile.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>types</code> <code>Iterable[PinnableItemType]</code> <p>Filter the types of pinned items that are returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_pinned_items(  # noqa\n    login: str,\n    types: Iterable[graphql_schema.PinnableItemType],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories and gists this profile owner has pinned to their profile.\n\n    Args:\n        login: The user's login.\n        types: Filter the types of pinned items that are returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).pinned_items(\n        **strip_kwargs(\n            types=types,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"pinnedItems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"pinnedItems\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_project","title":"<code>query_user_project</code>  <code>async</code>","text":"<p>Find project by number.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>number</code> <code>int</code> <p>The project number to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_project(  # noqa\n    login: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find project by number.\n\n    Args:\n        login: The user's login.\n        number: The project number to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).project(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"project\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"project\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_project_next","title":"<code>query_user_project_next</code>  <code>async</code>","text":"<p>Find a project by project (beta) number.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>number</code> <code>int</code> <p>The project (beta) number.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_project_next(  # noqa\n    login: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find a project by project (beta) number.\n\n    Args:\n        login: The user's login.\n        number: The project (beta) number.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).project_next(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"projectNext\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"projectNext\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_project_v2","title":"<code>query_user_project_v2</code>  <code>async</code>","text":"<p>Find a project by number.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>number</code> <code>int</code> <p>The project number.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_project_v2(  # noqa\n    login: str,\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find a project by number.\n\n    Args:\n        login: The user's login.\n        number: The project number.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).project_v2(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"projectV2\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"projectV2\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_projects","title":"<code>query_user_projects</code>  <code>async</code>","text":"<p>A list of projects under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>states</code> <code>Iterable[ProjectState]</code> <p>A list of states to filter the projects by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>order_by</code> <code>ProjectOrder</code> <p>Ordering options for projects returned from the connection.</p> <code>None</code> <code>search</code> <code>str</code> <p>Query to search projects by, currently only searching by name.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_projects(  # noqa\n    login: str,\n    states: Iterable[graphql_schema.ProjectState],\n    github_credentials: GitHubCredentials,\n    order_by: graphql_schema.ProjectOrder = None,\n    search: str = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects under the owner.\n\n    Args:\n        login: The user's login.\n        states: A list of states to filter the projects by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        order_by: Ordering options for projects returned from the\n            connection.\n        search: Query to search projects by, currently only searching\n            by name.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).projects(\n        **strip_kwargs(\n            states=states,\n            order_by=order_by,\n            search=search,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"projects\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"projects\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_projects_next","title":"<code>query_user_projects_next</code>  <code>async</code>","text":"<p>A list of projects (beta) under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>query</code> <code>str</code> <p>A project (beta) to search for under the the owner.</p> <code>None</code> <code>sort_by</code> <code>ProjectNextOrderField</code> <p>How to order the returned projects (beta).</p> <code>'TITLE'</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_projects_next(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    query: str = None,\n    sort_by: graphql_schema.ProjectNextOrderField = \"TITLE\",\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects (beta) under the owner.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        query: A project (beta) to search for under the the owner.\n        sort_by: How to order the returned projects (beta).\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).projects_next(\n        **strip_kwargs(\n            query=query,\n            sort_by=sort_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"projectsNext\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"projectsNext\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_projects_v2","title":"<code>query_user_projects_v2</code>  <code>async</code>","text":"<p>A list of projects under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>query</code> <code>str</code> <p>A project to search for under the the owner.</p> <code>None</code> <code>order_by</code> <code>ProjectV2Order</code> <p>How to order the returned projects.</p> <code>{'field': 'NUMBER', 'direction': 'DESC'}</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_projects_v2(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    query: str = None,\n    order_by: graphql_schema.ProjectV2Order = {\"field\": \"NUMBER\", \"direction\": \"DESC\"},\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects under the owner.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        query: A project to search for under the the owner.\n        order_by: How to order the returned projects.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).projects_v2(\n        **strip_kwargs(\n            query=query,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"projectsV2\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"projectsV2\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_public_keys","title":"<code>query_user_public_keys</code>  <code>async</code>","text":"<p>A list of public keys associated with this user.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_public_keys(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of public keys associated with this user.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).public_keys(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"publicKeys\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"publicKeys\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_pull_requests","title":"<code>query_user_pull_requests</code>  <code>async</code>","text":"<p>A list of pull requests associated with this user.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>states</code> <code>Iterable[PullRequestState]</code> <p>A list of states to filter the pull requests by.</p> required <code>labels</code> <code>Iterable[str]</code> <p>A list of label names to filter the pull requests by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>head_ref_name</code> <code>str</code> <p>The head ref name to filter the pull requests by.</p> <code>None</code> <code>base_ref_name</code> <code>str</code> <p>The base ref name to filter the pull requests by.</p> <code>None</code> <code>order_by</code> <code>IssueOrder</code> <p>Ordering options for pull requests returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_pull_requests(  # noqa\n    login: str,\n    states: Iterable[graphql_schema.PullRequestState],\n    labels: Iterable[str],\n    github_credentials: GitHubCredentials,\n    head_ref_name: str = None,\n    base_ref_name: str = None,\n    order_by: graphql_schema.IssueOrder = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of pull requests associated with this user.\n\n    Args:\n        login: The user's login.\n        states: A list of states to filter the pull requests by.\n        labels: A list of label names to filter the pull requests\n            by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        head_ref_name: The head ref name to filter the pull\n            requests by.\n        base_ref_name: The base ref name to filter the pull\n            requests by.\n        order_by: Ordering options for pull requests returned from\n            the connection.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).pull_requests(\n        **strip_kwargs(\n            states=states,\n            labels=labels,\n            head_ref_name=head_ref_name,\n            base_ref_name=base_ref_name,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"pullRequests\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"pullRequests\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_recent_projects","title":"<code>query_user_recent_projects</code>  <code>async</code>","text":"<p>Recent projects that this user has modified in the context of the owner.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_recent_projects(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Recent projects that this user has modified in the context of the owner.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).recent_projects(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"recentProjects\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"recentProjects\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_repositories","title":"<code>query_user_repositories</code>  <code>async</code>","text":"<p>A list of repositories that the user owns.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.</p> <code>None</code> <code>owner_affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.</p> <code>('OWNER', 'COLLABORATOR')</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>is_fork</code> <code>bool</code> <p>If non-null, filters repositories according to whether they are forks of another repository.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_repositories(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    affiliations: Iterable[graphql_schema.RepositoryAffiliation] = None,\n    owner_affiliations: Iterable[graphql_schema.RepositoryAffiliation] = (\n        \"OWNER\",\n        \"COLLABORATOR\",\n    ),\n    is_locked: bool = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    is_fork: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories that the user owns.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters repositories according to\n            privacy.\n        order_by: Ordering options for repositories returned from\n            the connection.\n        affiliations: Array of viewer's affiliation options for\n            repositories returned from the connection. For example,\n            OWNER will include only repositories that the current viewer\n            owns.\n        owner_affiliations: Array of owner's affiliation options\n            for repositories returned from the connection. For example,\n            OWNER will include only repositories that the organization\n            or user being viewed owns.\n        is_locked: If non-null, filters repositories according to\n            whether they have been locked.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        is_fork: If non-null, filters repositories according to\n            whether they are forks of another repository.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).repositories(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            affiliations=affiliations,\n            owner_affiliations=owner_affiliations,\n            is_locked=is_locked,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            is_fork=is_fork,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"repositories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"repositories\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_repositories_contributed_to","title":"<code>query_user_repositories_contributed_to</code>  <code>async</code>","text":"<p>A list of repositories that the user recently contributed to.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>include_user_repositories</code> <code>bool</code> <p>If true, include user repositories.</p> <code>None</code> <code>contribution_types</code> <code>Iterable[RepositoryContributionType]</code> <p>If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY].</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_repositories_contributed_to(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    is_locked: bool = None,\n    include_user_repositories: bool = None,\n    contribution_types: Iterable[graphql_schema.RepositoryContributionType] = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories that the user recently contributed to.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters repositories\n            according to privacy.\n        order_by: Ordering options for repositories\n            returned from the connection.\n        is_locked: If non-null, filters repositories\n            according to whether they have been locked.\n        include_user_repositories: If true, include\n            user repositories.\n        contribution_types: If non-null, include\n            only the specified types of contributions. The GitHub.com UI\n            uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY].\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list\n            that come before the specified cursor.\n        first: Returns the first _n_ elements from\n            the list.\n        last: Returns the last _n_ elements from the\n            list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).repositories_contributed_to(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            is_locked=is_locked,\n            include_user_repositories=include_user_repositories,\n            contribution_types=contribution_types,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"repositoriesContributedTo\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"repositoriesContributedTo\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_repository","title":"<code>query_user_repository</code>  <code>async</code>","text":"<p>Find Repository.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>name</code> <code>str</code> <p>Name of Repository to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_repository(  # noqa\n    login: str,\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find Repository.\n\n    Args:\n        login: The user's login.\n        name: Name of Repository to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).repository(\n        **strip_kwargs(\n            name=name,\n            follow_renames=follow_renames,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"repository\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"repository\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_repository_discussion_comments","title":"<code>query_user_repository_discussion_comments</code>  <code>async</code>","text":"<p>Discussion comments this user has authored.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>repository_id</code> <code>str</code> <p>Filter discussion comments to only those in a specific repository.</p> <code>None</code> <code>only_answers</code> <code>bool</code> <p>Filter discussion comments to only those that were marked as the answer.</p> <code>False</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_repository_discussion_comments(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    repository_id: str = None,\n    only_answers: bool = False,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Discussion comments this user has authored.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list\n            that come after the specified cursor.\n        before: Returns the elements in the list\n            that come before the specified cursor.\n        first: Returns the first _n_ elements\n            from the list.\n        last: Returns the last _n_ elements from\n            the list.\n        repository_id: Filter discussion comments\n            to only those in a specific repository.\n        only_answers: Filter discussion comments\n            to only those that were marked as the answer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).repository_discussion_comments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            repository_id=repository_id,\n            only_answers=only_answers,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"repositoryDiscussionComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"repositoryDiscussionComments\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_repository_discussions","title":"<code>query_user_repository_discussions</code>  <code>async</code>","text":"<p>Discussions this user has started.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>DiscussionOrder</code> <p>Ordering options for discussions returned from the connection.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>repository_id</code> <code>str</code> <p>Filter discussions to only those in a specific repository.</p> <code>None</code> <code>answered</code> <code>bool</code> <p>Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_repository_discussions(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.DiscussionOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    repository_id: str = None,\n    answered: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Discussions this user has started.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for discussions\n            returned from the connection.\n        repository_id: Filter discussions to only those\n            in a specific repository.\n        answered: Filter discussions to only those that\n            have been answered or not. Defaults to including both\n            answered and unanswered discussions.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).repository_discussions(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n            repository_id=repository_id,\n            answered=answered,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"repositoryDiscussions\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"repositoryDiscussions\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_saved_replies","title":"<code>query_user_saved_replies</code>  <code>async</code>","text":"<p>Replies this user has saved.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SavedReplyOrder</code> <p>The field to order saved replies by.</p> <code>{'field': 'UPDATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_saved_replies(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SavedReplyOrder = {\n        \"field\": \"UPDATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Replies this user has saved.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: The field to order saved replies by.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).saved_replies(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"savedReplies\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"savedReplies\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsoring","title":"<code>query_user_sponsoring</code>  <code>async</code>","text":"<p>List of users and organizations this entity is sponsoring.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorOrder</code> <p>Ordering options for the users and organizations returned from the connection.</p> <code>{'field': 'RELEVANCE', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsoring(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorOrder = {\"field\": \"RELEVANCE\", \"direction\": \"DESC\"},\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of users and organizations this entity is sponsoring.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Ordering options for the users and organizations\n            returned from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).sponsoring(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"sponsoring\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsoring\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsors","title":"<code>query_user_sponsors</code>  <code>async</code>","text":"<p>List of sponsors for this user or organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>tier_id</code> <code>str</code> <p>If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.</p> <code>None</code> <code>order_by</code> <code>SponsorOrder</code> <p>Ordering options for sponsors returned from the connection.</p> <code>{'field': 'RELEVANCE', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsors(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    tier_id: str = None,\n    order_by: graphql_schema.SponsorOrder = {\"field\": \"RELEVANCE\", \"direction\": \"DESC\"},\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of sponsors for this user or organization.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        tier_id: If given, will filter for sponsors at the given tier.\n            Will only return sponsors whose tier the viewer is permitted\n            to see.\n        order_by: Ordering options for sponsors returned from the\n            connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).sponsors(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            tier_id=tier_id,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"sponsors\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsors\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsors_activities","title":"<code>query_user_sponsors_activities</code>  <code>async</code>","text":"<p>Events involving this sponsorable, such as new sponsorships.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>actions</code> <code>Iterable[SponsorsActivityAction]</code> <p>Filter activities to only the specified actions.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>period</code> <code>SponsorsActivityPeriod</code> <p>Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred.</p> <code>'MONTH'</code> <code>order_by</code> <code>SponsorsActivityOrder</code> <p>Ordering options for activity returned from the connection.</p> <code>{'field': 'TIMESTAMP', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsors_activities(  # noqa\n    login: str,\n    actions: Iterable[graphql_schema.SponsorsActivityAction],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    period: graphql_schema.SponsorsActivityPeriod = \"MONTH\",\n    order_by: graphql_schema.SponsorsActivityOrder = {\n        \"field\": \"TIMESTAMP\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Events involving this sponsorable, such as new sponsorships.\n\n    Args:\n        login: The user's login.\n        actions: Filter activities to only the specified\n            actions.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        period: Filter activities returned to only those\n            that occurred in the most recent specified time period. Set\n            to ALL to avoid filtering by when the activity occurred.\n        order_by: Ordering options for activity returned\n            from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).sponsors_activities(\n        **strip_kwargs(\n            actions=actions,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            period=period,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"sponsorsActivities\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsorsActivities\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsors_listing","title":"<code>query_user_sponsors_listing</code>  <code>async</code>","text":"<p>The GitHub Sponsors listing for this user or organization.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsors_listing(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The GitHub Sponsors listing for this user or organization.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsors_listing(**strip_kwargs())\n\n    op_stack = (\n        \"user\",\n        \"sponsorsListing\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsorsListing\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsorship_for_viewer_as_sponsor","title":"<code>query_user_sponsorship_for_viewer_as_sponsor</code>  <code>async</code>","text":"<p>The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsorship_for_viewer_as_sponsor(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The sponsorship from the viewer to this user/organization; that is, the\n    sponsorship where you're the sponsor. Only returns a sponsorship if it is\n    active.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsorship_for_viewer_as_sponsor(**strip_kwargs())\n\n    op_stack = (\n        \"user\",\n        \"sponsorshipForViewerAsSponsor\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsorshipForViewerAsSponsor\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsorship_for_viewer_as_sponsorable","title":"<code>query_user_sponsorship_for_viewer_as_sponsorable</code>  <code>async</code>","text":"<p>The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsorship_for_viewer_as_sponsorable(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The sponsorship from this user/organization to the viewer; that is, the\n    sponsorship you're receiving. Only returns a sponsorship if it is active.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(\n        **strip_kwargs(\n            login=login,\n        )\n    ).sponsorship_for_viewer_as_sponsorable(**strip_kwargs())\n\n    op_stack = (\n        \"user\",\n        \"sponsorshipForViewerAsSponsorable\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsorshipForViewerAsSponsorable\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsorship_newsletters","title":"<code>query_user_sponsorship_newsletters</code>  <code>async</code>","text":"<p>List of sponsorship updates sent from this sponsorable to sponsors.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorshipNewsletterOrder</code> <p>Ordering options for sponsorship updates returned from the connection.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsorship_newsletters(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorshipNewsletterOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of sponsorship updates sent from this sponsorable to sponsors.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for sponsorship\n            updates returned from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).sponsorship_newsletters(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"sponsorshipNewsletters\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsorshipNewsletters\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsorships_as_maintainer","title":"<code>query_user_sponsorships_as_maintainer</code>  <code>async</code>","text":"<p>This object's sponsorships as the maintainer.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>include_private</code> <code>bool</code> <p>Whether or not to include private sponsorships in the result set.</p> <code>False</code> <code>order_by</code> <code>SponsorshipOrder</code> <p>Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsorships_as_maintainer(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    include_private: bool = False,\n    order_by: graphql_schema.SponsorshipOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    This object's sponsorships as the maintainer.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from\n            the list.\n        last: Returns the last _n_ elements from the\n            list.\n        include_private: Whether or not to include\n            private sponsorships in the result set.\n        order_by: Ordering options for sponsorships\n            returned from this connection. If left blank, the\n            sponsorships will be ordered based on relevancy to the\n            viewer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).sponsorships_as_maintainer(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            include_private=include_private,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"sponsorshipsAsMaintainer\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsorshipsAsMaintainer\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_sponsorships_as_sponsor","title":"<code>query_user_sponsorships_as_sponsor</code>  <code>async</code>","text":"<p>This object's sponsorships as the sponsor.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorshipOrder</code> <p>Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_sponsorships_as_sponsor(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorshipOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    This object's sponsorships as the sponsor.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for sponsorships\n            returned from this connection. If left blank, the\n            sponsorships will be ordered based on relevancy to the\n            viewer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).sponsorships_as_sponsor(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"sponsorshipsAsSponsor\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"sponsorshipsAsSponsor\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_starred_repositories","title":"<code>query_user_starred_repositories</code>  <code>async</code>","text":"<p>Repositories the user has starred.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>owned_by_viewer</code> <code>bool</code> <p>Filters starred repositories to only return repositories owned by the viewer.</p> <code>None</code> <code>order_by</code> <code>StarOrder</code> <p>Order for connection.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_starred_repositories(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    owned_by_viewer: bool = None,\n    order_by: graphql_schema.StarOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Repositories the user has starred.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the list.\n        owned_by_viewer: Filters starred repositories to\n            only return repositories owned by the viewer.\n        order_by: Order for connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).starred_repositories(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            owned_by_viewer=owned_by_viewer,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"starredRepositories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"starredRepositories\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_status","title":"<code>query_user_status</code>  <code>async</code>","text":"<p>The user's description of what they're currently doing.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_status(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The user's description of what they're currently doing.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(\n        **strip_kwargs(\n            login=login,\n        )\n    ).status(**strip_kwargs())\n\n    op_stack = (\n        \"user\",\n        \"status\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"status\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_top_repositories","title":"<code>query_user_top_repositories</code>  <code>async</code>","text":"<p>Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>since</code> <code>datetime</code> <p>How far back in time to fetch contributed repositories.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_top_repositories(  # noqa\n    login: str,\n    order_by: graphql_schema.RepositoryOrder,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    since: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Repositories the user has contributed to, ordered by contribution rank, plus\n    repositories the user has created.\n\n    Args:\n        login: The user's login.\n        order_by: Ordering options for repositories returned\n            from the connection.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        since: How far back in time to fetch contributed\n            repositories.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).top_repositories(\n        **strip_kwargs(\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            since=since,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"topRepositories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"topRepositories\"]\n</code></pre>"},{"location":"user/#prefect_github.user.query_user_watching","title":"<code>query_user_watching</code>  <code>async</code>","text":"<p>A list of repositories the given user is watching.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The user's login.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member.</p> <code>None</code> <code>owner_affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.</p> <code>('OWNER', 'COLLABORATOR')</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/user.py</code> <pre><code>@task\nasync def query_user_watching(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    affiliations: Iterable[graphql_schema.RepositoryAffiliation] = None,\n    owner_affiliations: Iterable[graphql_schema.RepositoryAffiliation] = (\n        \"OWNER\",\n        \"COLLABORATOR\",\n    ),\n    is_locked: bool = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories the given user is watching.\n\n    Args:\n        login: The user's login.\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters repositories according to privacy.\n        order_by: Ordering options for repositories returned from the\n            connection.\n        affiliations: Affiliation options for repositories returned\n            from the connection. If none specified, the results will\n            include repositories for which the current viewer is an\n            owner or collaborator, or member.\n        owner_affiliations: Array of owner's affiliation options for\n            repositories returned from the connection. For example,\n            OWNER will include only repositories that the organization\n            or user being viewed owns.\n        is_locked: If non-null, filters repositories according to\n            whether they have been locked.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.user(**strip_kwargs(login=login,)).watching(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            affiliations=affiliations,\n            owner_affiliations=owner_affiliations,\n            is_locked=is_locked,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"user\",\n        \"watching\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"user\"][\"watching\"]\n</code></pre>"},{"location":"utils/","title":"Utils","text":""},{"location":"utils/#prefect_github.utils","title":"<code>prefect_github.utils</code>","text":"<p>Utilities to assist with using generated collections.</p>"},{"location":"utils/#prefect_github.utils-functions","title":"Functions","text":""},{"location":"utils/#prefect_github.utils.camel_to_snake_case","title":"<code>camel_to_snake_case</code>","text":"<p>Converts CamelCase and lowerCamelCase to snake_case. Args:     string: The string in CamelCase or lowerCamelCase to convert. Returns:     A snake_case version of the string.</p> Source code in <code>prefect_github/utils.py</code> <pre><code>def camel_to_snake_case(string: str) -&gt; str:\n    \"\"\"\n    Converts CamelCase and lowerCamelCase to snake_case.\n    Args:\n        string: The string in CamelCase or lowerCamelCase to convert.\n    Returns:\n        A snake_case version of the string.\n    \"\"\"\n    string = SNAKE_CASE_REGEX1.sub(r\"\\1_\\2\", string)\n    return SNAKE_CASE_REGEX2.sub(r\"\\1_\\2\", string).lower()\n</code></pre>"},{"location":"utils/#prefect_github.utils.initialize_return_fields_defaults","title":"<code>initialize_return_fields_defaults</code>","text":"<p>Reads config_path to parse out the desired default fields to return. Args:     config_path: The path to the config file.</p> Source code in <code>prefect_github/utils.py</code> <pre><code>def initialize_return_fields_defaults(config_path: Union[Path, str]) -&gt; List:\n    \"\"\"\n    Reads config_path to parse out the desired default fields to return.\n    Args:\n        config_path: The path to the config file.\n    \"\"\"\n    with open(config_path, \"r\") as f:\n        config = json.load(f)\n\n    return_fields_defaults = defaultdict(lambda: [])\n    for op_type, sub_op_types in config.items():\n        for sub_op_type in sub_op_types:\n            if isinstance(sub_op_type, str):\n                return_fields_defaults[(op_type,)].append(\n                    camel_to_snake_case(sub_op_type)\n                )\n            elif isinstance(sub_op_type, dict):\n                sub_op_type_key = list(sub_op_type.keys())[0]\n                return_fields_defaults[(op_type, sub_op_type_key)] = [\n                    camel_to_snake_case(field) for field in sub_op_type[sub_op_type_key]\n                ]\n    return return_fields_defaults\n</code></pre>"},{"location":"utils/#prefect_github.utils.strip_kwargs","title":"<code>strip_kwargs</code>","text":"<p>Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Dict</code> <p>Input keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict</code> <p>Stripped version of kwargs.</p> Source code in <code>prefect_github/utils.py</code> <pre><code>def strip_kwargs(**kwargs: Dict) -&gt; Dict:\n    \"\"\"\n    Drops keyword arguments if value is None because sgqlc.Operation\n    errors out if a keyword argument is provided, but set to None.\n\n    Args:\n        **kwargs: Input keyword arguments.\n\n    Returns:\n        Stripped version of kwargs.\n    \"\"\"\n    stripped_dict = {}\n    for k, v in kwargs.items():\n        if isinstance(v, dict):\n            v = strip_kwargs(**v)\n        if v is not None:\n            stripped_dict[k] = v\n    return stripped_dict or {}\n</code></pre>"},{"location":"viewer/","title":"Viewer","text":""},{"location":"viewer/#prefect_github.viewer","title":"<code>prefect_github.viewer</code>","text":"<p>This is a module containing: GitHub query_viewer* tasks</p>"},{"location":"viewer/#prefect_github.viewer-classes","title":"Classes","text":""},{"location":"viewer/#prefect_github.viewer-functions","title":"Functions","text":""},{"location":"viewer/#prefect_github.viewer.query_viewer","title":"<code>query_viewer</code>  <code>async</code>","text":"<p>The query root of GitHub's GraphQL interface.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer(  # noqa\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The query root of GitHub's GraphQL interface.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs())\n\n    op_stack = (\"viewer\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_commit_comments","title":"<code>query_viewer_commit_comments</code>  <code>async</code>","text":"<p>A list of commit comments made by this user.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_commit_comments(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of commit comments made by this user.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).commit_comments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"commitComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"commitComments\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_contributions_collection","title":"<code>query_viewer_contributions_collection</code>  <code>async</code>","text":"<p>The collection of contributions this user has made to different repositories.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>organization_id</code> <code>str</code> <p>The ID of the organization used to filter contributions.</p> <code>None</code> <code>from_</code> <code>datetime</code> <p>Only contributions made at this time or later will be counted. If omitted, defaults to a year ago.</p> <code>None</code> <code>to</code> <code>datetime</code> <p>Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_contributions_collection(  # noqa\n    github_credentials: GitHubCredentials,\n    organization_id: str = None,\n    from_: datetime = None,\n    to: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The collection of contributions this user has made to different repositories.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        organization_id: The ID of the organization\n            used to filter contributions.\n        from_: Only contributions made at this time or\n            later will be counted. If omitted, defaults to a year ago.\n        to: Only contributions made before and up to\n            (including) this time will be counted. If omitted, defaults\n            to the current time or one year from the provided from\n            argument.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).contributions_collection(\n        **strip_kwargs(\n            organization_id=organization_id,\n            from_=from_,\n            to=to,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"contributionsCollection\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"contributionsCollection\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_followers","title":"<code>query_viewer_followers</code>  <code>async</code>","text":"<p>A list of users the given user is followed by.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_followers(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users the given user is followed by.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).followers(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"followers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"followers\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_following","title":"<code>query_viewer_following</code>  <code>async</code>","text":"<p>A list of users the given user is following.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_following(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of users the given user is following.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).following(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"following\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"following\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_gist","title":"<code>query_viewer_gist</code>  <code>async</code>","text":"<p>Find gist by repo name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The gist name to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_gist(  # noqa\n    name: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find gist by repo name.\n\n    Args:\n        name: The gist name to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).gist(\n        **strip_kwargs(\n            name=name,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"gist\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"gist\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_gist_comments","title":"<code>query_viewer_gist_comments</code>  <code>async</code>","text":"<p>A list of gist comments made by this user.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_gist_comments(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of gist comments made by this user.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).gist_comments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"gistComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"gistComments\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_gists","title":"<code>query_viewer_gists</code>  <code>async</code>","text":"<p>A list of the Gists the user has created.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>GistPrivacy</code> <p>Filters Gists according to privacy.</p> <code>None</code> <code>order_by</code> <code>GistOrder</code> <p>Ordering options for gists returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_gists(  # noqa\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.GistPrivacy = None,\n    order_by: graphql_schema.GistOrder = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of the Gists the user has created.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: Filters Gists according to privacy.\n        order_by: Ordering options for gists returned from the connection.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).gists(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"gists\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"gists\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_interaction_ability","title":"<code>query_viewer_interaction_ability</code>  <code>async</code>","text":"<p>The interaction ability settings for this user.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_interaction_ability(  # noqa\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The interaction ability settings for this user.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).interaction_ability(**strip_kwargs())\n\n    op_stack = (\n        \"viewer\",\n        \"interactionAbility\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"interactionAbility\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_issue_comments","title":"<code>query_viewer_issue_comments</code>  <code>async</code>","text":"<p>A list of issue comments made by this user.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>order_by</code> <code>IssueCommentOrder</code> <p>Ordering options for issue comments returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_issue_comments(  # noqa\n    github_credentials: GitHubCredentials,\n    order_by: graphql_schema.IssueCommentOrder = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of issue comments made by this user.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        order_by: Ordering options for issue comments returned\n            from the connection.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).issue_comments(\n        **strip_kwargs(\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"issueComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"issueComments\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_issues","title":"<code>query_viewer_issues</code>  <code>async</code>","text":"<p>A list of issues associated with this user.</p> <p>Parameters:</p> Name Type Description Default <code>labels</code> <code>Iterable[str]</code> <p>A list of label names to filter the pull requests by.</p> required <code>states</code> <code>Iterable[IssueState]</code> <p>A list of states to filter the issues by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>order_by</code> <code>IssueOrder</code> <p>Ordering options for issues returned from the connection.</p> <code>None</code> <code>filter_by</code> <code>IssueFilters</code> <p>Filtering options for issues returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_issues(  # noqa\n    labels: Iterable[str],\n    states: Iterable[graphql_schema.IssueState],\n    github_credentials: GitHubCredentials,\n    order_by: graphql_schema.IssueOrder = None,\n    filter_by: graphql_schema.IssueFilters = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of issues associated with this user.\n\n    Args:\n        labels: A list of label names to filter the pull requests by.\n        states: A list of states to filter the issues by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        order_by: Ordering options for issues returned from the\n            connection.\n        filter_by: Filtering options for issues returned from the\n            connection.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).issues(\n        **strip_kwargs(\n            labels=labels,\n            states=states,\n            order_by=order_by,\n            filter_by=filter_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"issues\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"issues\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_item_showcase","title":"<code>query_viewer_item_showcase</code>  <code>async</code>","text":"<p>Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_item_showcase(  # noqa\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Showcases a selection of repositories and gists that the profile owner has\n    either curated or that have been selected automatically based on popularity.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).item_showcase(**strip_kwargs())\n\n    op_stack = (\n        \"viewer\",\n        \"itemShowcase\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"itemShowcase\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_organization","title":"<code>query_viewer_organization</code>  <code>async</code>","text":"<p>Find an organization by its login that the user belongs to.</p> <p>Parameters:</p> Name Type Description Default <code>login</code> <code>str</code> <p>The login of the organization to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_organization(  # noqa\n    login: str,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find an organization by its login that the user belongs to.\n\n    Args:\n        login: The login of the organization to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).organization(\n        **strip_kwargs(\n            login=login,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"organization\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"organization\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_organizations","title":"<code>query_viewer_organizations</code>  <code>async</code>","text":"<p>A list of organizations the user belongs to.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_organizations(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of organizations the user belongs to.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).organizations(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"organizations\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"organizations\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_packages","title":"<code>query_viewer_packages</code>  <code>async</code>","text":"<p>A list of packages under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>names</code> <code>Iterable[str]</code> <p>Find packages by their names.</p> <code>None</code> <code>repository_id</code> <code>str</code> <p>Find packages in a repository by ID.</p> <code>None</code> <code>package_type</code> <code>PackageType</code> <p>Filter registry package by type.</p> <code>None</code> <code>order_by</code> <code>PackageOrder</code> <p>Ordering of the returned packages.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_packages(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    names: Iterable[str] = None,\n    repository_id: str = None,\n    package_type: graphql_schema.PackageType = None,\n    order_by: graphql_schema.PackageOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of packages under the owner.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        names: Find packages by their names.\n        repository_id: Find packages in a repository by ID.\n        package_type: Filter registry package by type.\n        order_by: Ordering of the returned packages.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).packages(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            names=names,\n            repository_id=repository_id,\n            package_type=package_type,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"packages\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"packages\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_pinnable_items","title":"<code>query_viewer_pinnable_items</code>  <code>async</code>","text":"<p>A list of repositories and gists this profile owner can pin to their profile.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>Iterable[PinnableItemType]</code> <p>Filter the types of pinnable items that are returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_pinnable_items(  # noqa\n    types: Iterable[graphql_schema.PinnableItemType],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories and gists this profile owner can pin to their profile.\n\n    Args:\n        types: Filter the types of pinnable items that are\n            returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).pinnable_items(\n        **strip_kwargs(\n            types=types,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"pinnableItems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"pinnableItems\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_pinned_items","title":"<code>query_viewer_pinned_items</code>  <code>async</code>","text":"<p>A list of repositories and gists this profile owner has pinned to their profile.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>Iterable[PinnableItemType]</code> <p>Filter the types of pinned items that are returned.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_pinned_items(  # noqa\n    types: Iterable[graphql_schema.PinnableItemType],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories and gists this profile owner has pinned to their profile.\n\n    Args:\n        types: Filter the types of pinned items that are returned.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).pinned_items(\n        **strip_kwargs(\n            types=types,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"pinnedItems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"pinnedItems\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_project","title":"<code>query_viewer_project</code>  <code>async</code>","text":"<p>Find project by number.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>The project number to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_project(  # noqa\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find project by number.\n\n    Args:\n        number: The project number to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).project(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"project\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"project\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_project_next","title":"<code>query_viewer_project_next</code>  <code>async</code>","text":"<p>Find a project by project (beta) number.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>The project (beta) number.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_project_next(  # noqa\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find a project by project (beta) number.\n\n    Args:\n        number: The project (beta) number.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).project_next(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"projectNext\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"projectNext\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_project_v2","title":"<code>query_viewer_project_v2</code>  <code>async</code>","text":"<p>Find a project by number.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>The project number.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_project_v2(  # noqa\n    number: int,\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find a project by number.\n\n    Args:\n        number: The project number.\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).project_v2(\n        **strip_kwargs(\n            number=number,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"projectV2\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"projectV2\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects","title":"<code>query_viewer_projects</code>  <code>async</code>","text":"<p>A list of projects under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>states</code> <code>Iterable[ProjectState]</code> <p>A list of states to filter the projects by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>order_by</code> <code>ProjectOrder</code> <p>Ordering options for projects returned from the connection.</p> <code>None</code> <code>search</code> <code>str</code> <p>Query to search projects by, currently only searching by name.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_projects(  # noqa\n    states: Iterable[graphql_schema.ProjectState],\n    github_credentials: GitHubCredentials,\n    order_by: graphql_schema.ProjectOrder = None,\n    search: str = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects under the owner.\n\n    Args:\n        states: A list of states to filter the projects by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        order_by: Ordering options for projects returned from the\n            connection.\n        search: Query to search projects by, currently only searching\n            by name.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).projects(\n        **strip_kwargs(\n            states=states,\n            order_by=order_by,\n            search=search,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"projects\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"projects\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects_next","title":"<code>query_viewer_projects_next</code>  <code>async</code>","text":"<p>A list of projects (beta) under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>query</code> <code>str</code> <p>A project (beta) to search for under the the owner.</p> <code>None</code> <code>sort_by</code> <code>ProjectNextOrderField</code> <p>How to order the returned projects (beta).</p> <code>'TITLE'</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_projects_next(  # noqa\n    github_credentials: GitHubCredentials,\n    query: str = None,\n    sort_by: graphql_schema.ProjectNextOrderField = \"TITLE\",\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects (beta) under the owner.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        query: A project (beta) to search for under the the owner.\n        sort_by: How to order the returned projects (beta).\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).projects_next(\n        **strip_kwargs(\n            query=query,\n            sort_by=sort_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"projectsNext\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"projectsNext\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects_v2","title":"<code>query_viewer_projects_v2</code>  <code>async</code>","text":"<p>A list of projects under the owner.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>query</code> <code>str</code> <p>A project to search for under the the owner.</p> <code>None</code> <code>order_by</code> <code>ProjectV2Order</code> <p>How to order the returned projects.</p> <code>{'field': 'NUMBER', 'direction': 'DESC'}</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_projects_v2(  # noqa\n    github_credentials: GitHubCredentials,\n    query: str = None,\n    order_by: graphql_schema.ProjectV2Order = {\"field\": \"NUMBER\", \"direction\": \"DESC\"},\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of projects under the owner.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        query: A project to search for under the the owner.\n        order_by: How to order the returned projects.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).projects_v2(\n        **strip_kwargs(\n            query=query,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"projectsV2\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"projectsV2\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_public_keys","title":"<code>query_viewer_public_keys</code>  <code>async</code>","text":"<p>A list of public keys associated with this user.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_public_keys(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of public keys associated with this user.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).public_keys(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"publicKeys\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"publicKeys\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_pull_requests","title":"<code>query_viewer_pull_requests</code>  <code>async</code>","text":"<p>A list of pull requests associated with this user.</p> <p>Parameters:</p> Name Type Description Default <code>states</code> <code>Iterable[PullRequestState]</code> <p>A list of states to filter the pull requests by.</p> required <code>labels</code> <code>Iterable[str]</code> <p>A list of label names to filter the pull requests by.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>head_ref_name</code> <code>str</code> <p>The head ref name to filter the pull requests by.</p> <code>None</code> <code>base_ref_name</code> <code>str</code> <p>The base ref name to filter the pull requests by.</p> <code>None</code> <code>order_by</code> <code>IssueOrder</code> <p>Ordering options for pull requests returned from the connection.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_pull_requests(  # noqa\n    states: Iterable[graphql_schema.PullRequestState],\n    labels: Iterable[str],\n    github_credentials: GitHubCredentials,\n    head_ref_name: str = None,\n    base_ref_name: str = None,\n    order_by: graphql_schema.IssueOrder = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of pull requests associated with this user.\n\n    Args:\n        states: A list of states to filter the pull requests by.\n        labels: A list of label names to filter the pull requests\n            by.\n        github_credentials: Credentials to use for authentication with GitHub.\n        head_ref_name: The head ref name to filter the pull\n            requests by.\n        base_ref_name: The base ref name to filter the pull\n            requests by.\n        order_by: Ordering options for pull requests returned from\n            the connection.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).pull_requests(\n        **strip_kwargs(\n            states=states,\n            labels=labels,\n            head_ref_name=head_ref_name,\n            base_ref_name=base_ref_name,\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"pullRequests\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"pullRequests\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_recent_projects","title":"<code>query_viewer_recent_projects</code>  <code>async</code>","text":"<p>Recent projects that this user has modified in the context of the owner.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_recent_projects(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Recent projects that this user has modified in the context of the owner.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).recent_projects(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"recentProjects\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"recentProjects\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_repositories","title":"<code>query_viewer_repositories</code>  <code>async</code>","text":"<p>A list of repositories that the user owns.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.</p> <code>None</code> <code>owner_affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.</p> <code>('OWNER', 'COLLABORATOR')</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>is_fork</code> <code>bool</code> <p>If non-null, filters repositories according to whether they are forks of another repository.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_repositories(  # noqa\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    affiliations: Iterable[graphql_schema.RepositoryAffiliation] = None,\n    owner_affiliations: Iterable[graphql_schema.RepositoryAffiliation] = (\n        \"OWNER\",\n        \"COLLABORATOR\",\n    ),\n    is_locked: bool = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    is_fork: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories that the user owns.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters repositories according to\n            privacy.\n        order_by: Ordering options for repositories returned from\n            the connection.\n        affiliations: Array of viewer's affiliation options for\n            repositories returned from the connection. For example,\n            OWNER will include only repositories that the current viewer\n            owns.\n        owner_affiliations: Array of owner's affiliation options\n            for repositories returned from the connection. For example,\n            OWNER will include only repositories that the organization\n            or user being viewed owns.\n        is_locked: If non-null, filters repositories according to\n            whether they have been locked.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        is_fork: If non-null, filters repositories according to\n            whether they are forks of another repository.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).repositories(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            affiliations=affiliations,\n            owner_affiliations=owner_affiliations,\n            is_locked=is_locked,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            is_fork=is_fork,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"repositories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"repositories\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_repositories_contributed_to","title":"<code>query_viewer_repositories_contributed_to</code>  <code>async</code>","text":"<p>A list of repositories that the user recently contributed to.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>include_user_repositories</code> <code>bool</code> <p>If true, include user repositories.</p> <code>None</code> <code>contribution_types</code> <code>Iterable[RepositoryContributionType]</code> <p>If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY].</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_repositories_contributed_to(  # noqa\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    is_locked: bool = None,\n    include_user_repositories: bool = None,\n    contribution_types: Iterable[graphql_schema.RepositoryContributionType] = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories that the user recently contributed to.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters repositories\n            according to privacy.\n        order_by: Ordering options for repositories\n            returned from the connection.\n        is_locked: If non-null, filters repositories\n            according to whether they have been locked.\n        include_user_repositories: If true, include\n            user repositories.\n        contribution_types: If non-null, include\n            only the specified types of contributions. The GitHub.com UI\n            uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY].\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list\n            that come before the specified cursor.\n        first: Returns the first _n_ elements from\n            the list.\n        last: Returns the last _n_ elements from the\n            list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).repositories_contributed_to(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            is_locked=is_locked,\n            include_user_repositories=include_user_repositories,\n            contribution_types=contribution_types,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"repositoriesContributedTo\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"repositoriesContributedTo\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository","title":"<code>query_viewer_repository</code>  <code>async</code>","text":"<p>Find Repository.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of Repository to find.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>follow_renames</code> <code>bool</code> <p>Follow repository renames. If disabled, a repository referenced by its old name will return an error.</p> <code>True</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_repository(  # noqa\n    name: str,\n    github_credentials: GitHubCredentials,\n    follow_renames: bool = True,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Find Repository.\n\n    Args:\n        name: Name of Repository to find.\n        github_credentials: Credentials to use for authentication with GitHub.\n        follow_renames: Follow repository renames. If disabled, a\n            repository referenced by its old name will return an error.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).repository(\n        **strip_kwargs(\n            name=name,\n            follow_renames=follow_renames,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"repository\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"repository\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository_discussion_comments","title":"<code>query_viewer_repository_discussion_comments</code>  <code>async</code>","text":"<p>Discussion comments this user has authored.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>repository_id</code> <code>str</code> <p>Filter discussion comments to only those in a specific repository.</p> <code>None</code> <code>only_answers</code> <code>bool</code> <p>Filter discussion comments to only those that were marked as the answer.</p> <code>False</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_repository_discussion_comments(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    repository_id: str = None,\n    only_answers: bool = False,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Discussion comments this user has authored.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list\n            that come after the specified cursor.\n        before: Returns the elements in the list\n            that come before the specified cursor.\n        first: Returns the first _n_ elements\n            from the list.\n        last: Returns the last _n_ elements from\n            the list.\n        repository_id: Filter discussion comments\n            to only those in a specific repository.\n        only_answers: Filter discussion comments\n            to only those that were marked as the answer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).repository_discussion_comments(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            repository_id=repository_id,\n            only_answers=only_answers,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"repositoryDiscussionComments\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"repositoryDiscussionComments\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository_discussions","title":"<code>query_viewer_repository_discussions</code>  <code>async</code>","text":"<p>Discussions this user has started.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>DiscussionOrder</code> <p>Ordering options for discussions returned from the connection.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>repository_id</code> <code>str</code> <p>Filter discussions to only those in a specific repository.</p> <code>None</code> <code>answered</code> <code>bool</code> <p>Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_repository_discussions(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.DiscussionOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    repository_id: str = None,\n    answered: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Discussions this user has started.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for discussions\n            returned from the connection.\n        repository_id: Filter discussions to only those\n            in a specific repository.\n        answered: Filter discussions to only those that\n            have been answered or not. Defaults to including both\n            answered and unanswered discussions.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).repository_discussions(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n            repository_id=repository_id,\n            answered=answered,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"repositoryDiscussions\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"repositoryDiscussions\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_saved_replies","title":"<code>query_viewer_saved_replies</code>  <code>async</code>","text":"<p>Replies this user has saved.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SavedReplyOrder</code> <p>The field to order saved replies by.</p> <code>{'field': 'UPDATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_saved_replies(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SavedReplyOrder = {\n        \"field\": \"UPDATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Replies this user has saved.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come before\n            the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: The field to order saved replies by.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).saved_replies(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"savedReplies\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"savedReplies\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsoring","title":"<code>query_viewer_sponsoring</code>  <code>async</code>","text":"<p>List of users and organizations this entity is sponsoring.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorOrder</code> <p>Ordering options for the users and organizations returned from the connection.</p> <code>{'field': 'RELEVANCE', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsoring(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorOrder = {\"field\": \"RELEVANCE\", \"direction\": \"DESC\"},\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of users and organizations this entity is sponsoring.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        order_by: Ordering options for the users and organizations\n            returned from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsoring(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"sponsoring\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsoring\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors","title":"<code>query_viewer_sponsors</code>  <code>async</code>","text":"<p>List of sponsors for this user or organization.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>tier_id</code> <code>str</code> <p>If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.</p> <code>None</code> <code>order_by</code> <code>SponsorOrder</code> <p>Ordering options for sponsors returned from the connection.</p> <code>{'field': 'RELEVANCE', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsors(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    tier_id: str = None,\n    order_by: graphql_schema.SponsorOrder = {\"field\": \"RELEVANCE\", \"direction\": \"DESC\"},\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of sponsors for this user or organization.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        tier_id: If given, will filter for sponsors at the given tier.\n            Will only return sponsors whose tier the viewer is permitted\n            to see.\n        order_by: Ordering options for sponsors returned from the\n            connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsors(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            tier_id=tier_id,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"sponsors\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsors\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors_activities","title":"<code>query_viewer_sponsors_activities</code>  <code>async</code>","text":"<p>Events involving this sponsorable, such as new sponsorships.</p> <p>Parameters:</p> Name Type Description Default <code>actions</code> <code>Iterable[SponsorsActivityAction]</code> <p>Filter activities to only the specified actions.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>period</code> <code>SponsorsActivityPeriod</code> <p>Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred.</p> <code>'MONTH'</code> <code>order_by</code> <code>SponsorsActivityOrder</code> <p>Ordering options for activity returned from the connection.</p> <code>{'field': 'TIMESTAMP', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsors_activities(  # noqa\n    actions: Iterable[graphql_schema.SponsorsActivityAction],\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    period: graphql_schema.SponsorsActivityPeriod = \"MONTH\",\n    order_by: graphql_schema.SponsorsActivityOrder = {\n        \"field\": \"TIMESTAMP\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Events involving this sponsorable, such as new sponsorships.\n\n    Args:\n        actions: Filter activities to only the specified\n            actions.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        period: Filter activities returned to only those\n            that occurred in the most recent specified time period. Set\n            to ALL to avoid filtering by when the activity occurred.\n        order_by: Ordering options for activity returned\n            from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsors_activities(\n        **strip_kwargs(\n            actions=actions,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            period=period,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"sponsorsActivities\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsorsActivities\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors_listing","title":"<code>query_viewer_sponsors_listing</code>  <code>async</code>","text":"<p>The GitHub Sponsors listing for this user or organization.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsors_listing(  # noqa\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The GitHub Sponsors listing for this user or organization.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsors_listing(**strip_kwargs())\n\n    op_stack = (\n        \"viewer\",\n        \"sponsorsListing\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsorsListing\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_for_viewer_as_sponsor","title":"<code>query_viewer_sponsorship_for_viewer_as_sponsor</code>  <code>async</code>","text":"<p>The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsorship_for_viewer_as_sponsor(  # noqa\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The sponsorship from the viewer to this user/organization; that is, the\n    sponsorship where you're the sponsor. Only returns a sponsorship if it is\n    active.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsorship_for_viewer_as_sponsor(\n        **strip_kwargs()\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"sponsorshipForViewerAsSponsor\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsorshipForViewerAsSponsor\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_for_viewer_as_sponsorable","title":"<code>query_viewer_sponsorship_for_viewer_as_sponsorable</code>  <code>async</code>","text":"<p>The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsorship_for_viewer_as_sponsorable(  # noqa\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The sponsorship from this user/organization to the viewer; that is, the\n    sponsorship you're receiving. Only returns a sponsorship if it is active.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsorship_for_viewer_as_sponsorable(\n        **strip_kwargs()\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"sponsorshipForViewerAsSponsorable\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsorshipForViewerAsSponsorable\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_newsletters","title":"<code>query_viewer_sponsorship_newsletters</code>  <code>async</code>","text":"<p>List of sponsorship updates sent from this sponsorable to sponsors.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorshipNewsletterOrder</code> <p>Ordering options for sponsorship updates returned from the connection.</p> <code>{'field': 'CREATED_AT', 'direction': 'DESC'}</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsorship_newsletters(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorshipNewsletterOrder = {\n        \"field\": \"CREATED_AT\",\n        \"direction\": \"DESC\",\n    },\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    List of sponsorship updates sent from this sponsorable to sponsors.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for sponsorship\n            updates returned from the connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsorship_newsletters(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"sponsorshipNewsletters\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsorshipNewsletters\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorships_as_maintainer","title":"<code>query_viewer_sponsorships_as_maintainer</code>  <code>async</code>","text":"<p>This object's sponsorships as the maintainer.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>include_private</code> <code>bool</code> <p>Whether or not to include private sponsorships in the result set.</p> <code>False</code> <code>order_by</code> <code>SponsorshipOrder</code> <p>Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsorships_as_maintainer(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    include_private: bool = False,\n    order_by: graphql_schema.SponsorshipOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    This object's sponsorships as the maintainer.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from\n            the list.\n        last: Returns the last _n_ elements from the\n            list.\n        include_private: Whether or not to include\n            private sponsorships in the result set.\n        order_by: Ordering options for sponsorships\n            returned from this connection. If left blank, the\n            sponsorships will be ordered based on relevancy to the\n            viewer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsorships_as_maintainer(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            include_private=include_private,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"sponsorshipsAsMaintainer\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsorshipsAsMaintainer\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorships_as_sponsor","title":"<code>query_viewer_sponsorships_as_sponsor</code>  <code>async</code>","text":"<p>This object's sponsorships as the sponsor.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>order_by</code> <code>SponsorshipOrder</code> <p>Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_sponsorships_as_sponsor(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    order_by: graphql_schema.SponsorshipOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    This object's sponsorships as the sponsor.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that\n            come after the specified cursor.\n        before: Returns the elements in the list that\n            come before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the\n            list.\n        order_by: Ordering options for sponsorships\n            returned from this connection. If left blank, the\n            sponsorships will be ordered based on relevancy to the\n            viewer.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).sponsorships_as_sponsor(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"sponsorshipsAsSponsor\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"sponsorshipsAsSponsor\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_starred_repositories","title":"<code>query_viewer_starred_repositories</code>  <code>async</code>","text":"<p>Repositories the user has starred.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>owned_by_viewer</code> <code>bool</code> <p>Filters starred repositories to only return repositories owned by the viewer.</p> <code>None</code> <code>order_by</code> <code>StarOrder</code> <p>Order for connection.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_starred_repositories(  # noqa\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    owned_by_viewer: bool = None,\n    order_by: graphql_schema.StarOrder = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Repositories the user has starred.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come\n            after the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the\n            list.\n        last: Returns the last _n_ elements from the list.\n        owned_by_viewer: Filters starred repositories to\n            only return repositories owned by the viewer.\n        order_by: Order for connection.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).starred_repositories(\n        **strip_kwargs(\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            owned_by_viewer=owned_by_viewer,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"starredRepositories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"starredRepositories\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_status","title":"<code>query_viewer_status</code>  <code>async</code>","text":"<p>The user's description of what they're currently doing.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_status(  # noqa\n    github_credentials: GitHubCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    The user's description of what they're currently doing.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).status(**strip_kwargs())\n\n    op_stack = (\n        \"viewer\",\n        \"status\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"status\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_top_repositories","title":"<code>query_viewer_top_repositories</code>  <code>async</code>","text":"<p>Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created.</p> <p>Parameters:</p> Name Type Description Default <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> required <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>since</code> <code>datetime</code> <p>How far back in time to fetch contributed repositories.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_top_repositories(  # noqa\n    order_by: graphql_schema.RepositoryOrder,\n    github_credentials: GitHubCredentials,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    since: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    Repositories the user has contributed to, ordered by contribution rank, plus\n    repositories the user has created.\n\n    Args:\n        order_by: Ordering options for repositories returned\n            from the connection.\n        github_credentials: Credentials to use for authentication with GitHub.\n        after: Returns the elements in the list that come after\n            the specified cursor.\n        before: Returns the elements in the list that come\n            before the specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        since: How far back in time to fetch contributed\n            repositories.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).top_repositories(\n        **strip_kwargs(\n            order_by=order_by,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n            since=since,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"topRepositories\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"topRepositories\"]\n</code></pre>"},{"location":"viewer/#prefect_github.viewer.query_viewer_watching","title":"<code>query_viewer_watching</code>  <code>async</code>","text":"<p>A list of repositories the given user is watching.</p> <p>Parameters:</p> Name Type Description Default <code>github_credentials</code> <code>GitHubCredentials</code> <p>Credentials to use for authentication with GitHub.</p> required <code>privacy</code> <code>RepositoryPrivacy</code> <p>If non-null, filters repositories according to privacy.</p> <code>None</code> <code>order_by</code> <code>RepositoryOrder</code> <p>Ordering options for repositories returned from the connection.</p> <code>None</code> <code>affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member.</p> <code>None</code> <code>owner_affiliations</code> <code>Iterable[RepositoryAffiliation]</code> <p>Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.</p> <code>('OWNER', 'COLLABORATOR')</code> <code>is_locked</code> <code>bool</code> <p>If non-null, filters repositories according to whether they have been locked.</p> <code>None</code> <code>after</code> <code>str</code> <p>Returns the elements in the list that come after the specified cursor.</p> <code>None</code> <code>before</code> <code>str</code> <p>Returns the elements in the list that come before the specified cursor.</p> <code>None</code> <code>first</code> <code>int</code> <p>Returns the first n elements from the list.</p> <code>None</code> <code>last</code> <code>int</code> <p>Returns the last n elements from the list.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_github/viewer.py</code> <pre><code>@task\nasync def query_viewer_watching(  # noqa\n    github_credentials: GitHubCredentials,\n    privacy: graphql_schema.RepositoryPrivacy = None,\n    order_by: graphql_schema.RepositoryOrder = None,\n    affiliations: Iterable[graphql_schema.RepositoryAffiliation] = None,\n    owner_affiliations: Iterable[graphql_schema.RepositoryAffiliation] = (\n        \"OWNER\",\n        \"COLLABORATOR\",\n    ),\n    is_locked: bool = None,\n    after: str = None,\n    before: str = None,\n    first: int = None,\n    last: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:  # pragma: no cover\n    \"\"\"\n    A list of repositories the given user is watching.\n\n    Args:\n        github_credentials: Credentials to use for authentication with GitHub.\n        privacy: If non-null, filters repositories according to privacy.\n        order_by: Ordering options for repositories returned from the\n            connection.\n        affiliations: Affiliation options for repositories returned\n            from the connection. If none specified, the results will\n            include repositories for which the current viewer is an\n            owner or collaborator, or member.\n        owner_affiliations: Array of owner's affiliation options for\n            repositories returned from the connection. For example,\n            OWNER will include only repositories that the organization\n            or user being viewed owns.\n        is_locked: If non-null, filters repositories according to\n            whether they have been locked.\n        after: Returns the elements in the list that come after the\n            specified cursor.\n        before: Returns the elements in the list that come before the\n            specified cursor.\n        first: Returns the first _n_ elements from the list.\n        last: Returns the last _n_ elements from the list.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.viewer(**strip_kwargs()).watching(\n        **strip_kwargs(\n            privacy=privacy,\n            order_by=order_by,\n            affiliations=affiliations,\n            owner_affiliations=owner_affiliations,\n            is_locked=is_locked,\n            after=after,\n            before=before,\n            first=first,\n            last=last,\n        )\n    )\n\n    op_stack = (\n        \"viewer\",\n        \"watching\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, github_credentials)\n    return result[\"viewer\"][\"watching\"]\n</code></pre>"},{"location":"schemas/graphql_schema/","title":"Graphql Schema","text":""},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema","title":"<code>prefect_github.schemas.graphql_schema</code>","text":""},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema-classes","title":"Classes","text":""},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AbortQueuedMigrationsInput","title":"<code>AbortQueuedMigrationsInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AbortQueuedMigrationsInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"owner_id\", \"client_mutation_id\")\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AbortQueuedMigrationsPayload","title":"<code>AbortQueuedMigrationsPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AbortQueuedMigrationsPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"success\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    success = sgqlc.types.Field(Boolean, graphql_name=\"success\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AcceptEnterpriseAdministratorInvitationInput","title":"<code>AcceptEnterpriseAdministratorInvitationInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AcceptEnterpriseAdministratorInvitationInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"invitation_id\", \"client_mutation_id\")\n    invitation_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"invitationId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AcceptEnterpriseAdministratorInvitationPayload","title":"<code>AcceptEnterpriseAdministratorInvitationPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AcceptEnterpriseAdministratorInvitationPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"invitation\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    invitation = sgqlc.types.Field(\n        \"EnterpriseAdministratorInvitation\", graphql_name=\"invitation\"\n    )\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AcceptTopicSuggestionInput","title":"<code>AcceptTopicSuggestionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AcceptTopicSuggestionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"name\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AcceptTopicSuggestionPayload","title":"<code>AcceptTopicSuggestionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AcceptTopicSuggestionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"topic\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    topic = sgqlc.types.Field(\"Topic\", graphql_name=\"topic\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Actor","title":"<code>Actor</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Actor(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"avatar_url\", \"login\", \"resource_path\", \"url\")\n    avatar_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI),\n        graphql_name=\"avatarUrl\",\n        args=sgqlc.types.ArgDict(\n            ((\"size\", sgqlc.types.Arg(Int, graphql_name=\"size\", default=None)),)\n        ),\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ActorLocation","title":"<code>ActorLocation</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ActorLocation(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"city\", \"country\", \"country_code\", \"region\", \"region_code\")\n    city = sgqlc.types.Field(String, graphql_name=\"city\")\n    country = sgqlc.types.Field(String, graphql_name=\"country\")\n    country_code = sgqlc.types.Field(String, graphql_name=\"countryCode\")\n    region = sgqlc.types.Field(String, graphql_name=\"region\")\n    region_code = sgqlc.types.Field(String, graphql_name=\"regionCode\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ActorType","title":"<code>ActorType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ActorType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"TEAM\", \"USER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddAssigneesToAssignableInput","title":"<code>AddAssigneesToAssignableInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddAssigneesToAssignableInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"assignable_id\", \"assignee_ids\", \"client_mutation_id\")\n    assignable_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"assignableId\"\n    )\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),\n        graphql_name=\"assigneeIds\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddAssigneesToAssignablePayload","title":"<code>AddAssigneesToAssignablePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddAssigneesToAssignablePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"assignable\", \"client_mutation_id\")\n    assignable = sgqlc.types.Field(\"Assignable\", graphql_name=\"assignable\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddCommentInput","title":"<code>AddCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"subject_id\", \"body\", \"client_mutation_id\")\n    subject_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"subjectId\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddCommentPayload","title":"<code>AddCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"comment_edge\", \"subject\", \"timeline_edge\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    comment_edge = sgqlc.types.Field(\"IssueCommentEdge\", graphql_name=\"commentEdge\")\n    subject = sgqlc.types.Field(\"Node\", graphql_name=\"subject\")\n    timeline_edge = sgqlc.types.Field(\n        \"IssueTimelineItemEdge\", graphql_name=\"timelineEdge\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddDiscussionCommentInput","title":"<code>AddDiscussionCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddDiscussionCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"discussion_id\", \"reply_to_id\", \"body\", \"client_mutation_id\")\n    discussion_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"discussionId\"\n    )\n    reply_to_id = sgqlc.types.Field(ID, graphql_name=\"replyToId\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddDiscussionCommentPayload","title":"<code>AddDiscussionCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddDiscussionCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    comment = sgqlc.types.Field(\"DiscussionComment\", graphql_name=\"comment\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddDiscussionPollVoteInput","title":"<code>AddDiscussionPollVoteInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddDiscussionPollVoteInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"poll_option_id\", \"client_mutation_id\")\n    poll_option_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pollOptionId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddDiscussionPollVotePayload","title":"<code>AddDiscussionPollVotePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddDiscussionPollVotePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"poll_option\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    poll_option = sgqlc.types.Field(\"DiscussionPollOption\", graphql_name=\"pollOption\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddEnterpriseSupportEntitlementInput","title":"<code>AddEnterpriseSupportEntitlementInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddEnterpriseSupportEntitlementInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"login\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddEnterpriseSupportEntitlementPayload","title":"<code>AddEnterpriseSupportEntitlementPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddEnterpriseSupportEntitlementPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddLabelsToLabelableInput","title":"<code>AddLabelsToLabelableInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddLabelsToLabelableInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"labelable_id\", \"label_ids\", \"client_mutation_id\")\n    labelable_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"labelableId\"\n    )\n    label_ids = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),\n        graphql_name=\"labelIds\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddLabelsToLabelablePayload","title":"<code>AddLabelsToLabelablePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddLabelsToLabelablePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"labelable\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    labelable = sgqlc.types.Field(\"Labelable\", graphql_name=\"labelable\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectCardInput","title":"<code>AddProjectCardInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectCardInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_column_id\", \"content_id\", \"note\", \"client_mutation_id\")\n    project_column_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"projectColumnId\"\n    )\n    content_id = sgqlc.types.Field(ID, graphql_name=\"contentId\")\n    note = sgqlc.types.Field(String, graphql_name=\"note\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectCardPayload","title":"<code>AddProjectCardPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectCardPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"card_edge\", \"client_mutation_id\", \"project_column\")\n    card_edge = sgqlc.types.Field(\"ProjectCardEdge\", graphql_name=\"cardEdge\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_column = sgqlc.types.Field(\"ProjectColumn\", graphql_name=\"projectColumn\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectColumnInput","title":"<code>AddProjectColumnInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectColumnInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"name\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectColumnPayload","title":"<code>AddProjectColumnPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectColumnPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"column_edge\", \"project\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    column_edge = sgqlc.types.Field(\"ProjectColumnEdge\", graphql_name=\"columnEdge\")\n    project = sgqlc.types.Field(\"Project\", graphql_name=\"project\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectDraftIssueInput","title":"<code>AddProjectDraftIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectDraftIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"project_id\",\n        \"title\",\n        \"body\",\n        \"assignee_ids\",\n        \"client_mutation_id\",\n    )\n    project_id = sgqlc.types.Field(ID, graphql_name=\"projectId\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"assigneeIds\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectDraftIssuePayload","title":"<code>AddProjectDraftIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectDraftIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_next_item\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_next_item = sgqlc.types.Field(\n        \"ProjectNextItem\", graphql_name=\"projectNextItem\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectNextItemInput","title":"<code>AddProjectNextItemInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectNextItemInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"content_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(ID, graphql_name=\"projectId\")\n    content_id = sgqlc.types.Field(ID, graphql_name=\"contentId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectNextItemPayload","title":"<code>AddProjectNextItemPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectNextItemPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_next_item\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_next_item = sgqlc.types.Field(\n        \"ProjectNextItem\", graphql_name=\"projectNextItem\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectV2DraftIssueInput","title":"<code>AddProjectV2DraftIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectV2DraftIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"project_id\",\n        \"title\",\n        \"body\",\n        \"assignee_ids\",\n        \"client_mutation_id\",\n    )\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"assigneeIds\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectV2DraftIssuePayload","title":"<code>AddProjectV2DraftIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectV2DraftIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_item\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_item = sgqlc.types.Field(\"ProjectV2Item\", graphql_name=\"projectItem\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectV2ItemByIdInput","title":"<code>AddProjectV2ItemByIdInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectV2ItemByIdInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"content_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    content_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"contentId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectV2ItemByIdPayload","title":"<code>AddProjectV2ItemByIdPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddProjectV2ItemByIdPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"item\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    item = sgqlc.types.Field(\"ProjectV2Item\", graphql_name=\"item\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewCommentInput","title":"<code>AddPullRequestReviewCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddPullRequestReviewCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"pull_request_id\",\n        \"pull_request_review_id\",\n        \"commit_oid\",\n        \"body\",\n        \"path\",\n        \"position\",\n        \"in_reply_to\",\n        \"client_mutation_id\",\n    )\n    pull_request_id = sgqlc.types.Field(ID, graphql_name=\"pullRequestId\")\n    pull_request_review_id = sgqlc.types.Field(ID, graphql_name=\"pullRequestReviewId\")\n    commit_oid = sgqlc.types.Field(GitObjectID, graphql_name=\"commitOID\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    path = sgqlc.types.Field(String, graphql_name=\"path\")\n    position = sgqlc.types.Field(Int, graphql_name=\"position\")\n    in_reply_to = sgqlc.types.Field(ID, graphql_name=\"inReplyTo\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewCommentPayload","title":"<code>AddPullRequestReviewCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddPullRequestReviewCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"comment\", \"comment_edge\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    comment = sgqlc.types.Field(\"PullRequestReviewComment\", graphql_name=\"comment\")\n    comment_edge = sgqlc.types.Field(\n        \"PullRequestReviewCommentEdge\", graphql_name=\"commentEdge\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewInput","title":"<code>AddPullRequestReviewInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddPullRequestReviewInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"pull_request_id\",\n        \"commit_oid\",\n        \"body\",\n        \"event\",\n        \"comments\",\n        \"threads\",\n        \"client_mutation_id\",\n    )\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    commit_oid = sgqlc.types.Field(GitObjectID, graphql_name=\"commitOID\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    event = sgqlc.types.Field(PullRequestReviewEvent, graphql_name=\"event\")\n    comments = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DraftPullRequestReviewComment\"), graphql_name=\"comments\"\n    )\n    threads = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DraftPullRequestReviewThread\"), graphql_name=\"threads\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewPayload","title":"<code>AddPullRequestReviewPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddPullRequestReviewPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request_review\", \"review_edge\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request_review = sgqlc.types.Field(\n        \"PullRequestReview\", graphql_name=\"pullRequestReview\"\n    )\n    review_edge = sgqlc.types.Field(\"PullRequestReviewEdge\", graphql_name=\"reviewEdge\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewThreadInput","title":"<code>AddPullRequestReviewThreadInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddPullRequestReviewThreadInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"path\",\n        \"body\",\n        \"pull_request_id\",\n        \"pull_request_review_id\",\n        \"line\",\n        \"side\",\n        \"start_line\",\n        \"start_side\",\n        \"client_mutation_id\",\n    )\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    pull_request_id = sgqlc.types.Field(ID, graphql_name=\"pullRequestId\")\n    pull_request_review_id = sgqlc.types.Field(ID, graphql_name=\"pullRequestReviewId\")\n    line = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"line\")\n    side = sgqlc.types.Field(DiffSide, graphql_name=\"side\")\n    start_line = sgqlc.types.Field(Int, graphql_name=\"startLine\")\n    start_side = sgqlc.types.Field(DiffSide, graphql_name=\"startSide\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewThreadPayload","title":"<code>AddPullRequestReviewThreadPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddPullRequestReviewThreadPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"thread\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    thread = sgqlc.types.Field(\"PullRequestReviewThread\", graphql_name=\"thread\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddReactionInput","title":"<code>AddReactionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddReactionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"subject_id\", \"content\", \"client_mutation_id\")\n    subject_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"subjectId\")\n    content = sgqlc.types.Field(\n        sgqlc.types.non_null(ReactionContent), graphql_name=\"content\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddReactionPayload","title":"<code>AddReactionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddReactionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"reaction\", \"subject\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    reaction = sgqlc.types.Field(\"Reaction\", graphql_name=\"reaction\")\n    subject = sgqlc.types.Field(\"Reactable\", graphql_name=\"subject\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddStarInput","title":"<code>AddStarInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddStarInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"starrable_id\", \"client_mutation_id\")\n    starrable_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"starrableId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddStarPayload","title":"<code>AddStarPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddStarPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"starrable\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    starrable = sgqlc.types.Field(\"Starrable\", graphql_name=\"starrable\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddUpvoteInput","title":"<code>AddUpvoteInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddUpvoteInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"subject_id\", \"client_mutation_id\")\n    subject_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"subjectId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddUpvotePayload","title":"<code>AddUpvotePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddUpvotePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"subject\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    subject = sgqlc.types.Field(\"Votable\", graphql_name=\"subject\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddVerifiableDomainInput","title":"<code>AddVerifiableDomainInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddVerifiableDomainInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"owner_id\", \"domain\", \"client_mutation_id\")\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    domain = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"domain\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddVerifiableDomainPayload","title":"<code>AddVerifiableDomainPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddVerifiableDomainPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"domain\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    domain = sgqlc.types.Field(\"VerifiableDomain\", graphql_name=\"domain\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddedToProjectEvent","title":"<code>AddedToProjectEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AddedToProjectEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"database_id\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.App","title":"<code>App</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class App(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"database_id\",\n        \"description\",\n        \"ip_allow_list_entries\",\n        \"logo_background_color\",\n        \"logo_url\",\n        \"name\",\n        \"slug\",\n        \"updated_at\",\n        \"url\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    ip_allow_list_entries = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListEntryConnection),\n        graphql_name=\"ipAllowListEntries\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        IpAllowListEntryOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"ALLOW_LIST_VALUE\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    logo_background_color = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"logoBackgroundColor\"\n    )\n    logo_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI),\n        graphql_name=\"logoUrl\",\n        args=sgqlc.types.ArgDict(\n            ((\"size\", sgqlc.types.Arg(Int, graphql_name=\"size\", default=None)),)\n        ),\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"slug\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ApproveDeploymentsInput","title":"<code>ApproveDeploymentsInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ApproveDeploymentsInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"workflow_run_id\",\n        \"environment_ids\",\n        \"comment\",\n        \"client_mutation_id\",\n    )\n    workflow_run_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"workflowRunId\"\n    )\n    environment_ids = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),\n        graphql_name=\"environmentIds\",\n    )\n    comment = sgqlc.types.Field(String, graphql_name=\"comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ApproveDeploymentsPayload","title":"<code>ApproveDeploymentsPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ApproveDeploymentsPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"deployments\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    deployments = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"Deployment\")),\n        graphql_name=\"deployments\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ApproveVerifiableDomainInput","title":"<code>ApproveVerifiableDomainInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ApproveVerifiableDomainInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ApproveVerifiableDomainPayload","title":"<code>ApproveVerifiableDomainPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ApproveVerifiableDomainPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"domain\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    domain = sgqlc.types.Field(\"VerifiableDomain\", graphql_name=\"domain\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ArchiveRepositoryInput","title":"<code>ArchiveRepositoryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ArchiveRepositoryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ArchiveRepositoryPayload","title":"<code>ArchiveRepositoryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ArchiveRepositoryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Assignable","title":"<code>Assignable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Assignable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"assignees\",)\n    assignees = sgqlc.types.Field(\n        sgqlc.types.non_null(\"UserConnection\"),\n        graphql_name=\"assignees\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AssignedEvent","title":"<code>AssignedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AssignedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"assignable\", \"assignee\", \"created_at\", \"user\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    assignable = sgqlc.types.Field(\n        sgqlc.types.non_null(Assignable), graphql_name=\"assignable\"\n    )\n    assignee = sgqlc.types.Field(\"Assignee\", graphql_name=\"assignee\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Assignee","title":"<code>Assignee</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Assignee(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Bot, Mannequin, Organization, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AuditEntry","title":"<code>AuditEntry</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AuditEntry(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"action\",\n        \"actor\",\n        \"actor_ip\",\n        \"actor_location\",\n        \"actor_login\",\n        \"actor_resource_path\",\n        \"actor_url\",\n        \"created_at\",\n        \"operation_type\",\n        \"user\",\n        \"user_login\",\n        \"user_resource_path\",\n        \"user_url\",\n    )\n    action = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"action\")\n    actor = sgqlc.types.Field(\"AuditEntryActor\", graphql_name=\"actor\")\n    actor_ip = sgqlc.types.Field(String, graphql_name=\"actorIp\")\n    actor_location = sgqlc.types.Field(ActorLocation, graphql_name=\"actorLocation\")\n    actor_login = sgqlc.types.Field(String, graphql_name=\"actorLogin\")\n    actor_resource_path = sgqlc.types.Field(URI, graphql_name=\"actorResourcePath\")\n    actor_url = sgqlc.types.Field(URI, graphql_name=\"actorUrl\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(PreciseDateTime), graphql_name=\"createdAt\"\n    )\n    operation_type = sgqlc.types.Field(OperationType, graphql_name=\"operationType\")\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n    user_login = sgqlc.types.Field(String, graphql_name=\"userLogin\")\n    user_resource_path = sgqlc.types.Field(URI, graphql_name=\"userResourcePath\")\n    user_url = sgqlc.types.Field(URI, graphql_name=\"userUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AuditEntryActor","title":"<code>AuditEntryActor</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AuditEntryActor(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Bot, Organization, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AuditLogOrder","title":"<code>AuditLogOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AuditLogOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(AuditLogOrderField, graphql_name=\"field\")\n    direction = sgqlc.types.Field(OrderDirection, graphql_name=\"direction\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AuditLogOrderField","title":"<code>AuditLogOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AuditLogOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoMergeDisabledEvent","title":"<code>AutoMergeDisabledEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AutoMergeDisabledEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"disabler\",\n        \"pull_request\",\n        \"reason\",\n        \"reason_code\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    disabler = sgqlc.types.Field(\"User\", graphql_name=\"disabler\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n    reason = sgqlc.types.Field(String, graphql_name=\"reason\")\n    reason_code = sgqlc.types.Field(String, graphql_name=\"reasonCode\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoMergeEnabledEvent","title":"<code>AutoMergeEnabledEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AutoMergeEnabledEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"enabler\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    enabler = sgqlc.types.Field(\"User\", graphql_name=\"enabler\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoMergeRequest","title":"<code>AutoMergeRequest</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AutoMergeRequest(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"author_email\",\n        \"commit_body\",\n        \"commit_headline\",\n        \"enabled_at\",\n        \"enabled_by\",\n        \"merge_method\",\n        \"pull_request\",\n    )\n    author_email = sgqlc.types.Field(String, graphql_name=\"authorEmail\")\n    commit_body = sgqlc.types.Field(String, graphql_name=\"commitBody\")\n    commit_headline = sgqlc.types.Field(String, graphql_name=\"commitHeadline\")\n    enabled_at = sgqlc.types.Field(DateTime, graphql_name=\"enabledAt\")\n    enabled_by = sgqlc.types.Field(Actor, graphql_name=\"enabledBy\")\n    merge_method = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestMergeMethod), graphql_name=\"mergeMethod\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoRebaseEnabledEvent","title":"<code>AutoRebaseEnabledEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AutoRebaseEnabledEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"enabler\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    enabler = sgqlc.types.Field(\"User\", graphql_name=\"enabler\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoSquashEnabledEvent","title":"<code>AutoSquashEnabledEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AutoSquashEnabledEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"enabler\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    enabler = sgqlc.types.Field(\"User\", graphql_name=\"enabler\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutomaticBaseChangeFailedEvent","title":"<code>AutomaticBaseChangeFailedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AutomaticBaseChangeFailedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"new_base\", \"old_base\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    new_base = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"newBase\")\n    old_base = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"oldBase\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutomaticBaseChangeSucceededEvent","title":"<code>AutomaticBaseChangeSucceededEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class AutomaticBaseChangeSucceededEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"new_base\", \"old_base\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    new_base = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"newBase\")\n    old_base = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"oldBase\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Base64String","title":"<code>Base64String</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Base64String(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BaseRefChangedEvent","title":"<code>BaseRefChangedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BaseRefChangedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"current_ref_name\",\n        \"database_id\",\n        \"previous_ref_name\",\n        \"pull_request\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    current_ref_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"currentRefName\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    previous_ref_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"previousRefName\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BaseRefDeletedEvent","title":"<code>BaseRefDeletedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BaseRefDeletedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"base_ref_name\", \"created_at\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    base_ref_name = sgqlc.types.Field(String, graphql_name=\"baseRefName\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BaseRefForcePushedEvent","title":"<code>BaseRefForcePushedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BaseRefForcePushedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"after_commit\",\n        \"before_commit\",\n        \"created_at\",\n        \"pull_request\",\n        \"ref\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    after_commit = sgqlc.types.Field(\"Commit\", graphql_name=\"afterCommit\")\n    before_commit = sgqlc.types.Field(\"Commit\", graphql_name=\"beforeCommit\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n    ref = sgqlc.types.Field(\"Ref\", graphql_name=\"ref\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Blame","title":"<code>Blame</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Blame(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"ranges\",)\n    ranges = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(\"BlameRange\"))),\n        graphql_name=\"ranges\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BlameRange","title":"<code>BlameRange</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BlameRange(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"age\", \"commit\", \"ending_line\", \"starting_line\")\n    age = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"age\")\n    commit = sgqlc.types.Field(sgqlc.types.non_null(\"Commit\"), graphql_name=\"commit\")\n    ending_line = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"endingLine\"\n    )\n    starting_line = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"startingLine\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Blob","title":"<code>Blob</code>","text":"<p>             Bases: <code>Type</code>, <code>GitObject</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Blob(sgqlc.types.Type, GitObject, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"byte_size\", \"is_binary\", \"is_truncated\", \"text\")\n    byte_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"byteSize\")\n    is_binary = sgqlc.types.Field(Boolean, graphql_name=\"isBinary\")\n    is_truncated = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isTruncated\"\n    )\n    text = sgqlc.types.Field(String, graphql_name=\"text\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Bot","title":"<code>Bot</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Actor</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Bot(sgqlc.types.Type, Node, Actor, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"created_at\", \"database_id\", \"updated_at\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchActorAllowanceActor","title":"<code>BranchActorAllowanceActor</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BranchActorAllowanceActor(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (App, Team, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRule","title":"<code>BranchProtectionRule</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BranchProtectionRule(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"allows_deletions\",\n        \"allows_force_pushes\",\n        \"blocks_creations\",\n        \"branch_protection_rule_conflicts\",\n        \"bypass_force_push_allowances\",\n        \"bypass_pull_request_allowances\",\n        \"creator\",\n        \"database_id\",\n        \"dismisses_stale_reviews\",\n        \"is_admin_enforced\",\n        \"matching_refs\",\n        \"pattern\",\n        \"push_allowances\",\n        \"repository\",\n        \"required_approving_review_count\",\n        \"required_status_check_contexts\",\n        \"required_status_checks\",\n        \"requires_approving_reviews\",\n        \"requires_code_owner_reviews\",\n        \"requires_commit_signatures\",\n        \"requires_conversation_resolution\",\n        \"requires_linear_history\",\n        \"requires_status_checks\",\n        \"requires_strict_status_checks\",\n        \"restricts_pushes\",\n        \"restricts_review_dismissals\",\n        \"review_dismissal_allowances\",\n    )\n    allows_deletions = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"allowsDeletions\"\n    )\n    allows_force_pushes = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"allowsForcePushes\"\n    )\n    blocks_creations = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"blocksCreations\"\n    )\n    branch_protection_rule_conflicts = sgqlc.types.Field(\n        sgqlc.types.non_null(BranchProtectionRuleConflictConnection),\n        graphql_name=\"branchProtectionRuleConflicts\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    bypass_force_push_allowances = sgqlc.types.Field(\n        sgqlc.types.non_null(BypassForcePushAllowanceConnection),\n        graphql_name=\"bypassForcePushAllowances\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    bypass_pull_request_allowances = sgqlc.types.Field(\n        sgqlc.types.non_null(BypassPullRequestAllowanceConnection),\n        graphql_name=\"bypassPullRequestAllowances\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    dismisses_stale_reviews = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"dismissesStaleReviews\"\n    )\n    is_admin_enforced = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isAdminEnforced\"\n    )\n    matching_refs = sgqlc.types.Field(\n        sgqlc.types.non_null(RefConnection),\n        graphql_name=\"matchingRefs\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pattern = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"pattern\")\n    push_allowances = sgqlc.types.Field(\n        sgqlc.types.non_null(PushAllowanceConnection),\n        graphql_name=\"pushAllowances\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n    required_approving_review_count = sgqlc.types.Field(\n        Int, graphql_name=\"requiredApprovingReviewCount\"\n    )\n    required_status_check_contexts = sgqlc.types.Field(\n        sgqlc.types.list_of(String), graphql_name=\"requiredStatusCheckContexts\"\n    )\n    required_status_checks = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(RequiredStatusCheckDescription)),\n        graphql_name=\"requiredStatusChecks\",\n    )\n    requires_approving_reviews = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresApprovingReviews\"\n    )\n    requires_code_owner_reviews = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresCodeOwnerReviews\"\n    )\n    requires_commit_signatures = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresCommitSignatures\"\n    )\n    requires_conversation_resolution = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresConversationResolution\"\n    )\n    requires_linear_history = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresLinearHistory\"\n    )\n    requires_status_checks = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresStatusChecks\"\n    )\n    requires_strict_status_checks = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresStrictStatusChecks\"\n    )\n    restricts_pushes = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"restrictsPushes\"\n    )\n    restricts_review_dismissals = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"restrictsReviewDismissals\"\n    )\n    review_dismissal_allowances = sgqlc.types.Field(\n        sgqlc.types.non_null(ReviewDismissalAllowanceConnection),\n        graphql_name=\"reviewDismissalAllowances\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleConflict","title":"<code>BranchProtectionRuleConflict</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BranchProtectionRuleConflict(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"branch_protection_rule\",\n        \"conflicting_branch_protection_rule\",\n        \"ref\",\n    )\n    branch_protection_rule = sgqlc.types.Field(\n        \"BranchProtectionRule\", graphql_name=\"branchProtectionRule\"\n    )\n    conflicting_branch_protection_rule = sgqlc.types.Field(\n        \"BranchProtectionRule\", graphql_name=\"conflictingBranchProtectionRule\"\n    )\n    ref = sgqlc.types.Field(\"Ref\", graphql_name=\"ref\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleConflictConnection","title":"<code>BranchProtectionRuleConflictConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BranchProtectionRuleConflictConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"BranchProtectionRuleConflictEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(BranchProtectionRuleConflict), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleConflictEdge","title":"<code>BranchProtectionRuleConflictEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BranchProtectionRuleConflictEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(BranchProtectionRuleConflict, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleConnection","title":"<code>BranchProtectionRuleConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BranchProtectionRuleConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"BranchProtectionRuleEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"BranchProtectionRule\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleEdge","title":"<code>BranchProtectionRuleEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BranchProtectionRuleEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"BranchProtectionRule\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassForcePushAllowance","title":"<code>BypassForcePushAllowance</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BypassForcePushAllowance(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"branch_protection_rule\")\n    actor = sgqlc.types.Field(\"BranchActorAllowanceActor\", graphql_name=\"actor\")\n    branch_protection_rule = sgqlc.types.Field(\n        BranchProtectionRule, graphql_name=\"branchProtectionRule\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassForcePushAllowanceConnection","title":"<code>BypassForcePushAllowanceConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BypassForcePushAllowanceConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"BypassForcePushAllowanceEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"BypassForcePushAllowance\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassForcePushAllowanceEdge","title":"<code>BypassForcePushAllowanceEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BypassForcePushAllowanceEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"BypassForcePushAllowance\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassPullRequestAllowance","title":"<code>BypassPullRequestAllowance</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BypassPullRequestAllowance(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"branch_protection_rule\")\n    actor = sgqlc.types.Field(\"BranchActorAllowanceActor\", graphql_name=\"actor\")\n    branch_protection_rule = sgqlc.types.Field(\n        BranchProtectionRule, graphql_name=\"branchProtectionRule\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassPullRequestAllowanceConnection","title":"<code>BypassPullRequestAllowanceConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BypassPullRequestAllowanceConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"BypassPullRequestAllowanceEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"BypassPullRequestAllowance\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassPullRequestAllowanceEdge","title":"<code>BypassPullRequestAllowanceEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class BypassPullRequestAllowanceEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"BypassPullRequestAllowance\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CVSS","title":"<code>CVSS</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CVSS(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"score\", \"vector_string\")\n    score = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name=\"score\")\n    vector_string = sgqlc.types.Field(String, graphql_name=\"vectorString\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CWE","title":"<code>CWE</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CWE(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cwe_id\", \"description\", \"name\")\n    cwe_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cweId\")\n    description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"description\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CWEConnection","title":"<code>CWEConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CWEConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"CWEEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"CWE\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CWEEdge","title":"<code>CWEEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CWEEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"CWE\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CancelEnterpriseAdminInvitationInput","title":"<code>CancelEnterpriseAdminInvitationInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CancelEnterpriseAdminInvitationInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"invitation_id\", \"client_mutation_id\")\n    invitation_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"invitationId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CancelEnterpriseAdminInvitationPayload","title":"<code>CancelEnterpriseAdminInvitationPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CancelEnterpriseAdminInvitationPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"invitation\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    invitation = sgqlc.types.Field(\n        \"EnterpriseAdministratorInvitation\", graphql_name=\"invitation\"\n    )\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CancelSponsorshipInput","title":"<code>CancelSponsorshipInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CancelSponsorshipInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"sponsor_id\",\n        \"sponsor_login\",\n        \"sponsorable_id\",\n        \"sponsorable_login\",\n        \"client_mutation_id\",\n    )\n    sponsor_id = sgqlc.types.Field(ID, graphql_name=\"sponsorId\")\n    sponsor_login = sgqlc.types.Field(String, graphql_name=\"sponsorLogin\")\n    sponsorable_id = sgqlc.types.Field(ID, graphql_name=\"sponsorableId\")\n    sponsorable_login = sgqlc.types.Field(String, graphql_name=\"sponsorableLogin\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CancelSponsorshipPayload","title":"<code>CancelSponsorshipPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CancelSponsorshipPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"sponsors_tier\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    sponsors_tier = sgqlc.types.Field(\"SponsorsTier\", graphql_name=\"sponsorsTier\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ChangeUserStatusInput","title":"<code>ChangeUserStatusInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ChangeUserStatusInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"emoji\",\n        \"message\",\n        \"organization_id\",\n        \"limited_availability\",\n        \"expires_at\",\n        \"client_mutation_id\",\n    )\n    emoji = sgqlc.types.Field(String, graphql_name=\"emoji\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n    organization_id = sgqlc.types.Field(ID, graphql_name=\"organizationId\")\n    limited_availability = sgqlc.types.Field(\n        Boolean, graphql_name=\"limitedAvailability\"\n    )\n    expires_at = sgqlc.types.Field(DateTime, graphql_name=\"expiresAt\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ChangeUserStatusPayload","title":"<code>ChangeUserStatusPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ChangeUserStatusPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"status\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    status = sgqlc.types.Field(\"UserStatus\", graphql_name=\"status\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotation","title":"<code>CheckAnnotation</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckAnnotation(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"annotation_level\",\n        \"blob_url\",\n        \"database_id\",\n        \"location\",\n        \"message\",\n        \"path\",\n        \"raw_details\",\n        \"title\",\n    )\n    annotation_level = sgqlc.types.Field(\n        CheckAnnotationLevel, graphql_name=\"annotationLevel\"\n    )\n    blob_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"blobUrl\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    location = sgqlc.types.Field(\n        sgqlc.types.non_null(\"CheckAnnotationSpan\"), graphql_name=\"location\"\n    )\n    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"message\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    raw_details = sgqlc.types.Field(String, graphql_name=\"rawDetails\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationConnection","title":"<code>CheckAnnotationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckAnnotationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CheckAnnotationEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(CheckAnnotation), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationData","title":"<code>CheckAnnotationData</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckAnnotationData(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"path\",\n        \"location\",\n        \"annotation_level\",\n        \"message\",\n        \"title\",\n        \"raw_details\",\n    )\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    location = sgqlc.types.Field(\n        sgqlc.types.non_null(\"CheckAnnotationRange\"), graphql_name=\"location\"\n    )\n    annotation_level = sgqlc.types.Field(\n        sgqlc.types.non_null(CheckAnnotationLevel), graphql_name=\"annotationLevel\"\n    )\n    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"message\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    raw_details = sgqlc.types.Field(String, graphql_name=\"rawDetails\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationEdge","title":"<code>CheckAnnotationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckAnnotationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(CheckAnnotation, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationLevel","title":"<code>CheckAnnotationLevel</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckAnnotationLevel(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"FAILURE\", \"NOTICE\", \"WARNING\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationPosition","title":"<code>CheckAnnotationPosition</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckAnnotationPosition(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"column\", \"line\")\n    column = sgqlc.types.Field(Int, graphql_name=\"column\")\n    line = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"line\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationRange","title":"<code>CheckAnnotationRange</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckAnnotationRange(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"start_line\", \"start_column\", \"end_line\", \"end_column\")\n    start_line = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"startLine\")\n    start_column = sgqlc.types.Field(Int, graphql_name=\"startColumn\")\n    end_line = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"endLine\")\n    end_column = sgqlc.types.Field(Int, graphql_name=\"endColumn\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationSpan","title":"<code>CheckAnnotationSpan</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckAnnotationSpan(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"end\", \"start\")\n    end = sgqlc.types.Field(\n        sgqlc.types.non_null(CheckAnnotationPosition), graphql_name=\"end\"\n    )\n    start = sgqlc.types.Field(\n        sgqlc.types.non_null(CheckAnnotationPosition), graphql_name=\"start\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckConclusionState","title":"<code>CheckConclusionState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckConclusionState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ACTION_REQUIRED\",\n        \"CANCELLED\",\n        \"FAILURE\",\n        \"NEUTRAL\",\n        \"SKIPPED\",\n        \"STALE\",\n        \"STARTUP_FAILURE\",\n        \"SUCCESS\",\n        \"TIMED_OUT\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRun","title":"<code>CheckRun</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code>, <code>RequirableByPullRequest</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRun(\n    sgqlc.types.Type, Node, UniformResourceLocatable, RequirableByPullRequest\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"annotations\",\n        \"check_suite\",\n        \"completed_at\",\n        \"conclusion\",\n        \"database_id\",\n        \"deployment\",\n        \"details_url\",\n        \"external_id\",\n        \"name\",\n        \"pending_deployment_request\",\n        \"permalink\",\n        \"repository\",\n        \"started_at\",\n        \"status\",\n        \"steps\",\n        \"summary\",\n        \"text\",\n        \"title\",\n    )\n    annotations = sgqlc.types.Field(\n        CheckAnnotationConnection,\n        graphql_name=\"annotations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    check_suite = sgqlc.types.Field(\n        sgqlc.types.non_null(\"CheckSuite\"), graphql_name=\"checkSuite\"\n    )\n    completed_at = sgqlc.types.Field(DateTime, graphql_name=\"completedAt\")\n    conclusion = sgqlc.types.Field(CheckConclusionState, graphql_name=\"conclusion\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    deployment = sgqlc.types.Field(\"Deployment\", graphql_name=\"deployment\")\n    details_url = sgqlc.types.Field(URI, graphql_name=\"detailsUrl\")\n    external_id = sgqlc.types.Field(String, graphql_name=\"externalId\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    pending_deployment_request = sgqlc.types.Field(\n        DeploymentRequest, graphql_name=\"pendingDeploymentRequest\"\n    )\n    permalink = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"permalink\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    started_at = sgqlc.types.Field(DateTime, graphql_name=\"startedAt\")\n    status = sgqlc.types.Field(\n        sgqlc.types.non_null(CheckStatusState), graphql_name=\"status\"\n    )\n    steps = sgqlc.types.Field(\n        CheckStepConnection,\n        graphql_name=\"steps\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"number\", sgqlc.types.Arg(Int, graphql_name=\"number\", default=None)),\n            )\n        ),\n    )\n    summary = sgqlc.types.Field(String, graphql_name=\"summary\")\n    text = sgqlc.types.Field(String, graphql_name=\"text\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunAction","title":"<code>CheckRunAction</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunAction(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"label\", \"description\", \"identifier\")\n    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"label\")\n    description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"description\"\n    )\n    identifier = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"identifier\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunConnection","title":"<code>CheckRunConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"CheckRunEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"CheckRun\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunEdge","title":"<code>CheckRunEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"CheckRun\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunFilter","title":"<code>CheckRunFilter</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunFilter(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"check_type\",\n        \"app_id\",\n        \"check_name\",\n        \"status\",\n        \"statuses\",\n        \"conclusions\",\n    )\n    check_type = sgqlc.types.Field(CheckRunType, graphql_name=\"checkType\")\n    app_id = sgqlc.types.Field(Int, graphql_name=\"appId\")\n    check_name = sgqlc.types.Field(String, graphql_name=\"checkName\")\n    status = sgqlc.types.Field(CheckStatusState, graphql_name=\"status\")\n    statuses = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(CheckStatusState)),\n        graphql_name=\"statuses\",\n    )\n    conclusions = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(CheckConclusionState)),\n        graphql_name=\"conclusions\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunOutput","title":"<code>CheckRunOutput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunOutput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"title\", \"summary\", \"text\", \"annotations\", \"images\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"summary\")\n    text = sgqlc.types.Field(String, graphql_name=\"text\")\n    annotations = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(CheckAnnotationData)),\n        graphql_name=\"annotations\",\n    )\n    images = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"CheckRunOutputImage\")),\n        graphql_name=\"images\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunOutputImage","title":"<code>CheckRunOutputImage</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunOutputImage(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"alt\", \"image_url\", \"caption\")\n    alt = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"alt\")\n    image_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"imageUrl\")\n    caption = sgqlc.types.Field(String, graphql_name=\"caption\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunState","title":"<code>CheckRunState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ACTION_REQUIRED\",\n        \"CANCELLED\",\n        \"COMPLETED\",\n        \"FAILURE\",\n        \"IN_PROGRESS\",\n        \"NEUTRAL\",\n        \"PENDING\",\n        \"QUEUED\",\n        \"SKIPPED\",\n        \"STALE\",\n        \"STARTUP_FAILURE\",\n        \"SUCCESS\",\n        \"TIMED_OUT\",\n        \"WAITING\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunStateCount","title":"<code>CheckRunStateCount</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunStateCount(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"count\", \"state\")\n    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"count\")\n    state = sgqlc.types.Field(sgqlc.types.non_null(CheckRunState), graphql_name=\"state\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunType","title":"<code>CheckRunType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckRunType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALL\", \"LATEST\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckStatusState","title":"<code>CheckStatusState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckStatusState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"COMPLETED\",\n        \"IN_PROGRESS\",\n        \"PENDING\",\n        \"QUEUED\",\n        \"REQUESTED\",\n        \"WAITING\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckStep","title":"<code>CheckStep</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckStep(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"completed_at\",\n        \"conclusion\",\n        \"external_id\",\n        \"name\",\n        \"number\",\n        \"seconds_to_completion\",\n        \"started_at\",\n        \"status\",\n    )\n    completed_at = sgqlc.types.Field(DateTime, graphql_name=\"completedAt\")\n    conclusion = sgqlc.types.Field(CheckConclusionState, graphql_name=\"conclusion\")\n    external_id = sgqlc.types.Field(String, graphql_name=\"externalId\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    seconds_to_completion = sgqlc.types.Field(Int, graphql_name=\"secondsToCompletion\")\n    started_at = sgqlc.types.Field(DateTime, graphql_name=\"startedAt\")\n    status = sgqlc.types.Field(\n        sgqlc.types.non_null(CheckStatusState), graphql_name=\"status\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckStepConnection","title":"<code>CheckStepConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckStepConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CheckStepEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(CheckStep), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckStepEdge","title":"<code>CheckStepEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckStepEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(CheckStep, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuite","title":"<code>CheckSuite</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckSuite(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"app\",\n        \"branch\",\n        \"check_runs\",\n        \"commit\",\n        \"conclusion\",\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"matching_pull_requests\",\n        \"push\",\n        \"repository\",\n        \"resource_path\",\n        \"status\",\n        \"updated_at\",\n        \"url\",\n        \"workflow_run\",\n    )\n    app = sgqlc.types.Field(App, graphql_name=\"app\")\n    branch = sgqlc.types.Field(\"Ref\", graphql_name=\"branch\")\n    check_runs = sgqlc.types.Field(\n        CheckRunConnection,\n        graphql_name=\"checkRuns\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"filter_by\",\n                    sgqlc.types.Arg(\n                        CheckRunFilter, graphql_name=\"filterBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    commit = sgqlc.types.Field(sgqlc.types.non_null(\"Commit\"), graphql_name=\"commit\")\n    conclusion = sgqlc.types.Field(CheckConclusionState, graphql_name=\"conclusion\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(\"User\", graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    matching_pull_requests = sgqlc.types.Field(\n        PullRequestConnection,\n        graphql_name=\"matchingPullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(PullRequestState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"head_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"headRefName\", default=None),\n                ),\n                (\n                    \"base_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"baseRefName\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    push = sgqlc.types.Field(\"Push\", graphql_name=\"push\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    status = sgqlc.types.Field(\n        sgqlc.types.non_null(CheckStatusState), graphql_name=\"status\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    workflow_run = sgqlc.types.Field(\"WorkflowRun\", graphql_name=\"workflowRun\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuiteAutoTriggerPreference","title":"<code>CheckSuiteAutoTriggerPreference</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckSuiteAutoTriggerPreference(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"app_id\", \"setting\")\n    app_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"appId\")\n    setting = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"setting\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuiteConnection","title":"<code>CheckSuiteConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckSuiteConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CheckSuiteEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"CheckSuite\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuiteEdge","title":"<code>CheckSuiteEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckSuiteEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"CheckSuite\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuiteFilter","title":"<code>CheckSuiteFilter</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CheckSuiteFilter(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"app_id\", \"check_name\")\n    app_id = sgqlc.types.Field(Int, graphql_name=\"appId\")\n    check_name = sgqlc.types.Field(String, graphql_name=\"checkName\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClearLabelsFromLabelableInput","title":"<code>ClearLabelsFromLabelableInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ClearLabelsFromLabelableInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"labelable_id\", \"client_mutation_id\")\n    labelable_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"labelableId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClearLabelsFromLabelablePayload","title":"<code>ClearLabelsFromLabelablePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ClearLabelsFromLabelablePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"labelable\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    labelable = sgqlc.types.Field(\"Labelable\", graphql_name=\"labelable\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClearProjectV2ItemFieldValueInput","title":"<code>ClearProjectV2ItemFieldValueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ClearProjectV2ItemFieldValueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"item_id\", \"field_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"itemId\")\n    field_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"fieldId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClearProjectV2ItemFieldValuePayload","title":"<code>ClearProjectV2ItemFieldValuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ClearProjectV2ItemFieldValuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_v2_item\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_v2_item = sgqlc.types.Field(\"ProjectV2Item\", graphql_name=\"projectV2Item\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloneProjectInput","title":"<code>CloneProjectInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CloneProjectInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"target_owner_id\",\n        \"source_id\",\n        \"include_workflows\",\n        \"name\",\n        \"body\",\n        \"public\",\n        \"client_mutation_id\",\n    )\n    target_owner_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"targetOwnerId\"\n    )\n    source_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"sourceId\")\n    include_workflows = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"includeWorkflows\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    public = sgqlc.types.Field(Boolean, graphql_name=\"public\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloneProjectPayload","title":"<code>CloneProjectPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CloneProjectPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"job_status_id\", \"project\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    job_status_id = sgqlc.types.Field(String, graphql_name=\"jobStatusId\")\n    project = sgqlc.types.Field(\"Project\", graphql_name=\"project\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloneTemplateRepositoryInput","title":"<code>CloneTemplateRepositoryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CloneTemplateRepositoryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"name\",\n        \"owner_id\",\n        \"description\",\n        \"visibility\",\n        \"include_all_branches\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    visibility = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryVisibility), graphql_name=\"visibility\"\n    )\n    include_all_branches = sgqlc.types.Field(Boolean, graphql_name=\"includeAllBranches\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloneTemplateRepositoryPayload","title":"<code>CloneTemplateRepositoryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CloneTemplateRepositoryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Closable","title":"<code>Closable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Closable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"closed\", \"closed_at\")\n    closed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"closed\")\n    closed_at = sgqlc.types.Field(DateTime, graphql_name=\"closedAt\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloseIssueInput","title":"<code>CloseIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CloseIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"issue_id\", \"state_reason\", \"client_mutation_id\")\n    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"issueId\")\n    state_reason = sgqlc.types.Field(IssueClosedStateReason, graphql_name=\"stateReason\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloseIssuePayload","title":"<code>CloseIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CloseIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"issue\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    issue = sgqlc.types.Field(\"Issue\", graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClosePullRequestInput","title":"<code>ClosePullRequestInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ClosePullRequestInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_id\", \"client_mutation_id\")\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClosePullRequestPayload","title":"<code>ClosePullRequestPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ClosePullRequestPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClosedEvent","title":"<code>ClosedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ClosedEvent(sgqlc.types.Type, Node, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"closable\", \"closer\", \"created_at\", \"state_reason\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    closable = sgqlc.types.Field(\n        sgqlc.types.non_null(Closable), graphql_name=\"closable\"\n    )\n    closer = sgqlc.types.Field(\"Closer\", graphql_name=\"closer\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    state_reason = sgqlc.types.Field(IssueStateReason, graphql_name=\"stateReason\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Closer","title":"<code>Closer</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Closer(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Commit, PullRequest)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CodeOfConduct","title":"<code>CodeOfConduct</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CodeOfConduct(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"body\", \"key\", \"name\", \"resource_path\", \"url\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"key\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    resource_path = sgqlc.types.Field(URI, graphql_name=\"resourcePath\")\n    url = sgqlc.types.Field(URI, graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CollaboratorAffiliation","title":"<code>CollaboratorAffiliation</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CollaboratorAffiliation(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALL\", \"DIRECT\", \"OUTSIDE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Comment","title":"<code>Comment</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Comment(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"author\",\n        \"author_association\",\n        \"body\",\n        \"body_html\",\n        \"body_text\",\n        \"created_at\",\n        \"created_via_email\",\n        \"editor\",\n        \"id\",\n        \"includes_created_edit\",\n        \"last_edited_at\",\n        \"published_at\",\n        \"updated_at\",\n        \"user_content_edits\",\n        \"viewer_did_author\",\n    )\n    author = sgqlc.types.Field(Actor, graphql_name=\"author\")\n    author_association = sgqlc.types.Field(\n        sgqlc.types.non_null(CommentAuthorAssociation), graphql_name=\"authorAssociation\"\n    )\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    body_html = sgqlc.types.Field(sgqlc.types.non_null(HTML), graphql_name=\"bodyHTML\")\n    body_text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"bodyText\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    created_via_email = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"createdViaEmail\"\n    )\n    editor = sgqlc.types.Field(Actor, graphql_name=\"editor\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    includes_created_edit = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"includesCreatedEdit\"\n    )\n    last_edited_at = sgqlc.types.Field(DateTime, graphql_name=\"lastEditedAt\")\n    published_at = sgqlc.types.Field(DateTime, graphql_name=\"publishedAt\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    user_content_edits = sgqlc.types.Field(\n        \"UserContentEditConnection\",\n        graphql_name=\"userContentEdits\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    viewer_did_author = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerDidAuthor\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommentAuthorAssociation","title":"<code>CommentAuthorAssociation</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommentAuthorAssociation(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"COLLABORATOR\",\n        \"CONTRIBUTOR\",\n        \"FIRST_TIMER\",\n        \"FIRST_TIME_CONTRIBUTOR\",\n        \"MANNEQUIN\",\n        \"MEMBER\",\n        \"NONE\",\n        \"OWNER\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommentCannotUpdateReason","title":"<code>CommentCannotUpdateReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommentCannotUpdateReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ARCHIVED\",\n        \"DENIED\",\n        \"INSUFFICIENT_ACCESS\",\n        \"LOCKED\",\n        \"LOGIN_REQUIRED\",\n        \"MAINTENANCE\",\n        \"VERIFIED_EMAIL_REQUIRED\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommentDeletedEvent","title":"<code>CommentDeletedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommentDeletedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"database_id\", \"deleted_comment_author\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    deleted_comment_author = sgqlc.types.Field(\n        Actor, graphql_name=\"deletedCommentAuthor\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Commit","title":"<code>Commit</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>GitObject</code>, <code>Subscribable</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Commit(sgqlc.types.Type, Node, GitObject, Subscribable, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"additions\",\n        \"associated_pull_requests\",\n        \"author\",\n        \"authored_by_committer\",\n        \"authored_date\",\n        \"authors\",\n        \"blame\",\n        \"changed_files\",\n        \"changed_files_if_available\",\n        \"check_suites\",\n        \"comments\",\n        \"committed_date\",\n        \"committed_via_web\",\n        \"committer\",\n        \"deletions\",\n        \"deployments\",\n        \"file\",\n        \"history\",\n        \"message\",\n        \"message_body\",\n        \"message_body_html\",\n        \"message_headline\",\n        \"message_headline_html\",\n        \"on_behalf_of\",\n        \"parents\",\n        \"pushed_date\",\n        \"signature\",\n        \"status\",\n        \"status_check_rollup\",\n        \"submodules\",\n        \"tarball_url\",\n        \"tree\",\n        \"tree_resource_path\",\n        \"tree_url\",\n        \"zipball_url\",\n    )\n    additions = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"additions\")\n    associated_pull_requests = sgqlc.types.Field(\n        PullRequestConnection,\n        graphql_name=\"associatedPullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        PullRequestOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    author = sgqlc.types.Field(GitActor, graphql_name=\"author\")\n    authored_by_committer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"authoredByCommitter\"\n    )\n    authored_date = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"authoredDate\"\n    )\n    authors = sgqlc.types.Field(\n        sgqlc.types.non_null(GitActorConnection),\n        graphql_name=\"authors\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    blame = sgqlc.types.Field(\n        sgqlc.types.non_null(Blame),\n        graphql_name=\"blame\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"path\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"path\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    changed_files = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"changedFiles\"\n    )\n    changed_files_if_available = sgqlc.types.Field(\n        Int, graphql_name=\"changedFilesIfAvailable\"\n    )\n    check_suites = sgqlc.types.Field(\n        CheckSuiteConnection,\n        graphql_name=\"checkSuites\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"filter_by\",\n                    sgqlc.types.Arg(\n                        CheckSuiteFilter, graphql_name=\"filterBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    committed_date = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"committedDate\"\n    )\n    committed_via_web = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"committedViaWeb\"\n    )\n    committer = sgqlc.types.Field(GitActor, graphql_name=\"committer\")\n    deletions = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"deletions\")\n    deployments = sgqlc.types.Field(\n        DeploymentConnection,\n        graphql_name=\"deployments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"environments\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"environments\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        DeploymentOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    file = sgqlc.types.Field(\n        TreeEntry,\n        graphql_name=\"file\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"path\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"path\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    history = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitHistoryConnection),\n        graphql_name=\"history\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"path\", sgqlc.types.Arg(String, graphql_name=\"path\", default=None)),\n                (\n                    \"author\",\n                    sgqlc.types.Arg(CommitAuthor, graphql_name=\"author\", default=None),\n                ),\n                (\n                    \"since\",\n                    sgqlc.types.Arg(GitTimestamp, graphql_name=\"since\", default=None),\n                ),\n                (\n                    \"until\",\n                    sgqlc.types.Arg(GitTimestamp, graphql_name=\"until\", default=None),\n                ),\n            )\n        ),\n    )\n    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"message\")\n    message_body = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"messageBody\"\n    )\n    message_body_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"messageBodyHTML\"\n    )\n    message_headline = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"messageHeadline\"\n    )\n    message_headline_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"messageHeadlineHTML\"\n    )\n    on_behalf_of = sgqlc.types.Field(\"Organization\", graphql_name=\"onBehalfOf\")\n    parents = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitConnection),\n        graphql_name=\"parents\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pushed_date = sgqlc.types.Field(DateTime, graphql_name=\"pushedDate\")\n    signature = sgqlc.types.Field(GitSignature, graphql_name=\"signature\")\n    status = sgqlc.types.Field(\"Status\", graphql_name=\"status\")\n    status_check_rollup = sgqlc.types.Field(\n        \"StatusCheckRollup\", graphql_name=\"statusCheckRollup\"\n    )\n    submodules = sgqlc.types.Field(\n        sgqlc.types.non_null(SubmoduleConnection),\n        graphql_name=\"submodules\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    tarball_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"tarballUrl\"\n    )\n    tree = sgqlc.types.Field(sgqlc.types.non_null(\"Tree\"), graphql_name=\"tree\")\n    tree_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"treeResourcePath\"\n    )\n    tree_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"treeUrl\")\n    zipball_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"zipballUrl\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitAuthor","title":"<code>CommitAuthor</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitAuthor(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"emails\")\n    id = sgqlc.types.Field(ID, graphql_name=\"id\")\n    emails = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name=\"emails\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitComment","title":"<code>CommitComment</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Comment</code>, <code>Deletable</code>, <code>Minimizable</code>, <code>Updatable</code>, <code>UpdatableComment</code>, <code>Reactable</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitComment(\n    sgqlc.types.Type,\n    Node,\n    Comment,\n    Deletable,\n    Minimizable,\n    Updatable,\n    UpdatableComment,\n    Reactable,\n    RepositoryNode,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"commit\", \"path\", \"position\", \"resource_path\", \"url\")\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    path = sgqlc.types.Field(String, graphql_name=\"path\")\n    position = sgqlc.types.Field(Int, graphql_name=\"position\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitCommentConnection","title":"<code>CommitCommentConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitCommentConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CommitCommentEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CommitComment\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitCommentEdge","title":"<code>CommitCommentEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitCommentEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"CommitComment\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitCommentThread","title":"<code>CommitCommentThread</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitCommentThread(sgqlc.types.Type, Node, RepositoryNode):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"comments\", \"commit\", \"path\", \"position\")\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    path = sgqlc.types.Field(String, graphql_name=\"path\")\n    position = sgqlc.types.Field(Int, graphql_name=\"position\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitConnection","title":"<code>CommitConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"CommitEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Commit\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitContributionOrder","title":"<code>CommitContributionOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitContributionOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitContributionOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitContributionOrderField","title":"<code>CommitContributionOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitContributionOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"COMMIT_COUNT\", \"OCCURRED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitContributionsByRepository","title":"<code>CommitContributionsByRepository</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitContributionsByRepository(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"contributions\", \"repository\", \"resource_path\", \"url\")\n    contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(\"CreatedCommitContributionConnection\"),\n        graphql_name=\"contributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        CommitContributionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"OCCURRED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitEdge","title":"<code>CommitEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Commit\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitHistoryConnection","title":"<code>CommitHistoryConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitHistoryConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(CommitEdge), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Commit\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitMessage","title":"<code>CommitMessage</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommitMessage(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"headline\", \"body\")\n    headline = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"headline\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommittableBranch","title":"<code>CommittableBranch</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CommittableBranch(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"repository_name_with_owner\", \"branch_name\")\n    id = sgqlc.types.Field(ID, graphql_name=\"id\")\n    repository_name_with_owner = sgqlc.types.Field(\n        String, graphql_name=\"repositoryNameWithOwner\"\n    )\n    branch_name = sgqlc.types.Field(String, graphql_name=\"branchName\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConnectedEvent","title":"<code>ConnectedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ConnectedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"is_cross_repository\",\n        \"source\",\n        \"subject\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    is_cross_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCrossRepository\"\n    )\n    source = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReferencedSubject\"), graphql_name=\"source\"\n    )\n    subject = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReferencedSubject\"), graphql_name=\"subject\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Contribution","title":"<code>Contribution</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Contribution(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_restricted\", \"occurred_at\", \"resource_path\", \"url\", \"user\")\n    is_restricted = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isRestricted\"\n    )\n    occurred_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"occurredAt\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    user = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionCalendar","title":"<code>ContributionCalendar</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ContributionCalendar(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"colors\",\n        \"is_halloween\",\n        \"months\",\n        \"total_contributions\",\n        \"weeks\",\n    )\n    colors = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),\n        graphql_name=\"colors\",\n    )\n    is_halloween = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isHalloween\"\n    )\n    months = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(\"ContributionCalendarMonth\"))\n        ),\n        graphql_name=\"months\",\n    )\n    total_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalContributions\"\n    )\n    weeks = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(\"ContributionCalendarWeek\"))\n        ),\n        graphql_name=\"weeks\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionCalendarDay","title":"<code>ContributionCalendarDay</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ContributionCalendarDay(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"color\",\n        \"contribution_count\",\n        \"contribution_level\",\n        \"date\",\n        \"weekday\",\n    )\n    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"color\")\n    contribution_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"contributionCount\"\n    )\n    contribution_level = sgqlc.types.Field(\n        sgqlc.types.non_null(ContributionLevel), graphql_name=\"contributionLevel\"\n    )\n    date = sgqlc.types.Field(sgqlc.types.non_null(Date), graphql_name=\"date\")\n    weekday = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"weekday\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionCalendarMonth","title":"<code>ContributionCalendarMonth</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ContributionCalendarMonth(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"first_day\", \"name\", \"total_weeks\", \"year\")\n    first_day = sgqlc.types.Field(sgqlc.types.non_null(Date), graphql_name=\"firstDay\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    total_weeks = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalWeeks\"\n    )\n    year = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"year\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionCalendarWeek","title":"<code>ContributionCalendarWeek</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ContributionCalendarWeek(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"contribution_days\", \"first_day\")\n    contribution_days = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(ContributionCalendarDay))\n        ),\n        graphql_name=\"contributionDays\",\n    )\n    first_day = sgqlc.types.Field(sgqlc.types.non_null(Date), graphql_name=\"firstDay\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionLevel","title":"<code>ContributionLevel</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ContributionLevel(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"FIRST_QUARTILE\",\n        \"FOURTH_QUARTILE\",\n        \"NONE\",\n        \"SECOND_QUARTILE\",\n        \"THIRD_QUARTILE\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionOrder","title":"<code>ContributionOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ContributionOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"direction\",)\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionsCollection","title":"<code>ContributionsCollection</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ContributionsCollection(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"commit_contributions_by_repository\",\n        \"contribution_calendar\",\n        \"contribution_years\",\n        \"does_end_in_current_month\",\n        \"earliest_restricted_contribution_date\",\n        \"ended_at\",\n        \"first_issue_contribution\",\n        \"first_pull_request_contribution\",\n        \"first_repository_contribution\",\n        \"has_activity_in_the_past\",\n        \"has_any_contributions\",\n        \"has_any_restricted_contributions\",\n        \"is_single_day\",\n        \"issue_contributions\",\n        \"issue_contributions_by_repository\",\n        \"joined_git_hub_contribution\",\n        \"latest_restricted_contribution_date\",\n        \"most_recent_collection_with_activity\",\n        \"most_recent_collection_without_activity\",\n        \"popular_issue_contribution\",\n        \"popular_pull_request_contribution\",\n        \"pull_request_contributions\",\n        \"pull_request_contributions_by_repository\",\n        \"pull_request_review_contributions\",\n        \"pull_request_review_contributions_by_repository\",\n        \"repository_contributions\",\n        \"restricted_contributions_count\",\n        \"started_at\",\n        \"total_commit_contributions\",\n        \"total_issue_contributions\",\n        \"total_pull_request_contributions\",\n        \"total_pull_request_review_contributions\",\n        \"total_repositories_with_contributed_commits\",\n        \"total_repositories_with_contributed_issues\",\n        \"total_repositories_with_contributed_pull_request_reviews\",\n        \"total_repositories_with_contributed_pull_requests\",\n        \"total_repository_contributions\",\n        \"user\",\n    )\n    commit_contributions_by_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(CommitContributionsByRepository))\n        ),\n        graphql_name=\"commitContributionsByRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"max_repositories\",\n                    sgqlc.types.Arg(Int, graphql_name=\"maxRepositories\", default=25),\n                ),\n            )\n        ),\n    )\n    contribution_calendar = sgqlc.types.Field(\n        sgqlc.types.non_null(ContributionCalendar), graphql_name=\"contributionCalendar\"\n    )\n    contribution_years = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),\n        graphql_name=\"contributionYears\",\n    )\n    does_end_in_current_month = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"doesEndInCurrentMonth\"\n    )\n    earliest_restricted_contribution_date = sgqlc.types.Field(\n        Date, graphql_name=\"earliestRestrictedContributionDate\"\n    )\n    ended_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name=\"endedAt\")\n    first_issue_contribution = sgqlc.types.Field(\n        \"CreatedIssueOrRestrictedContribution\", graphql_name=\"firstIssueContribution\"\n    )\n    first_pull_request_contribution = sgqlc.types.Field(\n        \"CreatedPullRequestOrRestrictedContribution\",\n        graphql_name=\"firstPullRequestContribution\",\n    )\n    first_repository_contribution = sgqlc.types.Field(\n        \"CreatedRepositoryOrRestrictedContribution\",\n        graphql_name=\"firstRepositoryContribution\",\n    )\n    has_activity_in_the_past = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasActivityInThePast\"\n    )\n    has_any_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasAnyContributions\"\n    )\n    has_any_restricted_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasAnyRestrictedContributions\"\n    )\n    is_single_day = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isSingleDay\"\n    )\n    issue_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(\"CreatedIssueContributionConnection\"),\n        graphql_name=\"issueContributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"exclude_popular\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludePopular\", default=False\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ContributionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    issue_contributions_by_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(\"IssueContributionsByRepository\"))\n        ),\n        graphql_name=\"issueContributionsByRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"max_repositories\",\n                    sgqlc.types.Arg(Int, graphql_name=\"maxRepositories\", default=25),\n                ),\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"exclude_popular\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludePopular\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    joined_git_hub_contribution = sgqlc.types.Field(\n        \"JoinedGitHubContribution\", graphql_name=\"joinedGitHubContribution\"\n    )\n    latest_restricted_contribution_date = sgqlc.types.Field(\n        Date, graphql_name=\"latestRestrictedContributionDate\"\n    )\n    most_recent_collection_with_activity = sgqlc.types.Field(\n        \"ContributionsCollection\", graphql_name=\"mostRecentCollectionWithActivity\"\n    )\n    most_recent_collection_without_activity = sgqlc.types.Field(\n        \"ContributionsCollection\", graphql_name=\"mostRecentCollectionWithoutActivity\"\n    )\n    popular_issue_contribution = sgqlc.types.Field(\n        \"CreatedIssueContribution\", graphql_name=\"popularIssueContribution\"\n    )\n    popular_pull_request_contribution = sgqlc.types.Field(\n        \"CreatedPullRequestContribution\", graphql_name=\"popularPullRequestContribution\"\n    )\n    pull_request_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(\"CreatedPullRequestContributionConnection\"),\n        graphql_name=\"pullRequestContributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"exclude_popular\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludePopular\", default=False\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ContributionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    pull_request_contributions_by_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(\n                sgqlc.types.non_null(\"PullRequestContributionsByRepository\")\n            )\n        ),\n        graphql_name=\"pullRequestContributionsByRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"max_repositories\",\n                    sgqlc.types.Arg(Int, graphql_name=\"maxRepositories\", default=25),\n                ),\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"exclude_popular\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludePopular\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    pull_request_review_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(\"CreatedPullRequestReviewContributionConnection\"),\n        graphql_name=\"pullRequestReviewContributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ContributionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    pull_request_review_contributions_by_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(\n                sgqlc.types.non_null(\"PullRequestReviewContributionsByRepository\")\n            )\n        ),\n        graphql_name=\"pullRequestReviewContributionsByRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"max_repositories\",\n                    sgqlc.types.Arg(Int, graphql_name=\"maxRepositories\", default=25),\n                ),\n            )\n        ),\n    )\n    repository_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(\"CreatedRepositoryContributionConnection\"),\n        graphql_name=\"repositoryContributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ContributionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    restricted_contributions_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"restrictedContributionsCount\"\n    )\n    started_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"startedAt\"\n    )\n    total_commit_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCommitContributions\"\n    )\n    total_issue_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(Int),\n        graphql_name=\"totalIssueContributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"exclude_popular\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludePopular\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    total_pull_request_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(Int),\n        graphql_name=\"totalPullRequestContributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"exclude_popular\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludePopular\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    total_pull_request_review_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalPullRequestReviewContributions\"\n    )\n    total_repositories_with_contributed_commits = sgqlc.types.Field(\n        sgqlc.types.non_null(Int),\n        graphql_name=\"totalRepositoriesWithContributedCommits\",\n    )\n    total_repositories_with_contributed_issues = sgqlc.types.Field(\n        sgqlc.types.non_null(Int),\n        graphql_name=\"totalRepositoriesWithContributedIssues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"exclude_popular\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludePopular\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    total_repositories_with_contributed_pull_request_reviews = sgqlc.types.Field(\n        sgqlc.types.non_null(Int),\n        graphql_name=\"totalRepositoriesWithContributedPullRequestReviews\",\n    )\n    total_repositories_with_contributed_pull_requests = sgqlc.types.Field(\n        sgqlc.types.non_null(Int),\n        graphql_name=\"totalRepositoriesWithContributedPullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n                (\n                    \"exclude_popular\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludePopular\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    total_repository_contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(Int),\n        graphql_name=\"totalRepositoryContributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"exclude_first\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeFirst\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    user = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertProjectCardNoteToIssueInput","title":"<code>ConvertProjectCardNoteToIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ConvertProjectCardNoteToIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"project_card_id\",\n        \"repository_id\",\n        \"title\",\n        \"body\",\n        \"client_mutation_id\",\n    )\n    project_card_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"projectCardId\"\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertProjectCardNoteToIssuePayload","title":"<code>ConvertProjectCardNoteToIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ConvertProjectCardNoteToIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_card\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_card = sgqlc.types.Field(\"ProjectCard\", graphql_name=\"projectCard\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertPullRequestToDraftInput","title":"<code>ConvertPullRequestToDraftInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ConvertPullRequestToDraftInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_id\", \"client_mutation_id\")\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertPullRequestToDraftPayload","title":"<code>ConvertPullRequestToDraftPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ConvertPullRequestToDraftPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertToDraftEvent","title":"<code>ConvertToDraftEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ConvertToDraftEvent(sgqlc.types.Type, Node, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertedNoteToIssueEvent","title":"<code>ConvertedNoteToIssueEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ConvertedNoteToIssueEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"database_id\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertedToDiscussionEvent","title":"<code>ConvertedToDiscussionEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ConvertedToDiscussionEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"discussion\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    discussion = sgqlc.types.Field(\"Discussion\", graphql_name=\"discussion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateBranchProtectionRuleInput","title":"<code>CreateBranchProtectionRuleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateBranchProtectionRuleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"pattern\",\n        \"requires_approving_reviews\",\n        \"required_approving_review_count\",\n        \"requires_commit_signatures\",\n        \"requires_linear_history\",\n        \"blocks_creations\",\n        \"allows_force_pushes\",\n        \"allows_deletions\",\n        \"is_admin_enforced\",\n        \"requires_status_checks\",\n        \"requires_strict_status_checks\",\n        \"requires_code_owner_reviews\",\n        \"dismisses_stale_reviews\",\n        \"restricts_review_dismissals\",\n        \"review_dismissal_actor_ids\",\n        \"bypass_pull_request_actor_ids\",\n        \"bypass_force_push_actor_ids\",\n        \"restricts_pushes\",\n        \"push_actor_ids\",\n        \"required_status_check_contexts\",\n        \"required_status_checks\",\n        \"requires_conversation_resolution\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    pattern = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"pattern\")\n    requires_approving_reviews = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresApprovingReviews\"\n    )\n    required_approving_review_count = sgqlc.types.Field(\n        Int, graphql_name=\"requiredApprovingReviewCount\"\n    )\n    requires_commit_signatures = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresCommitSignatures\"\n    )\n    requires_linear_history = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresLinearHistory\"\n    )\n    blocks_creations = sgqlc.types.Field(Boolean, graphql_name=\"blocksCreations\")\n    allows_force_pushes = sgqlc.types.Field(Boolean, graphql_name=\"allowsForcePushes\")\n    allows_deletions = sgqlc.types.Field(Boolean, graphql_name=\"allowsDeletions\")\n    is_admin_enforced = sgqlc.types.Field(Boolean, graphql_name=\"isAdminEnforced\")\n    requires_status_checks = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresStatusChecks\"\n    )\n    requires_strict_status_checks = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresStrictStatusChecks\"\n    )\n    requires_code_owner_reviews = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresCodeOwnerReviews\"\n    )\n    dismisses_stale_reviews = sgqlc.types.Field(\n        Boolean, graphql_name=\"dismissesStaleReviews\"\n    )\n    restricts_review_dismissals = sgqlc.types.Field(\n        Boolean, graphql_name=\"restrictsReviewDismissals\"\n    )\n    review_dismissal_actor_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)),\n        graphql_name=\"reviewDismissalActorIds\",\n    )\n    bypass_pull_request_actor_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)),\n        graphql_name=\"bypassPullRequestActorIds\",\n    )\n    bypass_force_push_actor_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)),\n        graphql_name=\"bypassForcePushActorIds\",\n    )\n    restricts_pushes = sgqlc.types.Field(Boolean, graphql_name=\"restrictsPushes\")\n    push_actor_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"pushActorIds\"\n    )\n    required_status_check_contexts = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n        graphql_name=\"requiredStatusCheckContexts\",\n    )\n    required_status_checks = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"RequiredStatusCheckInput\")),\n        graphql_name=\"requiredStatusChecks\",\n    )\n    requires_conversation_resolution = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresConversationResolution\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateBranchProtectionRulePayload","title":"<code>CreateBranchProtectionRulePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateBranchProtectionRulePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"branch_protection_rule\", \"client_mutation_id\")\n    branch_protection_rule = sgqlc.types.Field(\n        \"BranchProtectionRule\", graphql_name=\"branchProtectionRule\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCheckRunInput","title":"<code>CreateCheckRunInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateCheckRunInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"name\",\n        \"head_sha\",\n        \"details_url\",\n        \"external_id\",\n        \"status\",\n        \"started_at\",\n        \"conclusion\",\n        \"completed_at\",\n        \"output\",\n        \"actions\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    head_sha = sgqlc.types.Field(\n        sgqlc.types.non_null(GitObjectID), graphql_name=\"headSha\"\n    )\n    details_url = sgqlc.types.Field(URI, graphql_name=\"detailsUrl\")\n    external_id = sgqlc.types.Field(String, graphql_name=\"externalId\")\n    status = sgqlc.types.Field(RequestableCheckStatusState, graphql_name=\"status\")\n    started_at = sgqlc.types.Field(DateTime, graphql_name=\"startedAt\")\n    conclusion = sgqlc.types.Field(CheckConclusionState, graphql_name=\"conclusion\")\n    completed_at = sgqlc.types.Field(DateTime, graphql_name=\"completedAt\")\n    output = sgqlc.types.Field(CheckRunOutput, graphql_name=\"output\")\n    actions = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(CheckRunAction)),\n        graphql_name=\"actions\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCheckRunPayload","title":"<code>CreateCheckRunPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateCheckRunPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"check_run\", \"client_mutation_id\")\n    check_run = sgqlc.types.Field(\"CheckRun\", graphql_name=\"checkRun\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCheckSuiteInput","title":"<code>CreateCheckSuiteInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateCheckSuiteInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"head_sha\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    head_sha = sgqlc.types.Field(\n        sgqlc.types.non_null(GitObjectID), graphql_name=\"headSha\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCheckSuitePayload","title":"<code>CreateCheckSuitePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateCheckSuitePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"check_suite\", \"client_mutation_id\")\n    check_suite = sgqlc.types.Field(\"CheckSuite\", graphql_name=\"checkSuite\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCommitOnBranchInput","title":"<code>CreateCommitOnBranchInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateCommitOnBranchInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"branch\",\n        \"file_changes\",\n        \"message\",\n        \"expected_head_oid\",\n        \"client_mutation_id\",\n    )\n    branch = sgqlc.types.Field(\n        sgqlc.types.non_null(CommittableBranch), graphql_name=\"branch\"\n    )\n    file_changes = sgqlc.types.Field(\"FileChanges\", graphql_name=\"fileChanges\")\n    message = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitMessage), graphql_name=\"message\"\n    )\n    expected_head_oid = sgqlc.types.Field(\n        sgqlc.types.non_null(GitObjectID), graphql_name=\"expectedHeadOid\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCommitOnBranchPayload","title":"<code>CreateCommitOnBranchPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateCommitOnBranchPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"commit\", \"ref\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    commit = sgqlc.types.Field(\"Commit\", graphql_name=\"commit\")\n    ref = sgqlc.types.Field(\"Ref\", graphql_name=\"ref\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateDiscussionInput","title":"<code>CreateDiscussionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateDiscussionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"title\",\n        \"body\",\n        \"category_id\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    category_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"categoryId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateDiscussionPayload","title":"<code>CreateDiscussionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateDiscussionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"discussion\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    discussion = sgqlc.types.Field(\"Discussion\", graphql_name=\"discussion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateEnterpriseOrganizationInput","title":"<code>CreateEnterpriseOrganizationInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateEnterpriseOrganizationInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"enterprise_id\",\n        \"login\",\n        \"profile_name\",\n        \"billing_email\",\n        \"admin_logins\",\n        \"client_mutation_id\",\n    )\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    profile_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"profileName\"\n    )\n    billing_email = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"billingEmail\"\n    )\n    admin_logins = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),\n        graphql_name=\"adminLogins\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateEnterpriseOrganizationPayload","title":"<code>CreateEnterpriseOrganizationPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateEnterpriseOrganizationPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"organization\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    organization = sgqlc.types.Field(\"Organization\", graphql_name=\"organization\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateEnvironmentInput","title":"<code>CreateEnvironmentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateEnvironmentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"name\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateEnvironmentPayload","title":"<code>CreateEnvironmentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateEnvironmentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"environment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    environment = sgqlc.types.Field(\"Environment\", graphql_name=\"environment\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateIpAllowListEntryInput","title":"<code>CreateIpAllowListEntryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateIpAllowListEntryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"owner_id\",\n        \"allow_list_value\",\n        \"name\",\n        \"is_active\",\n        \"client_mutation_id\",\n    )\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    allow_list_value = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"allowListValue\"\n    )\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    is_active = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isActive\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateIpAllowListEntryPayload","title":"<code>CreateIpAllowListEntryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateIpAllowListEntryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"ip_allow_list_entry\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    ip_allow_list_entry = sgqlc.types.Field(\n        \"IpAllowListEntry\", graphql_name=\"ipAllowListEntry\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateIssueInput","title":"<code>CreateIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"title\",\n        \"body\",\n        \"assignee_ids\",\n        \"milestone_id\",\n        \"label_ids\",\n        \"project_ids\",\n        \"issue_template\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"assigneeIds\"\n    )\n    milestone_id = sgqlc.types.Field(ID, graphql_name=\"milestoneId\")\n    label_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"labelIds\"\n    )\n    project_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"projectIds\"\n    )\n    issue_template = sgqlc.types.Field(String, graphql_name=\"issueTemplate\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateIssuePayload","title":"<code>CreateIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"issue\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    issue = sgqlc.types.Field(\"Issue\", graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateMigrationSourceInput","title":"<code>CreateMigrationSourceInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateMigrationSourceInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"name\",\n        \"url\",\n        \"access_token\",\n        \"type\",\n        \"owner_id\",\n        \"github_pat\",\n        \"client_mutation_id\",\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"url\")\n    access_token = sgqlc.types.Field(String, graphql_name=\"accessToken\")\n    type = sgqlc.types.Field(\n        sgqlc.types.non_null(MigrationSourceType), graphql_name=\"type\"\n    )\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    github_pat = sgqlc.types.Field(String, graphql_name=\"githubPat\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateMigrationSourcePayload","title":"<code>CreateMigrationSourcePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateMigrationSourcePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"migration_source\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    migration_source = sgqlc.types.Field(\n        \"MigrationSource\", graphql_name=\"migrationSource\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateProjectInput","title":"<code>CreateProjectInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateProjectInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"owner_id\",\n        \"name\",\n        \"body\",\n        \"template\",\n        \"repository_ids\",\n        \"client_mutation_id\",\n    )\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    template = sgqlc.types.Field(ProjectTemplate, graphql_name=\"template\")\n    repository_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"repositoryIds\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateProjectPayload","title":"<code>CreateProjectPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateProjectPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project = sgqlc.types.Field(\"Project\", graphql_name=\"project\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateProjectV2Input","title":"<code>CreateProjectV2Input</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateProjectV2Input(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"owner_id\", \"title\", \"client_mutation_id\")\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateProjectV2Payload","title":"<code>CreateProjectV2Payload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateProjectV2Payload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_v2\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_v2 = sgqlc.types.Field(\"ProjectV2\", graphql_name=\"projectV2\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatePullRequestInput","title":"<code>CreatePullRequestInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatePullRequestInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"base_ref_name\",\n        \"head_ref_name\",\n        \"title\",\n        \"body\",\n        \"maintainer_can_modify\",\n        \"draft\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    base_ref_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"baseRefName\"\n    )\n    head_ref_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"headRefName\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    maintainer_can_modify = sgqlc.types.Field(\n        Boolean, graphql_name=\"maintainerCanModify\"\n    )\n    draft = sgqlc.types.Field(Boolean, graphql_name=\"draft\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatePullRequestPayload","title":"<code>CreatePullRequestPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatePullRequestPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateRefInput","title":"<code>CreateRefInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateRefInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"name\", \"oid\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    oid = sgqlc.types.Field(sgqlc.types.non_null(GitObjectID), graphql_name=\"oid\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateRefPayload","title":"<code>CreateRefPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateRefPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"ref\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    ref = sgqlc.types.Field(\"Ref\", graphql_name=\"ref\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateRepositoryInput","title":"<code>CreateRepositoryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateRepositoryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"name\",\n        \"owner_id\",\n        \"description\",\n        \"visibility\",\n        \"template\",\n        \"homepage_url\",\n        \"has_wiki_enabled\",\n        \"has_issues_enabled\",\n        \"team_id\",\n        \"client_mutation_id\",\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    owner_id = sgqlc.types.Field(ID, graphql_name=\"ownerId\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    visibility = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryVisibility), graphql_name=\"visibility\"\n    )\n    template = sgqlc.types.Field(Boolean, graphql_name=\"template\")\n    homepage_url = sgqlc.types.Field(URI, graphql_name=\"homepageUrl\")\n    has_wiki_enabled = sgqlc.types.Field(Boolean, graphql_name=\"hasWikiEnabled\")\n    has_issues_enabled = sgqlc.types.Field(Boolean, graphql_name=\"hasIssuesEnabled\")\n    team_id = sgqlc.types.Field(ID, graphql_name=\"teamId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateRepositoryPayload","title":"<code>CreateRepositoryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateRepositoryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateSponsorsTierInput","title":"<code>CreateSponsorsTierInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateSponsorsTierInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"sponsorable_id\",\n        \"sponsorable_login\",\n        \"amount\",\n        \"is_recurring\",\n        \"repository_id\",\n        \"repository_owner_login\",\n        \"repository_name\",\n        \"welcome_message\",\n        \"description\",\n        \"publish\",\n        \"client_mutation_id\",\n    )\n    sponsorable_id = sgqlc.types.Field(ID, graphql_name=\"sponsorableId\")\n    sponsorable_login = sgqlc.types.Field(String, graphql_name=\"sponsorableLogin\")\n    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"amount\")\n    is_recurring = sgqlc.types.Field(Boolean, graphql_name=\"isRecurring\")\n    repository_id = sgqlc.types.Field(ID, graphql_name=\"repositoryId\")\n    repository_owner_login = sgqlc.types.Field(\n        String, graphql_name=\"repositoryOwnerLogin\"\n    )\n    repository_name = sgqlc.types.Field(String, graphql_name=\"repositoryName\")\n    welcome_message = sgqlc.types.Field(String, graphql_name=\"welcomeMessage\")\n    description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"description\"\n    )\n    publish = sgqlc.types.Field(Boolean, graphql_name=\"publish\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateSponsorsTierPayload","title":"<code>CreateSponsorsTierPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateSponsorsTierPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"sponsors_tier\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    sponsors_tier = sgqlc.types.Field(\"SponsorsTier\", graphql_name=\"sponsorsTier\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateSponsorshipInput","title":"<code>CreateSponsorshipInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateSponsorshipInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"sponsor_id\",\n        \"sponsor_login\",\n        \"sponsorable_id\",\n        \"sponsorable_login\",\n        \"tier_id\",\n        \"amount\",\n        \"is_recurring\",\n        \"receive_emails\",\n        \"privacy_level\",\n        \"client_mutation_id\",\n    )\n    sponsor_id = sgqlc.types.Field(ID, graphql_name=\"sponsorId\")\n    sponsor_login = sgqlc.types.Field(String, graphql_name=\"sponsorLogin\")\n    sponsorable_id = sgqlc.types.Field(ID, graphql_name=\"sponsorableId\")\n    sponsorable_login = sgqlc.types.Field(String, graphql_name=\"sponsorableLogin\")\n    tier_id = sgqlc.types.Field(ID, graphql_name=\"tierId\")\n    amount = sgqlc.types.Field(Int, graphql_name=\"amount\")\n    is_recurring = sgqlc.types.Field(Boolean, graphql_name=\"isRecurring\")\n    receive_emails = sgqlc.types.Field(Boolean, graphql_name=\"receiveEmails\")\n    privacy_level = sgqlc.types.Field(SponsorshipPrivacy, graphql_name=\"privacyLevel\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateSponsorshipPayload","title":"<code>CreateSponsorshipPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateSponsorshipPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"sponsorship\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    sponsorship = sgqlc.types.Field(\"Sponsorship\", graphql_name=\"sponsorship\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateTeamDiscussionCommentInput","title":"<code>CreateTeamDiscussionCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateTeamDiscussionCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"discussion_id\", \"body\", \"client_mutation_id\")\n    discussion_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"discussionId\"\n    )\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateTeamDiscussionCommentPayload","title":"<code>CreateTeamDiscussionCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateTeamDiscussionCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"team_discussion_comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    team_discussion_comment = sgqlc.types.Field(\n        \"TeamDiscussionComment\", graphql_name=\"teamDiscussionComment\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateTeamDiscussionInput","title":"<code>CreateTeamDiscussionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateTeamDiscussionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"team_id\", \"title\", \"body\", \"private\", \"client_mutation_id\")\n    team_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"teamId\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    private = sgqlc.types.Field(Boolean, graphql_name=\"private\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateTeamDiscussionPayload","title":"<code>CreateTeamDiscussionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreateTeamDiscussionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"team_discussion\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    team_discussion = sgqlc.types.Field(\"TeamDiscussion\", graphql_name=\"teamDiscussion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedCommitContribution","title":"<code>CreatedCommitContribution</code>","text":"<p>             Bases: <code>Type</code>, <code>Contribution</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedCommitContribution(sgqlc.types.Type, Contribution):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"commit_count\", \"repository\")\n    commit_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"commitCount\"\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedCommitContributionConnection","title":"<code>CreatedCommitContributionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedCommitContributionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedCommitContributionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedCommitContribution\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedCommitContributionEdge","title":"<code>CreatedCommitContributionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedCommitContributionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"CreatedCommitContribution\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedIssueContribution","title":"<code>CreatedIssueContribution</code>","text":"<p>             Bases: <code>Type</code>, <code>Contribution</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedIssueContribution(sgqlc.types.Type, Contribution):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"issue\",)\n    issue = sgqlc.types.Field(sgqlc.types.non_null(\"Issue\"), graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedIssueContributionConnection","title":"<code>CreatedIssueContributionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedIssueContributionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedIssueContributionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedIssueContribution\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedIssueContributionEdge","title":"<code>CreatedIssueContributionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedIssueContributionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"CreatedIssueContribution\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedIssueOrRestrictedContribution","title":"<code>CreatedIssueOrRestrictedContribution</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedIssueOrRestrictedContribution(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (CreatedIssueContribution, RestrictedContribution)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestContribution","title":"<code>CreatedPullRequestContribution</code>","text":"<p>             Bases: <code>Type</code>, <code>Contribution</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedPullRequestContribution(sgqlc.types.Type, Contribution):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request\",)\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestContributionConnection","title":"<code>CreatedPullRequestContributionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedPullRequestContributionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedPullRequestContributionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedPullRequestContribution\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestContributionEdge","title":"<code>CreatedPullRequestContributionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedPullRequestContributionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"CreatedPullRequestContribution\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestOrRestrictedContribution","title":"<code>CreatedPullRequestOrRestrictedContribution</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedPullRequestOrRestrictedContribution(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (CreatedPullRequestContribution, RestrictedContribution)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestReviewContribution","title":"<code>CreatedPullRequestReviewContribution</code>","text":"<p>             Bases: <code>Type</code>, <code>Contribution</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedPullRequestReviewContribution(sgqlc.types.Type, Contribution):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request\", \"pull_request_review\", \"repository\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n    pull_request_review = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequestReview\"), graphql_name=\"pullRequestReview\"\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestReviewContributionConnection","title":"<code>CreatedPullRequestReviewContributionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedPullRequestReviewContributionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedPullRequestReviewContributionEdge\"),\n        graphql_name=\"edges\",\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedPullRequestReviewContribution\"),\n        graphql_name=\"nodes\",\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestReviewContributionEdge","title":"<code>CreatedPullRequestReviewContributionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedPullRequestReviewContributionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\n        \"CreatedPullRequestReviewContribution\", graphql_name=\"node\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedRepositoryContribution","title":"<code>CreatedRepositoryContribution</code>","text":"<p>             Bases: <code>Type</code>, <code>Contribution</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedRepositoryContribution(sgqlc.types.Type, Contribution):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository\",)\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedRepositoryContributionConnection","title":"<code>CreatedRepositoryContributionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedRepositoryContributionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedRepositoryContributionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CreatedRepositoryContribution\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedRepositoryContributionEdge","title":"<code>CreatedRepositoryContributionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedRepositoryContributionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"CreatedRepositoryContribution\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedRepositoryOrRestrictedContribution","title":"<code>CreatedRepositoryOrRestrictedContribution</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CreatedRepositoryOrRestrictedContribution(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (CreatedRepositoryContribution, RestrictedContribution)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CrossReferencedEvent","title":"<code>CrossReferencedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>UniformResourceLocatable</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class CrossReferencedEvent(sgqlc.types.Type, UniformResourceLocatable, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"is_cross_repository\",\n        \"referenced_at\",\n        \"source\",\n        \"target\",\n        \"will_close_target\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    is_cross_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCrossRepository\"\n    )\n    referenced_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"referencedAt\"\n    )\n    source = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReferencedSubject\"), graphql_name=\"source\"\n    )\n    target = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReferencedSubject\"), graphql_name=\"target\"\n    )\n    will_close_target = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"willCloseTarget\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeclineTopicSuggestionInput","title":"<code>DeclineTopicSuggestionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeclineTopicSuggestionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"name\", \"reason\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    reason = sgqlc.types.Field(\n        sgqlc.types.non_null(TopicSuggestionDeclineReason), graphql_name=\"reason\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeclineTopicSuggestionPayload","title":"<code>DeclineTopicSuggestionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeclineTopicSuggestionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"topic\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    topic = sgqlc.types.Field(\"Topic\", graphql_name=\"topic\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DefaultRepositoryPermissionField","title":"<code>DefaultRepositoryPermissionField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DefaultRepositoryPermissionField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"NONE\", \"READ\", \"WRITE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Deletable","title":"<code>Deletable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Deletable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"viewer_can_delete\",)\n    viewer_can_delete = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanDelete\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteBranchProtectionRuleInput","title":"<code>DeleteBranchProtectionRuleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteBranchProtectionRuleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"branch_protection_rule_id\", \"client_mutation_id\")\n    branch_protection_rule_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"branchProtectionRuleId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteBranchProtectionRulePayload","title":"<code>DeleteBranchProtectionRulePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteBranchProtectionRulePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\",)\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDeploymentInput","title":"<code>DeleteDeploymentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteDeploymentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDeploymentPayload","title":"<code>DeleteDeploymentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteDeploymentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\",)\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDiscussionCommentInput","title":"<code>DeleteDiscussionCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteDiscussionCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDiscussionCommentPayload","title":"<code>DeleteDiscussionCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteDiscussionCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    comment = sgqlc.types.Field(\"DiscussionComment\", graphql_name=\"comment\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDiscussionInput","title":"<code>DeleteDiscussionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteDiscussionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDiscussionPayload","title":"<code>DeleteDiscussionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteDiscussionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"discussion\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    discussion = sgqlc.types.Field(\"Discussion\", graphql_name=\"discussion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteEnvironmentInput","title":"<code>DeleteEnvironmentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteEnvironmentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteEnvironmentPayload","title":"<code>DeleteEnvironmentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteEnvironmentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\",)\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIpAllowListEntryInput","title":"<code>DeleteIpAllowListEntryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteIpAllowListEntryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"ip_allow_list_entry_id\", \"client_mutation_id\")\n    ip_allow_list_entry_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"ipAllowListEntryId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIpAllowListEntryPayload","title":"<code>DeleteIpAllowListEntryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteIpAllowListEntryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"ip_allow_list_entry\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    ip_allow_list_entry = sgqlc.types.Field(\n        \"IpAllowListEntry\", graphql_name=\"ipAllowListEntry\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIssueCommentInput","title":"<code>DeleteIssueCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteIssueCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIssueCommentPayload","title":"<code>DeleteIssueCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteIssueCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\",)\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIssueInput","title":"<code>DeleteIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"issue_id\", \"client_mutation_id\")\n    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"issueId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIssuePayload","title":"<code>DeleteIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectCardInput","title":"<code>DeleteProjectCardInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectCardInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"card_id\", \"client_mutation_id\")\n    card_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"cardId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectCardPayload","title":"<code>DeleteProjectCardPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectCardPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"column\", \"deleted_card_id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    column = sgqlc.types.Field(\"ProjectColumn\", graphql_name=\"column\")\n    deleted_card_id = sgqlc.types.Field(ID, graphql_name=\"deletedCardId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectColumnInput","title":"<code>DeleteProjectColumnInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectColumnInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"column_id\", \"client_mutation_id\")\n    column_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"columnId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectColumnPayload","title":"<code>DeleteProjectColumnPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectColumnPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"deleted_column_id\", \"project\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    deleted_column_id = sgqlc.types.Field(ID, graphql_name=\"deletedColumnId\")\n    project = sgqlc.types.Field(\"Project\", graphql_name=\"project\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectInput","title":"<code>DeleteProjectInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectNextItemInput","title":"<code>DeleteProjectNextItemInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectNextItemInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"item_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(ID, graphql_name=\"projectId\")\n    item_id = sgqlc.types.Field(ID, graphql_name=\"itemId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectNextItemPayload","title":"<code>DeleteProjectNextItemPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectNextItemPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"deleted_item_id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    deleted_item_id = sgqlc.types.Field(ID, graphql_name=\"deletedItemId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectPayload","title":"<code>DeleteProjectPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"owner\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    owner = sgqlc.types.Field(\"ProjectOwner\", graphql_name=\"owner\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectV2ItemInput","title":"<code>DeleteProjectV2ItemInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectV2ItemInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"item_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"itemId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectV2ItemPayload","title":"<code>DeleteProjectV2ItemPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteProjectV2ItemPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"deleted_item_id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    deleted_item_id = sgqlc.types.Field(ID, graphql_name=\"deletedItemId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeletePullRequestReviewCommentInput","title":"<code>DeletePullRequestReviewCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeletePullRequestReviewCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeletePullRequestReviewCommentPayload","title":"<code>DeletePullRequestReviewCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeletePullRequestReviewCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"client_mutation_id\",\n        \"pull_request_review\",\n        \"pull_request_review_comment\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request_review = sgqlc.types.Field(\n        \"PullRequestReview\", graphql_name=\"pullRequestReview\"\n    )\n    pull_request_review_comment = sgqlc.types.Field(\n        \"PullRequestReviewComment\", graphql_name=\"pullRequestReviewComment\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeletePullRequestReviewInput","title":"<code>DeletePullRequestReviewInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeletePullRequestReviewInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_review_id\", \"client_mutation_id\")\n    pull_request_review_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestReviewId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeletePullRequestReviewPayload","title":"<code>DeletePullRequestReviewPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeletePullRequestReviewPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request_review\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request_review = sgqlc.types.Field(\n        \"PullRequestReview\", graphql_name=\"pullRequestReview\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteRefInput","title":"<code>DeleteRefInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteRefInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"ref_id\", \"client_mutation_id\")\n    ref_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"refId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteRefPayload","title":"<code>DeleteRefPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteRefPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\",)\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteTeamDiscussionCommentInput","title":"<code>DeleteTeamDiscussionCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteTeamDiscussionCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteTeamDiscussionCommentPayload","title":"<code>DeleteTeamDiscussionCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteTeamDiscussionCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\",)\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteTeamDiscussionInput","title":"<code>DeleteTeamDiscussionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteTeamDiscussionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteTeamDiscussionPayload","title":"<code>DeleteTeamDiscussionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteTeamDiscussionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\",)\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteVerifiableDomainInput","title":"<code>DeleteVerifiableDomainInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteVerifiableDomainInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteVerifiableDomainPayload","title":"<code>DeleteVerifiableDomainPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeleteVerifiableDomainPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"owner\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    owner = sgqlc.types.Field(\"VerifiableDomainOwner\", graphql_name=\"owner\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DemilestonedEvent","title":"<code>DemilestonedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DemilestonedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"milestone_title\", \"subject\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    milestone_title = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"milestoneTitle\"\n    )\n    subject = sgqlc.types.Field(\n        sgqlc.types.non_null(\"MilestoneItem\"), graphql_name=\"subject\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DependabotUpdate","title":"<code>DependabotUpdate</code>","text":"<p>             Bases: <code>Type</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DependabotUpdate(sgqlc.types.Type, RepositoryNode):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"error\", \"pull_request\")\n    error = sgqlc.types.Field(DependabotUpdateError, graphql_name=\"error\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DependabotUpdateError","title":"<code>DependabotUpdateError</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DependabotUpdateError(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"body\", \"error_type\", \"title\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    error_type = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"errorType\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DependencyGraphEcosystem","title":"<code>DependencyGraphEcosystem</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DependencyGraphEcosystem(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ACTIONS\",\n        \"COMPOSER\",\n        \"GO\",\n        \"MAVEN\",\n        \"NPM\",\n        \"NUGET\",\n        \"PIP\",\n        \"RUBYGEMS\",\n        \"RUST\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeployKey","title":"<code>DeployKey</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeployKey(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"created_at\", \"key\", \"read_only\", \"title\", \"verified\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"key\")\n    read_only = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"readOnly\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    verified = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"verified\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeployKeyConnection","title":"<code>DeployKeyConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeployKeyConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeployKeyEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"DeployKey\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeployKeyEdge","title":"<code>DeployKeyEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeployKeyEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"DeployKey\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeployedEvent","title":"<code>DeployedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeployedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"database_id\",\n        \"deployment\",\n        \"pull_request\",\n        \"ref\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    deployment = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Deployment\"), graphql_name=\"deployment\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n    ref = sgqlc.types.Field(\"Ref\", graphql_name=\"ref\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Deployment","title":"<code>Deployment</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Deployment(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"commit\",\n        \"commit_oid\",\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"description\",\n        \"environment\",\n        \"latest_environment\",\n        \"latest_status\",\n        \"original_environment\",\n        \"payload\",\n        \"ref\",\n        \"repository\",\n        \"state\",\n        \"statuses\",\n        \"task\",\n        \"updated_at\",\n    )\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    commit_oid = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"commitOid\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(sgqlc.types.non_null(Actor), graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    environment = sgqlc.types.Field(String, graphql_name=\"environment\")\n    latest_environment = sgqlc.types.Field(String, graphql_name=\"latestEnvironment\")\n    latest_status = sgqlc.types.Field(\"DeploymentStatus\", graphql_name=\"latestStatus\")\n    original_environment = sgqlc.types.Field(String, graphql_name=\"originalEnvironment\")\n    payload = sgqlc.types.Field(String, graphql_name=\"payload\")\n    ref = sgqlc.types.Field(\"Ref\", graphql_name=\"ref\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    state = sgqlc.types.Field(DeploymentState, graphql_name=\"state\")\n    statuses = sgqlc.types.Field(\n        DeploymentStatusConnection,\n        graphql_name=\"statuses\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    task = sgqlc.types.Field(String, graphql_name=\"task\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentConnection","title":"<code>DeploymentConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Deployment\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentEdge","title":"<code>DeploymentEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Deployment\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentEnvironmentChangedEvent","title":"<code>DeploymentEnvironmentChangedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentEnvironmentChangedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"deployment_status\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    deployment_status = sgqlc.types.Field(\n        sgqlc.types.non_null(\"DeploymentStatus\"), graphql_name=\"deploymentStatus\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentOrder","title":"<code>DeploymentOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(DeploymentOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentOrderField","title":"<code>DeploymentOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentProtectionRule","title":"<code>DeploymentProtectionRule</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentProtectionRule(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"database_id\", \"reviewers\", \"timeout\", \"type\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    reviewers = sgqlc.types.Field(\n        sgqlc.types.non_null(\"DeploymentReviewerConnection\"),\n        graphql_name=\"reviewers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    timeout = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"timeout\")\n    type = sgqlc.types.Field(\n        sgqlc.types.non_null(DeploymentProtectionRuleType), graphql_name=\"type\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentProtectionRuleConnection","title":"<code>DeploymentProtectionRuleConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentProtectionRuleConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentProtectionRuleEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(DeploymentProtectionRule), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentProtectionRuleEdge","title":"<code>DeploymentProtectionRuleEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentProtectionRuleEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(DeploymentProtectionRule, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentProtectionRuleType","title":"<code>DeploymentProtectionRuleType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentProtectionRuleType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"REQUIRED_REVIEWERS\", \"WAIT_TIMER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentRequest","title":"<code>DeploymentRequest</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentRequest(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"current_user_can_approve\",\n        \"environment\",\n        \"reviewers\",\n        \"wait_timer\",\n        \"wait_timer_started_at\",\n    )\n    current_user_can_approve = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"currentUserCanApprove\"\n    )\n    environment = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Environment\"), graphql_name=\"environment\"\n    )\n    reviewers = sgqlc.types.Field(\n        sgqlc.types.non_null(\"DeploymentReviewerConnection\"),\n        graphql_name=\"reviewers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    wait_timer = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"waitTimer\")\n    wait_timer_started_at = sgqlc.types.Field(\n        DateTime, graphql_name=\"waitTimerStartedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentRequestConnection","title":"<code>DeploymentRequestConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentRequestConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentRequestEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(DeploymentRequest), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentRequestEdge","title":"<code>DeploymentRequestEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentRequestEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(DeploymentRequest, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReview","title":"<code>DeploymentReview</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentReview(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"comment\", \"database_id\", \"environments\", \"state\", \"user\")\n    comment = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"comment\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    environments = sgqlc.types.Field(\n        sgqlc.types.non_null(EnvironmentConnection),\n        graphql_name=\"environments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(DeploymentReviewState), graphql_name=\"state\"\n    )\n    user = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewConnection","title":"<code>DeploymentReviewConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentReviewConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentReviewEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentReview\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewEdge","title":"<code>DeploymentReviewEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentReviewEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"DeploymentReview\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewState","title":"<code>DeploymentReviewState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentReviewState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"APPROVED\", \"REJECTED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewer","title":"<code>DeploymentReviewer</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentReviewer(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Team, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewerConnection","title":"<code>DeploymentReviewerConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentReviewerConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentReviewerEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentReviewer\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewerEdge","title":"<code>DeploymentReviewerEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentReviewerEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"DeploymentReviewer\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentState","title":"<code>DeploymentState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ABANDONED\",\n        \"ACTIVE\",\n        \"DESTROYED\",\n        \"ERROR\",\n        \"FAILURE\",\n        \"INACTIVE\",\n        \"IN_PROGRESS\",\n        \"PENDING\",\n        \"QUEUED\",\n        \"WAITING\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentStatus","title":"<code>DeploymentStatus</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentStatus(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"creator\",\n        \"deployment\",\n        \"description\",\n        \"environment_url\",\n        \"log_url\",\n        \"state\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(sgqlc.types.non_null(Actor), graphql_name=\"creator\")\n    deployment = sgqlc.types.Field(\n        sgqlc.types.non_null(Deployment), graphql_name=\"deployment\"\n    )\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    environment_url = sgqlc.types.Field(URI, graphql_name=\"environmentUrl\")\n    log_url = sgqlc.types.Field(URI, graphql_name=\"logUrl\")\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(DeploymentStatusState), graphql_name=\"state\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentStatusConnection","title":"<code>DeploymentStatusConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentStatusConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentStatusEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DeploymentStatus\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentStatusEdge","title":"<code>DeploymentStatusEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentStatusEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"DeploymentStatus\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentStatusState","title":"<code>DeploymentStatusState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DeploymentStatusState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ERROR\",\n        \"FAILURE\",\n        \"INACTIVE\",\n        \"IN_PROGRESS\",\n        \"PENDING\",\n        \"QUEUED\",\n        \"SUCCESS\",\n        \"WAITING\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiffSide","title":"<code>DiffSide</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiffSide(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"LEFT\", \"RIGHT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DisablePullRequestAutoMergeInput","title":"<code>DisablePullRequestAutoMergeInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DisablePullRequestAutoMergeInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_id\", \"client_mutation_id\")\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DisablePullRequestAutoMergePayload","title":"<code>DisablePullRequestAutoMergePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DisablePullRequestAutoMergePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"client_mutation_id\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DisconnectedEvent","title":"<code>DisconnectedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DisconnectedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"is_cross_repository\",\n        \"source\",\n        \"subject\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    is_cross_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCrossRepository\"\n    )\n    source = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReferencedSubject\"), graphql_name=\"source\"\n    )\n    subject = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReferencedSubject\"), graphql_name=\"subject\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Discussion","title":"<code>Discussion</code>","text":"<p>             Bases: <code>Type</code>, <code>Comment</code>, <code>Updatable</code>, <code>Deletable</code>, <code>Labelable</code>, <code>Lockable</code>, <code>RepositoryNode</code>, <code>Subscribable</code>, <code>Reactable</code>, <code>Votable</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Discussion(\n    sgqlc.types.Type,\n    Comment,\n    Updatable,\n    Deletable,\n    Labelable,\n    Lockable,\n    RepositoryNode,\n    Subscribable,\n    Reactable,\n    Votable,\n    Node,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"answer\",\n        \"answer_chosen_at\",\n        \"answer_chosen_by\",\n        \"category\",\n        \"comments\",\n        \"number\",\n        \"poll\",\n        \"resource_path\",\n        \"title\",\n        \"url\",\n    )\n    answer = sgqlc.types.Field(\"DiscussionComment\", graphql_name=\"answer\")\n    answer_chosen_at = sgqlc.types.Field(DateTime, graphql_name=\"answerChosenAt\")\n    answer_chosen_by = sgqlc.types.Field(Actor, graphql_name=\"answerChosenBy\")\n    category = sgqlc.types.Field(\n        sgqlc.types.non_null(\"DiscussionCategory\"), graphql_name=\"category\"\n    )\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(DiscussionCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    poll = sgqlc.types.Field(\"DiscussionPoll\", graphql_name=\"poll\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCategory","title":"<code>DiscussionCategory</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionCategory(sgqlc.types.Type, Node, RepositoryNode):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"description\",\n        \"emoji\",\n        \"emoji_html\",\n        \"is_answerable\",\n        \"name\",\n        \"slug\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    emoji = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"emoji\")\n    emoji_html = sgqlc.types.Field(sgqlc.types.non_null(HTML), graphql_name=\"emojiHTML\")\n    is_answerable = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isAnswerable\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"slug\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCategoryConnection","title":"<code>DiscussionCategoryConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionCategoryConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DiscussionCategoryEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DiscussionCategory\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCategoryEdge","title":"<code>DiscussionCategoryEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionCategoryEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"DiscussionCategory\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionComment","title":"<code>DiscussionComment</code>","text":"<p>             Bases: <code>Type</code>, <code>Comment</code>, <code>Deletable</code>, <code>Minimizable</code>, <code>Updatable</code>, <code>UpdatableComment</code>, <code>Reactable</code>, <code>Votable</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionComment(\n    sgqlc.types.Type,\n    Comment,\n    Deletable,\n    Minimizable,\n    Updatable,\n    UpdatableComment,\n    Reactable,\n    Votable,\n    Node,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"deleted_at\",\n        \"discussion\",\n        \"is_answer\",\n        \"replies\",\n        \"reply_to\",\n        \"resource_path\",\n        \"url\",\n        \"viewer_can_mark_as_answer\",\n        \"viewer_can_unmark_as_answer\",\n    )\n    deleted_at = sgqlc.types.Field(DateTime, graphql_name=\"deletedAt\")\n    discussion = sgqlc.types.Field(Discussion, graphql_name=\"discussion\")\n    is_answer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isAnswer\"\n    )\n    replies = sgqlc.types.Field(\n        sgqlc.types.non_null(DiscussionCommentConnection),\n        graphql_name=\"replies\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    reply_to = sgqlc.types.Field(\"DiscussionComment\", graphql_name=\"replyTo\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    viewer_can_mark_as_answer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanMarkAsAnswer\"\n    )\n    viewer_can_unmark_as_answer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanUnmarkAsAnswer\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCommentConnection","title":"<code>DiscussionCommentConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionCommentConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DiscussionCommentEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DiscussionComment\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCommentEdge","title":"<code>DiscussionCommentEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionCommentEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"DiscussionComment\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionConnection","title":"<code>DiscussionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DiscussionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Discussion\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionEdge","title":"<code>DiscussionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Discussion\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionOrder","title":"<code>DiscussionOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(DiscussionOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionOrderField","title":"<code>DiscussionOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPoll","title":"<code>DiscussionPoll</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionPoll(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"discussion\",\n        \"options\",\n        \"question\",\n        \"total_vote_count\",\n        \"viewer_can_vote\",\n        \"viewer_has_voted\",\n    )\n    discussion = sgqlc.types.Field(Discussion, graphql_name=\"discussion\")\n    options = sgqlc.types.Field(\n        DiscussionPollOptionConnection,\n        graphql_name=\"options\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        DiscussionPollOptionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"AUTHORED_ORDER\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    question = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"question\")\n    total_vote_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalVoteCount\"\n    )\n    viewer_can_vote = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanVote\"\n    )\n    viewer_has_voted = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerHasVoted\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOption","title":"<code>DiscussionPollOption</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionPollOption(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"option\", \"poll\", \"total_vote_count\", \"viewer_has_voted\")\n    option = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"option\")\n    poll = sgqlc.types.Field(DiscussionPoll, graphql_name=\"poll\")\n    total_vote_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalVoteCount\"\n    )\n    viewer_has_voted = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerHasVoted\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOptionConnection","title":"<code>DiscussionPollOptionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionPollOptionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DiscussionPollOptionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"DiscussionPollOption\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOptionEdge","title":"<code>DiscussionPollOptionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionPollOptionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"DiscussionPollOption\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOptionOrder","title":"<code>DiscussionPollOptionOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionPollOptionOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(DiscussionPollOptionOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOptionOrderField","title":"<code>DiscussionPollOptionOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DiscussionPollOptionOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"AUTHORED_ORDER\", \"VOTE_COUNT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissPullRequestReviewInput","title":"<code>DismissPullRequestReviewInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DismissPullRequestReviewInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_review_id\", \"message\", \"client_mutation_id\")\n    pull_request_review_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestReviewId\"\n    )\n    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissPullRequestReviewPayload","title":"<code>DismissPullRequestReviewPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DismissPullRequestReviewPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request_review\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request_review = sgqlc.types.Field(\n        \"PullRequestReview\", graphql_name=\"pullRequestReview\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissReason","title":"<code>DismissReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DismissReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"FIX_STARTED\",\n        \"INACCURATE\",\n        \"NOT_USED\",\n        \"NO_BANDWIDTH\",\n        \"TOLERABLE_RISK\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissRepositoryVulnerabilityAlertInput","title":"<code>DismissRepositoryVulnerabilityAlertInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DismissRepositoryVulnerabilityAlertInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_vulnerability_alert_id\",\n        \"dismiss_reason\",\n        \"client_mutation_id\",\n    )\n    repository_vulnerability_alert_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryVulnerabilityAlertId\"\n    )\n    dismiss_reason = sgqlc.types.Field(\n        sgqlc.types.non_null(DismissReason), graphql_name=\"dismissReason\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissRepositoryVulnerabilityAlertPayload","title":"<code>DismissRepositoryVulnerabilityAlertPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DismissRepositoryVulnerabilityAlertPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository_vulnerability_alert\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository_vulnerability_alert = sgqlc.types.Field(\n        \"RepositoryVulnerabilityAlert\", graphql_name=\"repositoryVulnerabilityAlert\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DraftIssue","title":"<code>DraftIssue</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DraftIssue(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"assignees\",\n        \"body\",\n        \"body_html\",\n        \"body_text\",\n        \"created_at\",\n        \"creator\",\n        \"project\",\n        \"project_item\",\n        \"project_v2_items\",\n        \"projects_v2\",\n        \"title\",\n        \"updated_at\",\n    )\n    assignees = sgqlc.types.Field(\n        sgqlc.types.non_null(UserConnection),\n        graphql_name=\"assignees\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    body_html = sgqlc.types.Field(sgqlc.types.non_null(HTML), graphql_name=\"bodyHTML\")\n    body_text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"bodyText\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    project = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectNext\"), graphql_name=\"project\"\n    )\n    project_item = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectNextItem\"), graphql_name=\"projectItem\"\n    )\n    project_v2_items = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ItemConnection),\n        graphql_name=\"projectV2Items\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    projects_v2 = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2Connection),\n        graphql_name=\"projectsV2\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DraftPullRequestReviewComment","title":"<code>DraftPullRequestReviewComment</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DraftPullRequestReviewComment(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"path\", \"position\", \"body\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"position\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DraftPullRequestReviewThread","title":"<code>DraftPullRequestReviewThread</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class DraftPullRequestReviewThread(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"path\", \"line\", \"side\", \"start_line\", \"start_side\", \"body\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    line = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"line\")\n    side = sgqlc.types.Field(DiffSide, graphql_name=\"side\")\n    start_line = sgqlc.types.Field(Int, graphql_name=\"startLine\")\n    start_side = sgqlc.types.Field(DiffSide, graphql_name=\"startSide\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnablePullRequestAutoMergeInput","title":"<code>EnablePullRequestAutoMergeInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnablePullRequestAutoMergeInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"pull_request_id\",\n        \"commit_headline\",\n        \"commit_body\",\n        \"merge_method\",\n        \"author_email\",\n        \"client_mutation_id\",\n    )\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    commit_headline = sgqlc.types.Field(String, graphql_name=\"commitHeadline\")\n    commit_body = sgqlc.types.Field(String, graphql_name=\"commitBody\")\n    merge_method = sgqlc.types.Field(PullRequestMergeMethod, graphql_name=\"mergeMethod\")\n    author_email = sgqlc.types.Field(String, graphql_name=\"authorEmail\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnablePullRequestAutoMergePayload","title":"<code>EnablePullRequestAutoMergePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnablePullRequestAutoMergePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"client_mutation_id\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Enterprise","title":"<code>Enterprise</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Enterprise(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"avatar_url\",\n        \"billing_info\",\n        \"created_at\",\n        \"database_id\",\n        \"description\",\n        \"description_html\",\n        \"location\",\n        \"members\",\n        \"name\",\n        \"organizations\",\n        \"owner_info\",\n        \"resource_path\",\n        \"slug\",\n        \"url\",\n        \"viewer_is_admin\",\n        \"website_url\",\n    )\n    avatar_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI),\n        graphql_name=\"avatarUrl\",\n        args=sgqlc.types.ArgDict(\n            ((\"size\", sgqlc.types.Arg(Int, graphql_name=\"size\", default=None)),)\n        ),\n    )\n    billing_info = sgqlc.types.Field(EnterpriseBillingInfo, graphql_name=\"billingInfo\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    description_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"descriptionHTML\"\n    )\n    location = sgqlc.types.Field(String, graphql_name=\"location\")\n    members = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseMemberConnection),\n        graphql_name=\"members\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"organization_logins\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"organizationLogins\",\n                        default=None,\n                    ),\n                ),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseMemberOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\n                    \"role\",\n                    sgqlc.types.Arg(\n                        EnterpriseUserAccountMembershipRole,\n                        graphql_name=\"role\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"deployment\",\n                    sgqlc.types.Arg(\n                        EnterpriseUserDeployment,\n                        graphql_name=\"deployment\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"has_two_factor_enabled\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"hasTwoFactorEnabled\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationConnection),\n        graphql_name=\"organizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"viewer_organization_role\",\n                    sgqlc.types.Arg(\n                        RoleInOrganization,\n                        graphql_name=\"viewerOrganizationRole\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    owner_info = sgqlc.types.Field(EnterpriseOwnerInfo, graphql_name=\"ownerInfo\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"slug\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    viewer_is_admin = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerIsAdmin\"\n    )\n    website_url = sgqlc.types.Field(URI, graphql_name=\"websiteUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorConnection","title":"<code>EnterpriseAdministratorConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAdministratorConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseAdministratorEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorEdge","title":"<code>EnterpriseAdministratorEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAdministratorEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"role\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"User\", graphql_name=\"node\")\n    role = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseAdministratorRole), graphql_name=\"role\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitation","title":"<code>EnterpriseAdministratorInvitation</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAdministratorInvitation(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"email\",\n        \"enterprise\",\n        \"invitee\",\n        \"inviter\",\n        \"role\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    email = sgqlc.types.Field(String, graphql_name=\"email\")\n    enterprise = sgqlc.types.Field(\n        sgqlc.types.non_null(Enterprise), graphql_name=\"enterprise\"\n    )\n    invitee = sgqlc.types.Field(\"User\", graphql_name=\"invitee\")\n    inviter = sgqlc.types.Field(\"User\", graphql_name=\"inviter\")\n    role = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseAdministratorRole), graphql_name=\"role\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitationConnection","title":"<code>EnterpriseAdministratorInvitationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAdministratorInvitationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseAdministratorInvitationEdge\"),\n        graphql_name=\"edges\",\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseAdministratorInvitation\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitationEdge","title":"<code>EnterpriseAdministratorInvitationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAdministratorInvitationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"EnterpriseAdministratorInvitation\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitationOrder","title":"<code>EnterpriseAdministratorInvitationOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAdministratorInvitationOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseAdministratorInvitationOrderField),\n        graphql_name=\"field\",\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitationOrderField","title":"<code>EnterpriseAdministratorInvitationOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAdministratorInvitationOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorRole","title":"<code>EnterpriseAdministratorRole</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAdministratorRole(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"BILLING_MANAGER\", \"OWNER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAllowPrivateRepositoryForkingPolicyValue","title":"<code>EnterpriseAllowPrivateRepositoryForkingPolicyValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAllowPrivateRepositoryForkingPolicyValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ENTERPRISE_ORGANIZATIONS\",\n        \"ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS\",\n        \"EVERYWHERE\",\n        \"SAME_ORGANIZATION\",\n        \"SAME_ORGANIZATION_USER_ACCOUNTS\",\n        \"USER_ACCOUNTS\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAuditEntryData","title":"<code>EnterpriseAuditEntryData</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseAuditEntryData(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_resource_path\", \"enterprise_slug\", \"enterprise_url\")\n    enterprise_resource_path = sgqlc.types.Field(\n        URI, graphql_name=\"enterpriseResourcePath\"\n    )\n    enterprise_slug = sgqlc.types.Field(String, graphql_name=\"enterpriseSlug\")\n    enterprise_url = sgqlc.types.Field(URI, graphql_name=\"enterpriseUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseBillingInfo","title":"<code>EnterpriseBillingInfo</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseBillingInfo(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"all_licensable_users_count\",\n        \"asset_packs\",\n        \"bandwidth_quota\",\n        \"bandwidth_usage\",\n        \"bandwidth_usage_percentage\",\n        \"storage_quota\",\n        \"storage_usage\",\n        \"storage_usage_percentage\",\n        \"total_available_licenses\",\n        \"total_licenses\",\n    )\n    all_licensable_users_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"allLicensableUsersCount\"\n    )\n    asset_packs = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"assetPacks\"\n    )\n    bandwidth_quota = sgqlc.types.Field(\n        sgqlc.types.non_null(Float), graphql_name=\"bandwidthQuota\"\n    )\n    bandwidth_usage = sgqlc.types.Field(\n        sgqlc.types.non_null(Float), graphql_name=\"bandwidthUsage\"\n    )\n    bandwidth_usage_percentage = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"bandwidthUsagePercentage\"\n    )\n    storage_quota = sgqlc.types.Field(\n        sgqlc.types.non_null(Float), graphql_name=\"storageQuota\"\n    )\n    storage_usage = sgqlc.types.Field(\n        sgqlc.types.non_null(Float), graphql_name=\"storageUsage\"\n    )\n    storage_usage_percentage = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"storageUsagePercentage\"\n    )\n    total_available_licenses = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalAvailableLicenses\"\n    )\n    total_licenses = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalLicenses\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseDefaultRepositoryPermissionSettingValue","title":"<code>EnterpriseDefaultRepositoryPermissionSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseDefaultRepositoryPermissionSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"NONE\", \"NO_POLICY\", \"READ\", \"WRITE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseEnabledDisabledSettingValue","title":"<code>EnterpriseEnabledDisabledSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseEnabledDisabledSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DISABLED\", \"ENABLED\", \"NO_POLICY\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseEnabledSettingValue","title":"<code>EnterpriseEnabledSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseEnabledSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ENABLED\", \"NO_POLICY\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseIdentityProvider","title":"<code>EnterpriseIdentityProvider</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseIdentityProvider(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"digest_method\",\n        \"enterprise\",\n        \"external_identities\",\n        \"idp_certificate\",\n        \"issuer\",\n        \"recovery_codes\",\n        \"signature_method\",\n        \"sso_url\",\n    )\n    digest_method = sgqlc.types.Field(SamlDigestAlgorithm, graphql_name=\"digestMethod\")\n    enterprise = sgqlc.types.Field(Enterprise, graphql_name=\"enterprise\")\n    external_identities = sgqlc.types.Field(\n        sgqlc.types.non_null(ExternalIdentityConnection),\n        graphql_name=\"externalIdentities\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"members_only\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"membersOnly\", default=None),\n                ),\n                (\"login\", sgqlc.types.Arg(String, graphql_name=\"login\", default=None)),\n                (\n                    \"user_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"userName\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    idp_certificate = sgqlc.types.Field(X509Certificate, graphql_name=\"idpCertificate\")\n    issuer = sgqlc.types.Field(String, graphql_name=\"issuer\")\n    recovery_codes = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name=\"recoveryCodes\"\n    )\n    signature_method = sgqlc.types.Field(\n        SamlSignatureAlgorithm, graphql_name=\"signatureMethod\"\n    )\n    sso_url = sgqlc.types.Field(URI, graphql_name=\"ssoUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMember","title":"<code>EnterpriseMember</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseMember(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (EnterpriseUserAccount, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMemberConnection","title":"<code>EnterpriseMemberConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseMemberConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseMemberEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseMember\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMemberEdge","title":"<code>EnterpriseMemberEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseMemberEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"EnterpriseMember\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMemberOrder","title":"<code>EnterpriseMemberOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseMemberOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseMemberOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMemberOrderField","title":"<code>EnterpriseMemberOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseMemberOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"LOGIN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMembersCanCreateRepositoriesSettingValue","title":"<code>EnterpriseMembersCanCreateRepositoriesSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseMembersCanCreateRepositoriesSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALL\", \"DISABLED\", \"NO_POLICY\", \"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMembersCanMakePurchasesSettingValue","title":"<code>EnterpriseMembersCanMakePurchasesSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseMembersCanMakePurchasesSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DISABLED\", \"ENABLED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOrganizationMembershipConnection","title":"<code>EnterpriseOrganizationMembershipConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseOrganizationMembershipConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseOrganizationMembershipEdge\"),\n        graphql_name=\"edges\",\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Organization\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOrganizationMembershipEdge","title":"<code>EnterpriseOrganizationMembershipEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseOrganizationMembershipEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"role\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Organization\", graphql_name=\"node\")\n    role = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseUserAccountMembershipRole), graphql_name=\"role\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOutsideCollaboratorConnection","title":"<code>EnterpriseOutsideCollaboratorConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseOutsideCollaboratorConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseOutsideCollaboratorEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOutsideCollaboratorEdge","title":"<code>EnterpriseOutsideCollaboratorEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseOutsideCollaboratorEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"repositories\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"User\", graphql_name=\"node\")\n    repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(\"EnterpriseRepositoryInfoConnection\"),\n        graphql_name=\"repositories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"NAME\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOwnerInfo","title":"<code>EnterpriseOwnerInfo</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseOwnerInfo(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"admins\",\n        \"affiliated_users_with_two_factor_disabled\",\n        \"affiliated_users_with_two_factor_disabled_exist\",\n        \"allow_private_repository_forking_setting\",\n        \"allow_private_repository_forking_setting_organizations\",\n        \"allow_private_repository_forking_setting_policy_value\",\n        \"default_repository_permission_setting\",\n        \"default_repository_permission_setting_organizations\",\n        \"domains\",\n        \"enterprise_server_installations\",\n        \"ip_allow_list_enabled_setting\",\n        \"ip_allow_list_entries\",\n        \"ip_allow_list_for_installed_apps_enabled_setting\",\n        \"is_updating_default_repository_permission\",\n        \"is_updating_two_factor_requirement\",\n        \"members_can_change_repository_visibility_setting\",\n        \"members_can_change_repository_visibility_setting_organizations\",\n        \"members_can_create_internal_repositories_setting\",\n        \"members_can_create_private_repositories_setting\",\n        \"members_can_create_public_repositories_setting\",\n        \"members_can_create_repositories_setting\",\n        \"members_can_create_repositories_setting_organizations\",\n        \"members_can_delete_issues_setting\",\n        \"members_can_delete_issues_setting_organizations\",\n        \"members_can_delete_repositories_setting\",\n        \"members_can_delete_repositories_setting_organizations\",\n        \"members_can_invite_collaborators_setting\",\n        \"members_can_invite_collaborators_setting_organizations\",\n        \"members_can_make_purchases_setting\",\n        \"members_can_update_protected_branches_setting\",\n        \"members_can_update_protected_branches_setting_organizations\",\n        \"members_can_view_dependency_insights_setting\",\n        \"members_can_view_dependency_insights_setting_organizations\",\n        \"notification_delivery_restriction_enabled_setting\",\n        \"oidc_provider\",\n        \"organization_projects_setting\",\n        \"organization_projects_setting_organizations\",\n        \"outside_collaborators\",\n        \"pending_admin_invitations\",\n        \"pending_collaborator_invitations\",\n        \"pending_member_invitations\",\n        \"repository_projects_setting\",\n        \"repository_projects_setting_organizations\",\n        \"saml_identity_provider\",\n        \"saml_identity_provider_setting_organizations\",\n        \"support_entitlements\",\n        \"team_discussions_setting\",\n        \"team_discussions_setting_organizations\",\n        \"two_factor_required_setting\",\n        \"two_factor_required_setting_organizations\",\n    )\n    admins = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseAdministratorConnection),\n        graphql_name=\"admins\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"organization_logins\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"organizationLogins\",\n                        default=None,\n                    ),\n                ),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"role\",\n                    sgqlc.types.Arg(\n                        EnterpriseAdministratorRole, graphql_name=\"role\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseMemberOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\n                    \"has_two_factor_enabled\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"hasTwoFactorEnabled\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    affiliated_users_with_two_factor_disabled = sgqlc.types.Field(\n        sgqlc.types.non_null(\"UserConnection\"),\n        graphql_name=\"affiliatedUsersWithTwoFactorDisabled\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    affiliated_users_with_two_factor_disabled_exist = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean),\n        graphql_name=\"affiliatedUsersWithTwoFactorDisabledExist\",\n    )\n    allow_private_repository_forking_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"allowPrivateRepositoryForkingSetting\",\n    )\n    allow_private_repository_forking_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"allowPrivateRepositoryForkingSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    allow_private_repository_forking_setting_policy_value = sgqlc.types.Field(\n        EnterpriseAllowPrivateRepositoryForkingPolicyValue,\n        graphql_name=\"allowPrivateRepositoryForkingSettingPolicyValue\",\n    )\n    default_repository_permission_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseDefaultRepositoryPermissionSettingValue),\n        graphql_name=\"defaultRepositoryPermissionSetting\",\n    )\n    default_repository_permission_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"defaultRepositoryPermissionSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DefaultRepositoryPermissionField),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    domains = sgqlc.types.Field(\n        sgqlc.types.non_null(\"VerifiableDomainConnection\"),\n        graphql_name=\"domains\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"is_verified\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isVerified\", default=None),\n                ),\n                (\n                    \"is_approved\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isApproved\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        VerifiableDomainOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"DOMAIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    enterprise_server_installations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"EnterpriseServerInstallationConnection\"),\n        graphql_name=\"enterpriseServerInstallations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"connected_only\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"connectedOnly\", default=False\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseServerInstallationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"HOST_NAME\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    ip_allow_list_enabled_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListEnabledSettingValue),\n        graphql_name=\"ipAllowListEnabledSetting\",\n    )\n    ip_allow_list_entries = sgqlc.types.Field(\n        sgqlc.types.non_null(\"IpAllowListEntryConnection\"),\n        graphql_name=\"ipAllowListEntries\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        IpAllowListEntryOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"ALLOW_LIST_VALUE\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    ip_allow_list_for_installed_apps_enabled_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListForInstalledAppsEnabledSettingValue),\n        graphql_name=\"ipAllowListForInstalledAppsEnabledSetting\",\n    )\n    is_updating_default_repository_permission = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean),\n        graphql_name=\"isUpdatingDefaultRepositoryPermission\",\n    )\n    is_updating_two_factor_requirement = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isUpdatingTwoFactorRequirement\"\n    )\n    members_can_change_repository_visibility_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"membersCanChangeRepositoryVisibilitySetting\",\n    )\n    members_can_change_repository_visibility_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"membersCanChangeRepositoryVisibilitySettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    members_can_create_internal_repositories_setting = sgqlc.types.Field(\n        Boolean, graphql_name=\"membersCanCreateInternalRepositoriesSetting\"\n    )\n    members_can_create_private_repositories_setting = sgqlc.types.Field(\n        Boolean, graphql_name=\"membersCanCreatePrivateRepositoriesSetting\"\n    )\n    members_can_create_public_repositories_setting = sgqlc.types.Field(\n        Boolean, graphql_name=\"membersCanCreatePublicRepositoriesSetting\"\n    )\n    members_can_create_repositories_setting = sgqlc.types.Field(\n        EnterpriseMembersCanCreateRepositoriesSettingValue,\n        graphql_name=\"membersCanCreateRepositoriesSetting\",\n    )\n    members_can_create_repositories_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"membersCanCreateRepositoriesSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            OrganizationMembersCanCreateRepositoriesSettingValue\n                        ),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    members_can_delete_issues_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"membersCanDeleteIssuesSetting\",\n    )\n    members_can_delete_issues_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"membersCanDeleteIssuesSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    members_can_delete_repositories_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"membersCanDeleteRepositoriesSetting\",\n    )\n    members_can_delete_repositories_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"membersCanDeleteRepositoriesSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    members_can_invite_collaborators_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"membersCanInviteCollaboratorsSetting\",\n    )\n    members_can_invite_collaborators_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"membersCanInviteCollaboratorsSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    members_can_make_purchases_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseMembersCanMakePurchasesSettingValue),\n        graphql_name=\"membersCanMakePurchasesSetting\",\n    )\n    members_can_update_protected_branches_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"membersCanUpdateProtectedBranchesSetting\",\n    )\n    members_can_update_protected_branches_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"membersCanUpdateProtectedBranchesSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    members_can_view_dependency_insights_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"membersCanViewDependencyInsightsSetting\",\n    )\n    members_can_view_dependency_insights_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"membersCanViewDependencyInsightsSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    notification_delivery_restriction_enabled_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(NotificationRestrictionSettingValue),\n        graphql_name=\"notificationDeliveryRestrictionEnabledSetting\",\n    )\n    oidc_provider = sgqlc.types.Field(\"OIDCProvider\", graphql_name=\"oidcProvider\")\n    organization_projects_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"organizationProjectsSetting\",\n    )\n    organization_projects_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"organizationProjectsSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    outside_collaborators = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseOutsideCollaboratorConnection),\n        graphql_name=\"outsideCollaborators\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"login\", sgqlc.types.Arg(String, graphql_name=\"login\", default=None)),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseMemberOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\n                    \"visibility\",\n                    sgqlc.types.Arg(\n                        RepositoryVisibility, graphql_name=\"visibility\", default=None\n                    ),\n                ),\n                (\n                    \"has_two_factor_enabled\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"hasTwoFactorEnabled\", default=None\n                    ),\n                ),\n                (\n                    \"organization_logins\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"organizationLogins\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pending_admin_invitations = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseAdministratorInvitationConnection),\n        graphql_name=\"pendingAdminInvitations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseAdministratorInvitationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\n                    \"role\",\n                    sgqlc.types.Arg(\n                        EnterpriseAdministratorRole, graphql_name=\"role\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pending_collaborator_invitations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"RepositoryInvitationConnection\"),\n        graphql_name=\"pendingCollaboratorInvitations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryInvitationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pending_member_invitations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"EnterprisePendingMemberInvitationConnection\"),\n        graphql_name=\"pendingMemberInvitations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"organization_logins\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"organizationLogins\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    repository_projects_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"repositoryProjectsSetting\",\n    )\n    repository_projects_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"repositoryProjectsSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    saml_identity_provider = sgqlc.types.Field(\n        \"EnterpriseIdentityProvider\", graphql_name=\"samlIdentityProvider\"\n    )\n    saml_identity_provider_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"samlIdentityProviderSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(IdentityProviderConfigurationState),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    support_entitlements = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseMemberConnection),\n        graphql_name=\"supportEntitlements\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseMemberOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    team_discussions_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"teamDiscussionsSetting\",\n    )\n    team_discussions_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"teamDiscussionsSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    two_factor_required_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledSettingValue),\n        graphql_name=\"twoFactorRequiredSetting\",\n    )\n    two_factor_required_setting_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(\"OrganizationConnection\"),\n        graphql_name=\"twoFactorRequiredSettingOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Boolean),\n                        graphql_name=\"value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterprisePendingMemberInvitationConnection","title":"<code>EnterprisePendingMemberInvitationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterprisePendingMemberInvitationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"edges\",\n        \"nodes\",\n        \"page_info\",\n        \"total_count\",\n        \"total_unique_user_count\",\n    )\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterprisePendingMemberInvitationEdge\"),\n        graphql_name=\"edges\",\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"OrganizationInvitation\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n    total_unique_user_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalUniqueUserCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterprisePendingMemberInvitationEdge","title":"<code>EnterprisePendingMemberInvitationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterprisePendingMemberInvitationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"OrganizationInvitation\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseRepositoryInfo","title":"<code>EnterpriseRepositoryInfo</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseRepositoryInfo(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_private\", \"name\", \"name_with_owner\")\n    is_private = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPrivate\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    name_with_owner = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"nameWithOwner\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseRepositoryInfoConnection","title":"<code>EnterpriseRepositoryInfoConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseRepositoryInfoConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseRepositoryInfoEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseRepositoryInfo\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseRepositoryInfoEdge","title":"<code>EnterpriseRepositoryInfoEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseRepositoryInfoEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"EnterpriseRepositoryInfo\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallation","title":"<code>EnterpriseServerInstallation</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerInstallation(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"customer_name\",\n        \"host_name\",\n        \"is_connected\",\n        \"updated_at\",\n        \"user_accounts\",\n        \"user_accounts_uploads\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    customer_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"customerName\"\n    )\n    host_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"hostName\")\n    is_connected = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isConnected\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    user_accounts = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerUserAccountConnection),\n        graphql_name=\"userAccounts\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseServerUserAccountOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    user_accounts_uploads = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerUserAccountsUploadConnection),\n        graphql_name=\"userAccountsUploads\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseServerUserAccountsUploadOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallationConnection","title":"<code>EnterpriseServerInstallationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerInstallationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseServerInstallationEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseServerInstallation\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallationEdge","title":"<code>EnterpriseServerInstallationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerInstallationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"EnterpriseServerInstallation\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallationOrder","title":"<code>EnterpriseServerInstallationOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerInstallationOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerInstallationOrderField),\n        graphql_name=\"field\",\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallationOrderField","title":"<code>EnterpriseServerInstallationOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerInstallationOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"CUSTOMER_NAME\", \"HOST_NAME\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccount","title":"<code>EnterpriseServerUserAccount</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccount(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"emails\",\n        \"enterprise_server_installation\",\n        \"is_site_admin\",\n        \"login\",\n        \"profile_name\",\n        \"remote_created_at\",\n        \"remote_user_id\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    emails = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerUserAccountEmailConnection),\n        graphql_name=\"emails\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        EnterpriseServerUserAccountEmailOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"EMAIL\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    enterprise_server_installation = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerInstallation),\n        graphql_name=\"enterpriseServerInstallation\",\n    )\n    is_site_admin = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isSiteAdmin\"\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    profile_name = sgqlc.types.Field(String, graphql_name=\"profileName\")\n    remote_created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"remoteCreatedAt\"\n    )\n    remote_user_id = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"remoteUserId\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountConnection","title":"<code>EnterpriseServerUserAccountConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseServerUserAccountEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseServerUserAccount\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEdge","title":"<code>EnterpriseServerUserAccountEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"EnterpriseServerUserAccount\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmail","title":"<code>EnterpriseServerUserAccountEmail</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountEmail(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"email\",\n        \"is_primary\",\n        \"updated_at\",\n        \"user_account\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"email\")\n    is_primary = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPrimary\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    user_account = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerUserAccount), graphql_name=\"userAccount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmailConnection","title":"<code>EnterpriseServerUserAccountEmailConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountEmailConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseServerUserAccountEmailEdge\"),\n        graphql_name=\"edges\",\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseServerUserAccountEmail\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmailEdge","title":"<code>EnterpriseServerUserAccountEmailEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountEmailEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"EnterpriseServerUserAccountEmail\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmailOrder","title":"<code>EnterpriseServerUserAccountEmailOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountEmailOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerUserAccountEmailOrderField),\n        graphql_name=\"field\",\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmailOrderField","title":"<code>EnterpriseServerUserAccountEmailOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountEmailOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"EMAIL\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountOrder","title":"<code>EnterpriseServerUserAccountOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerUserAccountOrderField),\n        graphql_name=\"field\",\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountOrderField","title":"<code>EnterpriseServerUserAccountOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"LOGIN\", \"REMOTE_CREATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUpload","title":"<code>EnterpriseServerUserAccountsUpload</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountsUpload(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"enterprise\",\n        \"enterprise_server_installation\",\n        \"name\",\n        \"sync_state\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    enterprise = sgqlc.types.Field(\n        sgqlc.types.non_null(Enterprise), graphql_name=\"enterprise\"\n    )\n    enterprise_server_installation = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerInstallation),\n        graphql_name=\"enterpriseServerInstallation\",\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    sync_state = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerUserAccountsUploadSyncState),\n        graphql_name=\"syncState\",\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadConnection","title":"<code>EnterpriseServerUserAccountsUploadConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountsUploadConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseServerUserAccountsUploadEdge\"),\n        graphql_name=\"edges\",\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnterpriseServerUserAccountsUpload\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadEdge","title":"<code>EnterpriseServerUserAccountsUploadEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountsUploadEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"EnterpriseServerUserAccountsUpload\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadOrder","title":"<code>EnterpriseServerUserAccountsUploadOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountsUploadOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseServerUserAccountsUploadOrderField),\n        graphql_name=\"field\",\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadOrderField","title":"<code>EnterpriseServerUserAccountsUploadOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountsUploadOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadSyncState","title":"<code>EnterpriseServerUserAccountsUploadSyncState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseServerUserAccountsUploadSyncState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"FAILURE\", \"PENDING\", \"SUCCESS\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseUserAccount","title":"<code>EnterpriseUserAccount</code>","text":"<p>             Bases: <code>Type</code>, <code>Actor</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseUserAccount(sgqlc.types.Type, Actor, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"enterprise\",\n        \"name\",\n        \"organizations\",\n        \"updated_at\",\n        \"user\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    enterprise = sgqlc.types.Field(\n        sgqlc.types.non_null(Enterprise), graphql_name=\"enterprise\"\n    )\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseOrganizationMembershipConnection),\n        graphql_name=\"organizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrganizationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\n                    \"role\",\n                    sgqlc.types.Arg(\n                        EnterpriseUserAccountMembershipRole,\n                        graphql_name=\"role\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseUserAccountMembershipRole","title":"<code>EnterpriseUserAccountMembershipRole</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseUserAccountMembershipRole(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"MEMBER\", \"OWNER\", \"UNAFFILIATED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseUserDeployment","title":"<code>EnterpriseUserDeployment</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnterpriseUserDeployment(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CLOUD\", \"SERVER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Environment","title":"<code>Environment</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Environment(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"database_id\", \"name\", \"protection_rules\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    protection_rules = sgqlc.types.Field(\n        sgqlc.types.non_null(DeploymentProtectionRuleConnection),\n        graphql_name=\"protectionRules\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnvironmentConnection","title":"<code>EnvironmentConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnvironmentConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"EnvironmentEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Environment\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnvironmentEdge","title":"<code>EnvironmentEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class EnvironmentEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Environment\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentity","title":"<code>ExternalIdentity</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ExternalIdentity(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"guid\",\n        \"organization_invitation\",\n        \"saml_identity\",\n        \"scim_identity\",\n        \"user\",\n    )\n    guid = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"guid\")\n    organization_invitation = sgqlc.types.Field(\n        \"OrganizationInvitation\", graphql_name=\"organizationInvitation\"\n    )\n    saml_identity = sgqlc.types.Field(\n        ExternalIdentitySamlAttributes, graphql_name=\"samlIdentity\"\n    )\n    scim_identity = sgqlc.types.Field(\n        ExternalIdentityScimAttributes, graphql_name=\"scimIdentity\"\n    )\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentityAttribute","title":"<code>ExternalIdentityAttribute</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ExternalIdentityAttribute(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"metadata\", \"name\", \"value\")\n    metadata = sgqlc.types.Field(String, graphql_name=\"metadata\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"value\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentityConnection","title":"<code>ExternalIdentityConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ExternalIdentityConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ExternalIdentityEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ExternalIdentity\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentityEdge","title":"<code>ExternalIdentityEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ExternalIdentityEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ExternalIdentity\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentitySamlAttributes","title":"<code>ExternalIdentitySamlAttributes</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ExternalIdentitySamlAttributes(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"attributes\",\n        \"emails\",\n        \"family_name\",\n        \"given_name\",\n        \"groups\",\n        \"name_id\",\n        \"username\",\n    )\n    attributes = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(ExternalIdentityAttribute))\n        ),\n        graphql_name=\"attributes\",\n    )\n    emails = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"UserEmailMetadata\")),\n        graphql_name=\"emails\",\n    )\n    family_name = sgqlc.types.Field(String, graphql_name=\"familyName\")\n    given_name = sgqlc.types.Field(String, graphql_name=\"givenName\")\n    groups = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name=\"groups\"\n    )\n    name_id = sgqlc.types.Field(String, graphql_name=\"nameId\")\n    username = sgqlc.types.Field(String, graphql_name=\"username\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentityScimAttributes","title":"<code>ExternalIdentityScimAttributes</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ExternalIdentityScimAttributes(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"emails\", \"family_name\", \"given_name\", \"groups\", \"username\")\n    emails = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"UserEmailMetadata\")),\n        graphql_name=\"emails\",\n    )\n    family_name = sgqlc.types.Field(String, graphql_name=\"familyName\")\n    given_name = sgqlc.types.Field(String, graphql_name=\"givenName\")\n    groups = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name=\"groups\"\n    )\n    username = sgqlc.types.Field(String, graphql_name=\"username\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FileAddition","title":"<code>FileAddition</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FileAddition(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"path\", \"contents\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    contents = sgqlc.types.Field(\n        sgqlc.types.non_null(Base64String), graphql_name=\"contents\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FileChanges","title":"<code>FileChanges</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FileChanges(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"deletions\", \"additions\")\n    deletions = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"FileDeletion\")),\n        graphql_name=\"deletions\",\n    )\n    additions = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(FileAddition)),\n        graphql_name=\"additions\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FileDeletion","title":"<code>FileDeletion</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FileDeletion(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"path\",)\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FileViewedState","title":"<code>FileViewedState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FileViewedState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DISMISSED\", \"UNVIEWED\", \"VIEWED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowOrganizationInput","title":"<code>FollowOrganizationInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FollowOrganizationInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"organization_id\", \"client_mutation_id\")\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowOrganizationPayload","title":"<code>FollowOrganizationPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FollowOrganizationPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"organization\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    organization = sgqlc.types.Field(\"Organization\", graphql_name=\"organization\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowUserInput","title":"<code>FollowUserInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FollowUserInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"user_id\", \"client_mutation_id\")\n    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"userId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowUserPayload","title":"<code>FollowUserPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FollowUserPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"user\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowerConnection","title":"<code>FollowerConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FollowerConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"UserEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowingConnection","title":"<code>FollowingConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FollowingConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"UserEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FundingLink","title":"<code>FundingLink</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FundingLink(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"platform\", \"url\")\n    platform = sgqlc.types.Field(\n        sgqlc.types.non_null(FundingPlatform), graphql_name=\"platform\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FundingPlatform","title":"<code>FundingPlatform</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class FundingPlatform(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"COMMUNITY_BRIDGE\",\n        \"CUSTOM\",\n        \"GITHUB\",\n        \"ISSUEHUNT\",\n        \"KO_FI\",\n        \"LFX_CROWDFUNDING\",\n        \"LIBERAPAY\",\n        \"OPEN_COLLECTIVE\",\n        \"OTECHIE\",\n        \"PATREON\",\n        \"TIDELIFT\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GenericHovercardContext","title":"<code>GenericHovercardContext</code>","text":"<p>             Bases: <code>Type</code>, <code>HovercardContext</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GenericHovercardContext(sgqlc.types.Type, HovercardContext):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Gist","title":"<code>Gist</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Starrable</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Gist(sgqlc.types.Type, Node, Starrable, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"comments\",\n        \"created_at\",\n        \"description\",\n        \"files\",\n        \"forks\",\n        \"is_fork\",\n        \"is_public\",\n        \"name\",\n        \"owner\",\n        \"pushed_at\",\n        \"updated_at\",\n    )\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(GistCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    files = sgqlc.types.Field(\n        sgqlc.types.list_of(GistFile),\n        graphql_name=\"files\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=10)),\n                (\"oid\", sgqlc.types.Arg(GitObjectID, graphql_name=\"oid\", default=None)),\n            )\n        ),\n    )\n    forks = sgqlc.types.Field(\n        sgqlc.types.non_null(GistConnection),\n        graphql_name=\"forks\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(GistOrder, graphql_name=\"orderBy\", default=None),\n                ),\n            )\n        ),\n    )\n    is_fork = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isFork\")\n    is_public = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPublic\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    owner = sgqlc.types.Field(RepositoryOwner, graphql_name=\"owner\")\n    pushed_at = sgqlc.types.Field(DateTime, graphql_name=\"pushedAt\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistComment","title":"<code>GistComment</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Comment</code>, <code>Deletable</code>, <code>Minimizable</code>, <code>Updatable</code>, <code>UpdatableComment</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistComment(\n    sgqlc.types.Type, Node, Comment, Deletable, Minimizable, Updatable, UpdatableComment\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"database_id\", \"gist\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    gist = sgqlc.types.Field(sgqlc.types.non_null(Gist), graphql_name=\"gist\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistCommentConnection","title":"<code>GistCommentConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistCommentConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"GistCommentEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"GistComment\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistCommentEdge","title":"<code>GistCommentEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistCommentEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"GistComment\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistConnection","title":"<code>GistConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"GistEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Gist\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistEdge","title":"<code>GistEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Gist\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistFile","title":"<code>GistFile</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistFile(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"encoded_name\",\n        \"encoding\",\n        \"extension\",\n        \"is_image\",\n        \"is_truncated\",\n        \"language\",\n        \"name\",\n        \"size\",\n        \"text\",\n    )\n    encoded_name = sgqlc.types.Field(String, graphql_name=\"encodedName\")\n    encoding = sgqlc.types.Field(String, graphql_name=\"encoding\")\n    extension = sgqlc.types.Field(String, graphql_name=\"extension\")\n    is_image = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isImage\")\n    is_truncated = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isTruncated\"\n    )\n    language = sgqlc.types.Field(\"Language\", graphql_name=\"language\")\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    size = sgqlc.types.Field(Int, graphql_name=\"size\")\n    text = sgqlc.types.Field(\n        String,\n        graphql_name=\"text\",\n        args=sgqlc.types.ArgDict(\n            ((\"truncate\", sgqlc.types.Arg(Int, graphql_name=\"truncate\", default=None)),)\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistOrder","title":"<code>GistOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(GistOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistOrderField","title":"<code>GistOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"PUSHED_AT\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistPrivacy","title":"<code>GistPrivacy</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GistPrivacy(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALL\", \"PUBLIC\", \"SECRET\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitActor","title":"<code>GitActor</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitActor(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"avatar_url\", \"date\", \"email\", \"name\", \"user\")\n    avatar_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI),\n        graphql_name=\"avatarUrl\",\n        args=sgqlc.types.ArgDict(\n            ((\"size\", sgqlc.types.Arg(Int, graphql_name=\"size\", default=None)),)\n        ),\n    )\n    date = sgqlc.types.Field(GitTimestamp, graphql_name=\"date\")\n    email = sgqlc.types.Field(String, graphql_name=\"email\")\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitActorConnection","title":"<code>GitActorConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitActorConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"GitActorEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(GitActor), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitActorEdge","title":"<code>GitActorEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitActorEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(GitActor, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitHubMetadata","title":"<code>GitHubMetadata</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitHubMetadata(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"git_hub_services_sha\",\n        \"git_ip_addresses\",\n        \"hook_ip_addresses\",\n        \"importer_ip_addresses\",\n        \"is_password_authentication_verifiable\",\n        \"pages_ip_addresses\",\n    )\n    git_hub_services_sha = sgqlc.types.Field(\n        sgqlc.types.non_null(GitObjectID), graphql_name=\"gitHubServicesSha\"\n    )\n    git_ip_addresses = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name=\"gitIpAddresses\"\n    )\n    hook_ip_addresses = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n        graphql_name=\"hookIpAddresses\",\n    )\n    importer_ip_addresses = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n        graphql_name=\"importerIpAddresses\",\n    )\n    is_password_authentication_verifiable = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPasswordAuthenticationVerifiable\"\n    )\n    pages_ip_addresses = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n        graphql_name=\"pagesIpAddresses\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitObject","title":"<code>GitObject</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitObject(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"abbreviated_oid\",\n        \"commit_resource_path\",\n        \"commit_url\",\n        \"id\",\n        \"oid\",\n        \"repository\",\n    )\n    abbreviated_oid = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"abbreviatedOid\"\n    )\n    commit_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"commitResourcePath\"\n    )\n    commit_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"commitUrl\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    oid = sgqlc.types.Field(sgqlc.types.non_null(GitObjectID), graphql_name=\"oid\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitObjectID","title":"<code>GitObjectID</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitObjectID(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitSSHRemote","title":"<code>GitSSHRemote</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitSSHRemote(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitSignature","title":"<code>GitSignature</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitSignature(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"email\",\n        \"is_valid\",\n        \"payload\",\n        \"signature\",\n        \"signer\",\n        \"state\",\n        \"was_signed_by_git_hub\",\n    )\n    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"email\")\n    is_valid = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isValid\")\n    payload = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"payload\")\n    signature = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"signature\"\n    )\n    signer = sgqlc.types.Field(\"User\", graphql_name=\"signer\")\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(GitSignatureState), graphql_name=\"state\"\n    )\n    was_signed_by_git_hub = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"wasSignedByGitHub\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitSignatureState","title":"<code>GitSignatureState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitSignatureState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"BAD_CERT\",\n        \"BAD_EMAIL\",\n        \"EXPIRED_KEY\",\n        \"GPGVERIFY_ERROR\",\n        \"GPGVERIFY_UNAVAILABLE\",\n        \"INVALID\",\n        \"MALFORMED_SIG\",\n        \"NOT_SIGNING_KEY\",\n        \"NO_USER\",\n        \"OCSP_ERROR\",\n        \"OCSP_PENDING\",\n        \"OCSP_REVOKED\",\n        \"UNKNOWN_KEY\",\n        \"UNKNOWN_SIG_TYPE\",\n        \"UNSIGNED\",\n        \"UNVERIFIED_EMAIL\",\n        \"VALID\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitTimestamp","title":"<code>GitTimestamp</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GitTimestamp(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GpgSignature","title":"<code>GpgSignature</code>","text":"<p>             Bases: <code>Type</code>, <code>GitSignature</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GpgSignature(sgqlc.types.Type, GitSignature):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"key_id\",)\n    key_id = sgqlc.types.Field(String, graphql_name=\"keyId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GrantEnterpriseOrganizationsMigratorRoleInput","title":"<code>GrantEnterpriseOrganizationsMigratorRoleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GrantEnterpriseOrganizationsMigratorRoleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"login\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GrantEnterpriseOrganizationsMigratorRolePayload","title":"<code>GrantEnterpriseOrganizationsMigratorRolePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GrantEnterpriseOrganizationsMigratorRolePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"organizations\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    organizations = sgqlc.types.Field(\n        \"OrganizationConnection\",\n        graphql_name=\"organizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GrantMigratorRoleInput","title":"<code>GrantMigratorRoleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GrantMigratorRoleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"organization_id\", \"actor\", \"actor_type\", \"client_mutation_id\")\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    actor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"actor\")\n    actor_type = sgqlc.types.Field(\n        sgqlc.types.non_null(ActorType), graphql_name=\"actorType\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GrantMigratorRolePayload","title":"<code>GrantMigratorRolePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class GrantMigratorRolePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"success\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    success = sgqlc.types.Field(Boolean, graphql_name=\"success\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HTML","title":"<code>HTML</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class HTML(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HeadRefDeletedEvent","title":"<code>HeadRefDeletedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class HeadRefDeletedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"head_ref\",\n        \"head_ref_name\",\n        \"pull_request\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    head_ref = sgqlc.types.Field(\"Ref\", graphql_name=\"headRef\")\n    head_ref_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"headRefName\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HeadRefForcePushedEvent","title":"<code>HeadRefForcePushedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class HeadRefForcePushedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"after_commit\",\n        \"before_commit\",\n        \"created_at\",\n        \"pull_request\",\n        \"ref\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    after_commit = sgqlc.types.Field(Commit, graphql_name=\"afterCommit\")\n    before_commit = sgqlc.types.Field(Commit, graphql_name=\"beforeCommit\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n    ref = sgqlc.types.Field(\"Ref\", graphql_name=\"ref\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HeadRefRestoredEvent","title":"<code>HeadRefRestoredEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class HeadRefRestoredEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Hovercard","title":"<code>Hovercard</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Hovercard(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"contexts\",)\n    contexts = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(\"HovercardContext\"))\n        ),\n        graphql_name=\"contexts\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HovercardContext","title":"<code>HovercardContext</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class HovercardContext(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"message\", \"octicon\")\n    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"message\")\n    octicon = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"octicon\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IdentityProviderConfigurationState","title":"<code>IdentityProviderConfigurationState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IdentityProviderConfigurationState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CONFIGURED\", \"ENFORCED\", \"UNCONFIGURED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.InviteEnterpriseAdminInput","title":"<code>InviteEnterpriseAdminInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class InviteEnterpriseAdminInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"enterprise_id\",\n        \"invitee\",\n        \"email\",\n        \"role\",\n        \"client_mutation_id\",\n    )\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    invitee = sgqlc.types.Field(String, graphql_name=\"invitee\")\n    email = sgqlc.types.Field(String, graphql_name=\"email\")\n    role = sgqlc.types.Field(EnterpriseAdministratorRole, graphql_name=\"role\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.InviteEnterpriseAdminPayload","title":"<code>InviteEnterpriseAdminPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class InviteEnterpriseAdminPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"invitation\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    invitation = sgqlc.types.Field(\n        \"EnterpriseAdministratorInvitation\", graphql_name=\"invitation\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEnabledSettingValue","title":"<code>IpAllowListEnabledSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IpAllowListEnabledSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DISABLED\", \"ENABLED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntry","title":"<code>IpAllowListEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IpAllowListEntry(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"allow_list_value\",\n        \"created_at\",\n        \"is_active\",\n        \"name\",\n        \"owner\",\n        \"updated_at\",\n    )\n    allow_list_value = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"allowListValue\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    is_active = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isActive\"\n    )\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    owner = sgqlc.types.Field(\n        sgqlc.types.non_null(\"IpAllowListOwner\"), graphql_name=\"owner\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntryConnection","title":"<code>IpAllowListEntryConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IpAllowListEntryConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"IpAllowListEntryEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"IpAllowListEntry\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntryEdge","title":"<code>IpAllowListEntryEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IpAllowListEntryEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"IpAllowListEntry\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntryOrder","title":"<code>IpAllowListEntryOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IpAllowListEntryOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListEntryOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntryOrderField","title":"<code>IpAllowListEntryOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IpAllowListEntryOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALLOW_LIST_VALUE\", \"CREATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListForInstalledAppsEnabledSettingValue","title":"<code>IpAllowListForInstalledAppsEnabledSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IpAllowListForInstalledAppsEnabledSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DISABLED\", \"ENABLED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListOwner","title":"<code>IpAllowListOwner</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IpAllowListOwner(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (App, Enterprise, Organization)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Issue","title":"<code>Issue</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Assignable</code>, <code>Closable</code>, <code>Comment</code>, <code>Updatable</code>, <code>UpdatableComment</code>, <code>Labelable</code>, <code>Lockable</code>, <code>Reactable</code>, <code>RepositoryNode</code>, <code>Subscribable</code>, <code>UniformResourceLocatable</code>, <code>ProjectNextOwner</code>, <code>ProjectV2Owner</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Issue(\n    sgqlc.types.Type,\n    Node,\n    Assignable,\n    Closable,\n    Comment,\n    Updatable,\n    UpdatableComment,\n    Labelable,\n    Lockable,\n    Reactable,\n    RepositoryNode,\n    Subscribable,\n    UniformResourceLocatable,\n    ProjectNextOwner,\n    ProjectV2Owner,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"body_resource_path\",\n        \"body_url\",\n        \"comments\",\n        \"hovercard\",\n        \"is_pinned\",\n        \"is_read_by_viewer\",\n        \"milestone\",\n        \"number\",\n        \"participants\",\n        \"project_cards\",\n        \"project_items\",\n        \"project_next_items\",\n        \"state\",\n        \"state_reason\",\n        \"timeline\",\n        \"timeline_items\",\n        \"title\",\n        \"title_html\",\n        \"tracked_in_issues\",\n        \"tracked_issues\",\n        \"tracked_issues_count\",\n    )\n    body_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"bodyResourcePath\"\n    )\n    body_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"bodyUrl\")\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        IssueCommentOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    hovercard = sgqlc.types.Field(\n        sgqlc.types.non_null(Hovercard),\n        graphql_name=\"hovercard\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"include_notification_contexts\",\n                    sgqlc.types.Arg(\n                        Boolean,\n                        graphql_name=\"includeNotificationContexts\",\n                        default=True,\n                    ),\n                ),\n            )\n        ),\n    )\n    is_pinned = sgqlc.types.Field(Boolean, graphql_name=\"isPinned\")\n    is_read_by_viewer = sgqlc.types.Field(Boolean, graphql_name=\"isReadByViewer\")\n    milestone = sgqlc.types.Field(\"Milestone\", graphql_name=\"milestone\")\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    participants = sgqlc.types.Field(\n        sgqlc.types.non_null(UserConnection),\n        graphql_name=\"participants\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    project_cards = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectCardConnection),\n        graphql_name=\"projectCards\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"archived_states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(ProjectCardArchivedState),\n                        graphql_name=\"archivedStates\",\n                        default=(\"ARCHIVED\", \"NOT_ARCHIVED\"),\n                    ),\n                ),\n            )\n        ),\n    )\n    project_items = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ItemConnection),\n        graphql_name=\"projectItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"include_archived\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"includeArchived\", default=True\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    project_next_items = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextItemConnection),\n        graphql_name=\"projectNextItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"include_archived\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"includeArchived\", default=True\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    state = sgqlc.types.Field(sgqlc.types.non_null(IssueState), graphql_name=\"state\")\n    state_reason = sgqlc.types.Field(IssueStateReason, graphql_name=\"stateReason\")\n    timeline = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueTimelineConnection),\n        graphql_name=\"timeline\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"since\",\n                    sgqlc.types.Arg(DateTime, graphql_name=\"since\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    timeline_items = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueTimelineItemsConnection),\n        graphql_name=\"timelineItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"since\",\n                    sgqlc.types.Arg(DateTime, graphql_name=\"since\", default=None),\n                ),\n                (\"skip\", sgqlc.types.Arg(Int, graphql_name=\"skip\", default=None)),\n                (\n                    \"item_types\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(IssueTimelineItemsItemType)\n                        ),\n                        graphql_name=\"itemTypes\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    title_html = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"titleHTML\"\n    )\n    tracked_in_issues = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueConnection),\n        graphql_name=\"trackedInIssues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    tracked_issues = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueConnection),\n        graphql_name=\"trackedIssues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    tracked_issues_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int),\n        graphql_name=\"trackedIssuesCount\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(TrackedIssueStates),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueClosedStateReason","title":"<code>IssueClosedStateReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueClosedStateReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"COMPLETED\", \"NOT_PLANNED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueComment","title":"<code>IssueComment</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Comment</code>, <code>Deletable</code>, <code>Minimizable</code>, <code>Updatable</code>, <code>UpdatableComment</code>, <code>Reactable</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueComment(\n    sgqlc.types.Type,\n    Node,\n    Comment,\n    Deletable,\n    Minimizable,\n    Updatable,\n    UpdatableComment,\n    Reactable,\n    RepositoryNode,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"issue\", \"pull_request\", \"resource_path\", \"url\")\n    issue = sgqlc.types.Field(sgqlc.types.non_null(Issue), graphql_name=\"issue\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueCommentConnection","title":"<code>IssueCommentConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueCommentConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"IssueCommentEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"IssueComment\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueCommentEdge","title":"<code>IssueCommentEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueCommentEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"IssueComment\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueCommentOrder","title":"<code>IssueCommentOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueCommentOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueCommentOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueCommentOrderField","title":"<code>IssueCommentOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueCommentOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"UPDATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueConnection","title":"<code>IssueConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"IssueEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Issue\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueContributionsByRepository","title":"<code>IssueContributionsByRepository</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueContributionsByRepository(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"contributions\", \"repository\")\n    contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(CreatedIssueContributionConnection),\n        graphql_name=\"contributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ContributionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueEdge","title":"<code>IssueEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Issue\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueFilters","title":"<code>IssueFilters</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueFilters(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"assignee\",\n        \"created_by\",\n        \"labels\",\n        \"mentioned\",\n        \"milestone\",\n        \"milestone_number\",\n        \"since\",\n        \"states\",\n        \"viewer_subscribed\",\n    )\n    assignee = sgqlc.types.Field(String, graphql_name=\"assignee\")\n    created_by = sgqlc.types.Field(String, graphql_name=\"createdBy\")\n    labels = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name=\"labels\"\n    )\n    mentioned = sgqlc.types.Field(String, graphql_name=\"mentioned\")\n    milestone = sgqlc.types.Field(String, graphql_name=\"milestone\")\n    milestone_number = sgqlc.types.Field(String, graphql_name=\"milestoneNumber\")\n    since = sgqlc.types.Field(DateTime, graphql_name=\"since\")\n    states = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(IssueState)), graphql_name=\"states\"\n    )\n    viewer_subscribed = sgqlc.types.Field(Boolean, graphql_name=\"viewerSubscribed\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueOrPullRequest","title":"<code>IssueOrPullRequest</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueOrPullRequest(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Issue, PullRequest)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueOrder","title":"<code>IssueOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueOrderField","title":"<code>IssueOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"COMMENTS\", \"CREATED_AT\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueState","title":"<code>IssueState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CLOSED\", \"OPEN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueStateReason","title":"<code>IssueStateReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueStateReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"COMPLETED\", \"NOT_PLANNED\", \"REOPENED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTemplate","title":"<code>IssueTemplate</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueTemplate(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"about\", \"body\", \"name\", \"title\")\n    about = sgqlc.types.Field(String, graphql_name=\"about\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineConnection","title":"<code>IssueTimelineConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueTimelineConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"IssueTimelineItemEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"IssueTimelineItem\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItem","title":"<code>IssueTimelineItem</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueTimelineItem(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (\n        AssignedEvent,\n        ClosedEvent,\n        Commit,\n        CrossReferencedEvent,\n        DemilestonedEvent,\n        IssueComment,\n        LabeledEvent,\n        LockedEvent,\n        MilestonedEvent,\n        ReferencedEvent,\n        RenamedTitleEvent,\n        ReopenedEvent,\n        SubscribedEvent,\n        TransferredEvent,\n        UnassignedEvent,\n        UnlabeledEvent,\n        UnlockedEvent,\n        UnsubscribedEvent,\n        UserBlockedEvent,\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItemEdge","title":"<code>IssueTimelineItemEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueTimelineItemEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"IssueTimelineItem\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItems","title":"<code>IssueTimelineItems</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueTimelineItems(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (\n        AddedToProjectEvent,\n        AssignedEvent,\n        ClosedEvent,\n        CommentDeletedEvent,\n        ConnectedEvent,\n        ConvertedNoteToIssueEvent,\n        ConvertedToDiscussionEvent,\n        CrossReferencedEvent,\n        DemilestonedEvent,\n        DisconnectedEvent,\n        IssueComment,\n        LabeledEvent,\n        LockedEvent,\n        MarkedAsDuplicateEvent,\n        MentionedEvent,\n        MilestonedEvent,\n        MovedColumnsInProjectEvent,\n        PinnedEvent,\n        ReferencedEvent,\n        RemovedFromProjectEvent,\n        RenamedTitleEvent,\n        ReopenedEvent,\n        SubscribedEvent,\n        TransferredEvent,\n        UnassignedEvent,\n        UnlabeledEvent,\n        UnlockedEvent,\n        UnmarkedAsDuplicateEvent,\n        UnpinnedEvent,\n        UnsubscribedEvent,\n        UserBlockedEvent,\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItemsConnection","title":"<code>IssueTimelineItemsConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueTimelineItemsConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"edges\",\n        \"filtered_count\",\n        \"nodes\",\n        \"page_count\",\n        \"page_info\",\n        \"total_count\",\n        \"updated_at\",\n    )\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"IssueTimelineItemsEdge\"), graphql_name=\"edges\"\n    )\n    filtered_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"filteredCount\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"IssueTimelineItems\"), graphql_name=\"nodes\"\n    )\n    page_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"pageCount\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItemsEdge","title":"<code>IssueTimelineItemsEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueTimelineItemsEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"IssueTimelineItems\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItemsItemType","title":"<code>IssueTimelineItemsItemType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class IssueTimelineItemsItemType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ADDED_TO_PROJECT_EVENT\",\n        \"ASSIGNED_EVENT\",\n        \"CLOSED_EVENT\",\n        \"COMMENT_DELETED_EVENT\",\n        \"CONNECTED_EVENT\",\n        \"CONVERTED_NOTE_TO_ISSUE_EVENT\",\n        \"CONVERTED_TO_DISCUSSION_EVENT\",\n        \"CROSS_REFERENCED_EVENT\",\n        \"DEMILESTONED_EVENT\",\n        \"DISCONNECTED_EVENT\",\n        \"ISSUE_COMMENT\",\n        \"LABELED_EVENT\",\n        \"LOCKED_EVENT\",\n        \"MARKED_AS_DUPLICATE_EVENT\",\n        \"MENTIONED_EVENT\",\n        \"MILESTONED_EVENT\",\n        \"MOVED_COLUMNS_IN_PROJECT_EVENT\",\n        \"PINNED_EVENT\",\n        \"REFERENCED_EVENT\",\n        \"REMOVED_FROM_PROJECT_EVENT\",\n        \"RENAMED_TITLE_EVENT\",\n        \"REOPENED_EVENT\",\n        \"SUBSCRIBED_EVENT\",\n        \"TRANSFERRED_EVENT\",\n        \"UNASSIGNED_EVENT\",\n        \"UNLABELED_EVENT\",\n        \"UNLOCKED_EVENT\",\n        \"UNMARKED_AS_DUPLICATE_EVENT\",\n        \"UNPINNED_EVENT\",\n        \"UNSUBSCRIBED_EVENT\",\n        \"USER_BLOCKED_EVENT\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.JoinedGitHubContribution","title":"<code>JoinedGitHubContribution</code>","text":"<p>             Bases: <code>Type</code>, <code>Contribution</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class JoinedGitHubContribution(sgqlc.types.Type, Contribution):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Label","title":"<code>Label</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Label(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"color\",\n        \"created_at\",\n        \"description\",\n        \"is_default\",\n        \"issues\",\n        \"name\",\n        \"pull_requests\",\n        \"repository\",\n        \"resource_path\",\n        \"updated_at\",\n        \"url\",\n    )\n    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"color\")\n    created_at = sgqlc.types.Field(DateTime, graphql_name=\"createdAt\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    is_default = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isDefault\"\n    )\n    issues = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueConnection),\n        graphql_name=\"issues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(IssueState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"filter_by\",\n                    sgqlc.types.Arg(\n                        IssueFilters, graphql_name=\"filterBy\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    pull_requests = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestConnection),\n        graphql_name=\"pullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(PullRequestState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"head_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"headRefName\", default=None),\n                ),\n                (\n                    \"base_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"baseRefName\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    updated_at = sgqlc.types.Field(DateTime, graphql_name=\"updatedAt\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabelConnection","title":"<code>LabelConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LabelConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"LabelEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Label\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabelEdge","title":"<code>LabelEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LabelEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Label\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabelOrder","title":"<code>LabelOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LabelOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(LabelOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabelOrderField","title":"<code>LabelOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LabelOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"NAME\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Labelable","title":"<code>Labelable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Labelable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"labels\",)\n    labels = sgqlc.types.Field(\n        LabelConnection,\n        graphql_name=\"labels\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        LabelOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabeledEvent","title":"<code>LabeledEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LabeledEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"label\", \"labelable\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    label = sgqlc.types.Field(sgqlc.types.non_null(Label), graphql_name=\"label\")\n    labelable = sgqlc.types.Field(\n        sgqlc.types.non_null(Labelable), graphql_name=\"labelable\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Language","title":"<code>Language</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Language(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"color\", \"name\")\n    color = sgqlc.types.Field(String, graphql_name=\"color\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LanguageConnection","title":"<code>LanguageConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LanguageConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\", \"total_size\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"LanguageEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Language\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n    total_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"totalSize\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LanguageEdge","title":"<code>LanguageEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LanguageEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"size\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(sgqlc.types.non_null(\"Language\"), graphql_name=\"node\")\n    size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"size\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LanguageOrder","title":"<code>LanguageOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LanguageOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(LanguageOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LanguageOrderField","title":"<code>LanguageOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LanguageOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"SIZE\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.License","title":"<code>License</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class License(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"body\",\n        \"conditions\",\n        \"description\",\n        \"featured\",\n        \"hidden\",\n        \"implementation\",\n        \"key\",\n        \"limitations\",\n        \"name\",\n        \"nickname\",\n        \"permissions\",\n        \"pseudo_license\",\n        \"spdx_id\",\n        \"url\",\n    )\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    conditions = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(LicenseRule)),\n        graphql_name=\"conditions\",\n    )\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    featured = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"featured\")\n    hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"hidden\")\n    implementation = sgqlc.types.Field(String, graphql_name=\"implementation\")\n    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"key\")\n    limitations = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(LicenseRule)),\n        graphql_name=\"limitations\",\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    nickname = sgqlc.types.Field(String, graphql_name=\"nickname\")\n    permissions = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(LicenseRule)),\n        graphql_name=\"permissions\",\n    )\n    pseudo_license = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"pseudoLicense\"\n    )\n    spdx_id = sgqlc.types.Field(String, graphql_name=\"spdxId\")\n    url = sgqlc.types.Field(URI, graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LicenseRule","title":"<code>LicenseRule</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LicenseRule(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"description\", \"key\", \"label\")\n    description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"description\"\n    )\n    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"key\")\n    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"label\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LinkRepositoryToProjectInput","title":"<code>LinkRepositoryToProjectInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LinkRepositoryToProjectInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"repository_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LinkRepositoryToProjectPayload","title":"<code>LinkRepositoryToProjectPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LinkRepositoryToProjectPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project = sgqlc.types.Field(\"Project\", graphql_name=\"project\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LockLockableInput","title":"<code>LockLockableInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LockLockableInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"lockable_id\", \"lock_reason\", \"client_mutation_id\")\n    lockable_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"lockableId\")\n    lock_reason = sgqlc.types.Field(LockReason, graphql_name=\"lockReason\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LockLockablePayload","title":"<code>LockLockablePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LockLockablePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"client_mutation_id\", \"locked_record\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    locked_record = sgqlc.types.Field(\"Lockable\", graphql_name=\"lockedRecord\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LockReason","title":"<code>LockReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LockReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"OFF_TOPIC\", \"RESOLVED\", \"SPAM\", \"TOO_HEATED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Lockable","title":"<code>Lockable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Lockable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"active_lock_reason\", \"locked\")\n    active_lock_reason = sgqlc.types.Field(LockReason, graphql_name=\"activeLockReason\")\n    locked = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"locked\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LockedEvent","title":"<code>LockedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class LockedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"lock_reason\", \"lockable\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    lock_reason = sgqlc.types.Field(LockReason, graphql_name=\"lockReason\")\n    lockable = sgqlc.types.Field(\n        sgqlc.types.non_null(Lockable), graphql_name=\"lockable\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Mannequin","title":"<code>Mannequin</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Actor</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Mannequin(sgqlc.types.Type, Node, Actor, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"claimant\", \"created_at\", \"database_id\", \"email\", \"updated_at\")\n    claimant = sgqlc.types.Field(\"User\", graphql_name=\"claimant\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    email = sgqlc.types.Field(String, graphql_name=\"email\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkDiscussionCommentAsAnswerInput","title":"<code>MarkDiscussionCommentAsAnswerInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarkDiscussionCommentAsAnswerInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkDiscussionCommentAsAnswerPayload","title":"<code>MarkDiscussionCommentAsAnswerPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarkDiscussionCommentAsAnswerPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"discussion\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    discussion = sgqlc.types.Field(\"Discussion\", graphql_name=\"discussion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkFileAsViewedInput","title":"<code>MarkFileAsViewedInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarkFileAsViewedInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_id\", \"path\", \"client_mutation_id\")\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkFileAsViewedPayload","title":"<code>MarkFileAsViewedPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarkFileAsViewedPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkPullRequestReadyForReviewInput","title":"<code>MarkPullRequestReadyForReviewInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarkPullRequestReadyForReviewInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_id\", \"client_mutation_id\")\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkPullRequestReadyForReviewPayload","title":"<code>MarkPullRequestReadyForReviewPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarkPullRequestReadyForReviewPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkedAsDuplicateEvent","title":"<code>MarkedAsDuplicateEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarkedAsDuplicateEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"canonical\",\n        \"created_at\",\n        \"duplicate\",\n        \"is_cross_repository\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    canonical = sgqlc.types.Field(\"IssueOrPullRequest\", graphql_name=\"canonical\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    duplicate = sgqlc.types.Field(\"IssueOrPullRequest\", graphql_name=\"duplicate\")\n    is_cross_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCrossRepository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarketplaceCategory","title":"<code>MarketplaceCategory</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarketplaceCategory(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"description\",\n        \"how_it_works\",\n        \"name\",\n        \"primary_listing_count\",\n        \"resource_path\",\n        \"secondary_listing_count\",\n        \"slug\",\n        \"url\",\n    )\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    how_it_works = sgqlc.types.Field(String, graphql_name=\"howItWorks\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    primary_listing_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"primaryListingCount\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    secondary_listing_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"secondaryListingCount\"\n    )\n    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"slug\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarketplaceListing","title":"<code>MarketplaceListing</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarketplaceListing(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"app\",\n        \"company_url\",\n        \"configuration_resource_path\",\n        \"configuration_url\",\n        \"documentation_url\",\n        \"extended_description\",\n        \"extended_description_html\",\n        \"full_description\",\n        \"full_description_html\",\n        \"has_published_free_trial_plans\",\n        \"has_terms_of_service\",\n        \"has_verified_owner\",\n        \"how_it_works\",\n        \"how_it_works_html\",\n        \"installation_url\",\n        \"installed_for_viewer\",\n        \"is_archived\",\n        \"is_draft\",\n        \"is_paid\",\n        \"is_public\",\n        \"is_rejected\",\n        \"is_unverified\",\n        \"is_unverified_pending\",\n        \"is_verification_pending_from_draft\",\n        \"is_verification_pending_from_unverified\",\n        \"is_verified\",\n        \"logo_background_color\",\n        \"logo_url\",\n        \"name\",\n        \"normalized_short_description\",\n        \"pricing_url\",\n        \"primary_category\",\n        \"privacy_policy_url\",\n        \"resource_path\",\n        \"screenshot_urls\",\n        \"secondary_category\",\n        \"short_description\",\n        \"slug\",\n        \"status_url\",\n        \"support_email\",\n        \"support_url\",\n        \"terms_of_service_url\",\n        \"url\",\n        \"viewer_can_add_plans\",\n        \"viewer_can_approve\",\n        \"viewer_can_delist\",\n        \"viewer_can_edit\",\n        \"viewer_can_edit_categories\",\n        \"viewer_can_edit_plans\",\n        \"viewer_can_redraft\",\n        \"viewer_can_reject\",\n        \"viewer_can_request_approval\",\n        \"viewer_has_purchased\",\n        \"viewer_has_purchased_for_all_organizations\",\n        \"viewer_is_listing_admin\",\n    )\n    app = sgqlc.types.Field(App, graphql_name=\"app\")\n    company_url = sgqlc.types.Field(URI, graphql_name=\"companyUrl\")\n    configuration_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"configurationResourcePath\"\n    )\n    configuration_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"configurationUrl\"\n    )\n    documentation_url = sgqlc.types.Field(URI, graphql_name=\"documentationUrl\")\n    extended_description = sgqlc.types.Field(String, graphql_name=\"extendedDescription\")\n    extended_description_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"extendedDescriptionHTML\"\n    )\n    full_description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"fullDescription\"\n    )\n    full_description_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"fullDescriptionHTML\"\n    )\n    has_published_free_trial_plans = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasPublishedFreeTrialPlans\"\n    )\n    has_terms_of_service = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasTermsOfService\"\n    )\n    has_verified_owner = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasVerifiedOwner\"\n    )\n    how_it_works = sgqlc.types.Field(String, graphql_name=\"howItWorks\")\n    how_it_works_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"howItWorksHTML\"\n    )\n    installation_url = sgqlc.types.Field(URI, graphql_name=\"installationUrl\")\n    installed_for_viewer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"installedForViewer\"\n    )\n    is_archived = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isArchived\"\n    )\n    is_draft = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isDraft\")\n    is_paid = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isPaid\")\n    is_public = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPublic\"\n    )\n    is_rejected = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isRejected\"\n    )\n    is_unverified = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isUnverified\"\n    )\n    is_unverified_pending = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isUnverifiedPending\"\n    )\n    is_verification_pending_from_draft = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isVerificationPendingFromDraft\"\n    )\n    is_verification_pending_from_unverified = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean),\n        graphql_name=\"isVerificationPendingFromUnverified\",\n    )\n    is_verified = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isVerified\"\n    )\n    logo_background_color = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"logoBackgroundColor\"\n    )\n    logo_url = sgqlc.types.Field(\n        URI,\n        graphql_name=\"logoUrl\",\n        args=sgqlc.types.ArgDict(\n            ((\"size\", sgqlc.types.Arg(Int, graphql_name=\"size\", default=400)),)\n        ),\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    normalized_short_description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"normalizedShortDescription\"\n    )\n    pricing_url = sgqlc.types.Field(URI, graphql_name=\"pricingUrl\")\n    primary_category = sgqlc.types.Field(\n        sgqlc.types.non_null(MarketplaceCategory), graphql_name=\"primaryCategory\"\n    )\n    privacy_policy_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"privacyPolicyUrl\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    screenshot_urls = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(String)), graphql_name=\"screenshotUrls\"\n    )\n    secondary_category = sgqlc.types.Field(\n        MarketplaceCategory, graphql_name=\"secondaryCategory\"\n    )\n    short_description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"shortDescription\"\n    )\n    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"slug\")\n    status_url = sgqlc.types.Field(URI, graphql_name=\"statusUrl\")\n    support_email = sgqlc.types.Field(String, graphql_name=\"supportEmail\")\n    support_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"supportUrl\"\n    )\n    terms_of_service_url = sgqlc.types.Field(URI, graphql_name=\"termsOfServiceUrl\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    viewer_can_add_plans = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanAddPlans\"\n    )\n    viewer_can_approve = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanApprove\"\n    )\n    viewer_can_delist = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanDelist\"\n    )\n    viewer_can_edit = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanEdit\"\n    )\n    viewer_can_edit_categories = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanEditCategories\"\n    )\n    viewer_can_edit_plans = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanEditPlans\"\n    )\n    viewer_can_redraft = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanRedraft\"\n    )\n    viewer_can_reject = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanReject\"\n    )\n    viewer_can_request_approval = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanRequestApproval\"\n    )\n    viewer_has_purchased = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerHasPurchased\"\n    )\n    viewer_has_purchased_for_all_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean),\n        graphql_name=\"viewerHasPurchasedForAllOrganizations\",\n    )\n    viewer_is_listing_admin = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerIsListingAdmin\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarketplaceListingConnection","title":"<code>MarketplaceListingConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarketplaceListingConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"MarketplaceListingEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"MarketplaceListing\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarketplaceListingEdge","title":"<code>MarketplaceListingEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MarketplaceListingEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"MarketplaceListing\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MemberStatusable","title":"<code>MemberStatusable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MemberStatusable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"member_statuses\",)\n    member_statuses = sgqlc.types.Field(\n        sgqlc.types.non_null(\"UserStatusConnection\"),\n        graphql_name=\"memberStatuses\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        UserStatusOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"UPDATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MembersCanDeleteReposClearAuditEntry","title":"<code>MembersCanDeleteReposClearAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>EnterpriseAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MembersCanDeleteReposClearAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    EnterpriseAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MembersCanDeleteReposDisableAuditEntry","title":"<code>MembersCanDeleteReposDisableAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>EnterpriseAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MembersCanDeleteReposDisableAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    EnterpriseAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MembersCanDeleteReposEnableAuditEntry","title":"<code>MembersCanDeleteReposEnableAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>EnterpriseAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MembersCanDeleteReposEnableAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    EnterpriseAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MentionedEvent","title":"<code>MentionedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MentionedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"database_id\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeBranchInput","title":"<code>MergeBranchInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MergeBranchInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"base\",\n        \"head\",\n        \"commit_message\",\n        \"author_email\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    base = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"base\")\n    head = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"head\")\n    commit_message = sgqlc.types.Field(String, graphql_name=\"commitMessage\")\n    author_email = sgqlc.types.Field(String, graphql_name=\"authorEmail\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeBranchPayload","title":"<code>MergeBranchPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MergeBranchPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"merge_commit\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    merge_commit = sgqlc.types.Field(\"Commit\", graphql_name=\"mergeCommit\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeCommitMessage","title":"<code>MergeCommitMessage</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MergeCommitMessage(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"BLANK\", \"PR_BODY\", \"PR_TITLE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeCommitTitle","title":"<code>MergeCommitTitle</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MergeCommitTitle(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"MERGE_MESSAGE\", \"PR_TITLE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergePullRequestInput","title":"<code>MergePullRequestInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MergePullRequestInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"pull_request_id\",\n        \"commit_headline\",\n        \"commit_body\",\n        \"expected_head_oid\",\n        \"merge_method\",\n        \"author_email\",\n        \"client_mutation_id\",\n    )\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    commit_headline = sgqlc.types.Field(String, graphql_name=\"commitHeadline\")\n    commit_body = sgqlc.types.Field(String, graphql_name=\"commitBody\")\n    expected_head_oid = sgqlc.types.Field(GitObjectID, graphql_name=\"expectedHeadOid\")\n    merge_method = sgqlc.types.Field(PullRequestMergeMethod, graphql_name=\"mergeMethod\")\n    author_email = sgqlc.types.Field(String, graphql_name=\"authorEmail\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergePullRequestPayload","title":"<code>MergePullRequestPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MergePullRequestPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"client_mutation_id\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeableState","title":"<code>MergeableState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MergeableState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CONFLICTING\", \"MERGEABLE\", \"UNKNOWN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergedEvent","title":"<code>MergedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MergedEvent(sgqlc.types.Type, Node, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"commit\",\n        \"created_at\",\n        \"merge_ref\",\n        \"merge_ref_name\",\n        \"pull_request\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    merge_ref = sgqlc.types.Field(\"Ref\", graphql_name=\"mergeRef\")\n    merge_ref_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"mergeRefName\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Migration","title":"<code>Migration</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Migration(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"continue_on_error\",\n        \"created_at\",\n        \"database_id\",\n        \"failure_reason\",\n        \"id\",\n        \"migration_log_url\",\n        \"migration_source\",\n        \"repository_name\",\n        \"source_url\",\n        \"state\",\n    )\n    continue_on_error = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"continueOnError\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(String, graphql_name=\"databaseId\")\n    failure_reason = sgqlc.types.Field(String, graphql_name=\"failureReason\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    migration_log_url = sgqlc.types.Field(URI, graphql_name=\"migrationLogUrl\")\n    migration_source = sgqlc.types.Field(\n        sgqlc.types.non_null(\"MigrationSource\"), graphql_name=\"migrationSource\"\n    )\n    repository_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"repositoryName\"\n    )\n    source_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"sourceUrl\")\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(MigrationState), graphql_name=\"state\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MigrationSource","title":"<code>MigrationSource</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MigrationSource(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"name\", \"type\", \"url\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    type = sgqlc.types.Field(\n        sgqlc.types.non_null(MigrationSourceType), graphql_name=\"type\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MigrationSourceType","title":"<code>MigrationSourceType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MigrationSourceType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"AZURE_DEVOPS\", \"BITBUCKET_SERVER\", \"GITHUB_ARCHIVE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MigrationState","title":"<code>MigrationState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MigrationState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"FAILED\",\n        \"FAILED_VALIDATION\",\n        \"IN_PROGRESS\",\n        \"NOT_STARTED\",\n        \"PENDING_VALIDATION\",\n        \"QUEUED\",\n        \"SUCCEEDED\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Milestone","title":"<code>Milestone</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Closable</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Milestone(sgqlc.types.Type, Node, Closable, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"creator\",\n        \"description\",\n        \"due_on\",\n        \"issues\",\n        \"number\",\n        \"progress_percentage\",\n        \"pull_requests\",\n        \"repository\",\n        \"state\",\n        \"title\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    due_on = sgqlc.types.Field(DateTime, graphql_name=\"dueOn\")\n    issues = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueConnection),\n        graphql_name=\"issues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(IssueState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"filter_by\",\n                    sgqlc.types.Arg(\n                        IssueFilters, graphql_name=\"filterBy\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    progress_percentage = sgqlc.types.Field(\n        sgqlc.types.non_null(Float), graphql_name=\"progressPercentage\"\n    )\n    pull_requests = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestConnection),\n        graphql_name=\"pullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(PullRequestState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"head_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"headRefName\", default=None),\n                ),\n                (\n                    \"base_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"baseRefName\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(MilestoneState), graphql_name=\"state\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneConnection","title":"<code>MilestoneConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MilestoneConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"MilestoneEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Milestone\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneEdge","title":"<code>MilestoneEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MilestoneEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Milestone\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneItem","title":"<code>MilestoneItem</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MilestoneItem(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Issue, PullRequest)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneOrder","title":"<code>MilestoneOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MilestoneOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(MilestoneOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneOrderField","title":"<code>MilestoneOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MilestoneOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"DUE_DATE\", \"NUMBER\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneState","title":"<code>MilestoneState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MilestoneState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CLOSED\", \"OPEN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestonedEvent","title":"<code>MilestonedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MilestonedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"milestone_title\", \"subject\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    milestone_title = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"milestoneTitle\"\n    )\n    subject = sgqlc.types.Field(\n        sgqlc.types.non_null(\"MilestoneItem\"), graphql_name=\"subject\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Minimizable","title":"<code>Minimizable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Minimizable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_minimized\", \"minimized_reason\", \"viewer_can_minimize\")\n    is_minimized = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isMinimized\"\n    )\n    minimized_reason = sgqlc.types.Field(String, graphql_name=\"minimizedReason\")\n    viewer_can_minimize = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanMinimize\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MinimizeCommentInput","title":"<code>MinimizeCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MinimizeCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"subject_id\", \"classifier\", \"client_mutation_id\")\n    subject_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"subjectId\")\n    classifier = sgqlc.types.Field(\n        sgqlc.types.non_null(ReportedContentClassifiers), graphql_name=\"classifier\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MinimizeCommentPayload","title":"<code>MinimizeCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MinimizeCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"minimized_comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    minimized_comment = sgqlc.types.Field(Minimizable, graphql_name=\"minimizedComment\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MoveProjectCardInput","title":"<code>MoveProjectCardInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MoveProjectCardInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"card_id\", \"column_id\", \"after_card_id\", \"client_mutation_id\")\n    card_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"cardId\")\n    column_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"columnId\")\n    after_card_id = sgqlc.types.Field(ID, graphql_name=\"afterCardId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MoveProjectCardPayload","title":"<code>MoveProjectCardPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MoveProjectCardPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"card_edge\", \"client_mutation_id\")\n    card_edge = sgqlc.types.Field(\"ProjectCardEdge\", graphql_name=\"cardEdge\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MoveProjectColumnInput","title":"<code>MoveProjectColumnInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MoveProjectColumnInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"column_id\", \"after_column_id\", \"client_mutation_id\")\n    column_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"columnId\")\n    after_column_id = sgqlc.types.Field(ID, graphql_name=\"afterColumnId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MoveProjectColumnPayload","title":"<code>MoveProjectColumnPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MoveProjectColumnPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"column_edge\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    column_edge = sgqlc.types.Field(\"ProjectColumnEdge\", graphql_name=\"columnEdge\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MovedColumnsInProjectEvent","title":"<code>MovedColumnsInProjectEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class MovedColumnsInProjectEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"database_id\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Mutation","title":"<code>Mutation</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Mutation(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"abort_queued_migrations\",\n        \"accept_enterprise_administrator_invitation\",\n        \"accept_topic_suggestion\",\n        \"add_assignees_to_assignable\",\n        \"add_comment\",\n        \"add_discussion_comment\",\n        \"add_discussion_poll_vote\",\n        \"add_enterprise_support_entitlement\",\n        \"add_labels_to_labelable\",\n        \"add_project_card\",\n        \"add_project_column\",\n        \"add_project_draft_issue\",\n        \"add_project_next_item\",\n        \"add_project_v2_draft_issue\",\n        \"add_project_v2_item_by_id\",\n        \"add_pull_request_review\",\n        \"add_pull_request_review_comment\",\n        \"add_pull_request_review_thread\",\n        \"add_reaction\",\n        \"add_star\",\n        \"add_upvote\",\n        \"add_verifiable_domain\",\n        \"approve_deployments\",\n        \"approve_verifiable_domain\",\n        \"archive_repository\",\n        \"cancel_enterprise_admin_invitation\",\n        \"cancel_sponsorship\",\n        \"change_user_status\",\n        \"clear_labels_from_labelable\",\n        \"clear_project_v2_item_field_value\",\n        \"clone_project\",\n        \"clone_template_repository\",\n        \"close_issue\",\n        \"close_pull_request\",\n        \"convert_project_card_note_to_issue\",\n        \"convert_pull_request_to_draft\",\n        \"create_branch_protection_rule\",\n        \"create_check_run\",\n        \"create_check_suite\",\n        \"create_commit_on_branch\",\n        \"create_discussion\",\n        \"create_enterprise_organization\",\n        \"create_environment\",\n        \"create_ip_allow_list_entry\",\n        \"create_issue\",\n        \"create_migration_source\",\n        \"create_project\",\n        \"create_project_v2\",\n        \"create_pull_request\",\n        \"create_ref\",\n        \"create_repository\",\n        \"create_sponsors_tier\",\n        \"create_sponsorship\",\n        \"create_team_discussion\",\n        \"create_team_discussion_comment\",\n        \"decline_topic_suggestion\",\n        \"delete_branch_protection_rule\",\n        \"delete_deployment\",\n        \"delete_discussion\",\n        \"delete_discussion_comment\",\n        \"delete_environment\",\n        \"delete_ip_allow_list_entry\",\n        \"delete_issue\",\n        \"delete_issue_comment\",\n        \"delete_project\",\n        \"delete_project_card\",\n        \"delete_project_column\",\n        \"delete_project_next_item\",\n        \"delete_project_v2_item\",\n        \"delete_pull_request_review\",\n        \"delete_pull_request_review_comment\",\n        \"delete_ref\",\n        \"delete_team_discussion\",\n        \"delete_team_discussion_comment\",\n        \"delete_verifiable_domain\",\n        \"disable_pull_request_auto_merge\",\n        \"dismiss_pull_request_review\",\n        \"dismiss_repository_vulnerability_alert\",\n        \"enable_pull_request_auto_merge\",\n        \"follow_organization\",\n        \"follow_user\",\n        \"grant_enterprise_organizations_migrator_role\",\n        \"grant_migrator_role\",\n        \"invite_enterprise_admin\",\n        \"link_repository_to_project\",\n        \"lock_lockable\",\n        \"mark_discussion_comment_as_answer\",\n        \"mark_file_as_viewed\",\n        \"mark_pull_request_ready_for_review\",\n        \"merge_branch\",\n        \"merge_pull_request\",\n        \"minimize_comment\",\n        \"move_project_card\",\n        \"move_project_column\",\n        \"pin_issue\",\n        \"regenerate_enterprise_identity_provider_recovery_codes\",\n        \"regenerate_verifiable_domain_token\",\n        \"reject_deployments\",\n        \"remove_assignees_from_assignable\",\n        \"remove_enterprise_admin\",\n        \"remove_enterprise_identity_provider\",\n        \"remove_enterprise_organization\",\n        \"remove_enterprise_support_entitlement\",\n        \"remove_labels_from_labelable\",\n        \"remove_outside_collaborator\",\n        \"remove_reaction\",\n        \"remove_star\",\n        \"remove_upvote\",\n        \"reopen_issue\",\n        \"reopen_pull_request\",\n        \"request_reviews\",\n        \"rerequest_check_suite\",\n        \"resolve_review_thread\",\n        \"revoke_enterprise_organizations_migrator_role\",\n        \"revoke_migrator_role\",\n        \"set_enterprise_identity_provider\",\n        \"set_organization_interaction_limit\",\n        \"set_repository_interaction_limit\",\n        \"set_user_interaction_limit\",\n        \"start_repository_migration\",\n        \"submit_pull_request_review\",\n        \"transfer_issue\",\n        \"unarchive_repository\",\n        \"unfollow_organization\",\n        \"unfollow_user\",\n        \"unlink_repository_from_project\",\n        \"unlock_lockable\",\n        \"unmark_discussion_comment_as_answer\",\n        \"unmark_file_as_viewed\",\n        \"unmark_issue_as_duplicate\",\n        \"unminimize_comment\",\n        \"unpin_issue\",\n        \"unresolve_review_thread\",\n        \"update_branch_protection_rule\",\n        \"update_check_run\",\n        \"update_check_suite_preferences\",\n        \"update_discussion\",\n        \"update_discussion_comment\",\n        \"update_enterprise_administrator_role\",\n        \"update_enterprise_allow_private_repository_forking_setting\",\n        \"update_enterprise_default_repository_permission_setting\",\n        \"update_enterprise_members_can_change_repository_visibility_setting\",\n        \"update_enterprise_members_can_create_repositories_setting\",\n        \"update_enterprise_members_can_delete_issues_setting\",\n        \"update_enterprise_members_can_delete_repositories_setting\",\n        \"update_enterprise_members_can_invite_collaborators_setting\",\n        \"update_enterprise_members_can_make_purchases_setting\",\n        \"update_enterprise_members_can_update_protected_branches_setting\",\n        \"update_enterprise_members_can_view_dependency_insights_setting\",\n        \"update_enterprise_organization_projects_setting\",\n        \"update_enterprise_owner_organization_role\",\n        \"update_enterprise_profile\",\n        \"update_enterprise_repository_projects_setting\",\n        \"update_enterprise_team_discussions_setting\",\n        \"update_enterprise_two_factor_authentication_required_setting\",\n        \"update_environment\",\n        \"update_ip_allow_list_enabled_setting\",\n        \"update_ip_allow_list_entry\",\n        \"update_ip_allow_list_for_installed_apps_enabled_setting\",\n        \"update_issue\",\n        \"update_issue_comment\",\n        \"update_notification_restriction_setting\",\n        \"update_organization_allow_private_repository_forking_setting\",\n        \"update_organization_web_commit_signoff_setting\",\n        \"update_project\",\n        \"update_project_card\",\n        \"update_project_column\",\n        \"update_project_draft_issue\",\n        \"update_project_next\",\n        \"update_project_next_item_field\",\n        \"update_project_v2\",\n        \"update_project_v2_draft_issue\",\n        \"update_project_v2_item_field_value\",\n        \"update_project_v2_item_position\",\n        \"update_pull_request\",\n        \"update_pull_request_branch\",\n        \"update_pull_request_review\",\n        \"update_pull_request_review_comment\",\n        \"update_ref\",\n        \"update_repository\",\n        \"update_repository_web_commit_signoff_setting\",\n        \"update_sponsorship_preferences\",\n        \"update_subscription\",\n        \"update_team_discussion\",\n        \"update_team_discussion_comment\",\n        \"update_teams_repository\",\n        \"update_topics\",\n        \"verify_verifiable_domain\",\n    )\n    abort_queued_migrations = sgqlc.types.Field(\n        AbortQueuedMigrationsPayload,\n        graphql_name=\"abortQueuedMigrations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AbortQueuedMigrationsInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    accept_enterprise_administrator_invitation = sgqlc.types.Field(\n        AcceptEnterpriseAdministratorInvitationPayload,\n        graphql_name=\"acceptEnterpriseAdministratorInvitation\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            AcceptEnterpriseAdministratorInvitationInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    accept_topic_suggestion = sgqlc.types.Field(\n        AcceptTopicSuggestionPayload,\n        graphql_name=\"acceptTopicSuggestion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AcceptTopicSuggestionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_assignees_to_assignable = sgqlc.types.Field(\n        AddAssigneesToAssignablePayload,\n        graphql_name=\"addAssigneesToAssignable\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddAssigneesToAssignableInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_comment = sgqlc.types.Field(\n        AddCommentPayload,\n        graphql_name=\"addComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_discussion_comment = sgqlc.types.Field(\n        AddDiscussionCommentPayload,\n        graphql_name=\"addDiscussionComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddDiscussionCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_discussion_poll_vote = sgqlc.types.Field(\n        AddDiscussionPollVotePayload,\n        graphql_name=\"addDiscussionPollVote\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddDiscussionPollVoteInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_enterprise_support_entitlement = sgqlc.types.Field(\n        AddEnterpriseSupportEntitlementPayload,\n        graphql_name=\"addEnterpriseSupportEntitlement\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddEnterpriseSupportEntitlementInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_labels_to_labelable = sgqlc.types.Field(\n        AddLabelsToLabelablePayload,\n        graphql_name=\"addLabelsToLabelable\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddLabelsToLabelableInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_project_card = sgqlc.types.Field(\n        AddProjectCardPayload,\n        graphql_name=\"addProjectCard\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddProjectCardInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_project_column = sgqlc.types.Field(\n        AddProjectColumnPayload,\n        graphql_name=\"addProjectColumn\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddProjectColumnInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_project_draft_issue = sgqlc.types.Field(\n        AddProjectDraftIssuePayload,\n        graphql_name=\"addProjectDraftIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddProjectDraftIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_project_next_item = sgqlc.types.Field(\n        AddProjectNextItemPayload,\n        graphql_name=\"addProjectNextItem\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddProjectNextItemInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_project_v2_draft_issue = sgqlc.types.Field(\n        AddProjectV2DraftIssuePayload,\n        graphql_name=\"addProjectV2DraftIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddProjectV2DraftIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_project_v2_item_by_id = sgqlc.types.Field(\n        AddProjectV2ItemByIdPayload,\n        graphql_name=\"addProjectV2ItemById\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddProjectV2ItemByIdInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_pull_request_review = sgqlc.types.Field(\n        AddPullRequestReviewPayload,\n        graphql_name=\"addPullRequestReview\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddPullRequestReviewInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_pull_request_review_comment = sgqlc.types.Field(\n        AddPullRequestReviewCommentPayload,\n        graphql_name=\"addPullRequestReviewComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddPullRequestReviewCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_pull_request_review_thread = sgqlc.types.Field(\n        AddPullRequestReviewThreadPayload,\n        graphql_name=\"addPullRequestReviewThread\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddPullRequestReviewThreadInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_reaction = sgqlc.types.Field(\n        AddReactionPayload,\n        graphql_name=\"addReaction\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddReactionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_star = sgqlc.types.Field(\n        AddStarPayload,\n        graphql_name=\"addStar\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddStarInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_upvote = sgqlc.types.Field(\n        AddUpvotePayload,\n        graphql_name=\"addUpvote\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddUpvoteInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_verifiable_domain = sgqlc.types.Field(\n        AddVerifiableDomainPayload,\n        graphql_name=\"addVerifiableDomain\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(AddVerifiableDomainInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    approve_deployments = sgqlc.types.Field(\n        ApproveDeploymentsPayload,\n        graphql_name=\"approveDeployments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ApproveDeploymentsInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    approve_verifiable_domain = sgqlc.types.Field(\n        ApproveVerifiableDomainPayload,\n        graphql_name=\"approveVerifiableDomain\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ApproveVerifiableDomainInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    archive_repository = sgqlc.types.Field(\n        ArchiveRepositoryPayload,\n        graphql_name=\"archiveRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ArchiveRepositoryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    cancel_enterprise_admin_invitation = sgqlc.types.Field(\n        CancelEnterpriseAdminInvitationPayload,\n        graphql_name=\"cancelEnterpriseAdminInvitation\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CancelEnterpriseAdminInvitationInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    cancel_sponsorship = sgqlc.types.Field(\n        CancelSponsorshipPayload,\n        graphql_name=\"cancelSponsorship\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CancelSponsorshipInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    change_user_status = sgqlc.types.Field(\n        ChangeUserStatusPayload,\n        graphql_name=\"changeUserStatus\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ChangeUserStatusInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    clear_labels_from_labelable = sgqlc.types.Field(\n        ClearLabelsFromLabelablePayload,\n        graphql_name=\"clearLabelsFromLabelable\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ClearLabelsFromLabelableInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    clear_project_v2_item_field_value = sgqlc.types.Field(\n        ClearProjectV2ItemFieldValuePayload,\n        graphql_name=\"clearProjectV2ItemFieldValue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ClearProjectV2ItemFieldValueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    clone_project = sgqlc.types.Field(\n        CloneProjectPayload,\n        graphql_name=\"cloneProject\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CloneProjectInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    clone_template_repository = sgqlc.types.Field(\n        CloneTemplateRepositoryPayload,\n        graphql_name=\"cloneTemplateRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CloneTemplateRepositoryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    close_issue = sgqlc.types.Field(\n        CloseIssuePayload,\n        graphql_name=\"closeIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CloseIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    close_pull_request = sgqlc.types.Field(\n        ClosePullRequestPayload,\n        graphql_name=\"closePullRequest\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ClosePullRequestInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    convert_project_card_note_to_issue = sgqlc.types.Field(\n        ConvertProjectCardNoteToIssuePayload,\n        graphql_name=\"convertProjectCardNoteToIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ConvertProjectCardNoteToIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    convert_pull_request_to_draft = sgqlc.types.Field(\n        ConvertPullRequestToDraftPayload,\n        graphql_name=\"convertPullRequestToDraft\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ConvertPullRequestToDraftInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_branch_protection_rule = sgqlc.types.Field(\n        CreateBranchProtectionRulePayload,\n        graphql_name=\"createBranchProtectionRule\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateBranchProtectionRuleInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_check_run = sgqlc.types.Field(\n        CreateCheckRunPayload,\n        graphql_name=\"createCheckRun\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateCheckRunInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_check_suite = sgqlc.types.Field(\n        CreateCheckSuitePayload,\n        graphql_name=\"createCheckSuite\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateCheckSuiteInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_commit_on_branch = sgqlc.types.Field(\n        CreateCommitOnBranchPayload,\n        graphql_name=\"createCommitOnBranch\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateCommitOnBranchInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_discussion = sgqlc.types.Field(\n        CreateDiscussionPayload,\n        graphql_name=\"createDiscussion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateDiscussionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_enterprise_organization = sgqlc.types.Field(\n        CreateEnterpriseOrganizationPayload,\n        graphql_name=\"createEnterpriseOrganization\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateEnterpriseOrganizationInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_environment = sgqlc.types.Field(\n        CreateEnvironmentPayload,\n        graphql_name=\"createEnvironment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateEnvironmentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_ip_allow_list_entry = sgqlc.types.Field(\n        CreateIpAllowListEntryPayload,\n        graphql_name=\"createIpAllowListEntry\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateIpAllowListEntryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_issue = sgqlc.types.Field(\n        CreateIssuePayload,\n        graphql_name=\"createIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_migration_source = sgqlc.types.Field(\n        CreateMigrationSourcePayload,\n        graphql_name=\"createMigrationSource\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateMigrationSourceInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_project = sgqlc.types.Field(\n        CreateProjectPayload,\n        graphql_name=\"createProject\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateProjectInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_project_v2 = sgqlc.types.Field(\n        CreateProjectV2Payload,\n        graphql_name=\"createProjectV2\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateProjectV2Input),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_pull_request = sgqlc.types.Field(\n        CreatePullRequestPayload,\n        graphql_name=\"createPullRequest\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreatePullRequestInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_ref = sgqlc.types.Field(\n        CreateRefPayload,\n        graphql_name=\"createRef\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateRefInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_repository = sgqlc.types.Field(\n        CreateRepositoryPayload,\n        graphql_name=\"createRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateRepositoryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_sponsors_tier = sgqlc.types.Field(\n        CreateSponsorsTierPayload,\n        graphql_name=\"createSponsorsTier\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateSponsorsTierInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_sponsorship = sgqlc.types.Field(\n        CreateSponsorshipPayload,\n        graphql_name=\"createSponsorship\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateSponsorshipInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_team_discussion = sgqlc.types.Field(\n        CreateTeamDiscussionPayload,\n        graphql_name=\"createTeamDiscussion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateTeamDiscussionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_team_discussion_comment = sgqlc.types.Field(\n        CreateTeamDiscussionCommentPayload,\n        graphql_name=\"createTeamDiscussionComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(CreateTeamDiscussionCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    decline_topic_suggestion = sgqlc.types.Field(\n        DeclineTopicSuggestionPayload,\n        graphql_name=\"declineTopicSuggestion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeclineTopicSuggestionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_branch_protection_rule = sgqlc.types.Field(\n        DeleteBranchProtectionRulePayload,\n        graphql_name=\"deleteBranchProtectionRule\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteBranchProtectionRuleInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_deployment = sgqlc.types.Field(\n        DeleteDeploymentPayload,\n        graphql_name=\"deleteDeployment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteDeploymentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_discussion = sgqlc.types.Field(\n        DeleteDiscussionPayload,\n        graphql_name=\"deleteDiscussion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteDiscussionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_discussion_comment = sgqlc.types.Field(\n        DeleteDiscussionCommentPayload,\n        graphql_name=\"deleteDiscussionComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteDiscussionCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_environment = sgqlc.types.Field(\n        DeleteEnvironmentPayload,\n        graphql_name=\"deleteEnvironment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteEnvironmentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_ip_allow_list_entry = sgqlc.types.Field(\n        DeleteIpAllowListEntryPayload,\n        graphql_name=\"deleteIpAllowListEntry\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteIpAllowListEntryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_issue = sgqlc.types.Field(\n        DeleteIssuePayload,\n        graphql_name=\"deleteIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_issue_comment = sgqlc.types.Field(\n        DeleteIssueCommentPayload,\n        graphql_name=\"deleteIssueComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteIssueCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_project = sgqlc.types.Field(\n        DeleteProjectPayload,\n        graphql_name=\"deleteProject\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteProjectInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_project_card = sgqlc.types.Field(\n        DeleteProjectCardPayload,\n        graphql_name=\"deleteProjectCard\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteProjectCardInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_project_column = sgqlc.types.Field(\n        DeleteProjectColumnPayload,\n        graphql_name=\"deleteProjectColumn\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteProjectColumnInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_project_next_item = sgqlc.types.Field(\n        DeleteProjectNextItemPayload,\n        graphql_name=\"deleteProjectNextItem\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteProjectNextItemInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_project_v2_item = sgqlc.types.Field(\n        DeleteProjectV2ItemPayload,\n        graphql_name=\"deleteProjectV2Item\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteProjectV2ItemInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_pull_request_review = sgqlc.types.Field(\n        DeletePullRequestReviewPayload,\n        graphql_name=\"deletePullRequestReview\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeletePullRequestReviewInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_pull_request_review_comment = sgqlc.types.Field(\n        DeletePullRequestReviewCommentPayload,\n        graphql_name=\"deletePullRequestReviewComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeletePullRequestReviewCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_ref = sgqlc.types.Field(\n        DeleteRefPayload,\n        graphql_name=\"deleteRef\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteRefInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_team_discussion = sgqlc.types.Field(\n        DeleteTeamDiscussionPayload,\n        graphql_name=\"deleteTeamDiscussion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteTeamDiscussionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_team_discussion_comment = sgqlc.types.Field(\n        DeleteTeamDiscussionCommentPayload,\n        graphql_name=\"deleteTeamDiscussionComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteTeamDiscussionCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_verifiable_domain = sgqlc.types.Field(\n        DeleteVerifiableDomainPayload,\n        graphql_name=\"deleteVerifiableDomain\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DeleteVerifiableDomainInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    disable_pull_request_auto_merge = sgqlc.types.Field(\n        DisablePullRequestAutoMergePayload,\n        graphql_name=\"disablePullRequestAutoMerge\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DisablePullRequestAutoMergeInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    dismiss_pull_request_review = sgqlc.types.Field(\n        DismissPullRequestReviewPayload,\n        graphql_name=\"dismissPullRequestReview\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DismissPullRequestReviewInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    dismiss_repository_vulnerability_alert = sgqlc.types.Field(\n        DismissRepositoryVulnerabilityAlertPayload,\n        graphql_name=\"dismissRepositoryVulnerabilityAlert\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DismissRepositoryVulnerabilityAlertInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    enable_pull_request_auto_merge = sgqlc.types.Field(\n        EnablePullRequestAutoMergePayload,\n        graphql_name=\"enablePullRequestAutoMerge\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(EnablePullRequestAutoMergeInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    follow_organization = sgqlc.types.Field(\n        FollowOrganizationPayload,\n        graphql_name=\"followOrganization\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(FollowOrganizationInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    follow_user = sgqlc.types.Field(\n        FollowUserPayload,\n        graphql_name=\"followUser\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(FollowUserInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    grant_enterprise_organizations_migrator_role = sgqlc.types.Field(\n        GrantEnterpriseOrganizationsMigratorRolePayload,\n        graphql_name=\"grantEnterpriseOrganizationsMigratorRole\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            GrantEnterpriseOrganizationsMigratorRoleInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    grant_migrator_role = sgqlc.types.Field(\n        GrantMigratorRolePayload,\n        graphql_name=\"grantMigratorRole\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(GrantMigratorRoleInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    invite_enterprise_admin = sgqlc.types.Field(\n        InviteEnterpriseAdminPayload,\n        graphql_name=\"inviteEnterpriseAdmin\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(InviteEnterpriseAdminInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    link_repository_to_project = sgqlc.types.Field(\n        LinkRepositoryToProjectPayload,\n        graphql_name=\"linkRepositoryToProject\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(LinkRepositoryToProjectInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    lock_lockable = sgqlc.types.Field(\n        LockLockablePayload,\n        graphql_name=\"lockLockable\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(LockLockableInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    mark_discussion_comment_as_answer = sgqlc.types.Field(\n        MarkDiscussionCommentAsAnswerPayload,\n        graphql_name=\"markDiscussionCommentAsAnswer\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(MarkDiscussionCommentAsAnswerInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    mark_file_as_viewed = sgqlc.types.Field(\n        MarkFileAsViewedPayload,\n        graphql_name=\"markFileAsViewed\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(MarkFileAsViewedInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    mark_pull_request_ready_for_review = sgqlc.types.Field(\n        MarkPullRequestReadyForReviewPayload,\n        graphql_name=\"markPullRequestReadyForReview\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(MarkPullRequestReadyForReviewInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    merge_branch = sgqlc.types.Field(\n        MergeBranchPayload,\n        graphql_name=\"mergeBranch\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(MergeBranchInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    merge_pull_request = sgqlc.types.Field(\n        MergePullRequestPayload,\n        graphql_name=\"mergePullRequest\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(MergePullRequestInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    minimize_comment = sgqlc.types.Field(\n        MinimizeCommentPayload,\n        graphql_name=\"minimizeComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(MinimizeCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    move_project_card = sgqlc.types.Field(\n        MoveProjectCardPayload,\n        graphql_name=\"moveProjectCard\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(MoveProjectCardInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    move_project_column = sgqlc.types.Field(\n        MoveProjectColumnPayload,\n        graphql_name=\"moveProjectColumn\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(MoveProjectColumnInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    pin_issue = sgqlc.types.Field(\n        \"PinIssuePayload\",\n        graphql_name=\"pinIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(PinIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    regenerate_enterprise_identity_provider_recovery_codes = sgqlc.types.Field(\n        \"RegenerateEnterpriseIdentityProviderRecoveryCodesPayload\",\n        graphql_name=\"regenerateEnterpriseIdentityProviderRecoveryCodes\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            RegenerateEnterpriseIdentityProviderRecoveryCodesInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    regenerate_verifiable_domain_token = sgqlc.types.Field(\n        \"RegenerateVerifiableDomainTokenPayload\",\n        graphql_name=\"regenerateVerifiableDomainToken\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RegenerateVerifiableDomainTokenInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    reject_deployments = sgqlc.types.Field(\n        \"RejectDeploymentsPayload\",\n        graphql_name=\"rejectDeployments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RejectDeploymentsInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_assignees_from_assignable = sgqlc.types.Field(\n        \"RemoveAssigneesFromAssignablePayload\",\n        graphql_name=\"removeAssigneesFromAssignable\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveAssigneesFromAssignableInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_enterprise_admin = sgqlc.types.Field(\n        \"RemoveEnterpriseAdminPayload\",\n        graphql_name=\"removeEnterpriseAdmin\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveEnterpriseAdminInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_enterprise_identity_provider = sgqlc.types.Field(\n        \"RemoveEnterpriseIdentityProviderPayload\",\n        graphql_name=\"removeEnterpriseIdentityProvider\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveEnterpriseIdentityProviderInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_enterprise_organization = sgqlc.types.Field(\n        \"RemoveEnterpriseOrganizationPayload\",\n        graphql_name=\"removeEnterpriseOrganization\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveEnterpriseOrganizationInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_enterprise_support_entitlement = sgqlc.types.Field(\n        \"RemoveEnterpriseSupportEntitlementPayload\",\n        graphql_name=\"removeEnterpriseSupportEntitlement\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveEnterpriseSupportEntitlementInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_labels_from_labelable = sgqlc.types.Field(\n        \"RemoveLabelsFromLabelablePayload\",\n        graphql_name=\"removeLabelsFromLabelable\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveLabelsFromLabelableInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_outside_collaborator = sgqlc.types.Field(\n        \"RemoveOutsideCollaboratorPayload\",\n        graphql_name=\"removeOutsideCollaborator\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveOutsideCollaboratorInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_reaction = sgqlc.types.Field(\n        \"RemoveReactionPayload\",\n        graphql_name=\"removeReaction\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveReactionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_star = sgqlc.types.Field(\n        \"RemoveStarPayload\",\n        graphql_name=\"removeStar\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveStarInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_upvote = sgqlc.types.Field(\n        \"RemoveUpvotePayload\",\n        graphql_name=\"removeUpvote\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RemoveUpvoteInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    reopen_issue = sgqlc.types.Field(\n        \"ReopenIssuePayload\",\n        graphql_name=\"reopenIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ReopenIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    reopen_pull_request = sgqlc.types.Field(\n        \"ReopenPullRequestPayload\",\n        graphql_name=\"reopenPullRequest\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ReopenPullRequestInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    request_reviews = sgqlc.types.Field(\n        \"RequestReviewsPayload\",\n        graphql_name=\"requestReviews\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RequestReviewsInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    rerequest_check_suite = sgqlc.types.Field(\n        \"RerequestCheckSuitePayload\",\n        graphql_name=\"rerequestCheckSuite\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RerequestCheckSuiteInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    resolve_review_thread = sgqlc.types.Field(\n        \"ResolveReviewThreadPayload\",\n        graphql_name=\"resolveReviewThread\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ResolveReviewThreadInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    revoke_enterprise_organizations_migrator_role = sgqlc.types.Field(\n        \"RevokeEnterpriseOrganizationsMigratorRolePayload\",\n        graphql_name=\"revokeEnterpriseOrganizationsMigratorRole\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            RevokeEnterpriseOrganizationsMigratorRoleInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    revoke_migrator_role = sgqlc.types.Field(\n        \"RevokeMigratorRolePayload\",\n        graphql_name=\"revokeMigratorRole\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RevokeMigratorRoleInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    set_enterprise_identity_provider = sgqlc.types.Field(\n        \"SetEnterpriseIdentityProviderPayload\",\n        graphql_name=\"setEnterpriseIdentityProvider\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(SetEnterpriseIdentityProviderInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    set_organization_interaction_limit = sgqlc.types.Field(\n        \"SetOrganizationInteractionLimitPayload\",\n        graphql_name=\"setOrganizationInteractionLimit\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(SetOrganizationInteractionLimitInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    set_repository_interaction_limit = sgqlc.types.Field(\n        \"SetRepositoryInteractionLimitPayload\",\n        graphql_name=\"setRepositoryInteractionLimit\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(SetRepositoryInteractionLimitInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    set_user_interaction_limit = sgqlc.types.Field(\n        \"SetUserInteractionLimitPayload\",\n        graphql_name=\"setUserInteractionLimit\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(SetUserInteractionLimitInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    start_repository_migration = sgqlc.types.Field(\n        \"StartRepositoryMigrationPayload\",\n        graphql_name=\"startRepositoryMigration\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(StartRepositoryMigrationInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    submit_pull_request_review = sgqlc.types.Field(\n        \"SubmitPullRequestReviewPayload\",\n        graphql_name=\"submitPullRequestReview\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(SubmitPullRequestReviewInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    transfer_issue = sgqlc.types.Field(\n        \"TransferIssuePayload\",\n        graphql_name=\"transferIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(TransferIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unarchive_repository = sgqlc.types.Field(\n        \"UnarchiveRepositoryPayload\",\n        graphql_name=\"unarchiveRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnarchiveRepositoryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unfollow_organization = sgqlc.types.Field(\n        \"UnfollowOrganizationPayload\",\n        graphql_name=\"unfollowOrganization\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnfollowOrganizationInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unfollow_user = sgqlc.types.Field(\n        \"UnfollowUserPayload\",\n        graphql_name=\"unfollowUser\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnfollowUserInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unlink_repository_from_project = sgqlc.types.Field(\n        \"UnlinkRepositoryFromProjectPayload\",\n        graphql_name=\"unlinkRepositoryFromProject\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnlinkRepositoryFromProjectInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unlock_lockable = sgqlc.types.Field(\n        \"UnlockLockablePayload\",\n        graphql_name=\"unlockLockable\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnlockLockableInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unmark_discussion_comment_as_answer = sgqlc.types.Field(\n        \"UnmarkDiscussionCommentAsAnswerPayload\",\n        graphql_name=\"unmarkDiscussionCommentAsAnswer\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnmarkDiscussionCommentAsAnswerInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unmark_file_as_viewed = sgqlc.types.Field(\n        \"UnmarkFileAsViewedPayload\",\n        graphql_name=\"unmarkFileAsViewed\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnmarkFileAsViewedInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unmark_issue_as_duplicate = sgqlc.types.Field(\n        \"UnmarkIssueAsDuplicatePayload\",\n        graphql_name=\"unmarkIssueAsDuplicate\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnmarkIssueAsDuplicateInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unminimize_comment = sgqlc.types.Field(\n        \"UnminimizeCommentPayload\",\n        graphql_name=\"unminimizeComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnminimizeCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unpin_issue = sgqlc.types.Field(\n        \"UnpinIssuePayload\",\n        graphql_name=\"unpinIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnpinIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    unresolve_review_thread = sgqlc.types.Field(\n        \"UnresolveReviewThreadPayload\",\n        graphql_name=\"unresolveReviewThread\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UnresolveReviewThreadInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_branch_protection_rule = sgqlc.types.Field(\n        \"UpdateBranchProtectionRulePayload\",\n        graphql_name=\"updateBranchProtectionRule\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateBranchProtectionRuleInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_check_run = sgqlc.types.Field(\n        \"UpdateCheckRunPayload\",\n        graphql_name=\"updateCheckRun\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateCheckRunInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_check_suite_preferences = sgqlc.types.Field(\n        \"UpdateCheckSuitePreferencesPayload\",\n        graphql_name=\"updateCheckSuitePreferences\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateCheckSuitePreferencesInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_discussion = sgqlc.types.Field(\n        \"UpdateDiscussionPayload\",\n        graphql_name=\"updateDiscussion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateDiscussionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_discussion_comment = sgqlc.types.Field(\n        \"UpdateDiscussionCommentPayload\",\n        graphql_name=\"updateDiscussionComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateDiscussionCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_administrator_role = sgqlc.types.Field(\n        \"UpdateEnterpriseAdministratorRolePayload\",\n        graphql_name=\"updateEnterpriseAdministratorRole\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateEnterpriseAdministratorRoleInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_allow_private_repository_forking_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload\",\n        graphql_name=\"updateEnterpriseAllowPrivateRepositoryForkingSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_default_repository_permission_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseDefaultRepositoryPermissionSettingPayload\",\n        graphql_name=\"updateEnterpriseDefaultRepositoryPermissionSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseDefaultRepositoryPermissionSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_members_can_change_repository_visibility_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload\",\n        graphql_name=\"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_members_can_create_repositories_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload\",\n        graphql_name=\"updateEnterpriseMembersCanCreateRepositoriesSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseMembersCanCreateRepositoriesSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_members_can_delete_issues_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseMembersCanDeleteIssuesSettingPayload\",\n        graphql_name=\"updateEnterpriseMembersCanDeleteIssuesSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseMembersCanDeleteIssuesSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_members_can_delete_repositories_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload\",\n        graphql_name=\"updateEnterpriseMembersCanDeleteRepositoriesSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_members_can_invite_collaborators_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload\",\n        graphql_name=\"updateEnterpriseMembersCanInviteCollaboratorsSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_members_can_make_purchases_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseMembersCanMakePurchasesSettingPayload\",\n        graphql_name=\"updateEnterpriseMembersCanMakePurchasesSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseMembersCanMakePurchasesSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_members_can_update_protected_branches_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload\",\n        graphql_name=\"updateEnterpriseMembersCanUpdateProtectedBranchesSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_members_can_view_dependency_insights_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload\",\n        graphql_name=\"updateEnterpriseMembersCanViewDependencyInsightsSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_organization_projects_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseOrganizationProjectsSettingPayload\",\n        graphql_name=\"updateEnterpriseOrganizationProjectsSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseOrganizationProjectsSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_owner_organization_role = sgqlc.types.Field(\n        \"UpdateEnterpriseOwnerOrganizationRolePayload\",\n        graphql_name=\"updateEnterpriseOwnerOrganizationRole\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseOwnerOrganizationRoleInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_profile = sgqlc.types.Field(\n        \"UpdateEnterpriseProfilePayload\",\n        graphql_name=\"updateEnterpriseProfile\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateEnterpriseProfileInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_repository_projects_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseRepositoryProjectsSettingPayload\",\n        graphql_name=\"updateEnterpriseRepositoryProjectsSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseRepositoryProjectsSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_team_discussions_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseTeamDiscussionsSettingPayload\",\n        graphql_name=\"updateEnterpriseTeamDiscussionsSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseTeamDiscussionsSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_enterprise_two_factor_authentication_required_setting = sgqlc.types.Field(\n        \"UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload\",\n        graphql_name=\"updateEnterpriseTwoFactorAuthenticationRequiredSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_environment = sgqlc.types.Field(\n        \"UpdateEnvironmentPayload\",\n        graphql_name=\"updateEnvironment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateEnvironmentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_ip_allow_list_enabled_setting = sgqlc.types.Field(\n        \"UpdateIpAllowListEnabledSettingPayload\",\n        graphql_name=\"updateIpAllowListEnabledSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateIpAllowListEnabledSettingInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_ip_allow_list_entry = sgqlc.types.Field(\n        \"UpdateIpAllowListEntryPayload\",\n        graphql_name=\"updateIpAllowListEntry\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateIpAllowListEntryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_ip_allow_list_for_installed_apps_enabled_setting = sgqlc.types.Field(\n        \"UpdateIpAllowListForInstalledAppsEnabledSettingPayload\",\n        graphql_name=\"updateIpAllowListForInstalledAppsEnabledSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateIpAllowListForInstalledAppsEnabledSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_issue = sgqlc.types.Field(\n        \"UpdateIssuePayload\",\n        graphql_name=\"updateIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_issue_comment = sgqlc.types.Field(\n        \"UpdateIssueCommentPayload\",\n        graphql_name=\"updateIssueComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateIssueCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_notification_restriction_setting = sgqlc.types.Field(\n        \"UpdateNotificationRestrictionSettingPayload\",\n        graphql_name=\"updateNotificationRestrictionSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateNotificationRestrictionSettingInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_organization_allow_private_repository_forking_setting = sgqlc.types.Field(\n        \"UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload\",\n        graphql_name=\"updateOrganizationAllowPrivateRepositoryForkingSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateOrganizationAllowPrivateRepositoryForkingSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_organization_web_commit_signoff_setting = sgqlc.types.Field(\n        \"UpdateOrganizationWebCommitSignoffSettingPayload\",\n        graphql_name=\"updateOrganizationWebCommitSignoffSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateOrganizationWebCommitSignoffSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project = sgqlc.types.Field(\n        \"UpdateProjectPayload\",\n        graphql_name=\"updateProject\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_card = sgqlc.types.Field(\n        \"UpdateProjectCardPayload\",\n        graphql_name=\"updateProjectCard\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectCardInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_column = sgqlc.types.Field(\n        \"UpdateProjectColumnPayload\",\n        graphql_name=\"updateProjectColumn\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectColumnInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_draft_issue = sgqlc.types.Field(\n        \"UpdateProjectDraftIssuePayload\",\n        graphql_name=\"updateProjectDraftIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectDraftIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_next = sgqlc.types.Field(\n        \"UpdateProjectNextPayload\",\n        graphql_name=\"updateProjectNext\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectNextInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_next_item_field = sgqlc.types.Field(\n        \"UpdateProjectNextItemFieldPayload\",\n        graphql_name=\"updateProjectNextItemField\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectNextItemFieldInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_v2 = sgqlc.types.Field(\n        \"UpdateProjectV2Payload\",\n        graphql_name=\"updateProjectV2\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectV2Input),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_v2_draft_issue = sgqlc.types.Field(\n        \"UpdateProjectV2DraftIssuePayload\",\n        graphql_name=\"updateProjectV2DraftIssue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectV2DraftIssueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_v2_item_field_value = sgqlc.types.Field(\n        \"UpdateProjectV2ItemFieldValuePayload\",\n        graphql_name=\"updateProjectV2ItemFieldValue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectV2ItemFieldValueInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_project_v2_item_position = sgqlc.types.Field(\n        \"UpdateProjectV2ItemPositionPayload\",\n        graphql_name=\"updateProjectV2ItemPosition\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateProjectV2ItemPositionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_pull_request = sgqlc.types.Field(\n        \"UpdatePullRequestPayload\",\n        graphql_name=\"updatePullRequest\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdatePullRequestInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_pull_request_branch = sgqlc.types.Field(\n        \"UpdatePullRequestBranchPayload\",\n        graphql_name=\"updatePullRequestBranch\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdatePullRequestBranchInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_pull_request_review = sgqlc.types.Field(\n        \"UpdatePullRequestReviewPayload\",\n        graphql_name=\"updatePullRequestReview\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdatePullRequestReviewInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_pull_request_review_comment = sgqlc.types.Field(\n        \"UpdatePullRequestReviewCommentPayload\",\n        graphql_name=\"updatePullRequestReviewComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdatePullRequestReviewCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_ref = sgqlc.types.Field(\n        \"UpdateRefPayload\",\n        graphql_name=\"updateRef\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateRefInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_repository = sgqlc.types.Field(\n        \"UpdateRepositoryPayload\",\n        graphql_name=\"updateRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateRepositoryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_repository_web_commit_signoff_setting = sgqlc.types.Field(\n        \"UpdateRepositoryWebCommitSignoffSettingPayload\",\n        graphql_name=\"updateRepositoryWebCommitSignoffSetting\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            UpdateRepositoryWebCommitSignoffSettingInput\n                        ),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_sponsorship_preferences = sgqlc.types.Field(\n        \"UpdateSponsorshipPreferencesPayload\",\n        graphql_name=\"updateSponsorshipPreferences\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateSponsorshipPreferencesInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_subscription = sgqlc.types.Field(\n        \"UpdateSubscriptionPayload\",\n        graphql_name=\"updateSubscription\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateSubscriptionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_team_discussion = sgqlc.types.Field(\n        \"UpdateTeamDiscussionPayload\",\n        graphql_name=\"updateTeamDiscussion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateTeamDiscussionInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_team_discussion_comment = sgqlc.types.Field(\n        \"UpdateTeamDiscussionCommentPayload\",\n        graphql_name=\"updateTeamDiscussionComment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateTeamDiscussionCommentInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_teams_repository = sgqlc.types.Field(\n        \"UpdateTeamsRepositoryPayload\",\n        graphql_name=\"updateTeamsRepository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateTeamsRepositoryInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    update_topics = sgqlc.types.Field(\n        \"UpdateTopicsPayload\",\n        graphql_name=\"updateTopics\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(UpdateTopicsInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    verify_verifiable_domain = sgqlc.types.Field(\n        \"VerifyVerifiableDomainPayload\",\n        graphql_name=\"verifyVerifiableDomain\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"input\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(VerifyVerifiableDomainInput),\n                        graphql_name=\"input\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Node","title":"<code>Node</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Node(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\",)\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.NotificationRestrictionSettingValue","title":"<code>NotificationRestrictionSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class NotificationRestrictionSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DISABLED\", \"ENABLED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OIDCProvider","title":"<code>OIDCProvider</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OIDCProvider(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"enterprise\",\n        \"external_identities\",\n        \"provider_type\",\n        \"tenant_id\",\n    )\n    enterprise = sgqlc.types.Field(Enterprise, graphql_name=\"enterprise\")\n    external_identities = sgqlc.types.Field(\n        sgqlc.types.non_null(ExternalIdentityConnection),\n        graphql_name=\"externalIdentities\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"members_only\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"membersOnly\", default=None),\n                ),\n                (\"login\", sgqlc.types.Arg(String, graphql_name=\"login\", default=None)),\n                (\n                    \"user_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"userName\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    provider_type = sgqlc.types.Field(\n        sgqlc.types.non_null(OIDCProviderType), graphql_name=\"providerType\"\n    )\n    tenant_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"tenantId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OIDCProviderType","title":"<code>OIDCProviderType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OIDCProviderType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"AAD\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OauthApplicationAuditEntryData","title":"<code>OauthApplicationAuditEntryData</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OauthApplicationAuditEntryData(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"oauth_application_name\",\n        \"oauth_application_resource_path\",\n        \"oauth_application_url\",\n    )\n    oauth_application_name = sgqlc.types.Field(\n        String, graphql_name=\"oauthApplicationName\"\n    )\n    oauth_application_resource_path = sgqlc.types.Field(\n        URI, graphql_name=\"oauthApplicationResourcePath\"\n    )\n    oauth_application_url = sgqlc.types.Field(URI, graphql_name=\"oauthApplicationUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OauthApplicationCreateAuditEntry","title":"<code>OauthApplicationCreateAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OauthApplicationAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OauthApplicationCreateAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OauthApplicationAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"application_url\", \"callback_url\", \"rate_limit\", \"state\")\n    application_url = sgqlc.types.Field(URI, graphql_name=\"applicationUrl\")\n    callback_url = sgqlc.types.Field(URI, graphql_name=\"callbackUrl\")\n    rate_limit = sgqlc.types.Field(Int, graphql_name=\"rateLimit\")\n    state = sgqlc.types.Field(\n        OauthApplicationCreateAuditEntryState, graphql_name=\"state\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OauthApplicationCreateAuditEntryState","title":"<code>OauthApplicationCreateAuditEntryState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OauthApplicationCreateAuditEntryState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ACTIVE\", \"PENDING_DELETION\", \"SUSPENDED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OperationType","title":"<code>OperationType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OperationType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ACCESS\",\n        \"AUTHENTICATION\",\n        \"CREATE\",\n        \"MODIFY\",\n        \"REMOVE\",\n        \"RESTORE\",\n        \"TRANSFER\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrderDirection","title":"<code>OrderDirection</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrderDirection(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ASC\", \"DESC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgAddBillingManagerAuditEntry","title":"<code>OrgAddBillingManagerAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgAddBillingManagerAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"invitation_email\",)\n    invitation_email = sgqlc.types.Field(String, graphql_name=\"invitationEmail\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgAddMemberAuditEntry","title":"<code>OrgAddMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgAddMemberAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"permission\",)\n    permission = sgqlc.types.Field(\n        OrgAddMemberAuditEntryPermission, graphql_name=\"permission\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgAddMemberAuditEntryPermission","title":"<code>OrgAddMemberAuditEntryPermission</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgAddMemberAuditEntryPermission(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"READ\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgBlockUserAuditEntry","title":"<code>OrgBlockUserAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgBlockUserAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"blocked_user\",\n        \"blocked_user_name\",\n        \"blocked_user_resource_path\",\n        \"blocked_user_url\",\n    )\n    blocked_user = sgqlc.types.Field(\"User\", graphql_name=\"blockedUser\")\n    blocked_user_name = sgqlc.types.Field(String, graphql_name=\"blockedUserName\")\n    blocked_user_resource_path = sgqlc.types.Field(\n        URI, graphql_name=\"blockedUserResourcePath\"\n    )\n    blocked_user_url = sgqlc.types.Field(URI, graphql_name=\"blockedUserUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgConfigDisableCollaboratorsOnlyAuditEntry","title":"<code>OrgConfigDisableCollaboratorsOnlyAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgConfigDisableCollaboratorsOnlyAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgConfigEnableCollaboratorsOnlyAuditEntry","title":"<code>OrgConfigEnableCollaboratorsOnlyAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgConfigEnableCollaboratorsOnlyAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgCreateAuditEntry","title":"<code>OrgCreateAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgCreateAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"billing_plan\",)\n    billing_plan = sgqlc.types.Field(\n        OrgCreateAuditEntryBillingPlan, graphql_name=\"billingPlan\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgCreateAuditEntryBillingPlan","title":"<code>OrgCreateAuditEntryBillingPlan</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgCreateAuditEntryBillingPlan(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"BUSINESS\", \"BUSINESS_PLUS\", \"FREE\", \"TIERED_PER_SEAT\", \"UNLIMITED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgDisableOauthAppRestrictionsAuditEntry","title":"<code>OrgDisableOauthAppRestrictionsAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgDisableOauthAppRestrictionsAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgDisableSamlAuditEntry","title":"<code>OrgDisableSamlAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgDisableSamlAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"digest_method_url\",\n        \"issuer_url\",\n        \"signature_method_url\",\n        \"single_sign_on_url\",\n    )\n    digest_method_url = sgqlc.types.Field(URI, graphql_name=\"digestMethodUrl\")\n    issuer_url = sgqlc.types.Field(URI, graphql_name=\"issuerUrl\")\n    signature_method_url = sgqlc.types.Field(URI, graphql_name=\"signatureMethodUrl\")\n    single_sign_on_url = sgqlc.types.Field(URI, graphql_name=\"singleSignOnUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgDisableTwoFactorRequirementAuditEntry","title":"<code>OrgDisableTwoFactorRequirementAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgDisableTwoFactorRequirementAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnableOauthAppRestrictionsAuditEntry","title":"<code>OrgEnableOauthAppRestrictionsAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgEnableOauthAppRestrictionsAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnableSamlAuditEntry","title":"<code>OrgEnableSamlAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgEnableSamlAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"digest_method_url\",\n        \"issuer_url\",\n        \"signature_method_url\",\n        \"single_sign_on_url\",\n    )\n    digest_method_url = sgqlc.types.Field(URI, graphql_name=\"digestMethodUrl\")\n    issuer_url = sgqlc.types.Field(URI, graphql_name=\"issuerUrl\")\n    signature_method_url = sgqlc.types.Field(URI, graphql_name=\"signatureMethodUrl\")\n    single_sign_on_url = sgqlc.types.Field(URI, graphql_name=\"singleSignOnUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnableTwoFactorRequirementAuditEntry","title":"<code>OrgEnableTwoFactorRequirementAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgEnableTwoFactorRequirementAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnterpriseOwnerOrder","title":"<code>OrgEnterpriseOwnerOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgEnterpriseOwnerOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(OrgEnterpriseOwnerOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnterpriseOwnerOrderField","title":"<code>OrgEnterpriseOwnerOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgEnterpriseOwnerOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"LOGIN\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgInviteMemberAuditEntry","title":"<code>OrgInviteMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgInviteMemberAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"email\", \"organization_invitation\")\n    email = sgqlc.types.Field(String, graphql_name=\"email\")\n    organization_invitation = sgqlc.types.Field(\n        \"OrganizationInvitation\", graphql_name=\"organizationInvitation\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgInviteToBusinessAuditEntry","title":"<code>OrgInviteToBusinessAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>EnterpriseAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgInviteToBusinessAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    EnterpriseAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgOauthAppAccessApprovedAuditEntry","title":"<code>OrgOauthAppAccessApprovedAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OauthApplicationAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgOauthAppAccessApprovedAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OauthApplicationAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgOauthAppAccessDeniedAuditEntry","title":"<code>OrgOauthAppAccessDeniedAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OauthApplicationAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgOauthAppAccessDeniedAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OauthApplicationAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgOauthAppAccessRequestedAuditEntry","title":"<code>OrgOauthAppAccessRequestedAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OauthApplicationAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgOauthAppAccessRequestedAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OauthApplicationAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveBillingManagerAuditEntry","title":"<code>OrgRemoveBillingManagerAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRemoveBillingManagerAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"reason\",)\n    reason = sgqlc.types.Field(\n        OrgRemoveBillingManagerAuditEntryReason, graphql_name=\"reason\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveBillingManagerAuditEntryReason","title":"<code>OrgRemoveBillingManagerAuditEntryReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRemoveBillingManagerAuditEntryReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"SAML_EXTERNAL_IDENTITY_MISSING\",\n        \"SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY\",\n        \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveMemberAuditEntry","title":"<code>OrgRemoveMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRemoveMemberAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"membership_types\", \"reason\")\n    membership_types = sgqlc.types.Field(\n        sgqlc.types.list_of(\n            sgqlc.types.non_null(OrgRemoveMemberAuditEntryMembershipType)\n        ),\n        graphql_name=\"membershipTypes\",\n    )\n    reason = sgqlc.types.Field(OrgRemoveMemberAuditEntryReason, graphql_name=\"reason\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveMemberAuditEntryMembershipType","title":"<code>OrgRemoveMemberAuditEntryMembershipType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRemoveMemberAuditEntryMembershipType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ADMIN\",\n        \"BILLING_MANAGER\",\n        \"DIRECT_MEMBER\",\n        \"OUTSIDE_COLLABORATOR\",\n        \"SUSPENDED\",\n        \"UNAFFILIATED\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveMemberAuditEntryReason","title":"<code>OrgRemoveMemberAuditEntryReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRemoveMemberAuditEntryReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"SAML_EXTERNAL_IDENTITY_MISSING\",\n        \"SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY\",\n        \"TWO_FACTOR_ACCOUNT_RECOVERY\",\n        \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\",\n        \"USER_ACCOUNT_DELETED\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveOutsideCollaboratorAuditEntry","title":"<code>OrgRemoveOutsideCollaboratorAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRemoveOutsideCollaboratorAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"membership_types\", \"reason\")\n    membership_types = sgqlc.types.Field(\n        sgqlc.types.list_of(\n            sgqlc.types.non_null(OrgRemoveOutsideCollaboratorAuditEntryMembershipType)\n        ),\n        graphql_name=\"membershipTypes\",\n    )\n    reason = sgqlc.types.Field(\n        OrgRemoveOutsideCollaboratorAuditEntryReason, graphql_name=\"reason\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveOutsideCollaboratorAuditEntryMembershipType","title":"<code>OrgRemoveOutsideCollaboratorAuditEntryMembershipType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRemoveOutsideCollaboratorAuditEntryMembershipType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"BILLING_MANAGER\", \"OUTSIDE_COLLABORATOR\", \"UNAFFILIATED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveOutsideCollaboratorAuditEntryReason","title":"<code>OrgRemoveOutsideCollaboratorAuditEntryReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRemoveOutsideCollaboratorAuditEntryReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"SAML_EXTERNAL_IDENTITY_MISSING\",\n        \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberAuditEntry","title":"<code>OrgRestoreMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRestoreMemberAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"restored_custom_email_routings_count\",\n        \"restored_issue_assignments_count\",\n        \"restored_memberships\",\n        \"restored_memberships_count\",\n        \"restored_repositories_count\",\n        \"restored_repository_stars_count\",\n        \"restored_repository_watches_count\",\n    )\n    restored_custom_email_routings_count = sgqlc.types.Field(\n        Int, graphql_name=\"restoredCustomEmailRoutingsCount\"\n    )\n    restored_issue_assignments_count = sgqlc.types.Field(\n        Int, graphql_name=\"restoredIssueAssignmentsCount\"\n    )\n    restored_memberships = sgqlc.types.Field(\n        sgqlc.types.list_of(\n            sgqlc.types.non_null(\"OrgRestoreMemberAuditEntryMembership\")\n        ),\n        graphql_name=\"restoredMemberships\",\n    )\n    restored_memberships_count = sgqlc.types.Field(\n        Int, graphql_name=\"restoredMembershipsCount\"\n    )\n    restored_repositories_count = sgqlc.types.Field(\n        Int, graphql_name=\"restoredRepositoriesCount\"\n    )\n    restored_repository_stars_count = sgqlc.types.Field(\n        Int, graphql_name=\"restoredRepositoryStarsCount\"\n    )\n    restored_repository_watches_count = sgqlc.types.Field(\n        Int, graphql_name=\"restoredRepositoryWatchesCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberAuditEntryMembership","title":"<code>OrgRestoreMemberAuditEntryMembership</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRestoreMemberAuditEntryMembership(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (\n        OrgRestoreMemberMembershipOrganizationAuditEntryData,\n        OrgRestoreMemberMembershipRepositoryAuditEntryData,\n        OrgRestoreMemberMembershipTeamAuditEntryData,\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberMembershipOrganizationAuditEntryData","title":"<code>OrgRestoreMemberMembershipOrganizationAuditEntryData</code>","text":"<p>             Bases: <code>Type</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRestoreMemberMembershipOrganizationAuditEntryData(\n    sgqlc.types.Type, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberMembershipRepositoryAuditEntryData","title":"<code>OrgRestoreMemberMembershipRepositoryAuditEntryData</code>","text":"<p>             Bases: <code>Type</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRestoreMemberMembershipRepositoryAuditEntryData(\n    sgqlc.types.Type, RepositoryAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberMembershipTeamAuditEntryData","title":"<code>OrgRestoreMemberMembershipTeamAuditEntryData</code>","text":"<p>             Bases: <code>Type</code>, <code>TeamAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgRestoreMemberMembershipTeamAuditEntryData(\n    sgqlc.types.Type, TeamAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUnblockUserAuditEntry","title":"<code>OrgUnblockUserAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgUnblockUserAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"blocked_user\",\n        \"blocked_user_name\",\n        \"blocked_user_resource_path\",\n        \"blocked_user_url\",\n    )\n    blocked_user = sgqlc.types.Field(\"User\", graphql_name=\"blockedUser\")\n    blocked_user_name = sgqlc.types.Field(String, graphql_name=\"blockedUserName\")\n    blocked_user_resource_path = sgqlc.types.Field(\n        URI, graphql_name=\"blockedUserResourcePath\"\n    )\n    blocked_user_url = sgqlc.types.Field(URI, graphql_name=\"blockedUserUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateDefaultRepositoryPermissionAuditEntry","title":"<code>OrgUpdateDefaultRepositoryPermissionAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgUpdateDefaultRepositoryPermissionAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"permission\", \"permission_was\")\n    permission = sgqlc.types.Field(\n        OrgUpdateDefaultRepositoryPermissionAuditEntryPermission,\n        graphql_name=\"permission\",\n    )\n    permission_was = sgqlc.types.Field(\n        OrgUpdateDefaultRepositoryPermissionAuditEntryPermission,\n        graphql_name=\"permissionWas\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateDefaultRepositoryPermissionAuditEntryPermission","title":"<code>OrgUpdateDefaultRepositoryPermissionAuditEntryPermission</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgUpdateDefaultRepositoryPermissionAuditEntryPermission(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"NONE\", \"READ\", \"WRITE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberAuditEntry","title":"<code>OrgUpdateMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgUpdateMemberAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"permission\", \"permission_was\")\n    permission = sgqlc.types.Field(\n        OrgUpdateMemberAuditEntryPermission, graphql_name=\"permission\"\n    )\n    permission_was = sgqlc.types.Field(\n        OrgUpdateMemberAuditEntryPermission, graphql_name=\"permissionWas\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberAuditEntryPermission","title":"<code>OrgUpdateMemberAuditEntryPermission</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgUpdateMemberAuditEntryPermission(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"READ\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberRepositoryCreationPermissionAuditEntry","title":"<code>OrgUpdateMemberRepositoryCreationPermissionAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgUpdateMemberRepositoryCreationPermissionAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"can_create_repositories\", \"visibility\")\n    can_create_repositories = sgqlc.types.Field(\n        Boolean, graphql_name=\"canCreateRepositories\"\n    )\n    visibility = sgqlc.types.Field(\n        OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility,\n        graphql_name=\"visibility\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility","title":"<code>OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ALL\",\n        \"INTERNAL\",\n        \"NONE\",\n        \"PRIVATE\",\n        \"PRIVATE_INTERNAL\",\n        \"PUBLIC\",\n        \"PUBLIC_INTERNAL\",\n        \"PUBLIC_PRIVATE\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberRepositoryInvitationPermissionAuditEntry","title":"<code>OrgUpdateMemberRepositoryInvitationPermissionAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrgUpdateMemberRepositoryInvitationPermissionAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"can_invite_outside_collaborators_to_repositories\",)\n    can_invite_outside_collaborators_to_repositories = sgqlc.types.Field(\n        Boolean, graphql_name=\"canInviteOutsideCollaboratorsToRepositories\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Organization","title":"<code>Organization</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Actor</code>, <code>PackageOwner</code>, <code>ProjectOwner</code>, <code>ProjectNextOwner</code>, <code>ProjectV2Owner</code>, <code>ProjectV2Recent</code>, <code>RepositoryDiscussionAuthor</code>, <code>RepositoryDiscussionCommentAuthor</code>, <code>RepositoryOwner</code>, <code>UniformResourceLocatable</code>, <code>MemberStatusable</code>, <code>ProfileOwner</code>, <code>Sponsorable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Organization(\n    sgqlc.types.Type,\n    Node,\n    Actor,\n    PackageOwner,\n    ProjectOwner,\n    ProjectNextOwner,\n    ProjectV2Owner,\n    ProjectV2Recent,\n    RepositoryDiscussionAuthor,\n    RepositoryDiscussionCommentAuthor,\n    RepositoryOwner,\n    UniformResourceLocatable,\n    MemberStatusable,\n    ProfileOwner,\n    Sponsorable,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"audit_log\",\n        \"created_at\",\n        \"database_id\",\n        \"description\",\n        \"description_html\",\n        \"domains\",\n        \"enterprise_owners\",\n        \"interaction_ability\",\n        \"ip_allow_list_enabled_setting\",\n        \"ip_allow_list_entries\",\n        \"ip_allow_list_for_installed_apps_enabled_setting\",\n        \"is_verified\",\n        \"members_can_fork_private_repositories\",\n        \"members_with_role\",\n        \"new_team_resource_path\",\n        \"new_team_url\",\n        \"notification_delivery_restriction_enabled_setting\",\n        \"organization_billing_email\",\n        \"pending_members\",\n        \"repository_migrations\",\n        \"requires_two_factor_authentication\",\n        \"saml_identity_provider\",\n        \"team\",\n        \"teams\",\n        \"teams_resource_path\",\n        \"teams_url\",\n        \"twitter_username\",\n        \"updated_at\",\n        \"viewer_can_administer\",\n        \"viewer_can_create_repositories\",\n        \"viewer_can_create_teams\",\n        \"viewer_is_amember\",\n        \"viewer_is_following\",\n        \"web_commit_signoff_required\",\n    )\n    audit_log = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationAuditEntryConnection),\n        graphql_name=\"auditLog\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        AuditLogOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    description_html = sgqlc.types.Field(String, graphql_name=\"descriptionHTML\")\n    domains = sgqlc.types.Field(\n        VerifiableDomainConnection,\n        graphql_name=\"domains\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"is_verified\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isVerified\", default=None),\n                ),\n                (\n                    \"is_approved\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isApproved\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        VerifiableDomainOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"DOMAIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    enterprise_owners = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationEnterpriseOwnerConnection),\n        graphql_name=\"enterpriseOwners\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"organization_role\",\n                    sgqlc.types.Arg(\n                        RoleInOrganization,\n                        graphql_name=\"organizationRole\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        OrgEnterpriseOwnerOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    interaction_ability = sgqlc.types.Field(\n        RepositoryInteractionAbility, graphql_name=\"interactionAbility\"\n    )\n    ip_allow_list_enabled_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListEnabledSettingValue),\n        graphql_name=\"ipAllowListEnabledSetting\",\n    )\n    ip_allow_list_entries = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListEntryConnection),\n        graphql_name=\"ipAllowListEntries\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        IpAllowListEntryOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"ALLOW_LIST_VALUE\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    ip_allow_list_for_installed_apps_enabled_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListForInstalledAppsEnabledSettingValue),\n        graphql_name=\"ipAllowListForInstalledAppsEnabledSetting\",\n    )\n    is_verified = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isVerified\"\n    )\n    members_can_fork_private_repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"membersCanForkPrivateRepositories\"\n    )\n    members_with_role = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationMemberConnection),\n        graphql_name=\"membersWithRole\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    new_team_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"newTeamResourcePath\"\n    )\n    new_team_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"newTeamUrl\"\n    )\n    notification_delivery_restriction_enabled_setting = sgqlc.types.Field(\n        sgqlc.types.non_null(NotificationRestrictionSettingValue),\n        graphql_name=\"notificationDeliveryRestrictionEnabledSetting\",\n    )\n    organization_billing_email = sgqlc.types.Field(\n        String, graphql_name=\"organizationBillingEmail\"\n    )\n    pending_members = sgqlc.types.Field(\n        sgqlc.types.non_null(UserConnection),\n        graphql_name=\"pendingMembers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    repository_migrations = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryMigrationConnection),\n        graphql_name=\"repositoryMigrations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"state\",\n                    sgqlc.types.Arg(MigrationState, graphql_name=\"state\", default=None),\n                ),\n                (\n                    \"repository_name\",\n                    sgqlc.types.Arg(\n                        String, graphql_name=\"repositoryName\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryMigrationOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    requires_two_factor_authentication = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresTwoFactorAuthentication\"\n    )\n    saml_identity_provider = sgqlc.types.Field(\n        \"OrganizationIdentityProvider\", graphql_name=\"samlIdentityProvider\"\n    )\n    team = sgqlc.types.Field(\n        \"Team\",\n        graphql_name=\"team\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"slug\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"slug\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    teams = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamConnection),\n        graphql_name=\"teams\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"privacy\",\n                    sgqlc.types.Arg(TeamPrivacy, graphql_name=\"privacy\", default=None),\n                ),\n                (\"role\", sgqlc.types.Arg(TeamRole, graphql_name=\"role\", default=None)),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"user_logins\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"userLogins\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(TeamOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\n                    \"ldap_mapped\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"ldapMapped\", default=None),\n                ),\n                (\n                    \"root_teams_only\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"rootTeamsOnly\", default=False\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    teams_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"teamsResourcePath\"\n    )\n    teams_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"teamsUrl\")\n    twitter_username = sgqlc.types.Field(String, graphql_name=\"twitterUsername\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    viewer_can_administer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanAdminister\"\n    )\n    viewer_can_create_repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanCreateRepositories\"\n    )\n    viewer_can_create_teams = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanCreateTeams\"\n    )\n    viewer_is_amember = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerIsAMember\"\n    )\n    viewer_is_following = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerIsFollowing\"\n    )\n    web_commit_signoff_required = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"webCommitSignoffRequired\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationAuditEntry","title":"<code>OrganizationAuditEntry</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationAuditEntry(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (\n        MembersCanDeleteReposClearAuditEntry,\n        MembersCanDeleteReposDisableAuditEntry,\n        MembersCanDeleteReposEnableAuditEntry,\n        OauthApplicationCreateAuditEntry,\n        OrgAddBillingManagerAuditEntry,\n        OrgAddMemberAuditEntry,\n        OrgBlockUserAuditEntry,\n        OrgConfigDisableCollaboratorsOnlyAuditEntry,\n        OrgConfigEnableCollaboratorsOnlyAuditEntry,\n        OrgCreateAuditEntry,\n        OrgDisableOauthAppRestrictionsAuditEntry,\n        OrgDisableSamlAuditEntry,\n        OrgDisableTwoFactorRequirementAuditEntry,\n        OrgEnableOauthAppRestrictionsAuditEntry,\n        OrgEnableSamlAuditEntry,\n        OrgEnableTwoFactorRequirementAuditEntry,\n        OrgInviteMemberAuditEntry,\n        OrgInviteToBusinessAuditEntry,\n        OrgOauthAppAccessApprovedAuditEntry,\n        OrgOauthAppAccessDeniedAuditEntry,\n        OrgOauthAppAccessRequestedAuditEntry,\n        OrgRemoveBillingManagerAuditEntry,\n        OrgRemoveMemberAuditEntry,\n        OrgRemoveOutsideCollaboratorAuditEntry,\n        OrgRestoreMemberAuditEntry,\n        OrgUnblockUserAuditEntry,\n        OrgUpdateDefaultRepositoryPermissionAuditEntry,\n        OrgUpdateMemberAuditEntry,\n        OrgUpdateMemberRepositoryCreationPermissionAuditEntry,\n        OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,\n        PrivateRepositoryForkingDisableAuditEntry,\n        PrivateRepositoryForkingEnableAuditEntry,\n        RepoAccessAuditEntry,\n        RepoAddMemberAuditEntry,\n        RepoAddTopicAuditEntry,\n        RepoArchivedAuditEntry,\n        RepoChangeMergeSettingAuditEntry,\n        RepoConfigDisableAnonymousGitAccessAuditEntry,\n        RepoConfigDisableCollaboratorsOnlyAuditEntry,\n        RepoConfigDisableContributorsOnlyAuditEntry,\n        RepoConfigDisableSockpuppetDisallowedAuditEntry,\n        RepoConfigEnableAnonymousGitAccessAuditEntry,\n        RepoConfigEnableCollaboratorsOnlyAuditEntry,\n        RepoConfigEnableContributorsOnlyAuditEntry,\n        RepoConfigEnableSockpuppetDisallowedAuditEntry,\n        RepoConfigLockAnonymousGitAccessAuditEntry,\n        RepoConfigUnlockAnonymousGitAccessAuditEntry,\n        RepoCreateAuditEntry,\n        RepoDestroyAuditEntry,\n        RepoRemoveMemberAuditEntry,\n        RepoRemoveTopicAuditEntry,\n        RepositoryVisibilityChangeDisableAuditEntry,\n        RepositoryVisibilityChangeEnableAuditEntry,\n        TeamAddMemberAuditEntry,\n        TeamAddRepositoryAuditEntry,\n        TeamChangeParentTeamAuditEntry,\n        TeamRemoveMemberAuditEntry,\n        TeamRemoveRepositoryAuditEntry,\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationAuditEntryConnection","title":"<code>OrganizationAuditEntryConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationAuditEntryConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"OrganizationAuditEntryEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"OrganizationAuditEntry\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationAuditEntryData","title":"<code>OrganizationAuditEntryData</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationAuditEntryData(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"organization\",\n        \"organization_name\",\n        \"organization_resource_path\",\n        \"organization_url\",\n    )\n    organization = sgqlc.types.Field(\"Organization\", graphql_name=\"organization\")\n    organization_name = sgqlc.types.Field(String, graphql_name=\"organizationName\")\n    organization_resource_path = sgqlc.types.Field(\n        URI, graphql_name=\"organizationResourcePath\"\n    )\n    organization_url = sgqlc.types.Field(URI, graphql_name=\"organizationUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationAuditEntryEdge","title":"<code>OrganizationAuditEntryEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationAuditEntryEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"OrganizationAuditEntry\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationConnection","title":"<code>OrganizationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"OrganizationEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Organization\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationEdge","title":"<code>OrganizationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Organization\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationEnterpriseOwnerConnection","title":"<code>OrganizationEnterpriseOwnerConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationEnterpriseOwnerConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"OrganizationEnterpriseOwnerEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationEnterpriseOwnerEdge","title":"<code>OrganizationEnterpriseOwnerEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationEnterpriseOwnerEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"organization_role\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"User\", graphql_name=\"node\")\n    organization_role = sgqlc.types.Field(\n        sgqlc.types.non_null(RoleInOrganization), graphql_name=\"organizationRole\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationIdentityProvider","title":"<code>OrganizationIdentityProvider</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationIdentityProvider(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"digest_method\",\n        \"external_identities\",\n        \"idp_certificate\",\n        \"issuer\",\n        \"organization\",\n        \"signature_method\",\n        \"sso_url\",\n    )\n    digest_method = sgqlc.types.Field(URI, graphql_name=\"digestMethod\")\n    external_identities = sgqlc.types.Field(\n        sgqlc.types.non_null(ExternalIdentityConnection),\n        graphql_name=\"externalIdentities\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"members_only\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"membersOnly\", default=None),\n                ),\n                (\"login\", sgqlc.types.Arg(String, graphql_name=\"login\", default=None)),\n                (\n                    \"user_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"userName\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    idp_certificate = sgqlc.types.Field(X509Certificate, graphql_name=\"idpCertificate\")\n    issuer = sgqlc.types.Field(String, graphql_name=\"issuer\")\n    organization = sgqlc.types.Field(Organization, graphql_name=\"organization\")\n    signature_method = sgqlc.types.Field(URI, graphql_name=\"signatureMethod\")\n    sso_url = sgqlc.types.Field(URI, graphql_name=\"ssoUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitation","title":"<code>OrganizationInvitation</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationInvitation(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"email\",\n        \"invitation_type\",\n        \"invitee\",\n        \"inviter\",\n        \"organization\",\n        \"role\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    email = sgqlc.types.Field(String, graphql_name=\"email\")\n    invitation_type = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationInvitationType), graphql_name=\"invitationType\"\n    )\n    invitee = sgqlc.types.Field(\"User\", graphql_name=\"invitee\")\n    inviter = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"inviter\")\n    organization = sgqlc.types.Field(\n        sgqlc.types.non_null(Organization), graphql_name=\"organization\"\n    )\n    role = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationInvitationRole), graphql_name=\"role\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitationConnection","title":"<code>OrganizationInvitationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationInvitationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"OrganizationInvitationEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"OrganizationInvitation\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitationEdge","title":"<code>OrganizationInvitationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationInvitationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"OrganizationInvitation\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitationRole","title":"<code>OrganizationInvitationRole</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationInvitationRole(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"BILLING_MANAGER\", \"DIRECT_MEMBER\", \"REINSTATE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitationType","title":"<code>OrganizationInvitationType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationInvitationType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"EMAIL\", \"USER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationMemberConnection","title":"<code>OrganizationMemberConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationMemberConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"OrganizationMemberEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationMemberEdge","title":"<code>OrganizationMemberEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationMemberEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"has_two_factor_enabled\", \"node\", \"role\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    has_two_factor_enabled = sgqlc.types.Field(\n        Boolean, graphql_name=\"hasTwoFactorEnabled\"\n    )\n    node = sgqlc.types.Field(\"User\", graphql_name=\"node\")\n    role = sgqlc.types.Field(OrganizationMemberRole, graphql_name=\"role\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationMemberRole","title":"<code>OrganizationMemberRole</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationMemberRole(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"MEMBER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationMembersCanCreateRepositoriesSettingValue","title":"<code>OrganizationMembersCanCreateRepositoriesSettingValue</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationMembersCanCreateRepositoriesSettingValue(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALL\", \"DISABLED\", \"INTERNAL\", \"PRIVATE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationOrUser","title":"<code>OrganizationOrUser</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationOrUser(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Organization, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationOrder","title":"<code>OrganizationOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationOrderField","title":"<code>OrganizationOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"LOGIN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationTeamsHovercardContext","title":"<code>OrganizationTeamsHovercardContext</code>","text":"<p>             Bases: <code>Type</code>, <code>HovercardContext</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationTeamsHovercardContext(sgqlc.types.Type, HovercardContext):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"relevant_teams\",\n        \"teams_resource_path\",\n        \"teams_url\",\n        \"total_team_count\",\n    )\n    relevant_teams = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamConnection),\n        graphql_name=\"relevantTeams\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    teams_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"teamsResourcePath\"\n    )\n    teams_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"teamsUrl\")\n    total_team_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalTeamCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationsHovercardContext","title":"<code>OrganizationsHovercardContext</code>","text":"<p>             Bases: <code>Type</code>, <code>HovercardContext</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class OrganizationsHovercardContext(sgqlc.types.Type, HovercardContext):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"relevant_organizations\", \"total_organization_count\")\n    relevant_organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationConnection),\n        graphql_name=\"relevantOrganizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    total_organization_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalOrganizationCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Package","title":"<code>Package</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Package(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"latest_version\",\n        \"name\",\n        \"package_type\",\n        \"repository\",\n        \"statistics\",\n        \"version\",\n        \"versions\",\n    )\n    latest_version = sgqlc.types.Field(\"PackageVersion\", graphql_name=\"latestVersion\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    package_type = sgqlc.types.Field(\n        sgqlc.types.non_null(PackageType), graphql_name=\"packageType\"\n    )\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n    statistics = sgqlc.types.Field(PackageStatistics, graphql_name=\"statistics\")\n    version = sgqlc.types.Field(\n        \"PackageVersion\",\n        graphql_name=\"version\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"version\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"version\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    versions = sgqlc.types.Field(\n        sgqlc.types.non_null(PackageVersionConnection),\n        graphql_name=\"versions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        PackageVersionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageConnection","title":"<code>PackageConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"PackageEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Package\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageEdge","title":"<code>PackageEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Package\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFile","title":"<code>PackageFile</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageFile(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"md5\",\n        \"name\",\n        \"package_version\",\n        \"sha1\",\n        \"sha256\",\n        \"size\",\n        \"updated_at\",\n        \"url\",\n    )\n    md5 = sgqlc.types.Field(String, graphql_name=\"md5\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    package_version = sgqlc.types.Field(\"PackageVersion\", graphql_name=\"packageVersion\")\n    sha1 = sgqlc.types.Field(String, graphql_name=\"sha1\")\n    sha256 = sgqlc.types.Field(String, graphql_name=\"sha256\")\n    size = sgqlc.types.Field(Int, graphql_name=\"size\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(URI, graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFileConnection","title":"<code>PackageFileConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageFileConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PackageFileEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"PackageFile\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFileEdge","title":"<code>PackageFileEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageFileEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PackageFile\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFileOrder","title":"<code>PackageFileOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageFileOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(PackageFileOrderField, graphql_name=\"field\")\n    direction = sgqlc.types.Field(OrderDirection, graphql_name=\"direction\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFileOrderField","title":"<code>PackageFileOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageFileOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageOrder","title":"<code>PackageOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(PackageOrderField, graphql_name=\"field\")\n    direction = sgqlc.types.Field(OrderDirection, graphql_name=\"direction\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageOrderField","title":"<code>PackageOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageOwner","title":"<code>PackageOwner</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageOwner(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"packages\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    packages = sgqlc.types.Field(\n        sgqlc.types.non_null(PackageConnection),\n        graphql_name=\"packages\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"names\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String), graphql_name=\"names\", default=None\n                    ),\n                ),\n                (\n                    \"repository_id\",\n                    sgqlc.types.Arg(ID, graphql_name=\"repositoryId\", default=None),\n                ),\n                (\n                    \"package_type\",\n                    sgqlc.types.Arg(\n                        PackageType, graphql_name=\"packageType\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        PackageOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageStatistics","title":"<code>PackageStatistics</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageStatistics(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"downloads_total_count\",)\n    downloads_total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"downloadsTotalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageTag","title":"<code>PackageTag</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageTag(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"name\", \"version\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    version = sgqlc.types.Field(\"PackageVersion\", graphql_name=\"version\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageType","title":"<code>PackageType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DEBIAN\", \"DOCKER\", \"MAVEN\", \"NPM\", \"NUGET\", \"PYPI\", \"RUBYGEMS\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersion","title":"<code>PackageVersion</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageVersion(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"files\",\n        \"package\",\n        \"platform\",\n        \"pre_release\",\n        \"readme\",\n        \"release\",\n        \"statistics\",\n        \"summary\",\n        \"version\",\n    )\n    files = sgqlc.types.Field(\n        sgqlc.types.non_null(PackageFileConnection),\n        graphql_name=\"files\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        PackageFileOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    package = sgqlc.types.Field(Package, graphql_name=\"package\")\n    platform = sgqlc.types.Field(String, graphql_name=\"platform\")\n    pre_release = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"preRelease\"\n    )\n    readme = sgqlc.types.Field(String, graphql_name=\"readme\")\n    release = sgqlc.types.Field(\"Release\", graphql_name=\"release\")\n    statistics = sgqlc.types.Field(PackageVersionStatistics, graphql_name=\"statistics\")\n    summary = sgqlc.types.Field(String, graphql_name=\"summary\")\n    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"version\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionConnection","title":"<code>PackageVersionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageVersionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PackageVersionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PackageVersion\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PageInfo\"), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionEdge","title":"<code>PackageVersionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageVersionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PackageVersion\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionOrder","title":"<code>PackageVersionOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageVersionOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(PackageVersionOrderField, graphql_name=\"field\")\n    direction = sgqlc.types.Field(OrderDirection, graphql_name=\"direction\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionOrderField","title":"<code>PackageVersionOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageVersionOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionStatistics","title":"<code>PackageVersionStatistics</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PackageVersionStatistics(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"downloads_total_count\",)\n    downloads_total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"downloadsTotalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PageInfo","title":"<code>PageInfo</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PageInfo(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"end_cursor\",\n        \"has_next_page\",\n        \"has_previous_page\",\n        \"start_cursor\",\n    )\n    end_cursor = sgqlc.types.Field(String, graphql_name=\"endCursor\")\n    has_next_page = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasNextPage\"\n    )\n    has_previous_page = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasPreviousPage\"\n    )\n    start_cursor = sgqlc.types.Field(String, graphql_name=\"startCursor\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PatchStatus","title":"<code>PatchStatus</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PatchStatus(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADDED\", \"CHANGED\", \"COPIED\", \"DELETED\", \"MODIFIED\", \"RENAMED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PermissionGranter","title":"<code>PermissionGranter</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PermissionGranter(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Organization, Repository, Team)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PermissionSource","title":"<code>PermissionSource</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PermissionSource(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"organization\", \"permission\", \"source\")\n    organization = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Organization\"), graphql_name=\"organization\"\n    )\n    permission = sgqlc.types.Field(\n        sgqlc.types.non_null(DefaultRepositoryPermissionField),\n        graphql_name=\"permission\",\n    )\n    source = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PermissionGranter\"), graphql_name=\"source\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinIssueInput","title":"<code>PinIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"issue_id\", \"client_mutation_id\")\n    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"issueId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinIssuePayload","title":"<code>PinIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"issue\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    issue = sgqlc.types.Field(\"Issue\", graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnableItem","title":"<code>PinnableItem</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnableItem(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Gist, Repository)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnableItemConnection","title":"<code>PinnableItemConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnableItemConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PinnableItemEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"PinnableItem\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnableItemEdge","title":"<code>PinnableItemEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnableItemEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PinnableItem\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnableItemType","title":"<code>PinnableItemType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnableItemType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"GIST\",\n        \"ISSUE\",\n        \"ORGANIZATION\",\n        \"PROJECT\",\n        \"PULL_REQUEST\",\n        \"REPOSITORY\",\n        \"TEAM\",\n        \"USER\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussion","title":"<code>PinnedDiscussion</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedDiscussion(sgqlc.types.Type, Node, RepositoryNode):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"database_id\",\n        \"discussion\",\n        \"gradient_stop_colors\",\n        \"pattern\",\n        \"pinned_by\",\n        \"preconfigured_gradient\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    discussion = sgqlc.types.Field(\n        sgqlc.types.non_null(Discussion), graphql_name=\"discussion\"\n    )\n    gradient_stop_colors = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),\n        graphql_name=\"gradientStopColors\",\n    )\n    pattern = sgqlc.types.Field(\n        sgqlc.types.non_null(PinnedDiscussionPattern), graphql_name=\"pattern\"\n    )\n    pinned_by = sgqlc.types.Field(sgqlc.types.non_null(Actor), graphql_name=\"pinnedBy\")\n    preconfigured_gradient = sgqlc.types.Field(\n        PinnedDiscussionGradient, graphql_name=\"preconfiguredGradient\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussionConnection","title":"<code>PinnedDiscussionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedDiscussionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PinnedDiscussionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PinnedDiscussion\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussionEdge","title":"<code>PinnedDiscussionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedDiscussionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PinnedDiscussion\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussionGradient","title":"<code>PinnedDiscussionGradient</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedDiscussionGradient(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"BLUE_MINT\",\n        \"BLUE_PURPLE\",\n        \"PINK_BLUE\",\n        \"PURPLE_CORAL\",\n        \"RED_ORANGE\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussionPattern","title":"<code>PinnedDiscussionPattern</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedDiscussionPattern(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CHEVRON_UP\", \"DOT\", \"DOT_FILL\", \"HEART_FILL\", \"PLUS\", \"ZAP\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedEvent","title":"<code>PinnedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"issue\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    issue = sgqlc.types.Field(sgqlc.types.non_null(Issue), graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedIssue","title":"<code>PinnedIssue</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedIssue(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"database_id\", \"issue\", \"pinned_by\", \"repository\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    issue = sgqlc.types.Field(sgqlc.types.non_null(Issue), graphql_name=\"issue\")\n    pinned_by = sgqlc.types.Field(sgqlc.types.non_null(Actor), graphql_name=\"pinnedBy\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedIssueConnection","title":"<code>PinnedIssueConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedIssueConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PinnedIssueEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"PinnedIssue\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedIssueEdge","title":"<code>PinnedIssueEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PinnedIssueEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PinnedIssue\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PreciseDateTime","title":"<code>PreciseDateTime</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PreciseDateTime(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PrivateRepositoryForkingDisableAuditEntry","title":"<code>PrivateRepositoryForkingDisableAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>EnterpriseAuditEntryData</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PrivateRepositoryForkingDisableAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    EnterpriseAuditEntryData,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PrivateRepositoryForkingEnableAuditEntry","title":"<code>PrivateRepositoryForkingEnableAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>EnterpriseAuditEntryData</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PrivateRepositoryForkingEnableAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    EnterpriseAuditEntryData,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProfileItemShowcase","title":"<code>ProfileItemShowcase</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProfileItemShowcase(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"has_pinned_items\", \"items\")\n    has_pinned_items = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasPinnedItems\"\n    )\n    items = sgqlc.types.Field(\n        sgqlc.types.non_null(PinnableItemConnection),\n        graphql_name=\"items\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProfileOwner","title":"<code>ProfileOwner</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProfileOwner(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"any_pinnable_items\",\n        \"email\",\n        \"id\",\n        \"item_showcase\",\n        \"location\",\n        \"login\",\n        \"name\",\n        \"pinnable_items\",\n        \"pinned_items\",\n        \"pinned_items_remaining\",\n        \"viewer_can_change_pinned_items\",\n        \"website_url\",\n    )\n    any_pinnable_items = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean),\n        graphql_name=\"anyPinnableItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"type\",\n                    sgqlc.types.Arg(\n                        PinnableItemType, graphql_name=\"type\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    email = sgqlc.types.Field(String, graphql_name=\"email\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    item_showcase = sgqlc.types.Field(\n        sgqlc.types.non_null(ProfileItemShowcase), graphql_name=\"itemShowcase\"\n    )\n    location = sgqlc.types.Field(String, graphql_name=\"location\")\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    pinnable_items = sgqlc.types.Field(\n        sgqlc.types.non_null(PinnableItemConnection),\n        graphql_name=\"pinnableItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"types\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(PinnableItemType)),\n                        graphql_name=\"types\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pinned_items = sgqlc.types.Field(\n        sgqlc.types.non_null(PinnableItemConnection),\n        graphql_name=\"pinnedItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"types\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(PinnableItemType)),\n                        graphql_name=\"types\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pinned_items_remaining = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"pinnedItemsRemaining\"\n    )\n    viewer_can_change_pinned_items = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanChangePinnedItems\"\n    )\n    website_url = sgqlc.types.Field(URI, graphql_name=\"websiteUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Project","title":"<code>Project</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Closable</code>, <code>Updatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Project(sgqlc.types.Type, Node, Closable, Updatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"body\",\n        \"body_html\",\n        \"columns\",\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"name\",\n        \"number\",\n        \"owner\",\n        \"pending_cards\",\n        \"progress\",\n        \"resource_path\",\n        \"state\",\n        \"updated_at\",\n        \"url\",\n    )\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    body_html = sgqlc.types.Field(sgqlc.types.non_null(HTML), graphql_name=\"bodyHTML\")\n    columns = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectColumnConnection),\n        graphql_name=\"columns\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    owner = sgqlc.types.Field(sgqlc.types.non_null(ProjectOwner), graphql_name=\"owner\")\n    pending_cards = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectCardConnection),\n        graphql_name=\"pendingCards\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"archived_states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(ProjectCardArchivedState),\n                        graphql_name=\"archivedStates\",\n                        default=(\"ARCHIVED\", \"NOT_ARCHIVED\"),\n                    ),\n                ),\n            )\n        ),\n    )\n    progress = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectProgress), graphql_name=\"progress\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    state = sgqlc.types.Field(sgqlc.types.non_null(ProjectState), graphql_name=\"state\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCard","title":"<code>ProjectCard</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectCard(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"column\",\n        \"content\",\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"is_archived\",\n        \"note\",\n        \"project\",\n        \"resource_path\",\n        \"state\",\n        \"updated_at\",\n        \"url\",\n    )\n    column = sgqlc.types.Field(\"ProjectColumn\", graphql_name=\"column\")\n    content = sgqlc.types.Field(\"ProjectCardItem\", graphql_name=\"content\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    is_archived = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isArchived\"\n    )\n    note = sgqlc.types.Field(String, graphql_name=\"note\")\n    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name=\"project\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    state = sgqlc.types.Field(ProjectCardState, graphql_name=\"state\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardArchivedState","title":"<code>ProjectCardArchivedState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectCardArchivedState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ARCHIVED\", \"NOT_ARCHIVED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardConnection","title":"<code>ProjectCardConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectCardConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectCardEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"ProjectCard\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardEdge","title":"<code>ProjectCardEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectCardEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectCard\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardItem","title":"<code>ProjectCardItem</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectCardItem(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Issue, PullRequest)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardState","title":"<code>ProjectCardState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectCardState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CONTENT_ONLY\", \"NOTE_ONLY\", \"REDACTED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectColumn","title":"<code>ProjectColumn</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectColumn(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"cards\",\n        \"created_at\",\n        \"database_id\",\n        \"name\",\n        \"project\",\n        \"purpose\",\n        \"resource_path\",\n        \"updated_at\",\n        \"url\",\n    )\n    cards = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectCardConnection),\n        graphql_name=\"cards\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"archived_states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(ProjectCardArchivedState),\n                        graphql_name=\"archivedStates\",\n                        default=(\"ARCHIVED\", \"NOT_ARCHIVED\"),\n                    ),\n                ),\n            )\n        ),\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    project = sgqlc.types.Field(sgqlc.types.non_null(Project), graphql_name=\"project\")\n    purpose = sgqlc.types.Field(ProjectColumnPurpose, graphql_name=\"purpose\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectColumnConnection","title":"<code>ProjectColumnConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectColumnConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectColumnEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectColumn\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectColumnEdge","title":"<code>ProjectColumnEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectColumnEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectColumn\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectColumnPurpose","title":"<code>ProjectColumnPurpose</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectColumnPurpose(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DONE\", \"IN_PROGRESS\", \"TODO\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectConnection","title":"<code>ProjectConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"ProjectEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Project\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectEdge","title":"<code>ProjectEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Project\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectItemType","title":"<code>ProjectItemType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectItemType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DRAFT_ISSUE\", \"ISSUE\", \"PULL_REQUEST\", \"REDACTED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNext","title":"<code>ProjectNext</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Closable</code>, <code>Updatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNext(sgqlc.types.Type, Node, Closable, Updatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"description\",\n        \"fields\",\n        \"items\",\n        \"number\",\n        \"owner\",\n        \"public\",\n        \"repositories\",\n        \"resource_path\",\n        \"short_description\",\n        \"title\",\n        \"updated_at\",\n        \"url\",\n        \"views\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    fields = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextFieldConnection),\n        graphql_name=\"fields\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    items = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextItemConnection),\n        graphql_name=\"items\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    owner = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextOwner), graphql_name=\"owner\"\n    )\n    public = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"public\")\n    repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryConnection),\n        graphql_name=\"repositories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    short_description = sgqlc.types.Field(String, graphql_name=\"shortDescription\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    views = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectViewConnection),\n        graphql_name=\"views\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextConnection","title":"<code>ProjectNextConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectNextEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"ProjectNext\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextEdge","title":"<code>ProjectNextEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectNext\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextField","title":"<code>ProjectNextField</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectNextFieldCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextField(sgqlc.types.Type, ProjectNextFieldCommon, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextFieldCommon","title":"<code>ProjectNextFieldCommon</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextFieldCommon(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"data_type\",\n        \"database_id\",\n        \"id\",\n        \"name\",\n        \"project\",\n        \"settings\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    data_type = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextFieldType), graphql_name=\"dataType\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    project = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectNext\"), graphql_name=\"project\"\n    )\n    settings = sgqlc.types.Field(String, graphql_name=\"settings\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextFieldConnection","title":"<code>ProjectNextFieldConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextFieldConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectNextFieldEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectNextField\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextFieldEdge","title":"<code>ProjectNextFieldEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextFieldEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectNextField\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextFieldType","title":"<code>ProjectNextFieldType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextFieldType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ASSIGNEES\",\n        \"DATE\",\n        \"ITERATION\",\n        \"LABELS\",\n        \"LINKED_PULL_REQUESTS\",\n        \"MILESTONE\",\n        \"NUMBER\",\n        \"REPOSITORY\",\n        \"REVIEWERS\",\n        \"SINGLE_SELECT\",\n        \"TEXT\",\n        \"TITLE\",\n        \"TRACKS\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItem","title":"<code>ProjectNextItem</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextItem(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"content\",\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"field_values\",\n        \"is_archived\",\n        \"project\",\n        \"title\",\n        \"type\",\n        \"updated_at\",\n    )\n    content = sgqlc.types.Field(\"ProjectNextItemContent\", graphql_name=\"content\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    field_values = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextItemFieldValueConnection),\n        graphql_name=\"fieldValues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    is_archived = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isArchived\"\n    )\n    project = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNext), graphql_name=\"project\"\n    )\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    type = sgqlc.types.Field(sgqlc.types.non_null(ProjectItemType), graphql_name=\"type\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemConnection","title":"<code>ProjectNextItemConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextItemConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectNextItemEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectNextItem\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemContent","title":"<code>ProjectNextItemContent</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextItemContent(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (DraftIssue, Issue, PullRequest)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemEdge","title":"<code>ProjectNextItemEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextItemEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectNextItem\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemFieldValue","title":"<code>ProjectNextItemFieldValue</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextItemFieldValue(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"project_field\",\n        \"project_item\",\n        \"updated_at\",\n        \"value\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    project_field = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextField), graphql_name=\"projectField\"\n    )\n    project_item = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextItem), graphql_name=\"projectItem\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    value = sgqlc.types.Field(String, graphql_name=\"value\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemFieldValueConnection","title":"<code>ProjectNextItemFieldValueConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextItemFieldValueConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectNextItemFieldValueEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectNextItemFieldValue\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemFieldValueEdge","title":"<code>ProjectNextItemFieldValueEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextItemFieldValueEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectNextItemFieldValue\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextOrderField","title":"<code>ProjectNextOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"NUMBER\", \"TITLE\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextOwner","title":"<code>ProjectNextOwner</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectNextOwner(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"project_next\", \"projects_next\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    project_next = sgqlc.types.Field(\n        \"ProjectNext\",\n        graphql_name=\"projectNext\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    projects_next = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextConnection),\n        graphql_name=\"projectsNext\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"sort_by\",\n                    sgqlc.types.Arg(\n                        ProjectNextOrderField, graphql_name=\"sortBy\", default=\"TITLE\"\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectOrder","title":"<code>ProjectOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectOrderField","title":"<code>ProjectOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"NAME\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectOwner","title":"<code>ProjectOwner</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectOwner(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"id\",\n        \"project\",\n        \"projects\",\n        \"projects_resource_path\",\n        \"projects_url\",\n        \"viewer_can_create_projects\",\n    )\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    project = sgqlc.types.Field(\n        \"Project\",\n        graphql_name=\"project\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    projects = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectConnection),\n        graphql_name=\"projects\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(ProjectOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\n                    \"search\",\n                    sgqlc.types.Arg(String, graphql_name=\"search\", default=None),\n                ),\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(ProjectState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    projects_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"projectsResourcePath\"\n    )\n    projects_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"projectsUrl\"\n    )\n    viewer_can_create_projects = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanCreateProjects\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectProgress","title":"<code>ProjectProgress</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectProgress(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"done_count\",\n        \"done_percentage\",\n        \"enabled\",\n        \"in_progress_count\",\n        \"in_progress_percentage\",\n        \"todo_count\",\n        \"todo_percentage\",\n    )\n    done_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"doneCount\")\n    done_percentage = sgqlc.types.Field(\n        sgqlc.types.non_null(Float), graphql_name=\"donePercentage\"\n    )\n    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"enabled\")\n    in_progress_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"inProgressCount\"\n    )\n    in_progress_percentage = sgqlc.types.Field(\n        sgqlc.types.non_null(Float), graphql_name=\"inProgressPercentage\"\n    )\n    todo_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"todoCount\")\n    todo_percentage = sgqlc.types.Field(\n        sgqlc.types.non_null(Float), graphql_name=\"todoPercentage\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectState","title":"<code>ProjectState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CLOSED\", \"OPEN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectTemplate","title":"<code>ProjectTemplate</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectTemplate(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"AUTOMATED_KANBAN_V2\",\n        \"AUTOMATED_REVIEWS_KANBAN\",\n        \"BASIC_KANBAN\",\n        \"BUG_TRIAGE\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2","title":"<code>ProjectV2</code>","text":"<p>             Bases: <code>Type</code>, <code>Closable</code>, <code>Updatable</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2(sgqlc.types.Type, Closable, Updatable, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"field\",\n        \"fields\",\n        \"items\",\n        \"number\",\n        \"owner\",\n        \"public\",\n        \"readme\",\n        \"repositories\",\n        \"resource_path\",\n        \"short_description\",\n        \"title\",\n        \"updated_at\",\n        \"url\",\n        \"view\",\n        \"views\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    field = sgqlc.types.Field(\n        \"ProjectV2FieldConfiguration\",\n        graphql_name=\"field\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    fields = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2FieldConfigurationConnection),\n        graphql_name=\"fields\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2FieldOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"POSITION\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    items = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ItemConnection),\n        graphql_name=\"items\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2ItemOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"POSITION\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    owner = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2Owner), graphql_name=\"owner\"\n    )\n    public = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"public\")\n    readme = sgqlc.types.Field(String, graphql_name=\"readme\")\n    repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryConnection),\n        graphql_name=\"repositories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    short_description = sgqlc.types.Field(String, graphql_name=\"shortDescription\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    view = sgqlc.types.Field(\n        \"ProjectV2View\",\n        graphql_name=\"view\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    views = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ViewConnection),\n        graphql_name=\"views\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2ViewOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"POSITION\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Connection","title":"<code>ProjectV2Connection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2Connection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2Edge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"ProjectV2\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Edge","title":"<code>ProjectV2Edge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2Edge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectV2\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Field","title":"<code>ProjectV2Field</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectV2FieldCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2Field(sgqlc.types.Type, ProjectV2FieldCommon, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldCommon","title":"<code>ProjectV2FieldCommon</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldCommon(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"data_type\",\n        \"database_id\",\n        \"id\",\n        \"name\",\n        \"project\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    data_type = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2FieldType), graphql_name=\"dataType\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    project = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2\"), graphql_name=\"project\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldConfiguration","title":"<code>ProjectV2FieldConfiguration</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldConfiguration(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (ProjectV2Field, ProjectV2IterationField, ProjectV2SingleSelectField)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldConfigurationConnection","title":"<code>ProjectV2FieldConfigurationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldConfigurationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2FieldConfigurationEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2FieldConfiguration\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldConfigurationEdge","title":"<code>ProjectV2FieldConfigurationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldConfigurationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectV2FieldConfiguration\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldConnection","title":"<code>ProjectV2FieldConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2FieldEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2Field\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldEdge","title":"<code>ProjectV2FieldEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectV2Field\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldOrder","title":"<code>ProjectV2FieldOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2FieldOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldOrderField","title":"<code>ProjectV2FieldOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"NAME\", \"POSITION\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldType","title":"<code>ProjectV2FieldType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ASSIGNEES\",\n        \"DATE\",\n        \"ITERATION\",\n        \"LABELS\",\n        \"LINKED_PULL_REQUESTS\",\n        \"MILESTONE\",\n        \"NUMBER\",\n        \"REPOSITORY\",\n        \"REVIEWERS\",\n        \"SINGLE_SELECT\",\n        \"TEXT\",\n        \"TITLE\",\n        \"TRACKS\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldValue","title":"<code>ProjectV2FieldValue</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2FieldValue(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"text\",\n        \"number\",\n        \"date\",\n        \"single_select_option_id\",\n        \"iteration_id\",\n    )\n    text = sgqlc.types.Field(String, graphql_name=\"text\")\n    number = sgqlc.types.Field(Float, graphql_name=\"number\")\n    date = sgqlc.types.Field(Date, graphql_name=\"date\")\n    single_select_option_id = sgqlc.types.Field(\n        String, graphql_name=\"singleSelectOptionId\"\n    )\n    iteration_id = sgqlc.types.Field(String, graphql_name=\"iterationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Item","title":"<code>ProjectV2Item</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2Item(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"content\",\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"field_value_by_name\",\n        \"field_values\",\n        \"is_archived\",\n        \"project\",\n        \"type\",\n        \"updated_at\",\n    )\n    content = sgqlc.types.Field(\"ProjectV2ItemContent\", graphql_name=\"content\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    field_value_by_name = sgqlc.types.Field(\n        \"ProjectV2ItemFieldValue\",\n        graphql_name=\"fieldValueByName\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    field_values = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ItemFieldValueConnection),\n        graphql_name=\"fieldValues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2ItemFieldValueOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"POSITION\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    is_archived = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isArchived\"\n    )\n    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectV2), graphql_name=\"project\")\n    type = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ItemType), graphql_name=\"type\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemConnection","title":"<code>ProjectV2ItemConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2ItemEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2Item\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemContent","title":"<code>ProjectV2ItemContent</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemContent(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (DraftIssue, Issue, PullRequest)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemEdge","title":"<code>ProjectV2ItemEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectV2Item\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldDateValue","title":"<code>ProjectV2ItemFieldDateValue</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectV2ItemFieldValueCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldDateValue(\n    sgqlc.types.Type, ProjectV2ItemFieldValueCommon, Node\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"date\",)\n    date = sgqlc.types.Field(Date, graphql_name=\"date\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldIterationValue","title":"<code>ProjectV2ItemFieldIterationValue</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectV2ItemFieldValueCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldIterationValue(\n    sgqlc.types.Type, ProjectV2ItemFieldValueCommon, Node\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"duration\", \"iteration_id\", \"start_date\", \"title\", \"title_html\")\n    duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"duration\")\n    iteration_id = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"iterationId\"\n    )\n    start_date = sgqlc.types.Field(sgqlc.types.non_null(Date), graphql_name=\"startDate\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    title_html = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"titleHTML\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldLabelValue","title":"<code>ProjectV2ItemFieldLabelValue</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldLabelValue(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"labels\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2FieldConfiguration\"), graphql_name=\"field\"\n    )\n    labels = sgqlc.types.Field(\n        LabelConnection,\n        graphql_name=\"labels\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldMilestoneValue","title":"<code>ProjectV2ItemFieldMilestoneValue</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldMilestoneValue(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"milestone\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2FieldConfiguration\"), graphql_name=\"field\"\n    )\n    milestone = sgqlc.types.Field(\"Milestone\", graphql_name=\"milestone\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldNumberValue","title":"<code>ProjectV2ItemFieldNumberValue</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectV2ItemFieldValueCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldNumberValue(\n    sgqlc.types.Type, ProjectV2ItemFieldValueCommon, Node\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"number\",)\n    number = sgqlc.types.Field(Float, graphql_name=\"number\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldPullRequestValue","title":"<code>ProjectV2ItemFieldPullRequestValue</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldPullRequestValue(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"pull_requests\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2FieldConfiguration\"), graphql_name=\"field\"\n    )\n    pull_requests = sgqlc.types.Field(\n        \"PullRequestConnection\",\n        graphql_name=\"pullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        PullRequestOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldRepositoryValue","title":"<code>ProjectV2ItemFieldRepositoryValue</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldRepositoryValue(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"repository\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2FieldConfiguration\"), graphql_name=\"field\"\n    )\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldReviewerValue","title":"<code>ProjectV2ItemFieldReviewerValue</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldReviewerValue(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"reviewers\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2FieldConfiguration\"), graphql_name=\"field\"\n    )\n    reviewers = sgqlc.types.Field(\n        \"RequestedReviewerConnection\",\n        graphql_name=\"reviewers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldSingleSelectValue","title":"<code>ProjectV2ItemFieldSingleSelectValue</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectV2ItemFieldValueCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldSingleSelectValue(\n    sgqlc.types.Type, ProjectV2ItemFieldValueCommon, Node\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"name\", \"name_html\", \"option_id\")\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    name_html = sgqlc.types.Field(String, graphql_name=\"nameHTML\")\n    option_id = sgqlc.types.Field(String, graphql_name=\"optionId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldTextValue","title":"<code>ProjectV2ItemFieldTextValue</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectV2ItemFieldValueCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldTextValue(\n    sgqlc.types.Type, ProjectV2ItemFieldValueCommon, Node\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"text\",)\n    text = sgqlc.types.Field(String, graphql_name=\"text\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldUserValue","title":"<code>ProjectV2ItemFieldUserValue</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldUserValue(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"users\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2FieldConfiguration\"), graphql_name=\"field\"\n    )\n    users = sgqlc.types.Field(\n        \"UserConnection\",\n        graphql_name=\"users\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValue","title":"<code>ProjectV2ItemFieldValue</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldValue(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (\n        ProjectV2ItemFieldDateValue,\n        ProjectV2ItemFieldIterationValue,\n        ProjectV2ItemFieldLabelValue,\n        ProjectV2ItemFieldMilestoneValue,\n        ProjectV2ItemFieldNumberValue,\n        ProjectV2ItemFieldPullRequestValue,\n        ProjectV2ItemFieldRepositoryValue,\n        ProjectV2ItemFieldReviewerValue,\n        ProjectV2ItemFieldSingleSelectValue,\n        ProjectV2ItemFieldTextValue,\n        ProjectV2ItemFieldUserValue,\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueCommon","title":"<code>ProjectV2ItemFieldValueCommon</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldValueCommon(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"creator\",\n        \"database_id\",\n        \"field\",\n        \"id\",\n        \"item\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2FieldConfiguration\"), graphql_name=\"field\"\n    )\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    item = sgqlc.types.Field(sgqlc.types.non_null(\"ProjectV2Item\"), graphql_name=\"item\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueConnection","title":"<code>ProjectV2ItemFieldValueConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldValueConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2ItemFieldValueEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2ItemFieldValue\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueEdge","title":"<code>ProjectV2ItemFieldValueEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldValueEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectV2ItemFieldValue\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueOrder","title":"<code>ProjectV2ItemFieldValueOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldValueOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ItemFieldValueOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueOrderField","title":"<code>ProjectV2ItemFieldValueOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemFieldValueOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"POSITION\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemOrder","title":"<code>ProjectV2ItemOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ItemOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemOrderField","title":"<code>ProjectV2ItemOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"POSITION\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemType","title":"<code>ProjectV2ItemType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ItemType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DRAFT_ISSUE\", \"ISSUE\", \"PULL_REQUEST\", \"REDACTED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2IterationField","title":"<code>ProjectV2IterationField</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectV2FieldCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2IterationField(sgqlc.types.Type, ProjectV2FieldCommon, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"configuration\",)\n    configuration = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2IterationFieldConfiguration),\n        graphql_name=\"configuration\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2IterationFieldConfiguration","title":"<code>ProjectV2IterationFieldConfiguration</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2IterationFieldConfiguration(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"completed_iterations\", \"duration\", \"iterations\", \"start_day\")\n    completed_iterations = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(\n                sgqlc.types.non_null(\"ProjectV2IterationFieldIteration\")\n            )\n        ),\n        graphql_name=\"completedIterations\",\n    )\n    duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"duration\")\n    iterations = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(\n                sgqlc.types.non_null(\"ProjectV2IterationFieldIteration\")\n            )\n        ),\n        graphql_name=\"iterations\",\n    )\n    start_day = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"startDay\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2IterationFieldIteration","title":"<code>ProjectV2IterationFieldIteration</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2IterationFieldIteration(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"duration\", \"id\", \"start_date\", \"title\", \"title_html\")\n    duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"duration\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"id\")\n    start_date = sgqlc.types.Field(sgqlc.types.non_null(Date), graphql_name=\"startDate\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    title_html = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"titleHTML\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Order","title":"<code>ProjectV2Order</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2Order(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2OrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2OrderField","title":"<code>ProjectV2OrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2OrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"NUMBER\", \"TITLE\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Owner","title":"<code>ProjectV2Owner</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2Owner(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"project_v2\", \"projects_v2\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    project_v2 = sgqlc.types.Field(\n        \"ProjectV2\",\n        graphql_name=\"projectV2\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    projects_v2 = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2Connection),\n        graphql_name=\"projectsV2\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2Order,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"NUMBER\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Recent","title":"<code>ProjectV2Recent</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2Recent(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"recent_projects\",)\n    recent_projects = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2Connection),\n        graphql_name=\"recentProjects\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SingleSelectField","title":"<code>ProjectV2SingleSelectField</code>","text":"<p>             Bases: <code>Type</code>, <code>ProjectV2FieldCommon</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2SingleSelectField(sgqlc.types.Type, ProjectV2FieldCommon, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"options\",)\n    options = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(ProjectV2SingleSelectFieldOption))\n        ),\n        graphql_name=\"options\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SingleSelectFieldOption","title":"<code>ProjectV2SingleSelectFieldOption</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2SingleSelectFieldOption(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"name\", \"name_html\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    name_html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"nameHTML\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SortBy","title":"<code>ProjectV2SortBy</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2SortBy(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"direction\", \"field\")\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ProjectV2Field\"), graphql_name=\"field\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SortByConnection","title":"<code>ProjectV2SortByConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2SortByConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2SortByEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(ProjectV2SortBy), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SortByEdge","title":"<code>ProjectV2SortByEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2SortByEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(ProjectV2SortBy, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2View","title":"<code>ProjectV2View</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2View(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"database_id\",\n        \"fields\",\n        \"filter\",\n        \"group_by\",\n        \"layout\",\n        \"name\",\n        \"number\",\n        \"project\",\n        \"sort_by\",\n        \"updated_at\",\n        \"vertical_group_by\",\n        \"visible_fields\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    fields = sgqlc.types.Field(\n        ProjectV2FieldConfigurationConnection,\n        graphql_name=\"fields\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2FieldOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"POSITION\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    filter = sgqlc.types.Field(String, graphql_name=\"filter\")\n    group_by = sgqlc.types.Field(\n        ProjectV2FieldConnection,\n        graphql_name=\"groupBy\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2FieldOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"POSITION\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    layout = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ViewLayout), graphql_name=\"layout\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    project = sgqlc.types.Field(sgqlc.types.non_null(ProjectV2), graphql_name=\"project\")\n    sort_by = sgqlc.types.Field(\n        ProjectV2SortByConnection,\n        graphql_name=\"sortBy\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    vertical_group_by = sgqlc.types.Field(\n        ProjectV2FieldConnection,\n        graphql_name=\"verticalGroupBy\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2FieldOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"POSITION\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    visible_fields = sgqlc.types.Field(\n        ProjectV2FieldConnection,\n        graphql_name=\"visibleFields\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2FieldOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"POSITION\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewConnection","title":"<code>ProjectV2ViewConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ViewConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2ViewEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectV2View\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewEdge","title":"<code>ProjectV2ViewEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ViewEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectV2View\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewLayout","title":"<code>ProjectV2ViewLayout</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ViewLayout(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"BOARD_LAYOUT\", \"TABLE_LAYOUT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewOrder","title":"<code>ProjectV2ViewOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ViewOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ViewOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewOrderField","title":"<code>ProjectV2ViewOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectV2ViewOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"NAME\", \"POSITION\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectView","title":"<code>ProjectView</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectView(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"database_id\",\n        \"filter\",\n        \"group_by\",\n        \"layout\",\n        \"name\",\n        \"number\",\n        \"project\",\n        \"sort_by\",\n        \"updated_at\",\n        \"vertical_group_by\",\n        \"visible_fields\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    filter = sgqlc.types.Field(String, graphql_name=\"filter\")\n    group_by = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name=\"groupBy\"\n    )\n    layout = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectViewLayout), graphql_name=\"layout\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    project = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNext), graphql_name=\"project\"\n    )\n    sort_by = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(SortBy)), graphql_name=\"sortBy\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    vertical_group_by = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name=\"verticalGroupBy\"\n    )\n    visible_fields = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name=\"visibleFields\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectViewConnection","title":"<code>ProjectViewConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectViewConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ProjectViewEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"ProjectView\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectViewEdge","title":"<code>ProjectViewEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectViewEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ProjectView\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectViewLayout","title":"<code>ProjectViewLayout</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ProjectViewLayout(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"BOARD_LAYOUT\", \"TABLE_LAYOUT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PublicKey","title":"<code>PublicKey</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PublicKey(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"accessed_at\",\n        \"created_at\",\n        \"fingerprint\",\n        \"is_read_only\",\n        \"key\",\n        \"updated_at\",\n    )\n    accessed_at = sgqlc.types.Field(DateTime, graphql_name=\"accessedAt\")\n    created_at = sgqlc.types.Field(DateTime, graphql_name=\"createdAt\")\n    fingerprint = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"fingerprint\"\n    )\n    is_read_only = sgqlc.types.Field(Boolean, graphql_name=\"isReadOnly\")\n    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"key\")\n    updated_at = sgqlc.types.Field(DateTime, graphql_name=\"updatedAt\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PublicKeyConnection","title":"<code>PublicKeyConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PublicKeyConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PublicKeyEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"PublicKey\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PublicKeyEdge","title":"<code>PublicKeyEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PublicKeyEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PublicKey\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequest","title":"<code>PullRequest</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Assignable</code>, <code>Closable</code>, <code>Comment</code>, <code>Updatable</code>, <code>UpdatableComment</code>, <code>Labelable</code>, <code>Lockable</code>, <code>Reactable</code>, <code>RepositoryNode</code>, <code>Subscribable</code>, <code>UniformResourceLocatable</code>, <code>ProjectNextOwner</code>, <code>ProjectV2Owner</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequest(\n    sgqlc.types.Type,\n    Node,\n    Assignable,\n    Closable,\n    Comment,\n    Updatable,\n    UpdatableComment,\n    Labelable,\n    Lockable,\n    Reactable,\n    RepositoryNode,\n    Subscribable,\n    UniformResourceLocatable,\n    ProjectNextOwner,\n    ProjectV2Owner,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"additions\",\n        \"auto_merge_request\",\n        \"base_ref\",\n        \"base_ref_name\",\n        \"base_ref_oid\",\n        \"base_repository\",\n        \"changed_files\",\n        \"checks_resource_path\",\n        \"checks_url\",\n        \"closing_issues_references\",\n        \"comments\",\n        \"commits\",\n        \"deletions\",\n        \"files\",\n        \"head_ref\",\n        \"head_ref_name\",\n        \"head_ref_oid\",\n        \"head_repository\",\n        \"head_repository_owner\",\n        \"hovercard\",\n        \"is_cross_repository\",\n        \"is_draft\",\n        \"is_read_by_viewer\",\n        \"latest_opinionated_reviews\",\n        \"latest_reviews\",\n        \"maintainer_can_modify\",\n        \"merge_commit\",\n        \"mergeable\",\n        \"merged\",\n        \"merged_at\",\n        \"merged_by\",\n        \"milestone\",\n        \"number\",\n        \"participants\",\n        \"permalink\",\n        \"potential_merge_commit\",\n        \"project_cards\",\n        \"project_items\",\n        \"project_next_items\",\n        \"revert_resource_path\",\n        \"revert_url\",\n        \"review_decision\",\n        \"review_requests\",\n        \"review_threads\",\n        \"reviews\",\n        \"state\",\n        \"suggested_reviewers\",\n        \"timeline\",\n        \"timeline_items\",\n        \"title\",\n        \"title_html\",\n        \"viewer_can_apply_suggestion\",\n        \"viewer_can_delete_head_ref\",\n        \"viewer_can_disable_auto_merge\",\n        \"viewer_can_edit_files\",\n        \"viewer_can_enable_auto_merge\",\n        \"viewer_can_merge_as_admin\",\n        \"viewer_latest_review\",\n        \"viewer_latest_review_request\",\n        \"viewer_merge_body_text\",\n        \"viewer_merge_headline_text\",\n    )\n    additions = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"additions\")\n    auto_merge_request = sgqlc.types.Field(\n        AutoMergeRequest, graphql_name=\"autoMergeRequest\"\n    )\n    base_ref = sgqlc.types.Field(\"Ref\", graphql_name=\"baseRef\")\n    base_ref_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"baseRefName\"\n    )\n    base_ref_oid = sgqlc.types.Field(\n        sgqlc.types.non_null(GitObjectID), graphql_name=\"baseRefOid\"\n    )\n    base_repository = sgqlc.types.Field(\"Repository\", graphql_name=\"baseRepository\")\n    changed_files = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"changedFiles\"\n    )\n    checks_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"checksResourcePath\"\n    )\n    checks_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"checksUrl\")\n    closing_issues_references = sgqlc.types.Field(\n        IssueConnection,\n        graphql_name=\"closingIssuesReferences\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"user_linked_only\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"userLinkedOnly\", default=False\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n            )\n        ),\n    )\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        IssueCommentOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    commits = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestCommitConnection),\n        graphql_name=\"commits\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    deletions = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"deletions\")\n    files = sgqlc.types.Field(\n        PullRequestChangedFileConnection,\n        graphql_name=\"files\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    head_ref = sgqlc.types.Field(\"Ref\", graphql_name=\"headRef\")\n    head_ref_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"headRefName\"\n    )\n    head_ref_oid = sgqlc.types.Field(\n        sgqlc.types.non_null(GitObjectID), graphql_name=\"headRefOid\"\n    )\n    head_repository = sgqlc.types.Field(\"Repository\", graphql_name=\"headRepository\")\n    head_repository_owner = sgqlc.types.Field(\n        RepositoryOwner, graphql_name=\"headRepositoryOwner\"\n    )\n    hovercard = sgqlc.types.Field(\n        sgqlc.types.non_null(Hovercard),\n        graphql_name=\"hovercard\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"include_notification_contexts\",\n                    sgqlc.types.Arg(\n                        Boolean,\n                        graphql_name=\"includeNotificationContexts\",\n                        default=True,\n                    ),\n                ),\n            )\n        ),\n    )\n    is_cross_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCrossRepository\"\n    )\n    is_draft = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isDraft\")\n    is_read_by_viewer = sgqlc.types.Field(Boolean, graphql_name=\"isReadByViewer\")\n    latest_opinionated_reviews = sgqlc.types.Field(\n        PullRequestReviewConnection,\n        graphql_name=\"latestOpinionatedReviews\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"writers_only\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"writersOnly\", default=False),\n                ),\n            )\n        ),\n    )\n    latest_reviews = sgqlc.types.Field(\n        PullRequestReviewConnection,\n        graphql_name=\"latestReviews\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    maintainer_can_modify = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"maintainerCanModify\"\n    )\n    merge_commit = sgqlc.types.Field(Commit, graphql_name=\"mergeCommit\")\n    mergeable = sgqlc.types.Field(\n        sgqlc.types.non_null(MergeableState), graphql_name=\"mergeable\"\n    )\n    merged = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"merged\")\n    merged_at = sgqlc.types.Field(DateTime, graphql_name=\"mergedAt\")\n    merged_by = sgqlc.types.Field(Actor, graphql_name=\"mergedBy\")\n    milestone = sgqlc.types.Field(Milestone, graphql_name=\"milestone\")\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    participants = sgqlc.types.Field(\n        sgqlc.types.non_null(UserConnection),\n        graphql_name=\"participants\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    permalink = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"permalink\")\n    potential_merge_commit = sgqlc.types.Field(\n        Commit, graphql_name=\"potentialMergeCommit\"\n    )\n    project_cards = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectCardConnection),\n        graphql_name=\"projectCards\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"archived_states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(ProjectCardArchivedState),\n                        graphql_name=\"archivedStates\",\n                        default=(\"ARCHIVED\", \"NOT_ARCHIVED\"),\n                    ),\n                ),\n            )\n        ),\n    )\n    project_items = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2ItemConnection),\n        graphql_name=\"projectItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"include_archived\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"includeArchived\", default=True\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    project_next_items = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextItemConnection),\n        graphql_name=\"projectNextItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"include_archived\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"includeArchived\", default=True\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    revert_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"revertResourcePath\"\n    )\n    revert_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"revertUrl\")\n    review_decision = sgqlc.types.Field(\n        PullRequestReviewDecision, graphql_name=\"reviewDecision\"\n    )\n    review_requests = sgqlc.types.Field(\n        ReviewRequestConnection,\n        graphql_name=\"reviewRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    review_threads = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestReviewThreadConnection),\n        graphql_name=\"reviewThreads\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    reviews = sgqlc.types.Field(\n        PullRequestReviewConnection,\n        graphql_name=\"reviews\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(PullRequestReviewState)\n                        ),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"author\",\n                    sgqlc.types.Arg(String, graphql_name=\"author\", default=None),\n                ),\n            )\n        ),\n    )\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestState), graphql_name=\"state\"\n    )\n    suggested_reviewers = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(SuggestedReviewer)),\n        graphql_name=\"suggestedReviewers\",\n    )\n    timeline = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestTimelineConnection),\n        graphql_name=\"timeline\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"since\",\n                    sgqlc.types.Arg(DateTime, graphql_name=\"since\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    timeline_items = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestTimelineItemsConnection),\n        graphql_name=\"timelineItems\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"since\",\n                    sgqlc.types.Arg(DateTime, graphql_name=\"since\", default=None),\n                ),\n                (\"skip\", sgqlc.types.Arg(Int, graphql_name=\"skip\", default=None)),\n                (\n                    \"item_types\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(PullRequestTimelineItemsItemType)\n                        ),\n                        graphql_name=\"itemTypes\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    title_html = sgqlc.types.Field(sgqlc.types.non_null(HTML), graphql_name=\"titleHTML\")\n    viewer_can_apply_suggestion = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanApplySuggestion\"\n    )\n    viewer_can_delete_head_ref = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanDeleteHeadRef\"\n    )\n    viewer_can_disable_auto_merge = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanDisableAutoMerge\"\n    )\n    viewer_can_edit_files = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanEditFiles\"\n    )\n    viewer_can_enable_auto_merge = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanEnableAutoMerge\"\n    )\n    viewer_can_merge_as_admin = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanMergeAsAdmin\"\n    )\n    viewer_latest_review = sgqlc.types.Field(\n        \"PullRequestReview\", graphql_name=\"viewerLatestReview\"\n    )\n    viewer_latest_review_request = sgqlc.types.Field(\n        \"ReviewRequest\", graphql_name=\"viewerLatestReviewRequest\"\n    )\n    viewer_merge_body_text = sgqlc.types.Field(\n        sgqlc.types.non_null(String),\n        graphql_name=\"viewerMergeBodyText\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"merge_type\",\n                    sgqlc.types.Arg(\n                        PullRequestMergeMethod, graphql_name=\"mergeType\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    viewer_merge_headline_text = sgqlc.types.Field(\n        sgqlc.types.non_null(String),\n        graphql_name=\"viewerMergeHeadlineText\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"merge_type\",\n                    sgqlc.types.Arg(\n                        PullRequestMergeMethod, graphql_name=\"mergeType\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestChangedFile","title":"<code>PullRequestChangedFile</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestChangedFile(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"additions\",\n        \"change_type\",\n        \"deletions\",\n        \"path\",\n        \"viewer_viewed_state\",\n    )\n    additions = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"additions\")\n    change_type = sgqlc.types.Field(\n        sgqlc.types.non_null(PatchStatus), graphql_name=\"changeType\"\n    )\n    deletions = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"deletions\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    viewer_viewed_state = sgqlc.types.Field(\n        sgqlc.types.non_null(FileViewedState), graphql_name=\"viewerViewedState\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestChangedFileConnection","title":"<code>PullRequestChangedFileConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestChangedFileConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestChangedFileEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(PullRequestChangedFile), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestChangedFileEdge","title":"<code>PullRequestChangedFileEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestChangedFileEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(PullRequestChangedFile, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestCommit","title":"<code>PullRequestCommit</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestCommit(sgqlc.types.Type, Node, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"commit\", \"pull_request\")\n    commit = sgqlc.types.Field(sgqlc.types.non_null(Commit), graphql_name=\"commit\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestCommitCommentThread","title":"<code>PullRequestCommitCommentThread</code>","text":"<p>             Bases: <code>Type</code>, <code>RepositoryNode</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestCommitCommentThread(sgqlc.types.Type, RepositoryNode, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"comments\", \"commit\", \"path\", \"position\", \"pull_request\")\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    commit = sgqlc.types.Field(sgqlc.types.non_null(Commit), graphql_name=\"commit\")\n    path = sgqlc.types.Field(String, graphql_name=\"path\")\n    position = sgqlc.types.Field(Int, graphql_name=\"position\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestCommitConnection","title":"<code>PullRequestCommitConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestCommitConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestCommitEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestCommit\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestCommitEdge","title":"<code>PullRequestCommitEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestCommitEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PullRequestCommit\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestConnection","title":"<code>PullRequestConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"PullRequest\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestContributionsByRepository","title":"<code>PullRequestContributionsByRepository</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestContributionsByRepository(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"contributions\", \"repository\")\n    contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(CreatedPullRequestContributionConnection),\n        graphql_name=\"contributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ContributionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestEdge","title":"<code>PullRequestEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PullRequest\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestMergeMethod","title":"<code>PullRequestMergeMethod</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestMergeMethod(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"MERGE\", \"REBASE\", \"SQUASH\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestOrder","title":"<code>PullRequestOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestOrderField","title":"<code>PullRequestOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReview","title":"<code>PullRequestReview</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Comment</code>, <code>Deletable</code>, <code>Updatable</code>, <code>UpdatableComment</code>, <code>Reactable</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReview(\n    sgqlc.types.Type,\n    Node,\n    Comment,\n    Deletable,\n    Updatable,\n    UpdatableComment,\n    Reactable,\n    RepositoryNode,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"author_can_push_to_repository\",\n        \"comments\",\n        \"commit\",\n        \"on_behalf_of\",\n        \"pull_request\",\n        \"resource_path\",\n        \"state\",\n        \"submitted_at\",\n        \"url\",\n    )\n    author_can_push_to_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"authorCanPushToRepository\"\n    )\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestReviewCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    on_behalf_of = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamConnection),\n        graphql_name=\"onBehalfOf\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestReviewState), graphql_name=\"state\"\n    )\n    submitted_at = sgqlc.types.Field(DateTime, graphql_name=\"submittedAt\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewComment","title":"<code>PullRequestReviewComment</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Comment</code>, <code>Deletable</code>, <code>Minimizable</code>, <code>Updatable</code>, <code>UpdatableComment</code>, <code>Reactable</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewComment(\n    sgqlc.types.Type,\n    Node,\n    Comment,\n    Deletable,\n    Minimizable,\n    Updatable,\n    UpdatableComment,\n    Reactable,\n    RepositoryNode,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"commit\",\n        \"diff_hunk\",\n        \"drafted_at\",\n        \"original_commit\",\n        \"original_position\",\n        \"outdated\",\n        \"path\",\n        \"position\",\n        \"pull_request\",\n        \"pull_request_review\",\n        \"reply_to\",\n        \"resource_path\",\n        \"state\",\n        \"url\",\n    )\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    diff_hunk = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"diffHunk\")\n    drafted_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"draftedAt\"\n    )\n    original_commit = sgqlc.types.Field(Commit, graphql_name=\"originalCommit\")\n    original_position = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"originalPosition\"\n    )\n    outdated = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"outdated\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    position = sgqlc.types.Field(Int, graphql_name=\"position\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n    pull_request_review = sgqlc.types.Field(\n        PullRequestReview, graphql_name=\"pullRequestReview\"\n    )\n    reply_to = sgqlc.types.Field(\"PullRequestReviewComment\", graphql_name=\"replyTo\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestReviewCommentState), graphql_name=\"state\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewCommentConnection","title":"<code>PullRequestReviewCommentConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewCommentConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestReviewCommentEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestReviewComment\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewCommentEdge","title":"<code>PullRequestReviewCommentEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewCommentEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PullRequestReviewComment\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewCommentState","title":"<code>PullRequestReviewCommentState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewCommentState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"PENDING\", \"SUBMITTED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewConnection","title":"<code>PullRequestReviewConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestReviewEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestReview\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewContributionsByRepository","title":"<code>PullRequestReviewContributionsByRepository</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewContributionsByRepository(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"contributions\", \"repository\")\n    contributions = sgqlc.types.Field(\n        sgqlc.types.non_null(CreatedPullRequestReviewContributionConnection),\n        graphql_name=\"contributions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ContributionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewDecision","title":"<code>PullRequestReviewDecision</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewDecision(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"APPROVED\", \"CHANGES_REQUESTED\", \"REVIEW_REQUIRED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewEdge","title":"<code>PullRequestReviewEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PullRequestReview\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewEvent","title":"<code>PullRequestReviewEvent</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewEvent(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"APPROVE\", \"COMMENT\", \"DISMISS\", \"REQUEST_CHANGES\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewState","title":"<code>PullRequestReviewState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"APPROVED\", \"CHANGES_REQUESTED\", \"COMMENTED\", \"DISMISSED\", \"PENDING\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewThread","title":"<code>PullRequestReviewThread</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewThread(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"comments\",\n        \"diff_side\",\n        \"is_collapsed\",\n        \"is_outdated\",\n        \"is_resolved\",\n        \"line\",\n        \"original_line\",\n        \"original_start_line\",\n        \"path\",\n        \"pull_request\",\n        \"repository\",\n        \"resolved_by\",\n        \"start_diff_side\",\n        \"start_line\",\n        \"viewer_can_reply\",\n        \"viewer_can_resolve\",\n        \"viewer_can_unresolve\",\n    )\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestReviewCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"skip\", sgqlc.types.Arg(Int, graphql_name=\"skip\", default=None)),\n            )\n        ),\n    )\n    diff_side = sgqlc.types.Field(\n        sgqlc.types.non_null(DiffSide), graphql_name=\"diffSide\"\n    )\n    is_collapsed = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCollapsed\"\n    )\n    is_outdated = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isOutdated\"\n    )\n    is_resolved = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isResolved\"\n    )\n    line = sgqlc.types.Field(Int, graphql_name=\"line\")\n    original_line = sgqlc.types.Field(Int, graphql_name=\"originalLine\")\n    original_start_line = sgqlc.types.Field(Int, graphql_name=\"originalStartLine\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    resolved_by = sgqlc.types.Field(\"User\", graphql_name=\"resolvedBy\")\n    start_diff_side = sgqlc.types.Field(DiffSide, graphql_name=\"startDiffSide\")\n    start_line = sgqlc.types.Field(Int, graphql_name=\"startLine\")\n    viewer_can_reply = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanReply\"\n    )\n    viewer_can_resolve = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanResolve\"\n    )\n    viewer_can_unresolve = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanUnresolve\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewThreadConnection","title":"<code>PullRequestReviewThreadConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewThreadConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestReviewThreadEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestReviewThread\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewThreadEdge","title":"<code>PullRequestReviewThreadEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestReviewThreadEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PullRequestReviewThread\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestRevisionMarker","title":"<code>PullRequestRevisionMarker</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestRevisionMarker(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"created_at\", \"last_seen_commit\", \"pull_request\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    last_seen_commit = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Commit\"), graphql_name=\"lastSeenCommit\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(\"PullRequest\"), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestState","title":"<code>PullRequestState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CLOSED\", \"MERGED\", \"OPEN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTemplate","title":"<code>PullRequestTemplate</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestTemplate(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"body\", \"filename\", \"repository\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    filename = sgqlc.types.Field(String, graphql_name=\"filename\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestThread","title":"<code>PullRequestThread</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestThread(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"comments\",\n        \"diff_side\",\n        \"is_collapsed\",\n        \"is_outdated\",\n        \"is_resolved\",\n        \"line\",\n        \"pull_request\",\n        \"repository\",\n        \"resolved_by\",\n        \"start_diff_side\",\n        \"start_line\",\n        \"viewer_can_reply\",\n        \"viewer_can_resolve\",\n        \"viewer_can_unresolve\",\n    )\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestReviewCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"skip\", sgqlc.types.Arg(Int, graphql_name=\"skip\", default=None)),\n            )\n        ),\n    )\n    diff_side = sgqlc.types.Field(\n        sgqlc.types.non_null(DiffSide), graphql_name=\"diffSide\"\n    )\n    is_collapsed = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCollapsed\"\n    )\n    is_outdated = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isOutdated\"\n    )\n    is_resolved = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isResolved\"\n    )\n    line = sgqlc.types.Field(Int, graphql_name=\"line\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    resolved_by = sgqlc.types.Field(\"User\", graphql_name=\"resolvedBy\")\n    start_diff_side = sgqlc.types.Field(DiffSide, graphql_name=\"startDiffSide\")\n    start_line = sgqlc.types.Field(Int, graphql_name=\"startLine\")\n    viewer_can_reply = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanReply\"\n    )\n    viewer_can_resolve = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanResolve\"\n    )\n    viewer_can_unresolve = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanUnresolve\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineConnection","title":"<code>PullRequestTimelineConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestTimelineConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestTimelineItemEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestTimelineItem\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItem","title":"<code>PullRequestTimelineItem</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestTimelineItem(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (\n        AssignedEvent,\n        BaseRefDeletedEvent,\n        BaseRefForcePushedEvent,\n        ClosedEvent,\n        Commit,\n        CommitCommentThread,\n        CrossReferencedEvent,\n        DemilestonedEvent,\n        DeployedEvent,\n        DeploymentEnvironmentChangedEvent,\n        HeadRefDeletedEvent,\n        HeadRefForcePushedEvent,\n        HeadRefRestoredEvent,\n        IssueComment,\n        LabeledEvent,\n        LockedEvent,\n        MergedEvent,\n        MilestonedEvent,\n        PullRequestReview,\n        PullRequestReviewComment,\n        PullRequestReviewThread,\n        ReferencedEvent,\n        RenamedTitleEvent,\n        ReopenedEvent,\n        ReviewDismissedEvent,\n        ReviewRequestRemovedEvent,\n        ReviewRequestedEvent,\n        SubscribedEvent,\n        UnassignedEvent,\n        UnlabeledEvent,\n        UnlockedEvent,\n        UnsubscribedEvent,\n        UserBlockedEvent,\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItemEdge","title":"<code>PullRequestTimelineItemEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestTimelineItemEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PullRequestTimelineItem\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItems","title":"<code>PullRequestTimelineItems</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestTimelineItems(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (\n        AddedToProjectEvent,\n        AssignedEvent,\n        AutoMergeDisabledEvent,\n        AutoMergeEnabledEvent,\n        AutoRebaseEnabledEvent,\n        AutoSquashEnabledEvent,\n        AutomaticBaseChangeFailedEvent,\n        AutomaticBaseChangeSucceededEvent,\n        BaseRefChangedEvent,\n        BaseRefDeletedEvent,\n        BaseRefForcePushedEvent,\n        ClosedEvent,\n        CommentDeletedEvent,\n        ConnectedEvent,\n        ConvertToDraftEvent,\n        ConvertedNoteToIssueEvent,\n        ConvertedToDiscussionEvent,\n        CrossReferencedEvent,\n        DemilestonedEvent,\n        DeployedEvent,\n        DeploymentEnvironmentChangedEvent,\n        DisconnectedEvent,\n        HeadRefDeletedEvent,\n        HeadRefForcePushedEvent,\n        HeadRefRestoredEvent,\n        IssueComment,\n        LabeledEvent,\n        LockedEvent,\n        MarkedAsDuplicateEvent,\n        MentionedEvent,\n        MergedEvent,\n        MilestonedEvent,\n        MovedColumnsInProjectEvent,\n        PinnedEvent,\n        PullRequestCommit,\n        PullRequestCommitCommentThread,\n        PullRequestReview,\n        PullRequestReviewThread,\n        PullRequestRevisionMarker,\n        ReadyForReviewEvent,\n        ReferencedEvent,\n        RemovedFromProjectEvent,\n        RenamedTitleEvent,\n        ReopenedEvent,\n        ReviewDismissedEvent,\n        ReviewRequestRemovedEvent,\n        ReviewRequestedEvent,\n        SubscribedEvent,\n        TransferredEvent,\n        UnassignedEvent,\n        UnlabeledEvent,\n        UnlockedEvent,\n        UnmarkedAsDuplicateEvent,\n        UnpinnedEvent,\n        UnsubscribedEvent,\n        UserBlockedEvent,\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItemsConnection","title":"<code>PullRequestTimelineItemsConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestTimelineItemsConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"edges\",\n        \"filtered_count\",\n        \"nodes\",\n        \"page_count\",\n        \"page_info\",\n        \"total_count\",\n        \"updated_at\",\n    )\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestTimelineItemsEdge\"), graphql_name=\"edges\"\n    )\n    filtered_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"filteredCount\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PullRequestTimelineItems\"), graphql_name=\"nodes\"\n    )\n    page_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"pageCount\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItemsEdge","title":"<code>PullRequestTimelineItemsEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestTimelineItemsEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PullRequestTimelineItems\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItemsItemType","title":"<code>PullRequestTimelineItemsItemType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestTimelineItemsItemType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ADDED_TO_MERGE_QUEUE_EVENT\",\n        \"ADDED_TO_PROJECT_EVENT\",\n        \"ASSIGNED_EVENT\",\n        \"AUTOMATIC_BASE_CHANGE_FAILED_EVENT\",\n        \"AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT\",\n        \"AUTO_MERGE_DISABLED_EVENT\",\n        \"AUTO_MERGE_ENABLED_EVENT\",\n        \"AUTO_REBASE_ENABLED_EVENT\",\n        \"AUTO_SQUASH_ENABLED_EVENT\",\n        \"BASE_REF_CHANGED_EVENT\",\n        \"BASE_REF_DELETED_EVENT\",\n        \"BASE_REF_FORCE_PUSHED_EVENT\",\n        \"CLOSED_EVENT\",\n        \"COMMENT_DELETED_EVENT\",\n        \"CONNECTED_EVENT\",\n        \"CONVERTED_NOTE_TO_ISSUE_EVENT\",\n        \"CONVERTED_TO_DISCUSSION_EVENT\",\n        \"CONVERT_TO_DRAFT_EVENT\",\n        \"CROSS_REFERENCED_EVENT\",\n        \"DEMILESTONED_EVENT\",\n        \"DEPLOYED_EVENT\",\n        \"DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT\",\n        \"DISCONNECTED_EVENT\",\n        \"HEAD_REF_DELETED_EVENT\",\n        \"HEAD_REF_FORCE_PUSHED_EVENT\",\n        \"HEAD_REF_RESTORED_EVENT\",\n        \"ISSUE_COMMENT\",\n        \"LABELED_EVENT\",\n        \"LOCKED_EVENT\",\n        \"MARKED_AS_DUPLICATE_EVENT\",\n        \"MENTIONED_EVENT\",\n        \"MERGED_EVENT\",\n        \"MILESTONED_EVENT\",\n        \"MOVED_COLUMNS_IN_PROJECT_EVENT\",\n        \"PINNED_EVENT\",\n        \"PULL_REQUEST_COMMIT\",\n        \"PULL_REQUEST_COMMIT_COMMENT_THREAD\",\n        \"PULL_REQUEST_REVIEW\",\n        \"PULL_REQUEST_REVIEW_THREAD\",\n        \"PULL_REQUEST_REVISION_MARKER\",\n        \"READY_FOR_REVIEW_EVENT\",\n        \"REFERENCED_EVENT\",\n        \"REMOVED_FROM_MERGE_QUEUE_EVENT\",\n        \"REMOVED_FROM_PROJECT_EVENT\",\n        \"RENAMED_TITLE_EVENT\",\n        \"REOPENED_EVENT\",\n        \"REVIEW_DISMISSED_EVENT\",\n        \"REVIEW_REQUESTED_EVENT\",\n        \"REVIEW_REQUEST_REMOVED_EVENT\",\n        \"SUBSCRIBED_EVENT\",\n        \"TRANSFERRED_EVENT\",\n        \"UNASSIGNED_EVENT\",\n        \"UNLABELED_EVENT\",\n        \"UNLOCKED_EVENT\",\n        \"UNMARKED_AS_DUPLICATE_EVENT\",\n        \"UNPINNED_EVENT\",\n        \"UNSUBSCRIBED_EVENT\",\n        \"USER_BLOCKED_EVENT\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestUpdateState","title":"<code>PullRequestUpdateState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PullRequestUpdateState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CLOSED\", \"OPEN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Push","title":"<code>Push</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Push(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"next_sha\", \"permalink\", \"previous_sha\", \"pusher\", \"repository\")\n    next_sha = sgqlc.types.Field(GitObjectID, graphql_name=\"nextSha\")\n    permalink = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"permalink\")\n    previous_sha = sgqlc.types.Field(GitObjectID, graphql_name=\"previousSha\")\n    pusher = sgqlc.types.Field(sgqlc.types.non_null(Actor), graphql_name=\"pusher\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PushAllowance","title":"<code>PushAllowance</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PushAllowance(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"branch_protection_rule\")\n    actor = sgqlc.types.Field(\"PushAllowanceActor\", graphql_name=\"actor\")\n    branch_protection_rule = sgqlc.types.Field(\n        BranchProtectionRule, graphql_name=\"branchProtectionRule\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PushAllowanceActor","title":"<code>PushAllowanceActor</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PushAllowanceActor(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (App, Team, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PushAllowanceConnection","title":"<code>PushAllowanceConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PushAllowanceConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PushAllowanceEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"PushAllowance\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PushAllowanceEdge","title":"<code>PushAllowanceEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class PushAllowanceEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"PushAllowance\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Query","title":"<code>Query</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Query(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"code_of_conduct\",\n        \"codes_of_conduct\",\n        \"enterprise\",\n        \"enterprise_administrator_invitation\",\n        \"enterprise_administrator_invitation_by_token\",\n        \"license\",\n        \"licenses\",\n        \"marketplace_categories\",\n        \"marketplace_category\",\n        \"marketplace_listing\",\n        \"marketplace_listings\",\n        \"meta\",\n        \"node\",\n        \"nodes\",\n        \"organization\",\n        \"rate_limit\",\n        \"relay\",\n        \"repository\",\n        \"repository_owner\",\n        \"resource\",\n        \"search\",\n        \"security_advisories\",\n        \"security_advisory\",\n        \"security_vulnerabilities\",\n        \"sponsorables\",\n        \"topic\",\n        \"user\",\n        \"viewer\",\n    )\n    code_of_conduct = sgqlc.types.Field(\n        \"CodeOfConduct\",\n        graphql_name=\"codeOfConduct\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"key\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"key\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    codes_of_conduct = sgqlc.types.Field(\n        sgqlc.types.list_of(\"CodeOfConduct\"), graphql_name=\"codesOfConduct\"\n    )\n    enterprise = sgqlc.types.Field(\n        \"Enterprise\",\n        graphql_name=\"enterprise\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"slug\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"slug\", default=None\n                    ),\n                ),\n                (\n                    \"invitation_token\",\n                    sgqlc.types.Arg(\n                        String, graphql_name=\"invitationToken\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    enterprise_administrator_invitation = sgqlc.types.Field(\n        \"EnterpriseAdministratorInvitation\",\n        graphql_name=\"enterpriseAdministratorInvitation\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"user_login\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"userLogin\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"enterprise_slug\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"enterpriseSlug\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"role\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(EnterpriseAdministratorRole),\n                        graphql_name=\"role\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    enterprise_administrator_invitation_by_token = sgqlc.types.Field(\n        \"EnterpriseAdministratorInvitation\",\n        graphql_name=\"enterpriseAdministratorInvitationByToken\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"invitation_token\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"invitationToken\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    license = sgqlc.types.Field(\n        \"License\",\n        graphql_name=\"license\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"key\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"key\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    licenses = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(\"License\")), graphql_name=\"licenses\"\n    )\n    marketplace_categories = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(\"MarketplaceCategory\"))\n        ),\n        graphql_name=\"marketplaceCategories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"include_categories\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"includeCategories\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"exclude_empty\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"excludeEmpty\", default=None),\n                ),\n                (\n                    \"exclude_subcategories\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"excludeSubcategories\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    marketplace_category = sgqlc.types.Field(\n        \"MarketplaceCategory\",\n        graphql_name=\"marketplaceCategory\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"slug\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"slug\", default=None\n                    ),\n                ),\n                (\n                    \"use_topic_aliases\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"useTopicAliases\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    marketplace_listing = sgqlc.types.Field(\n        \"MarketplaceListing\",\n        graphql_name=\"marketplaceListing\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"slug\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"slug\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    marketplace_listings = sgqlc.types.Field(\n        sgqlc.types.non_null(MarketplaceListingConnection),\n        graphql_name=\"marketplaceListings\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"category_slug\",\n                    sgqlc.types.Arg(String, graphql_name=\"categorySlug\", default=None),\n                ),\n                (\n                    \"use_topic_aliases\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"useTopicAliases\", default=None\n                    ),\n                ),\n                (\n                    \"viewer_can_admin\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"viewerCanAdmin\", default=None\n                    ),\n                ),\n                (\"admin_id\", sgqlc.types.Arg(ID, graphql_name=\"adminId\", default=None)),\n                (\n                    \"organization_id\",\n                    sgqlc.types.Arg(ID, graphql_name=\"organizationId\", default=None),\n                ),\n                (\n                    \"all_states\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"allStates\", default=None),\n                ),\n                (\n                    \"slugs\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String), graphql_name=\"slugs\", default=None\n                    ),\n                ),\n                (\n                    \"primary_category_only\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"primaryCategoryOnly\", default=False\n                    ),\n                ),\n                (\n                    \"with_free_trials_only\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"withFreeTrialsOnly\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    meta = sgqlc.types.Field(sgqlc.types.non_null(GitHubMetadata), graphql_name=\"meta\")\n    node = sgqlc.types.Field(\n        Node,\n        graphql_name=\"node\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(ID), graphql_name=\"id\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(Node)),\n        graphql_name=\"nodes\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(\n                            sgqlc.types.list_of(sgqlc.types.non_null(ID))\n                        ),\n                        graphql_name=\"ids\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    organization = sgqlc.types.Field(\n        \"Organization\",\n        graphql_name=\"organization\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"login\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"login\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    rate_limit = sgqlc.types.Field(\n        \"RateLimit\",\n        graphql_name=\"rateLimit\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"dry_run\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"dryRun\", default=False),\n                ),\n            )\n        ),\n    )\n    relay = sgqlc.types.Field(sgqlc.types.non_null(\"Query\"), graphql_name=\"relay\")\n    repository = sgqlc.types.Field(\n        \"Repository\",\n        graphql_name=\"repository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"owner\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"owner\", default=None\n                    ),\n                ),\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n                (\n                    \"follow_renames\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"followRenames\", default=True\n                    ),\n                ),\n            )\n        ),\n    )\n    repository_owner = sgqlc.types.Field(\n        \"RepositoryOwner\",\n        graphql_name=\"repositoryOwner\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"login\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"login\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    resource = sgqlc.types.Field(\n        \"UniformResourceLocatable\",\n        graphql_name=\"resource\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"url\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(URI), graphql_name=\"url\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    search = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SearchResultItemConnection\"),\n        graphql_name=\"search\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"query\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"query\", default=None\n                    ),\n                ),\n                (\n                    \"type\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(SearchType),\n                        graphql_name=\"type\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    security_advisories = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SecurityAdvisoryConnection\"),\n        graphql_name=\"securityAdvisories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SecurityAdvisoryOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"UPDATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\n                    \"identifier\",\n                    sgqlc.types.Arg(\n                        SecurityAdvisoryIdentifierFilter,\n                        graphql_name=\"identifier\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"published_since\",\n                    sgqlc.types.Arg(\n                        DateTime, graphql_name=\"publishedSince\", default=None\n                    ),\n                ),\n                (\n                    \"updated_since\",\n                    sgqlc.types.Arg(\n                        DateTime, graphql_name=\"updatedSince\", default=None\n                    ),\n                ),\n                (\n                    \"classifications\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(SecurityAdvisoryClassification)\n                        ),\n                        graphql_name=\"classifications\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    security_advisory = sgqlc.types.Field(\n        \"SecurityAdvisory\",\n        graphql_name=\"securityAdvisory\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ghsa_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"ghsaId\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    security_vulnerabilities = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SecurityVulnerabilityConnection\"),\n        graphql_name=\"securityVulnerabilities\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SecurityVulnerabilityOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"UPDATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\n                    \"ecosystem\",\n                    sgqlc.types.Arg(\n                        SecurityAdvisoryEcosystem,\n                        graphql_name=\"ecosystem\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"package\",\n                    sgqlc.types.Arg(String, graphql_name=\"package\", default=None),\n                ),\n                (\n                    \"severities\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(SecurityAdvisorySeverity)\n                        ),\n                        graphql_name=\"severities\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"classifications\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(SecurityAdvisoryClassification)\n                        ),\n                        graphql_name=\"classifications\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    sponsorables = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SponsorableItemConnection\"),\n        graphql_name=\"sponsorables\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorableOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"LOGIN\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\n                    \"only_dependencies\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"onlyDependencies\", default=False\n                    ),\n                ),\n                (\n                    \"org_login_for_dependencies\",\n                    sgqlc.types.Arg(\n                        String, graphql_name=\"orgLoginForDependencies\", default=None\n                    ),\n                ),\n                (\n                    \"dependency_ecosystem\",\n                    sgqlc.types.Arg(\n                        SecurityAdvisoryEcosystem,\n                        graphql_name=\"dependencyEcosystem\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"ecosystem\",\n                    sgqlc.types.Arg(\n                        DependencyGraphEcosystem, graphql_name=\"ecosystem\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    topic = sgqlc.types.Field(\n        \"Topic\",\n        graphql_name=\"topic\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    user = sgqlc.types.Field(\n        \"User\",\n        graphql_name=\"user\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"login\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"login\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    viewer = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"viewer\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RateLimit","title":"<code>RateLimit</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RateLimit(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cost\", \"limit\", \"node_count\", \"remaining\", \"reset_at\", \"used\")\n    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"cost\")\n    limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"limit\")\n    node_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"nodeCount\")\n    remaining = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"remaining\")\n    reset_at = sgqlc.types.Field(sgqlc.types.non_null(DateTime), graphql_name=\"resetAt\")\n    used = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"used\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Reactable","title":"<code>Reactable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Reactable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"database_id\",\n        \"id\",\n        \"reaction_groups\",\n        \"reactions\",\n        \"viewer_can_react\",\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    reaction_groups = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"ReactionGroup\")),\n        graphql_name=\"reactionGroups\",\n    )\n    reactions = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReactionConnection\"),\n        graphql_name=\"reactions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"content\",\n                    sgqlc.types.Arg(\n                        ReactionContent, graphql_name=\"content\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ReactionOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    viewer_can_react = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanReact\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactingUserConnection","title":"<code>ReactingUserConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactingUserConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ReactingUserEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactingUserEdge","title":"<code>ReactingUserEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactingUserEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"reacted_at\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"node\")\n    reacted_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"reactedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Reaction","title":"<code>Reaction</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Reaction(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"content\", \"created_at\", \"database_id\", \"reactable\", \"user\")\n    content = sgqlc.types.Field(\n        sgqlc.types.non_null(ReactionContent), graphql_name=\"content\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    reactable = sgqlc.types.Field(\n        sgqlc.types.non_null(Reactable), graphql_name=\"reactable\"\n    )\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionConnection","title":"<code>ReactionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"edges\",\n        \"nodes\",\n        \"page_info\",\n        \"total_count\",\n        \"viewer_has_reacted\",\n    )\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"ReactionEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Reaction\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n    viewer_has_reacted = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerHasReacted\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionContent","title":"<code>ReactionContent</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactionContent(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"CONFUSED\",\n        \"EYES\",\n        \"HEART\",\n        \"HOORAY\",\n        \"LAUGH\",\n        \"ROCKET\",\n        \"THUMBS_DOWN\",\n        \"THUMBS_UP\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionEdge","title":"<code>ReactionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Reaction\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionGroup","title":"<code>ReactionGroup</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactionGroup(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"content\",\n        \"created_at\",\n        \"reactors\",\n        \"subject\",\n        \"users\",\n        \"viewer_has_reacted\",\n    )\n    content = sgqlc.types.Field(\n        sgqlc.types.non_null(ReactionContent), graphql_name=\"content\"\n    )\n    created_at = sgqlc.types.Field(DateTime, graphql_name=\"createdAt\")\n    reactors = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReactorConnection\"),\n        graphql_name=\"reactors\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    subject = sgqlc.types.Field(sgqlc.types.non_null(Reactable), graphql_name=\"subject\")\n    users = sgqlc.types.Field(\n        sgqlc.types.non_null(ReactingUserConnection),\n        graphql_name=\"users\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    viewer_has_reacted = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerHasReacted\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionOrder","title":"<code>ReactionOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactionOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(ReactionOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionOrderField","title":"<code>ReactionOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactionOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Reactor","title":"<code>Reactor</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Reactor(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Bot, Mannequin, Organization, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactorConnection","title":"<code>ReactorConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactorConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"ReactorEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Reactor\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactorEdge","title":"<code>ReactorEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReactorEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"reacted_at\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(sgqlc.types.non_null(\"Reactor\"), graphql_name=\"node\")\n    reacted_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"reactedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReadyForReviewEvent","title":"<code>ReadyForReviewEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReadyForReviewEvent(sgqlc.types.Type, Node, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Ref","title":"<code>Ref</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Ref(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"associated_pull_requests\",\n        \"branch_protection_rule\",\n        \"name\",\n        \"prefix\",\n        \"ref_update_rule\",\n        \"repository\",\n        \"target\",\n    )\n    associated_pull_requests = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestConnection),\n        graphql_name=\"associatedPullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(PullRequestState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"head_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"headRefName\", default=None),\n                ),\n                (\n                    \"base_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"baseRefName\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    branch_protection_rule = sgqlc.types.Field(\n        BranchProtectionRule, graphql_name=\"branchProtectionRule\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"prefix\")\n    ref_update_rule = sgqlc.types.Field(RefUpdateRule, graphql_name=\"refUpdateRule\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    target = sgqlc.types.Field(GitObject, graphql_name=\"target\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefConnection","title":"<code>RefConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RefConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"RefEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Ref\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefEdge","title":"<code>RefEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RefEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Ref\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefOrder","title":"<code>RefOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RefOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(sgqlc.types.non_null(RefOrderField), graphql_name=\"field\")\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefOrderField","title":"<code>RefOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RefOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALPHABETICAL\", \"TAG_COMMIT_DATE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefUpdateRule","title":"<code>RefUpdateRule</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RefUpdateRule(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"allows_deletions\",\n        \"allows_force_pushes\",\n        \"blocks_creations\",\n        \"pattern\",\n        \"required_approving_review_count\",\n        \"required_status_check_contexts\",\n        \"requires_code_owner_reviews\",\n        \"requires_conversation_resolution\",\n        \"requires_linear_history\",\n        \"requires_signatures\",\n        \"viewer_allowed_to_dismiss_reviews\",\n        \"viewer_can_push\",\n    )\n    allows_deletions = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"allowsDeletions\"\n    )\n    allows_force_pushes = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"allowsForcePushes\"\n    )\n    blocks_creations = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"blocksCreations\"\n    )\n    pattern = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"pattern\")\n    required_approving_review_count = sgqlc.types.Field(\n        Int, graphql_name=\"requiredApprovingReviewCount\"\n    )\n    required_status_check_contexts = sgqlc.types.Field(\n        sgqlc.types.list_of(String), graphql_name=\"requiredStatusCheckContexts\"\n    )\n    requires_code_owner_reviews = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresCodeOwnerReviews\"\n    )\n    requires_conversation_resolution = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresConversationResolution\"\n    )\n    requires_linear_history = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresLinearHistory\"\n    )\n    requires_signatures = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"requiresSignatures\"\n    )\n    viewer_allowed_to_dismiss_reviews = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerAllowedToDismissReviews\"\n    )\n    viewer_can_push = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanPush\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReferencedEvent","title":"<code>ReferencedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReferencedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"commit\",\n        \"commit_repository\",\n        \"created_at\",\n        \"is_cross_repository\",\n        \"is_direct_reference\",\n        \"subject\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    commit_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"commitRepository\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    is_cross_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCrossRepository\"\n    )\n    is_direct_reference = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isDirectReference\"\n    )\n    subject = sgqlc.types.Field(\n        sgqlc.types.non_null(\"ReferencedSubject\"), graphql_name=\"subject\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReferencedSubject","title":"<code>ReferencedSubject</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReferencedSubject(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Issue, PullRequest)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RegenerateEnterpriseIdentityProviderRecoveryCodesInput","title":"<code>RegenerateEnterpriseIdentityProviderRecoveryCodesInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RegenerateEnterpriseIdentityProviderRecoveryCodesInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RegenerateEnterpriseIdentityProviderRecoveryCodesPayload","title":"<code>RegenerateEnterpriseIdentityProviderRecoveryCodesPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RegenerateEnterpriseIdentityProviderRecoveryCodesPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"identity_provider\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    identity_provider = sgqlc.types.Field(\n        \"EnterpriseIdentityProvider\", graphql_name=\"identityProvider\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RegenerateVerifiableDomainTokenInput","title":"<code>RegenerateVerifiableDomainTokenInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RegenerateVerifiableDomainTokenInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RegenerateVerifiableDomainTokenPayload","title":"<code>RegenerateVerifiableDomainTokenPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RegenerateVerifiableDomainTokenPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"verification_token\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    verification_token = sgqlc.types.Field(String, graphql_name=\"verificationToken\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RejectDeploymentsInput","title":"<code>RejectDeploymentsInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RejectDeploymentsInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"workflow_run_id\",\n        \"environment_ids\",\n        \"comment\",\n        \"client_mutation_id\",\n    )\n    workflow_run_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"workflowRunId\"\n    )\n    environment_ids = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),\n        graphql_name=\"environmentIds\",\n    )\n    comment = sgqlc.types.Field(String, graphql_name=\"comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RejectDeploymentsPayload","title":"<code>RejectDeploymentsPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RejectDeploymentsPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"deployments\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    deployments = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"Deployment\")),\n        graphql_name=\"deployments\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Release","title":"<code>Release</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code>, <code>Reactable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Release(sgqlc.types.Type, Node, UniformResourceLocatable, Reactable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"author\",\n        \"created_at\",\n        \"description\",\n        \"description_html\",\n        \"is_draft\",\n        \"is_latest\",\n        \"is_prerelease\",\n        \"mentions\",\n        \"name\",\n        \"published_at\",\n        \"release_assets\",\n        \"repository\",\n        \"short_description_html\",\n        \"tag\",\n        \"tag_commit\",\n        \"tag_name\",\n        \"updated_at\",\n    )\n    author = sgqlc.types.Field(\"User\", graphql_name=\"author\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    description_html = sgqlc.types.Field(HTML, graphql_name=\"descriptionHTML\")\n    is_draft = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isDraft\")\n    is_latest = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isLatest\"\n    )\n    is_prerelease = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPrerelease\"\n    )\n    mentions = sgqlc.types.Field(\n        UserConnection,\n        graphql_name=\"mentions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    published_at = sgqlc.types.Field(DateTime, graphql_name=\"publishedAt\")\n    release_assets = sgqlc.types.Field(\n        sgqlc.types.non_null(ReleaseAssetConnection),\n        graphql_name=\"releaseAssets\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"name\", sgqlc.types.Arg(String, graphql_name=\"name\", default=None)),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    short_description_html = sgqlc.types.Field(\n        HTML,\n        graphql_name=\"shortDescriptionHTML\",\n        args=sgqlc.types.ArgDict(\n            ((\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=200)),)\n        ),\n    )\n    tag = sgqlc.types.Field(Ref, graphql_name=\"tag\")\n    tag_commit = sgqlc.types.Field(Commit, graphql_name=\"tagCommit\")\n    tag_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"tagName\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseAsset","title":"<code>ReleaseAsset</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReleaseAsset(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"content_type\",\n        \"created_at\",\n        \"download_count\",\n        \"download_url\",\n        \"name\",\n        \"release\",\n        \"size\",\n        \"updated_at\",\n        \"uploaded_by\",\n        \"url\",\n    )\n    content_type = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"contentType\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    download_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"downloadCount\"\n    )\n    download_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"downloadUrl\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    release = sgqlc.types.Field(Release, graphql_name=\"release\")\n    size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"size\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    uploaded_by = sgqlc.types.Field(\n        sgqlc.types.non_null(\"User\"), graphql_name=\"uploadedBy\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseAssetConnection","title":"<code>ReleaseAssetConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReleaseAssetConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ReleaseAssetEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"ReleaseAsset\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseAssetEdge","title":"<code>ReleaseAssetEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReleaseAssetEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ReleaseAsset\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseConnection","title":"<code>ReleaseConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReleaseConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"ReleaseEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Release\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseEdge","title":"<code>ReleaseEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReleaseEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Release\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseOrder","title":"<code>ReleaseOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReleaseOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(ReleaseOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseOrderField","title":"<code>ReleaseOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReleaseOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"NAME\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveAssigneesFromAssignableInput","title":"<code>RemoveAssigneesFromAssignableInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveAssigneesFromAssignableInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"assignable_id\", \"assignee_ids\", \"client_mutation_id\")\n    assignable_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"assignableId\"\n    )\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),\n        graphql_name=\"assigneeIds\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveAssigneesFromAssignablePayload","title":"<code>RemoveAssigneesFromAssignablePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveAssigneesFromAssignablePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"assignable\", \"client_mutation_id\")\n    assignable = sgqlc.types.Field(Assignable, graphql_name=\"assignable\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseAdminInput","title":"<code>RemoveEnterpriseAdminInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveEnterpriseAdminInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"login\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseAdminPayload","title":"<code>RemoveEnterpriseAdminPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveEnterpriseAdminPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"admin\", \"client_mutation_id\", \"enterprise\", \"message\", \"viewer\")\n    admin = sgqlc.types.Field(\"User\", graphql_name=\"admin\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n    viewer = sgqlc.types.Field(\"User\", graphql_name=\"viewer\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseIdentityProviderInput","title":"<code>RemoveEnterpriseIdentityProviderInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveEnterpriseIdentityProviderInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseIdentityProviderPayload","title":"<code>RemoveEnterpriseIdentityProviderPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveEnterpriseIdentityProviderPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"identity_provider\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    identity_provider = sgqlc.types.Field(\n        \"EnterpriseIdentityProvider\", graphql_name=\"identityProvider\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseOrganizationInput","title":"<code>RemoveEnterpriseOrganizationInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveEnterpriseOrganizationInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"organization_id\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseOrganizationPayload","title":"<code>RemoveEnterpriseOrganizationPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveEnterpriseOrganizationPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"organization\", \"viewer\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    organization = sgqlc.types.Field(\"Organization\", graphql_name=\"organization\")\n    viewer = sgqlc.types.Field(\"User\", graphql_name=\"viewer\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseSupportEntitlementInput","title":"<code>RemoveEnterpriseSupportEntitlementInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveEnterpriseSupportEntitlementInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"login\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseSupportEntitlementPayload","title":"<code>RemoveEnterpriseSupportEntitlementPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveEnterpriseSupportEntitlementPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveLabelsFromLabelableInput","title":"<code>RemoveLabelsFromLabelableInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveLabelsFromLabelableInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"labelable_id\", \"label_ids\", \"client_mutation_id\")\n    labelable_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"labelableId\"\n    )\n    label_ids = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),\n        graphql_name=\"labelIds\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveLabelsFromLabelablePayload","title":"<code>RemoveLabelsFromLabelablePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveLabelsFromLabelablePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"labelable\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    labelable = sgqlc.types.Field(Labelable, graphql_name=\"labelable\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveOutsideCollaboratorInput","title":"<code>RemoveOutsideCollaboratorInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveOutsideCollaboratorInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"user_id\", \"organization_id\", \"client_mutation_id\")\n    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"userId\")\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveOutsideCollaboratorPayload","title":"<code>RemoveOutsideCollaboratorPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveOutsideCollaboratorPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"removed_user\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    removed_user = sgqlc.types.Field(\"User\", graphql_name=\"removedUser\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveReactionInput","title":"<code>RemoveReactionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveReactionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"subject_id\", \"content\", \"client_mutation_id\")\n    subject_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"subjectId\")\n    content = sgqlc.types.Field(\n        sgqlc.types.non_null(ReactionContent), graphql_name=\"content\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveReactionPayload","title":"<code>RemoveReactionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveReactionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"reaction\", \"subject\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    reaction = sgqlc.types.Field(\"Reaction\", graphql_name=\"reaction\")\n    subject = sgqlc.types.Field(Reactable, graphql_name=\"subject\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveStarInput","title":"<code>RemoveStarInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveStarInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"starrable_id\", \"client_mutation_id\")\n    starrable_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"starrableId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveStarPayload","title":"<code>RemoveStarPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveStarPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"starrable\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    starrable = sgqlc.types.Field(\"Starrable\", graphql_name=\"starrable\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveUpvoteInput","title":"<code>RemoveUpvoteInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveUpvoteInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"subject_id\", \"client_mutation_id\")\n    subject_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"subjectId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveUpvotePayload","title":"<code>RemoveUpvotePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemoveUpvotePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"subject\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    subject = sgqlc.types.Field(\"Votable\", graphql_name=\"subject\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemovedFromProjectEvent","title":"<code>RemovedFromProjectEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RemovedFromProjectEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"database_id\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RenamedTitleEvent","title":"<code>RenamedTitleEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RenamedTitleEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"current_title\",\n        \"previous_title\",\n        \"subject\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    current_title = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"currentTitle\"\n    )\n    previous_title = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"previousTitle\"\n    )\n    subject = sgqlc.types.Field(\n        sgqlc.types.non_null(\"RenamedTitleSubject\"), graphql_name=\"subject\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RenamedTitleSubject","title":"<code>RenamedTitleSubject</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RenamedTitleSubject(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Issue, PullRequest)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenIssueInput","title":"<code>ReopenIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReopenIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"issue_id\", \"client_mutation_id\")\n    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"issueId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenIssuePayload","title":"<code>ReopenIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReopenIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"issue\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    issue = sgqlc.types.Field(\"Issue\", graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenPullRequestInput","title":"<code>ReopenPullRequestInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReopenPullRequestInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_id\", \"client_mutation_id\")\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenPullRequestPayload","title":"<code>ReopenPullRequestPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReopenPullRequestPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenedEvent","title":"<code>ReopenedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReopenedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"closable\", \"created_at\", \"state_reason\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    closable = sgqlc.types.Field(\n        sgqlc.types.non_null(Closable), graphql_name=\"closable\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    state_reason = sgqlc.types.Field(IssueStateReason, graphql_name=\"stateReason\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAccessAuditEntry","title":"<code>RepoAccessAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoAccessAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"visibility\",)\n    visibility = sgqlc.types.Field(\n        RepoAccessAuditEntryVisibility, graphql_name=\"visibility\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAccessAuditEntryVisibility","title":"<code>RepoAccessAuditEntryVisibility</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoAccessAuditEntryVisibility(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"INTERNAL\", \"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAddMemberAuditEntry","title":"<code>RepoAddMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoAddMemberAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"visibility\",)\n    visibility = sgqlc.types.Field(\n        RepoAddMemberAuditEntryVisibility, graphql_name=\"visibility\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAddMemberAuditEntryVisibility","title":"<code>RepoAddMemberAuditEntryVisibility</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoAddMemberAuditEntryVisibility(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"INTERNAL\", \"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAddTopicAuditEntry","title":"<code>RepoAddTopicAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>RepositoryAuditEntryData</code>, <code>OrganizationAuditEntryData</code>, <code>TopicAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoAddTopicAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    RepositoryAuditEntryData,\n    OrganizationAuditEntryData,\n    TopicAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoArchivedAuditEntry","title":"<code>RepoArchivedAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>RepositoryAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoArchivedAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    RepositoryAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"visibility\",)\n    visibility = sgqlc.types.Field(\n        RepoArchivedAuditEntryVisibility, graphql_name=\"visibility\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoArchivedAuditEntryVisibility","title":"<code>RepoArchivedAuditEntryVisibility</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoArchivedAuditEntryVisibility(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"INTERNAL\", \"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoChangeMergeSettingAuditEntry","title":"<code>RepoChangeMergeSettingAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>RepositoryAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoChangeMergeSettingAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    RepositoryAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_enabled\", \"merge_type\")\n    is_enabled = sgqlc.types.Field(Boolean, graphql_name=\"isEnabled\")\n    merge_type = sgqlc.types.Field(\n        RepoChangeMergeSettingAuditEntryMergeType, graphql_name=\"mergeType\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoChangeMergeSettingAuditEntryMergeType","title":"<code>RepoChangeMergeSettingAuditEntryMergeType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoChangeMergeSettingAuditEntryMergeType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"MERGE\", \"REBASE\", \"SQUASH\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigDisableAnonymousGitAccessAuditEntry","title":"<code>RepoConfigDisableAnonymousGitAccessAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigDisableAnonymousGitAccessAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigDisableCollaboratorsOnlyAuditEntry","title":"<code>RepoConfigDisableCollaboratorsOnlyAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigDisableCollaboratorsOnlyAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigDisableContributorsOnlyAuditEntry","title":"<code>RepoConfigDisableContributorsOnlyAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigDisableContributorsOnlyAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigDisableSockpuppetDisallowedAuditEntry","title":"<code>RepoConfigDisableSockpuppetDisallowedAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigDisableSockpuppetDisallowedAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigEnableAnonymousGitAccessAuditEntry","title":"<code>RepoConfigEnableAnonymousGitAccessAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigEnableAnonymousGitAccessAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigEnableCollaboratorsOnlyAuditEntry","title":"<code>RepoConfigEnableCollaboratorsOnlyAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigEnableCollaboratorsOnlyAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigEnableContributorsOnlyAuditEntry","title":"<code>RepoConfigEnableContributorsOnlyAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigEnableContributorsOnlyAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigEnableSockpuppetDisallowedAuditEntry","title":"<code>RepoConfigEnableSockpuppetDisallowedAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigEnableSockpuppetDisallowedAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigLockAnonymousGitAccessAuditEntry","title":"<code>RepoConfigLockAnonymousGitAccessAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigLockAnonymousGitAccessAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigUnlockAnonymousGitAccessAuditEntry","title":"<code>RepoConfigUnlockAnonymousGitAccessAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoConfigUnlockAnonymousGitAccessAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoCreateAuditEntry","title":"<code>RepoCreateAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>RepositoryAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoCreateAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    RepositoryAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"fork_parent_name\", \"fork_source_name\", \"visibility\")\n    fork_parent_name = sgqlc.types.Field(String, graphql_name=\"forkParentName\")\n    fork_source_name = sgqlc.types.Field(String, graphql_name=\"forkSourceName\")\n    visibility = sgqlc.types.Field(\n        RepoCreateAuditEntryVisibility, graphql_name=\"visibility\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoCreateAuditEntryVisibility","title":"<code>RepoCreateAuditEntryVisibility</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoCreateAuditEntryVisibility(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"INTERNAL\", \"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoDestroyAuditEntry","title":"<code>RepoDestroyAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>RepositoryAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoDestroyAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    RepositoryAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"visibility\",)\n    visibility = sgqlc.types.Field(\n        RepoDestroyAuditEntryVisibility, graphql_name=\"visibility\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoDestroyAuditEntryVisibility","title":"<code>RepoDestroyAuditEntryVisibility</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoDestroyAuditEntryVisibility(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"INTERNAL\", \"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoRemoveMemberAuditEntry","title":"<code>RepoRemoveMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoRemoveMemberAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"visibility\",)\n    visibility = sgqlc.types.Field(\n        RepoRemoveMemberAuditEntryVisibility, graphql_name=\"visibility\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoRemoveMemberAuditEntryVisibility","title":"<code>RepoRemoveMemberAuditEntryVisibility</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoRemoveMemberAuditEntryVisibility(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"INTERNAL\", \"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoRemoveTopicAuditEntry","title":"<code>RepoRemoveTopicAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>RepositoryAuditEntryData</code>, <code>OrganizationAuditEntryData</code>, <code>TopicAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepoRemoveTopicAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    RepositoryAuditEntryData,\n    OrganizationAuditEntryData,\n    TopicAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReportedContentClassifiers","title":"<code>ReportedContentClassifiers</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReportedContentClassifiers(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ABUSE\", \"DUPLICATE\", \"OFF_TOPIC\", \"OUTDATED\", \"RESOLVED\", \"SPAM\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Repository","title":"<code>Repository</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>ProjectV2Recent</code>, <code>ProjectOwner</code>, <code>PackageOwner</code>, <code>Subscribable</code>, <code>Starrable</code>, <code>UniformResourceLocatable</code>, <code>RepositoryInfo</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Repository(\n    sgqlc.types.Type,\n    Node,\n    ProjectV2Recent,\n    ProjectOwner,\n    PackageOwner,\n    Subscribable,\n    Starrable,\n    UniformResourceLocatable,\n    RepositoryInfo,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"allow_update_branch\",\n        \"assignable_users\",\n        \"auto_merge_allowed\",\n        \"branch_protection_rules\",\n        \"code_of_conduct\",\n        \"codeowners\",\n        \"collaborators\",\n        \"commit_comments\",\n        \"contact_links\",\n        \"database_id\",\n        \"default_branch_ref\",\n        \"delete_branch_on_merge\",\n        \"deploy_keys\",\n        \"deployments\",\n        \"discussion\",\n        \"discussion_categories\",\n        \"discussion_category\",\n        \"discussions\",\n        \"disk_usage\",\n        \"environment\",\n        \"environments\",\n        \"forking_allowed\",\n        \"forks\",\n        \"funding_links\",\n        \"interaction_ability\",\n        \"is_blank_issues_enabled\",\n        \"is_disabled\",\n        \"is_empty\",\n        \"is_security_policy_enabled\",\n        \"is_user_configuration_repository\",\n        \"issue\",\n        \"issue_or_pull_request\",\n        \"issue_templates\",\n        \"issues\",\n        \"label\",\n        \"labels\",\n        \"languages\",\n        \"latest_release\",\n        \"mentionable_users\",\n        \"merge_commit_allowed\",\n        \"merge_commit_message\",\n        \"merge_commit_title\",\n        \"milestone\",\n        \"milestones\",\n        \"object\",\n        \"parent\",\n        \"pinned_discussions\",\n        \"pinned_issues\",\n        \"primary_language\",\n        \"project_next\",\n        \"project_v2\",\n        \"projects_next\",\n        \"projects_v2\",\n        \"pull_request\",\n        \"pull_request_templates\",\n        \"pull_requests\",\n        \"rebase_merge_allowed\",\n        \"ref\",\n        \"refs\",\n        \"release\",\n        \"releases\",\n        \"repository_topics\",\n        \"security_policy_url\",\n        \"squash_merge_allowed\",\n        \"squash_merge_commit_message\",\n        \"squash_merge_commit_title\",\n        \"squash_pr_title_used_as_default\",\n        \"ssh_url\",\n        \"submodules\",\n        \"temp_clone_token\",\n        \"template_repository\",\n        \"viewer_can_administer\",\n        \"viewer_can_update_topics\",\n        \"viewer_default_commit_email\",\n        \"viewer_default_merge_method\",\n        \"viewer_permission\",\n        \"viewer_possible_commit_emails\",\n        \"vulnerability_alerts\",\n        \"watchers\",\n        \"web_commit_signoff_required\",\n    )\n    allow_update_branch = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"allowUpdateBranch\"\n    )\n    assignable_users = sgqlc.types.Field(\n        sgqlc.types.non_null(UserConnection),\n        graphql_name=\"assignableUsers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    auto_merge_allowed = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"autoMergeAllowed\"\n    )\n    branch_protection_rules = sgqlc.types.Field(\n        sgqlc.types.non_null(BranchProtectionRuleConnection),\n        graphql_name=\"branchProtectionRules\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    code_of_conduct = sgqlc.types.Field(CodeOfConduct, graphql_name=\"codeOfConduct\")\n    codeowners = sgqlc.types.Field(\n        RepositoryCodeowners,\n        graphql_name=\"codeowners\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"refName\", default=None),\n                ),\n            )\n        ),\n    )\n    collaborators = sgqlc.types.Field(\n        RepositoryCollaboratorConnection,\n        graphql_name=\"collaborators\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"affiliation\",\n                    sgqlc.types.Arg(\n                        CollaboratorAffiliation,\n                        graphql_name=\"affiliation\",\n                        default=None,\n                    ),\n                ),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    commit_comments = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitCommentConnection),\n        graphql_name=\"commitComments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    contact_links = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(RepositoryContactLink)),\n        graphql_name=\"contactLinks\",\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    default_branch_ref = sgqlc.types.Field(Ref, graphql_name=\"defaultBranchRef\")\n    delete_branch_on_merge = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"deleteBranchOnMerge\"\n    )\n    deploy_keys = sgqlc.types.Field(\n        sgqlc.types.non_null(DeployKeyConnection),\n        graphql_name=\"deployKeys\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    deployments = sgqlc.types.Field(\n        sgqlc.types.non_null(DeploymentConnection),\n        graphql_name=\"deployments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"environments\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"environments\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        DeploymentOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    discussion = sgqlc.types.Field(\n        Discussion,\n        graphql_name=\"discussion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    discussion_categories = sgqlc.types.Field(\n        sgqlc.types.non_null(DiscussionCategoryConnection),\n        graphql_name=\"discussionCategories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"filter_by_assignable\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"filterByAssignable\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n    discussion_category = sgqlc.types.Field(\n        DiscussionCategory,\n        graphql_name=\"discussionCategory\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"slug\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"slug\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    discussions = sgqlc.types.Field(\n        sgqlc.types.non_null(DiscussionConnection),\n        graphql_name=\"discussions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"category_id\",\n                    sgqlc.types.Arg(ID, graphql_name=\"categoryId\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        DiscussionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"UPDATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    disk_usage = sgqlc.types.Field(Int, graphql_name=\"diskUsage\")\n    environment = sgqlc.types.Field(\n        Environment,\n        graphql_name=\"environment\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    environments = sgqlc.types.Field(\n        sgqlc.types.non_null(EnvironmentConnection),\n        graphql_name=\"environments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    forking_allowed = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"forkingAllowed\"\n    )\n    forks = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryConnection),\n        graphql_name=\"forks\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"privacy\",\n                    sgqlc.types.Arg(\n                        RepositoryPrivacy, graphql_name=\"privacy\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\n                    \"affiliations\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryAffiliation),\n                        graphql_name=\"affiliations\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"owner_affiliations\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryAffiliation),\n                        graphql_name=\"ownerAffiliations\",\n                        default=(\"OWNER\", \"COLLABORATOR\"),\n                    ),\n                ),\n                (\n                    \"is_locked\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isLocked\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    funding_links = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(FundingLink))),\n        graphql_name=\"fundingLinks\",\n    )\n    interaction_ability = sgqlc.types.Field(\n        RepositoryInteractionAbility, graphql_name=\"interactionAbility\"\n    )\n    is_blank_issues_enabled = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isBlankIssuesEnabled\"\n    )\n    is_disabled = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isDisabled\"\n    )\n    is_empty = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isEmpty\")\n    is_security_policy_enabled = sgqlc.types.Field(\n        Boolean, graphql_name=\"isSecurityPolicyEnabled\"\n    )\n    is_user_configuration_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isUserConfigurationRepository\"\n    )\n    issue = sgqlc.types.Field(\n        Issue,\n        graphql_name=\"issue\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    issue_or_pull_request = sgqlc.types.Field(\n        \"IssueOrPullRequest\",\n        graphql_name=\"issueOrPullRequest\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    issue_templates = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(IssueTemplate)),\n        graphql_name=\"issueTemplates\",\n    )\n    issues = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueConnection),\n        graphql_name=\"issues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(IssueState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"filter_by\",\n                    sgqlc.types.Arg(\n                        IssueFilters, graphql_name=\"filterBy\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    label = sgqlc.types.Field(\n        Label,\n        graphql_name=\"label\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    labels = sgqlc.types.Field(\n        LabelConnection,\n        graphql_name=\"labels\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        LabelOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"ASC\"},\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n            )\n        ),\n    )\n    languages = sgqlc.types.Field(\n        LanguageConnection,\n        graphql_name=\"languages\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        LanguageOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    latest_release = sgqlc.types.Field(Release, graphql_name=\"latestRelease\")\n    mentionable_users = sgqlc.types.Field(\n        sgqlc.types.non_null(UserConnection),\n        graphql_name=\"mentionableUsers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    merge_commit_allowed = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"mergeCommitAllowed\"\n    )\n    merge_commit_message = sgqlc.types.Field(\n        sgqlc.types.non_null(MergeCommitMessage), graphql_name=\"mergeCommitMessage\"\n    )\n    merge_commit_title = sgqlc.types.Field(\n        sgqlc.types.non_null(MergeCommitTitle), graphql_name=\"mergeCommitTitle\"\n    )\n    milestone = sgqlc.types.Field(\n        Milestone,\n        graphql_name=\"milestone\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    milestones = sgqlc.types.Field(\n        MilestoneConnection,\n        graphql_name=\"milestones\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(MilestoneState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        MilestoneOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n            )\n        ),\n    )\n    object = sgqlc.types.Field(\n        GitObject,\n        graphql_name=\"object\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"oid\", sgqlc.types.Arg(GitObjectID, graphql_name=\"oid\", default=None)),\n                (\n                    \"expression\",\n                    sgqlc.types.Arg(String, graphql_name=\"expression\", default=None),\n                ),\n            )\n        ),\n    )\n    parent = sgqlc.types.Field(\"Repository\", graphql_name=\"parent\")\n    pinned_discussions = sgqlc.types.Field(\n        sgqlc.types.non_null(PinnedDiscussionConnection),\n        graphql_name=\"pinnedDiscussions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pinned_issues = sgqlc.types.Field(\n        PinnedIssueConnection,\n        graphql_name=\"pinnedIssues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    primary_language = sgqlc.types.Field(Language, graphql_name=\"primaryLanguage\")\n    project_next = sgqlc.types.Field(\n        ProjectNext,\n        graphql_name=\"projectNext\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    project_v2 = sgqlc.types.Field(\n        ProjectV2,\n        graphql_name=\"projectV2\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    projects_next = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectNextConnection),\n        graphql_name=\"projectsNext\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"sort_by\",\n                    sgqlc.types.Arg(\n                        ProjectNextOrderField, graphql_name=\"sortBy\", default=\"TITLE\"\n                    ),\n                ),\n            )\n        ),\n    )\n    projects_v2 = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2Connection),\n        graphql_name=\"projectsV2\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        ProjectV2Order,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"NUMBER\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    pull_request = sgqlc.types.Field(\n        PullRequest,\n        graphql_name=\"pullRequest\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    pull_request_templates = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(PullRequestTemplate)),\n        graphql_name=\"pullRequestTemplates\",\n    )\n    pull_requests = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestConnection),\n        graphql_name=\"pullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(PullRequestState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"head_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"headRefName\", default=None),\n                ),\n                (\n                    \"base_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"baseRefName\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    rebase_merge_allowed = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"rebaseMergeAllowed\"\n    )\n    ref = sgqlc.types.Field(\n        Ref,\n        graphql_name=\"ref\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"qualified_name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"qualifiedName\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    refs = sgqlc.types.Field(\n        RefConnection,\n        graphql_name=\"refs\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"ref_prefix\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"refPrefix\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"direction\",\n                    sgqlc.types.Arg(\n                        OrderDirection, graphql_name=\"direction\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(RefOrder, graphql_name=\"orderBy\", default=None),\n                ),\n            )\n        ),\n    )\n    release = sgqlc.types.Field(\n        Release,\n        graphql_name=\"release\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"tag_name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"tagName\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    releases = sgqlc.types.Field(\n        sgqlc.types.non_null(ReleaseConnection),\n        graphql_name=\"releases\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(ReleaseOrder, graphql_name=\"orderBy\", default=None),\n                ),\n            )\n        ),\n    )\n    repository_topics = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryTopicConnection),\n        graphql_name=\"repositoryTopics\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    security_policy_url = sgqlc.types.Field(URI, graphql_name=\"securityPolicyUrl\")\n    squash_merge_allowed = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"squashMergeAllowed\"\n    )\n    squash_merge_commit_message = sgqlc.types.Field(\n        sgqlc.types.non_null(SquashMergeCommitMessage),\n        graphql_name=\"squashMergeCommitMessage\",\n    )\n    squash_merge_commit_title = sgqlc.types.Field(\n        sgqlc.types.non_null(SquashMergeCommitTitle),\n        graphql_name=\"squashMergeCommitTitle\",\n    )\n    squash_pr_title_used_as_default = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"squashPrTitleUsedAsDefault\"\n    )\n    ssh_url = sgqlc.types.Field(\n        sgqlc.types.non_null(GitSSHRemote), graphql_name=\"sshUrl\"\n    )\n    submodules = sgqlc.types.Field(\n        sgqlc.types.non_null(SubmoduleConnection),\n        graphql_name=\"submodules\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    temp_clone_token = sgqlc.types.Field(String, graphql_name=\"tempCloneToken\")\n    template_repository = sgqlc.types.Field(\n        \"Repository\", graphql_name=\"templateRepository\"\n    )\n    viewer_can_administer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanAdminister\"\n    )\n    viewer_can_update_topics = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanUpdateTopics\"\n    )\n    viewer_default_commit_email = sgqlc.types.Field(\n        String, graphql_name=\"viewerDefaultCommitEmail\"\n    )\n    viewer_default_merge_method = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestMergeMethod),\n        graphql_name=\"viewerDefaultMergeMethod\",\n    )\n    viewer_permission = sgqlc.types.Field(\n        RepositoryPermission, graphql_name=\"viewerPermission\"\n    )\n    viewer_possible_commit_emails = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n        graphql_name=\"viewerPossibleCommitEmails\",\n    )\n    vulnerability_alerts = sgqlc.types.Field(\n        RepositoryVulnerabilityAlertConnection,\n        graphql_name=\"vulnerabilityAlerts\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(RepositoryVulnerabilityAlertState)\n                        ),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"dependency_scopes\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(\n                                RepositoryVulnerabilityAlertDependencyScope\n                            )\n                        ),\n                        graphql_name=\"dependencyScopes\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    watchers = sgqlc.types.Field(\n        sgqlc.types.non_null(UserConnection),\n        graphql_name=\"watchers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    web_commit_signoff_required = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"webCommitSignoffRequired\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryAffiliation","title":"<code>RepositoryAffiliation</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryAffiliation(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"COLLABORATOR\", \"ORGANIZATION_MEMBER\", \"OWNER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryAuditEntryData","title":"<code>RepositoryAuditEntryData</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryAuditEntryData(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository\",\n        \"repository_name\",\n        \"repository_resource_path\",\n        \"repository_url\",\n    )\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n    repository_name = sgqlc.types.Field(String, graphql_name=\"repositoryName\")\n    repository_resource_path = sgqlc.types.Field(\n        URI, graphql_name=\"repositoryResourcePath\"\n    )\n    repository_url = sgqlc.types.Field(URI, graphql_name=\"repositoryUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryCodeowners","title":"<code>RepositoryCodeowners</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryCodeowners(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"errors\",)\n    errors = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(\"RepositoryCodeownersError\"))\n        ),\n        graphql_name=\"errors\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryCodeownersError","title":"<code>RepositoryCodeownersError</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryCodeownersError(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"column\",\n        \"kind\",\n        \"line\",\n        \"message\",\n        \"path\",\n        \"source\",\n        \"suggestion\",\n    )\n    column = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"column\")\n    kind = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"kind\")\n    line = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"line\")\n    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"message\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    source = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"source\")\n    suggestion = sgqlc.types.Field(String, graphql_name=\"suggestion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryCollaboratorConnection","title":"<code>RepositoryCollaboratorConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryCollaboratorConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryCollaboratorEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryCollaboratorEdge","title":"<code>RepositoryCollaboratorEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryCollaboratorEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"permission\", \"permission_sources\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"node\")\n    permission = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryPermission), graphql_name=\"permission\"\n    )\n    permission_sources = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(PermissionSource)),\n        graphql_name=\"permissionSources\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryConnection","title":"<code>RepositoryConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\", \"total_disk_usage\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Repository\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n    total_disk_usage = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalDiskUsage\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryContactLink","title":"<code>RepositoryContactLink</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryContactLink(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"about\", \"name\", \"url\")\n    about = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"about\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryContributionType","title":"<code>RepositoryContributionType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryContributionType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"COMMIT\",\n        \"ISSUE\",\n        \"PULL_REQUEST\",\n        \"PULL_REQUEST_REVIEW\",\n        \"REPOSITORY\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryDiscussionAuthor","title":"<code>RepositoryDiscussionAuthor</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryDiscussionAuthor(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_discussions\",)\n    repository_discussions = sgqlc.types.Field(\n        sgqlc.types.non_null(DiscussionConnection),\n        graphql_name=\"repositoryDiscussions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        DiscussionOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\n                    \"repository_id\",\n                    sgqlc.types.Arg(ID, graphql_name=\"repositoryId\", default=None),\n                ),\n                (\n                    \"answered\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"answered\", default=None),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryDiscussionCommentAuthor","title":"<code>RepositoryDiscussionCommentAuthor</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryDiscussionCommentAuthor(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_discussion_comments\",)\n    repository_discussion_comments = sgqlc.types.Field(\n        sgqlc.types.non_null(DiscussionCommentConnection),\n        graphql_name=\"repositoryDiscussionComments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"repository_id\",\n                    sgqlc.types.Arg(ID, graphql_name=\"repositoryId\", default=None),\n                ),\n                (\n                    \"only_answers\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"onlyAnswers\", default=False),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryEdge","title":"<code>RepositoryEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Repository\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInfo","title":"<code>RepositoryInfo</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInfo(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"description\",\n        \"description_html\",\n        \"fork_count\",\n        \"has_issues_enabled\",\n        \"has_projects_enabled\",\n        \"has_wiki_enabled\",\n        \"homepage_url\",\n        \"is_archived\",\n        \"is_fork\",\n        \"is_in_organization\",\n        \"is_locked\",\n        \"is_mirror\",\n        \"is_private\",\n        \"is_template\",\n        \"license_info\",\n        \"lock_reason\",\n        \"mirror_url\",\n        \"name\",\n        \"name_with_owner\",\n        \"open_graph_image_url\",\n        \"owner\",\n        \"pushed_at\",\n        \"resource_path\",\n        \"short_description_html\",\n        \"updated_at\",\n        \"url\",\n        \"uses_custom_open_graph_image\",\n        \"visibility\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    description_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"descriptionHTML\"\n    )\n    fork_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"forkCount\")\n    has_issues_enabled = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasIssuesEnabled\"\n    )\n    has_projects_enabled = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasProjectsEnabled\"\n    )\n    has_wiki_enabled = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasWikiEnabled\"\n    )\n    homepage_url = sgqlc.types.Field(URI, graphql_name=\"homepageUrl\")\n    is_archived = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isArchived\"\n    )\n    is_fork = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"isFork\")\n    is_in_organization = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isInOrganization\"\n    )\n    is_locked = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isLocked\"\n    )\n    is_mirror = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isMirror\"\n    )\n    is_private = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPrivate\"\n    )\n    is_template = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isTemplate\"\n    )\n    license_info = sgqlc.types.Field(\"License\", graphql_name=\"licenseInfo\")\n    lock_reason = sgqlc.types.Field(RepositoryLockReason, graphql_name=\"lockReason\")\n    mirror_url = sgqlc.types.Field(URI, graphql_name=\"mirrorUrl\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    name_with_owner = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"nameWithOwner\"\n    )\n    open_graph_image_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"openGraphImageUrl\"\n    )\n    owner = sgqlc.types.Field(\n        sgqlc.types.non_null(\"RepositoryOwner\"), graphql_name=\"owner\"\n    )\n    pushed_at = sgqlc.types.Field(DateTime, graphql_name=\"pushedAt\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    short_description_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML),\n        graphql_name=\"shortDescriptionHTML\",\n        args=sgqlc.types.ArgDict(\n            ((\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=200)),)\n        ),\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    uses_custom_open_graph_image = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"usesCustomOpenGraphImage\"\n    )\n    visibility = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryVisibility), graphql_name=\"visibility\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInteractionAbility","title":"<code>RepositoryInteractionAbility</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInteractionAbility(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"expires_at\", \"limit\", \"origin\")\n    expires_at = sgqlc.types.Field(DateTime, graphql_name=\"expiresAt\")\n    limit = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryInteractionLimit), graphql_name=\"limit\"\n    )\n    origin = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryInteractionLimitOrigin), graphql_name=\"origin\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInteractionLimit","title":"<code>RepositoryInteractionLimit</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInteractionLimit(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"COLLABORATORS_ONLY\",\n        \"CONTRIBUTORS_ONLY\",\n        \"EXISTING_USERS\",\n        \"NO_LIMIT\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInteractionLimitExpiry","title":"<code>RepositoryInteractionLimitExpiry</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInteractionLimitExpiry(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ONE_DAY\", \"ONE_MONTH\", \"ONE_WEEK\", \"SIX_MONTHS\", \"THREE_DAYS\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInteractionLimitOrigin","title":"<code>RepositoryInteractionLimitOrigin</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInteractionLimitOrigin(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ORGANIZATION\", \"REPOSITORY\", \"USER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitation","title":"<code>RepositoryInvitation</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInvitation(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"email\",\n        \"invitee\",\n        \"inviter\",\n        \"permalink\",\n        \"permission\",\n        \"repository\",\n    )\n    email = sgqlc.types.Field(String, graphql_name=\"email\")\n    invitee = sgqlc.types.Field(\"User\", graphql_name=\"invitee\")\n    inviter = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"inviter\")\n    permalink = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"permalink\")\n    permission = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryPermission), graphql_name=\"permission\"\n    )\n    repository = sgqlc.types.Field(RepositoryInfo, graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitationConnection","title":"<code>RepositoryInvitationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInvitationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryInvitationEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryInvitation\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitationEdge","title":"<code>RepositoryInvitationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInvitationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"RepositoryInvitation\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitationOrder","title":"<code>RepositoryInvitationOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInvitationOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryInvitationOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitationOrderField","title":"<code>RepositoryInvitationOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryInvitationOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryLockReason","title":"<code>RepositoryLockReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryLockReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"BILLING\", \"MIGRATING\", \"MOVING\", \"RENAME\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigration","title":"<code>RepositoryMigration</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Migration</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryMigration(sgqlc.types.Type, Node, Migration):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationConnection","title":"<code>RepositoryMigrationConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryMigrationConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryMigrationEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryMigration\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationEdge","title":"<code>RepositoryMigrationEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryMigrationEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"RepositoryMigration\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationOrder","title":"<code>RepositoryMigrationOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryMigrationOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryMigrationOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryMigrationOrderDirection),\n        graphql_name=\"direction\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationOrderDirection","title":"<code>RepositoryMigrationOrderDirection</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryMigrationOrderDirection(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ASC\", \"DESC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationOrderField","title":"<code>RepositoryMigrationOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryMigrationOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryNode","title":"<code>RepositoryNode</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryNode(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository\",)\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryOrder","title":"<code>RepositoryOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryOrderField","title":"<code>RepositoryOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"NAME\", \"PUSHED_AT\", \"STARGAZERS\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryOwner","title":"<code>RepositoryOwner</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryOwner(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"avatar_url\",\n        \"id\",\n        \"login\",\n        \"repositories\",\n        \"repository\",\n        \"resource_path\",\n        \"url\",\n    )\n    avatar_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI),\n        graphql_name=\"avatarUrl\",\n        args=sgqlc.types.ArgDict(\n            ((\"size\", sgqlc.types.Arg(Int, graphql_name=\"size\", default=None)),)\n        ),\n    )\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryConnection),\n        graphql_name=\"repositories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"privacy\",\n                    sgqlc.types.Arg(\n                        RepositoryPrivacy, graphql_name=\"privacy\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\n                    \"affiliations\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryAffiliation),\n                        graphql_name=\"affiliations\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"owner_affiliations\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryAffiliation),\n                        graphql_name=\"ownerAffiliations\",\n                        default=(\"OWNER\", \"COLLABORATOR\"),\n                    ),\n                ),\n                (\n                    \"is_locked\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isLocked\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"is_fork\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isFork\", default=None),\n                ),\n            )\n        ),\n    )\n    repository = sgqlc.types.Field(\n        \"Repository\",\n        graphql_name=\"repository\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n                (\n                    \"follow_renames\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"followRenames\", default=True\n                    ),\n                ),\n            )\n        ),\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryPermission","title":"<code>RepositoryPermission</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryPermission(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"MAINTAIN\", \"READ\", \"TRIAGE\", \"WRITE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryPrivacy","title":"<code>RepositoryPrivacy</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryPrivacy(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryTopic","title":"<code>RepositoryTopic</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryTopic(sgqlc.types.Type, Node, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"topic\",)\n    topic = sgqlc.types.Field(sgqlc.types.non_null(\"Topic\"), graphql_name=\"topic\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryTopicConnection","title":"<code>RepositoryTopicConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryTopicConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryTopicEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryTopic\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryTopicEdge","title":"<code>RepositoryTopicEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryTopicEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"RepositoryTopic\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVisibility","title":"<code>RepositoryVisibility</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryVisibility(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"INTERNAL\", \"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVisibilityChangeDisableAuditEntry","title":"<code>RepositoryVisibilityChangeDisableAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>EnterpriseAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryVisibilityChangeDisableAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    EnterpriseAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVisibilityChangeEnableAuditEntry","title":"<code>RepositoryVisibilityChangeEnableAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>EnterpriseAuditEntryData</code>, <code>OrganizationAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryVisibilityChangeEnableAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    EnterpriseAuditEntryData,\n    OrganizationAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlert","title":"<code>RepositoryVulnerabilityAlert</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>RepositoryNode</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryVulnerabilityAlert(sgqlc.types.Type, Node, RepositoryNode):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"dependabot_update\",\n        \"dependency_scope\",\n        \"dismiss_comment\",\n        \"dismiss_reason\",\n        \"dismissed_at\",\n        \"dismisser\",\n        \"fix_reason\",\n        \"fixed_at\",\n        \"number\",\n        \"security_advisory\",\n        \"security_vulnerability\",\n        \"state\",\n        \"vulnerable_manifest_filename\",\n        \"vulnerable_manifest_path\",\n        \"vulnerable_requirements\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    dependabot_update = sgqlc.types.Field(\n        DependabotUpdate, graphql_name=\"dependabotUpdate\"\n    )\n    dependency_scope = sgqlc.types.Field(\n        RepositoryVulnerabilityAlertDependencyScope, graphql_name=\"dependencyScope\"\n    )\n    dismiss_comment = sgqlc.types.Field(String, graphql_name=\"dismissComment\")\n    dismiss_reason = sgqlc.types.Field(String, graphql_name=\"dismissReason\")\n    dismissed_at = sgqlc.types.Field(DateTime, graphql_name=\"dismissedAt\")\n    dismisser = sgqlc.types.Field(\"User\", graphql_name=\"dismisser\")\n    fix_reason = sgqlc.types.Field(String, graphql_name=\"fixReason\")\n    fixed_at = sgqlc.types.Field(DateTime, graphql_name=\"fixedAt\")\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    security_advisory = sgqlc.types.Field(\n        \"SecurityAdvisory\", graphql_name=\"securityAdvisory\"\n    )\n    security_vulnerability = sgqlc.types.Field(\n        SecurityVulnerability, graphql_name=\"securityVulnerability\"\n    )\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryVulnerabilityAlertState), graphql_name=\"state\"\n    )\n    vulnerable_manifest_filename = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"vulnerableManifestFilename\"\n    )\n    vulnerable_manifest_path = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"vulnerableManifestPath\"\n    )\n    vulnerable_requirements = sgqlc.types.Field(\n        String, graphql_name=\"vulnerableRequirements\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertConnection","title":"<code>RepositoryVulnerabilityAlertConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryVulnerabilityAlertConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryVulnerabilityAlertEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RepositoryVulnerabilityAlert\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertDependencyScope","title":"<code>RepositoryVulnerabilityAlertDependencyScope</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryVulnerabilityAlertDependencyScope(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DEVELOPMENT\", \"RUNTIME\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertEdge","title":"<code>RepositoryVulnerabilityAlertEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryVulnerabilityAlertEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"RepositoryVulnerabilityAlert\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertState","title":"<code>RepositoryVulnerabilityAlertState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RepositoryVulnerabilityAlertState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DISMISSED\", \"FIXED\", \"OPEN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestReviewsInput","title":"<code>RequestReviewsInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequestReviewsInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"pull_request_id\",\n        \"user_ids\",\n        \"team_ids\",\n        \"union\",\n        \"client_mutation_id\",\n    )\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    user_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"userIds\"\n    )\n    team_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"teamIds\"\n    )\n    union = sgqlc.types.Field(Boolean, graphql_name=\"union\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestReviewsPayload","title":"<code>RequestReviewsPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequestReviewsPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"client_mutation_id\",\n        \"pull_request\",\n        \"requested_reviewers_edge\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n    requested_reviewers_edge = sgqlc.types.Field(\n        \"UserEdge\", graphql_name=\"requestedReviewersEdge\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestableCheckStatusState","title":"<code>RequestableCheckStatusState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequestableCheckStatusState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"COMPLETED\", \"IN_PROGRESS\", \"PENDING\", \"QUEUED\", \"WAITING\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestedReviewer","title":"<code>RequestedReviewer</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequestedReviewer(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Mannequin, Team, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestedReviewerConnection","title":"<code>RequestedReviewerConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequestedReviewerConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RequestedReviewerEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"RequestedReviewer\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestedReviewerEdge","title":"<code>RequestedReviewerEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequestedReviewerEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"RequestedReviewer\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequirableByPullRequest","title":"<code>RequirableByPullRequest</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequirableByPullRequest(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_required\",)\n    is_required = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean),\n        graphql_name=\"isRequired\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"pull_request_id\",\n                    sgqlc.types.Arg(ID, graphql_name=\"pullRequestId\", default=None),\n                ),\n                (\n                    \"pull_request_number\",\n                    sgqlc.types.Arg(\n                        Int, graphql_name=\"pullRequestNumber\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequiredStatusCheckDescription","title":"<code>RequiredStatusCheckDescription</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequiredStatusCheckDescription(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"app\", \"context\")\n    app = sgqlc.types.Field(\"App\", graphql_name=\"app\")\n    context = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"context\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequiredStatusCheckInput","title":"<code>RequiredStatusCheckInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RequiredStatusCheckInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"context\", \"app_id\")\n    context = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"context\")\n    app_id = sgqlc.types.Field(ID, graphql_name=\"appId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RerequestCheckSuiteInput","title":"<code>RerequestCheckSuiteInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RerequestCheckSuiteInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"check_suite_id\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    check_suite_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"checkSuiteId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RerequestCheckSuitePayload","title":"<code>RerequestCheckSuitePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RerequestCheckSuitePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"check_suite\", \"client_mutation_id\")\n    check_suite = sgqlc.types.Field(\"CheckSuite\", graphql_name=\"checkSuite\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ResolveReviewThreadInput","title":"<code>ResolveReviewThreadInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ResolveReviewThreadInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"thread_id\", \"client_mutation_id\")\n    thread_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"threadId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ResolveReviewThreadPayload","title":"<code>ResolveReviewThreadPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ResolveReviewThreadPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"thread\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    thread = sgqlc.types.Field(\"PullRequestReviewThread\", graphql_name=\"thread\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RestrictedContribution","title":"<code>RestrictedContribution</code>","text":"<p>             Bases: <code>Type</code>, <code>Contribution</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RestrictedContribution(sgqlc.types.Type, Contribution):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissalAllowance","title":"<code>ReviewDismissalAllowance</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewDismissalAllowance(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"branch_protection_rule\")\n    actor = sgqlc.types.Field(\"ReviewDismissalAllowanceActor\", graphql_name=\"actor\")\n    branch_protection_rule = sgqlc.types.Field(\n        BranchProtectionRule, graphql_name=\"branchProtectionRule\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissalAllowanceActor","title":"<code>ReviewDismissalAllowanceActor</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewDismissalAllowanceActor(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (App, Team, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissalAllowanceConnection","title":"<code>ReviewDismissalAllowanceConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewDismissalAllowanceConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ReviewDismissalAllowanceEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ReviewDismissalAllowance\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissalAllowanceEdge","title":"<code>ReviewDismissalAllowanceEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewDismissalAllowanceEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ReviewDismissalAllowance\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissedEvent","title":"<code>ReviewDismissedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>UniformResourceLocatable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewDismissedEvent(sgqlc.types.Type, Node, UniformResourceLocatable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"created_at\",\n        \"database_id\",\n        \"dismissal_message\",\n        \"dismissal_message_html\",\n        \"previous_review_state\",\n        \"pull_request\",\n        \"pull_request_commit\",\n        \"review\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    dismissal_message = sgqlc.types.Field(String, graphql_name=\"dismissalMessage\")\n    dismissal_message_html = sgqlc.types.Field(\n        String, graphql_name=\"dismissalMessageHTML\"\n    )\n    previous_review_state = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestReviewState), graphql_name=\"previousReviewState\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n    pull_request_commit = sgqlc.types.Field(\n        PullRequestCommit, graphql_name=\"pullRequestCommit\"\n    )\n    review = sgqlc.types.Field(PullRequestReview, graphql_name=\"review\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequest","title":"<code>ReviewRequest</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewRequest(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"as_code_owner\",\n        \"database_id\",\n        \"pull_request\",\n        \"requested_reviewer\",\n    )\n    as_code_owner = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"asCodeOwner\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n    requested_reviewer = sgqlc.types.Field(\n        \"RequestedReviewer\", graphql_name=\"requestedReviewer\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequestConnection","title":"<code>ReviewRequestConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewRequestConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ReviewRequestEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"ReviewRequest\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequestEdge","title":"<code>ReviewRequestEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewRequestEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"ReviewRequest\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequestRemovedEvent","title":"<code>ReviewRequestRemovedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewRequestRemovedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"pull_request\", \"requested_reviewer\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n    requested_reviewer = sgqlc.types.Field(\n        \"RequestedReviewer\", graphql_name=\"requestedReviewer\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequestedEvent","title":"<code>ReviewRequestedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewRequestedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"pull_request\", \"requested_reviewer\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    pull_request = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequest), graphql_name=\"pullRequest\"\n    )\n    requested_reviewer = sgqlc.types.Field(\n        \"RequestedReviewer\", graphql_name=\"requestedReviewer\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewStatusHovercardContext","title":"<code>ReviewStatusHovercardContext</code>","text":"<p>             Bases: <code>Type</code>, <code>HovercardContext</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ReviewStatusHovercardContext(sgqlc.types.Type, HovercardContext):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"review_decision\",)\n    review_decision = sgqlc.types.Field(\n        PullRequestReviewDecision, graphql_name=\"reviewDecision\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RevokeEnterpriseOrganizationsMigratorRoleInput","title":"<code>RevokeEnterpriseOrganizationsMigratorRoleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RevokeEnterpriseOrganizationsMigratorRoleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"login\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RevokeEnterpriseOrganizationsMigratorRolePayload","title":"<code>RevokeEnterpriseOrganizationsMigratorRolePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RevokeEnterpriseOrganizationsMigratorRolePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"organizations\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    organizations = sgqlc.types.Field(\n        OrganizationConnection,\n        graphql_name=\"organizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RevokeMigratorRoleInput","title":"<code>RevokeMigratorRoleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RevokeMigratorRoleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"organization_id\", \"actor\", \"actor_type\", \"client_mutation_id\")\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    actor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"actor\")\n    actor_type = sgqlc.types.Field(\n        sgqlc.types.non_null(ActorType), graphql_name=\"actorType\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RevokeMigratorRolePayload","title":"<code>RevokeMigratorRolePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RevokeMigratorRolePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"success\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    success = sgqlc.types.Field(Boolean, graphql_name=\"success\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RoleInOrganization","title":"<code>RoleInOrganization</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class RoleInOrganization(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DIRECT_MEMBER\", \"OWNER\", \"UNAFFILIATED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SamlDigestAlgorithm","title":"<code>SamlDigestAlgorithm</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SamlDigestAlgorithm(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"SHA1\", \"SHA256\", \"SHA384\", \"SHA512\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SamlSignatureAlgorithm","title":"<code>SamlSignatureAlgorithm</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SamlSignatureAlgorithm(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"RSA_SHA1\", \"RSA_SHA256\", \"RSA_SHA384\", \"RSA_SHA512\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReply","title":"<code>SavedReply</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SavedReply(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"body\", \"body_html\", \"database_id\", \"title\", \"user\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    body_html = sgqlc.types.Field(sgqlc.types.non_null(HTML), graphql_name=\"bodyHTML\")\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    user = sgqlc.types.Field(Actor, graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReplyConnection","title":"<code>SavedReplyConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SavedReplyConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SavedReplyEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"SavedReply\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReplyEdge","title":"<code>SavedReplyEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SavedReplyEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"SavedReply\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReplyOrder","title":"<code>SavedReplyOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SavedReplyOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SavedReplyOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReplyOrderField","title":"<code>SavedReplyOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SavedReplyOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"UPDATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SearchResultItem","title":"<code>SearchResultItem</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SearchResultItem(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (\n        App,\n        Discussion,\n        Issue,\n        MarketplaceListing,\n        Organization,\n        PullRequest,\n        Repository,\n        User,\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SearchResultItemConnection","title":"<code>SearchResultItemConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SearchResultItemConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"code_count\",\n        \"discussion_count\",\n        \"edges\",\n        \"issue_count\",\n        \"nodes\",\n        \"page_info\",\n        \"repository_count\",\n        \"user_count\",\n        \"wiki_count\",\n    )\n    code_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"codeCount\")\n    discussion_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"discussionCount\"\n    )\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SearchResultItemEdge\"), graphql_name=\"edges\"\n    )\n    issue_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"issueCount\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SearchResultItem\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    repository_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"repositoryCount\"\n    )\n    user_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"userCount\")\n    wiki_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"wikiCount\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SearchResultItemEdge","title":"<code>SearchResultItemEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SearchResultItemEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"text_matches\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"SearchResultItem\", graphql_name=\"node\")\n    text_matches = sgqlc.types.Field(\n        sgqlc.types.list_of(\"TextMatch\"), graphql_name=\"textMatches\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SearchType","title":"<code>SearchType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SearchType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"DISCUSSION\", \"ISSUE\", \"REPOSITORY\", \"USER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisory","title":"<code>SecurityAdvisory</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisory(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"classification\",\n        \"cvss\",\n        \"cwes\",\n        \"database_id\",\n        \"description\",\n        \"ghsa_id\",\n        \"identifiers\",\n        \"notifications_permalink\",\n        \"origin\",\n        \"permalink\",\n        \"published_at\",\n        \"references\",\n        \"severity\",\n        \"summary\",\n        \"updated_at\",\n        \"vulnerabilities\",\n        \"withdrawn_at\",\n    )\n    classification = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityAdvisoryClassification),\n        graphql_name=\"classification\",\n    )\n    cvss = sgqlc.types.Field(sgqlc.types.non_null(CVSS), graphql_name=\"cvss\")\n    cwes = sgqlc.types.Field(\n        sgqlc.types.non_null(CWEConnection),\n        graphql_name=\"cwes\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"description\"\n    )\n    ghsa_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"ghsaId\")\n    identifiers = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(SecurityAdvisoryIdentifier))\n        ),\n        graphql_name=\"identifiers\",\n    )\n    notifications_permalink = sgqlc.types.Field(\n        URI, graphql_name=\"notificationsPermalink\"\n    )\n    origin = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"origin\")\n    permalink = sgqlc.types.Field(URI, graphql_name=\"permalink\")\n    published_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"publishedAt\"\n    )\n    references = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(SecurityAdvisoryReference))\n        ),\n        graphql_name=\"references\",\n    )\n    severity = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityAdvisorySeverity), graphql_name=\"severity\"\n    )\n    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"summary\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    vulnerabilities = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityVulnerabilityConnection),\n        graphql_name=\"vulnerabilities\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SecurityVulnerabilityOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"UPDATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\n                    \"ecosystem\",\n                    sgqlc.types.Arg(\n                        SecurityAdvisoryEcosystem,\n                        graphql_name=\"ecosystem\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"package\",\n                    sgqlc.types.Arg(String, graphql_name=\"package\", default=None),\n                ),\n                (\n                    \"severities\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(SecurityAdvisorySeverity)\n                        ),\n                        graphql_name=\"severities\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"classifications\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(SecurityAdvisoryClassification)\n                        ),\n                        graphql_name=\"classifications\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    withdrawn_at = sgqlc.types.Field(DateTime, graphql_name=\"withdrawnAt\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryClassification","title":"<code>SecurityAdvisoryClassification</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryClassification(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"GENERAL\", \"MALWARE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryConnection","title":"<code>SecurityAdvisoryConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SecurityAdvisoryEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SecurityAdvisory\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryEcosystem","title":"<code>SecurityAdvisoryEcosystem</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryEcosystem(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"ACTIONS\",\n        \"COMPOSER\",\n        \"ERLANG\",\n        \"GO\",\n        \"MAVEN\",\n        \"NPM\",\n        \"NUGET\",\n        \"PIP\",\n        \"RUBYGEMS\",\n        \"RUST\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryEdge","title":"<code>SecurityAdvisoryEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"SecurityAdvisory\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryIdentifier","title":"<code>SecurityAdvisoryIdentifier</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryIdentifier(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"type\", \"value\")\n    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"type\")\n    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"value\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryIdentifierFilter","title":"<code>SecurityAdvisoryIdentifierFilter</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryIdentifierFilter(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"type\", \"value\")\n    type = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityAdvisoryIdentifierType), graphql_name=\"type\"\n    )\n    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"value\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryIdentifierType","title":"<code>SecurityAdvisoryIdentifierType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryIdentifierType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CVE\", \"GHSA\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryOrder","title":"<code>SecurityAdvisoryOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityAdvisoryOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryOrderField","title":"<code>SecurityAdvisoryOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"PUBLISHED_AT\", \"UPDATED_AT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryPackage","title":"<code>SecurityAdvisoryPackage</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryPackage(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"ecosystem\", \"name\")\n    ecosystem = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityAdvisoryEcosystem), graphql_name=\"ecosystem\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryPackageVersion","title":"<code>SecurityAdvisoryPackageVersion</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryPackageVersion(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"identifier\",)\n    identifier = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"identifier\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryReference","title":"<code>SecurityAdvisoryReference</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisoryReference(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"url\",)\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisorySeverity","title":"<code>SecurityAdvisorySeverity</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityAdvisorySeverity(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CRITICAL\", \"HIGH\", \"LOW\", \"MODERATE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerability","title":"<code>SecurityVulnerability</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityVulnerability(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"advisory\",\n        \"first_patched_version\",\n        \"package\",\n        \"severity\",\n        \"updated_at\",\n        \"vulnerable_version_range\",\n    )\n    advisory = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SecurityAdvisory\"), graphql_name=\"advisory\"\n    )\n    first_patched_version = sgqlc.types.Field(\n        SecurityAdvisoryPackageVersion, graphql_name=\"firstPatchedVersion\"\n    )\n    package = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityAdvisoryPackage), graphql_name=\"package\"\n    )\n    severity = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityAdvisorySeverity), graphql_name=\"severity\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    vulnerable_version_range = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"vulnerableVersionRange\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerabilityConnection","title":"<code>SecurityVulnerabilityConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityVulnerabilityConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SecurityVulnerabilityEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(SecurityVulnerability), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerabilityEdge","title":"<code>SecurityVulnerabilityEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityVulnerabilityEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(SecurityVulnerability, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerabilityOrder","title":"<code>SecurityVulnerabilityOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityVulnerabilityOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SecurityVulnerabilityOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerabilityOrderField","title":"<code>SecurityVulnerabilityOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SecurityVulnerabilityOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"UPDATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetEnterpriseIdentityProviderInput","title":"<code>SetEnterpriseIdentityProviderInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SetEnterpriseIdentityProviderInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"enterprise_id\",\n        \"sso_url\",\n        \"issuer\",\n        \"idp_certificate\",\n        \"signature_method\",\n        \"digest_method\",\n        \"client_mutation_id\",\n    )\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    sso_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"ssoUrl\")\n    issuer = sgqlc.types.Field(String, graphql_name=\"issuer\")\n    idp_certificate = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"idpCertificate\"\n    )\n    signature_method = sgqlc.types.Field(\n        sgqlc.types.non_null(SamlSignatureAlgorithm), graphql_name=\"signatureMethod\"\n    )\n    digest_method = sgqlc.types.Field(\n        sgqlc.types.non_null(SamlDigestAlgorithm), graphql_name=\"digestMethod\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetEnterpriseIdentityProviderPayload","title":"<code>SetEnterpriseIdentityProviderPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SetEnterpriseIdentityProviderPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"identity_provider\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    identity_provider = sgqlc.types.Field(\n        \"EnterpriseIdentityProvider\", graphql_name=\"identityProvider\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetOrganizationInteractionLimitInput","title":"<code>SetOrganizationInteractionLimitInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SetOrganizationInteractionLimitInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"organization_id\", \"limit\", \"expiry\", \"client_mutation_id\")\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    limit = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryInteractionLimit), graphql_name=\"limit\"\n    )\n    expiry = sgqlc.types.Field(RepositoryInteractionLimitExpiry, graphql_name=\"expiry\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetOrganizationInteractionLimitPayload","title":"<code>SetOrganizationInteractionLimitPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SetOrganizationInteractionLimitPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"organization\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    organization = sgqlc.types.Field(\"Organization\", graphql_name=\"organization\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetRepositoryInteractionLimitInput","title":"<code>SetRepositoryInteractionLimitInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SetRepositoryInteractionLimitInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"limit\", \"expiry\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    limit = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryInteractionLimit), graphql_name=\"limit\"\n    )\n    expiry = sgqlc.types.Field(RepositoryInteractionLimitExpiry, graphql_name=\"expiry\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetRepositoryInteractionLimitPayload","title":"<code>SetRepositoryInteractionLimitPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SetRepositoryInteractionLimitPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetUserInteractionLimitInput","title":"<code>SetUserInteractionLimitInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SetUserInteractionLimitInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"user_id\", \"limit\", \"expiry\", \"client_mutation_id\")\n    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"userId\")\n    limit = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryInteractionLimit), graphql_name=\"limit\"\n    )\n    expiry = sgqlc.types.Field(RepositoryInteractionLimitExpiry, graphql_name=\"expiry\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetUserInteractionLimitPayload","title":"<code>SetUserInteractionLimitPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SetUserInteractionLimitPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"user\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SmimeSignature","title":"<code>SmimeSignature</code>","text":"<p>             Bases: <code>Type</code>, <code>GitSignature</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SmimeSignature(sgqlc.types.Type, GitSignature):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SortBy","title":"<code>SortBy</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SortBy(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"direction\", \"field\")\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n    field = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"field\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Sponsor","title":"<code>Sponsor</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Sponsor(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Organization, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorConnection","title":"<code>SponsorConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"SponsorEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Sponsor\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorEdge","title":"<code>SponsorEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Sponsor\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorOrder","title":"<code>SponsorOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorOrderField","title":"<code>SponsorOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"LOGIN\", \"RELEVANCE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Sponsorable","title":"<code>Sponsorable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Sponsorable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"estimated_next_sponsors_payout_in_cents\",\n        \"has_sponsors_listing\",\n        \"is_sponsored_by\",\n        \"is_sponsoring_viewer\",\n        \"monthly_estimated_sponsors_income_in_cents\",\n        \"sponsoring\",\n        \"sponsors\",\n        \"sponsors_activities\",\n        \"sponsors_listing\",\n        \"sponsorship_for_viewer_as_sponsor\",\n        \"sponsorship_for_viewer_as_sponsorable\",\n        \"sponsorship_newsletters\",\n        \"sponsorships_as_maintainer\",\n        \"sponsorships_as_sponsor\",\n        \"viewer_can_sponsor\",\n        \"viewer_is_sponsoring\",\n    )\n    estimated_next_sponsors_payout_in_cents = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"estimatedNextSponsorsPayoutInCents\"\n    )\n    has_sponsors_listing = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasSponsorsListing\"\n    )\n    is_sponsored_by = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean),\n        graphql_name=\"isSponsoredBy\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"account_login\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"accountLogin\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    is_sponsoring_viewer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isSponsoringViewer\"\n    )\n    monthly_estimated_sponsors_income_in_cents = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"monthlyEstimatedSponsorsIncomeInCents\"\n    )\n    sponsoring = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorConnection),\n        graphql_name=\"sponsoring\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"RELEVANCE\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    sponsors = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorConnection),\n        graphql_name=\"sponsors\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"tier_id\", sgqlc.types.Arg(ID, graphql_name=\"tierId\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"RELEVANCE\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    sponsors_activities = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SponsorsActivityConnection\"),\n        graphql_name=\"sponsorsActivities\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"period\",\n                    sgqlc.types.Arg(\n                        SponsorsActivityPeriod, graphql_name=\"period\", default=\"MONTH\"\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorsActivityOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"TIMESTAMP\", \"direction\": \"DESC\"},\n                    ),\n                ),\n                (\n                    \"actions\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(\n                            sgqlc.types.non_null(SponsorsActivityAction)\n                        ),\n                        graphql_name=\"actions\",\n                        default=(),\n                    ),\n                ),\n            )\n        ),\n    )\n    sponsors_listing = sgqlc.types.Field(\n        \"SponsorsListing\", graphql_name=\"sponsorsListing\"\n    )\n    sponsorship_for_viewer_as_sponsor = sgqlc.types.Field(\n        \"Sponsorship\", graphql_name=\"sponsorshipForViewerAsSponsor\"\n    )\n    sponsorship_for_viewer_as_sponsorable = sgqlc.types.Field(\n        \"Sponsorship\", graphql_name=\"sponsorshipForViewerAsSponsorable\"\n    )\n    sponsorship_newsletters = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SponsorshipNewsletterConnection\"),\n        graphql_name=\"sponsorshipNewsletters\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorshipNewsletterOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    sponsorships_as_maintainer = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SponsorshipConnection\"),\n        graphql_name=\"sponsorshipsAsMaintainer\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"include_private\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"includePrivate\", default=False\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorshipOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    sponsorships_as_sponsor = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SponsorshipConnection\"),\n        graphql_name=\"sponsorshipsAsSponsor\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorshipOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    viewer_can_sponsor = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanSponsor\"\n    )\n    viewer_is_sponsoring = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerIsSponsoring\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableItem","title":"<code>SponsorableItem</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorableItem(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Organization, User)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableItemConnection","title":"<code>SponsorableItemConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorableItemConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SponsorableItemEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SponsorableItem\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableItemEdge","title":"<code>SponsorableItemEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorableItemEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"SponsorableItem\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableOrder","title":"<code>SponsorableOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorableOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorableOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableOrderField","title":"<code>SponsorableOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorableOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"LOGIN\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivity","title":"<code>SponsorsActivity</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsActivity(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"action\",\n        \"previous_sponsors_tier\",\n        \"sponsor\",\n        \"sponsorable\",\n        \"sponsors_tier\",\n        \"timestamp\",\n    )\n    action = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorsActivityAction), graphql_name=\"action\"\n    )\n    previous_sponsors_tier = sgqlc.types.Field(\n        \"SponsorsTier\", graphql_name=\"previousSponsorsTier\"\n    )\n    sponsor = sgqlc.types.Field(\"Sponsor\", graphql_name=\"sponsor\")\n    sponsorable = sgqlc.types.Field(\n        sgqlc.types.non_null(Sponsorable), graphql_name=\"sponsorable\"\n    )\n    sponsors_tier = sgqlc.types.Field(\"SponsorsTier\", graphql_name=\"sponsorsTier\")\n    timestamp = sgqlc.types.Field(DateTime, graphql_name=\"timestamp\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityAction","title":"<code>SponsorsActivityAction</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsActivityAction(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"CANCELLED_SPONSORSHIP\",\n        \"NEW_SPONSORSHIP\",\n        \"PENDING_CHANGE\",\n        \"REFUND\",\n        \"SPONSOR_MATCH_DISABLED\",\n        \"TIER_CHANGE\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityConnection","title":"<code>SponsorsActivityConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsActivityConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SponsorsActivityEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SponsorsActivity\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityEdge","title":"<code>SponsorsActivityEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsActivityEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"SponsorsActivity\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityOrder","title":"<code>SponsorsActivityOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsActivityOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorsActivityOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityOrderField","title":"<code>SponsorsActivityOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsActivityOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"TIMESTAMP\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityPeriod","title":"<code>SponsorsActivityPeriod</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsActivityPeriod(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALL\", \"DAY\", \"MONTH\", \"WEEK\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsGoal","title":"<code>SponsorsGoal</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsGoal(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"description\",\n        \"kind\",\n        \"percent_complete\",\n        \"target_value\",\n        \"title\",\n    )\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    kind = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorsGoalKind), graphql_name=\"kind\"\n    )\n    percent_complete = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"percentComplete\"\n    )\n    target_value = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"targetValue\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsGoalKind","title":"<code>SponsorsGoalKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsGoalKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"MONTHLY_SPONSORSHIP_AMOUNT\", \"TOTAL_SPONSORS_COUNT\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsListing","title":"<code>SponsorsListing</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsListing(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"active_goal\",\n        \"created_at\",\n        \"dashboard_resource_path\",\n        \"dashboard_url\",\n        \"full_description\",\n        \"full_description_html\",\n        \"is_public\",\n        \"name\",\n        \"next_payout_date\",\n        \"resource_path\",\n        \"short_description\",\n        \"slug\",\n        \"sponsorable\",\n        \"tiers\",\n        \"url\",\n    )\n    active_goal = sgqlc.types.Field(SponsorsGoal, graphql_name=\"activeGoal\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    dashboard_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"dashboardResourcePath\"\n    )\n    dashboard_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"dashboardUrl\"\n    )\n    full_description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"fullDescription\"\n    )\n    full_description_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"fullDescriptionHTML\"\n    )\n    is_public = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPublic\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    next_payout_date = sgqlc.types.Field(Date, graphql_name=\"nextPayoutDate\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    short_description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"shortDescription\"\n    )\n    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"slug\")\n    sponsorable = sgqlc.types.Field(\n        sgqlc.types.non_null(Sponsorable), graphql_name=\"sponsorable\"\n    )\n    tiers = sgqlc.types.Field(\n        SponsorsTierConnection,\n        graphql_name=\"tiers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorsTierOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"MONTHLY_PRICE_IN_CENTS\", \"direction\": \"ASC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTier","title":"<code>SponsorsTier</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsTier(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"admin_info\",\n        \"closest_lesser_value_tier\",\n        \"created_at\",\n        \"description\",\n        \"description_html\",\n        \"is_custom_amount\",\n        \"is_one_time\",\n        \"monthly_price_in_cents\",\n        \"monthly_price_in_dollars\",\n        \"name\",\n        \"sponsors_listing\",\n        \"updated_at\",\n    )\n    admin_info = sgqlc.types.Field(SponsorsTierAdminInfo, graphql_name=\"adminInfo\")\n    closest_lesser_value_tier = sgqlc.types.Field(\n        \"SponsorsTier\", graphql_name=\"closestLesserValueTier\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    description = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"description\"\n    )\n    description_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"descriptionHTML\"\n    )\n    is_custom_amount = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCustomAmount\"\n    )\n    is_one_time = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isOneTime\"\n    )\n    monthly_price_in_cents = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"monthlyPriceInCents\"\n    )\n    monthly_price_in_dollars = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"monthlyPriceInDollars\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    sponsors_listing = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorsListing), graphql_name=\"sponsorsListing\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierAdminInfo","title":"<code>SponsorsTierAdminInfo</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsTierAdminInfo(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"sponsorships\",)\n    sponsorships = sgqlc.types.Field(\n        sgqlc.types.non_null(\"SponsorshipConnection\"),\n        graphql_name=\"sponsorships\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"include_private\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"includePrivate\", default=False\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SponsorshipOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierConnection","title":"<code>SponsorsTierConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsTierConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SponsorsTierEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"SponsorsTier\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierEdge","title":"<code>SponsorsTierEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsTierEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"SponsorsTier\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierOrder","title":"<code>SponsorsTierOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsTierOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorsTierOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierOrderField","title":"<code>SponsorsTierOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorsTierOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"MONTHLY_PRICE_IN_CENTS\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Sponsorship","title":"<code>Sponsorship</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Sponsorship(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"is_one_time_payment\",\n        \"is_sponsor_opted_into_email\",\n        \"maintainer\",\n        \"privacy_level\",\n        \"sponsor\",\n        \"sponsor_entity\",\n        \"sponsorable\",\n        \"tier\",\n        \"tier_selected_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    is_one_time_payment = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isOneTimePayment\"\n    )\n    is_sponsor_opted_into_email = sgqlc.types.Field(\n        Boolean, graphql_name=\"isSponsorOptedIntoEmail\"\n    )\n    maintainer = sgqlc.types.Field(\n        sgqlc.types.non_null(\"User\"), graphql_name=\"maintainer\"\n    )\n    privacy_level = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorshipPrivacy), graphql_name=\"privacyLevel\"\n    )\n    sponsor = sgqlc.types.Field(\"User\", graphql_name=\"sponsor\")\n    sponsor_entity = sgqlc.types.Field(\"Sponsor\", graphql_name=\"sponsorEntity\")\n    sponsorable = sgqlc.types.Field(\n        sgqlc.types.non_null(Sponsorable), graphql_name=\"sponsorable\"\n    )\n    tier = sgqlc.types.Field(SponsorsTier, graphql_name=\"tier\")\n    tier_selected_at = sgqlc.types.Field(DateTime, graphql_name=\"tierSelectedAt\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipConnection","title":"<code>SponsorshipConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"edges\",\n        \"nodes\",\n        \"page_info\",\n        \"total_count\",\n        \"total_recurring_monthly_price_in_cents\",\n        \"total_recurring_monthly_price_in_dollars\",\n    )\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SponsorshipEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Sponsorship\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n    total_recurring_monthly_price_in_cents = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalRecurringMonthlyPriceInCents\"\n    )\n    total_recurring_monthly_price_in_dollars = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalRecurringMonthlyPriceInDollars\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipEdge","title":"<code>SponsorshipEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Sponsorship\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletter","title":"<code>SponsorshipNewsletter</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipNewsletter(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"body\",\n        \"created_at\",\n        \"is_published\",\n        \"sponsorable\",\n        \"subject\",\n        \"updated_at\",\n    )\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    is_published = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPublished\"\n    )\n    sponsorable = sgqlc.types.Field(\n        sgqlc.types.non_null(Sponsorable), graphql_name=\"sponsorable\"\n    )\n    subject = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"subject\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletterConnection","title":"<code>SponsorshipNewsletterConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipNewsletterConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SponsorshipNewsletterEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SponsorshipNewsletter\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletterEdge","title":"<code>SponsorshipNewsletterEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipNewsletterEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"SponsorshipNewsletter\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletterOrder","title":"<code>SponsorshipNewsletterOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipNewsletterOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorshipNewsletterOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletterOrderField","title":"<code>SponsorshipNewsletterOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipNewsletterOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipOrder","title":"<code>SponsorshipOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(SponsorshipOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipOrderField","title":"<code>SponsorshipOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipPrivacy","title":"<code>SponsorshipPrivacy</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SponsorshipPrivacy(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"PRIVATE\", \"PUBLIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SquashMergeCommitMessage","title":"<code>SquashMergeCommitMessage</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SquashMergeCommitMessage(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"BLANK\", \"COMMIT_MESSAGES\", \"PR_BODY\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SquashMergeCommitTitle","title":"<code>SquashMergeCommitTitle</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SquashMergeCommitTitle(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"COMMIT_OR_PR_TITLE\", \"PR_TITLE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SshSignature","title":"<code>SshSignature</code>","text":"<p>             Bases: <code>Type</code>, <code>GitSignature</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SshSignature(sgqlc.types.Type, GitSignature):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"key_fingerprint\",)\n    key_fingerprint = sgqlc.types.Field(String, graphql_name=\"keyFingerprint\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StarOrder","title":"<code>StarOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StarOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(StarOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StarOrderField","title":"<code>StarOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StarOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"STARRED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StargazerConnection","title":"<code>StargazerConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StargazerConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"StargazerEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StargazerEdge","title":"<code>StargazerEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StargazerEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"starred_at\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"node\")\n    starred_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"starredAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Starrable","title":"<code>Starrable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Starrable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"stargazer_count\", \"stargazers\", \"viewer_has_starred\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    stargazer_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"stargazerCount\"\n    )\n    stargazers = sgqlc.types.Field(\n        sgqlc.types.non_null(StargazerConnection),\n        graphql_name=\"stargazers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(StarOrder, graphql_name=\"orderBy\", default=None),\n                ),\n            )\n        ),\n    )\n    viewer_has_starred = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerHasStarred\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StarredRepositoryConnection","title":"<code>StarredRepositoryConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StarredRepositoryConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"is_over_limit\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"StarredRepositoryEdge\"), graphql_name=\"edges\"\n    )\n    is_over_limit = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isOverLimit\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Repository\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StarredRepositoryEdge","title":"<code>StarredRepositoryEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StarredRepositoryEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"starred_at\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(sgqlc.types.non_null(\"Repository\"), graphql_name=\"node\")\n    starred_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"starredAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StartRepositoryMigrationInput","title":"<code>StartRepositoryMigrationInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StartRepositoryMigrationInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"source_id\",\n        \"owner_id\",\n        \"source_repository_url\",\n        \"repository_name\",\n        \"continue_on_error\",\n        \"git_archive_url\",\n        \"metadata_archive_url\",\n        \"access_token\",\n        \"github_pat\",\n        \"skip_releases\",\n        \"target_repo_visibility\",\n        \"lock_source\",\n        \"client_mutation_id\",\n    )\n    source_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"sourceId\")\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    source_repository_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"sourceRepositoryUrl\"\n    )\n    repository_name = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"repositoryName\"\n    )\n    continue_on_error = sgqlc.types.Field(Boolean, graphql_name=\"continueOnError\")\n    git_archive_url = sgqlc.types.Field(String, graphql_name=\"gitArchiveUrl\")\n    metadata_archive_url = sgqlc.types.Field(String, graphql_name=\"metadataArchiveUrl\")\n    access_token = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"accessToken\"\n    )\n    github_pat = sgqlc.types.Field(String, graphql_name=\"githubPat\")\n    skip_releases = sgqlc.types.Field(Boolean, graphql_name=\"skipReleases\")\n    target_repo_visibility = sgqlc.types.Field(\n        String, graphql_name=\"targetRepoVisibility\"\n    )\n    lock_source = sgqlc.types.Field(Boolean, graphql_name=\"lockSource\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StartRepositoryMigrationPayload","title":"<code>StartRepositoryMigrationPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StartRepositoryMigrationPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository_migration\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository_migration = sgqlc.types.Field(\n        \"RepositoryMigration\", graphql_name=\"repositoryMigration\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Status","title":"<code>Status</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Status(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"combined_contexts\", \"commit\", \"context\", \"contexts\", \"state\")\n    combined_contexts = sgqlc.types.Field(\n        sgqlc.types.non_null(StatusCheckRollupContextConnection),\n        graphql_name=\"combinedContexts\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    context = sgqlc.types.Field(\n        \"StatusContext\",\n        graphql_name=\"context\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    contexts = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(\"StatusContext\"))\n        ),\n        graphql_name=\"contexts\",\n    )\n    state = sgqlc.types.Field(sgqlc.types.non_null(StatusState), graphql_name=\"state\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusCheckRollup","title":"<code>StatusCheckRollup</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StatusCheckRollup(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"commit\", \"contexts\", \"state\")\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    contexts = sgqlc.types.Field(\n        sgqlc.types.non_null(StatusCheckRollupContextConnection),\n        graphql_name=\"contexts\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    state = sgqlc.types.Field(sgqlc.types.non_null(StatusState), graphql_name=\"state\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusCheckRollupContext","title":"<code>StatusCheckRollupContext</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StatusCheckRollupContext(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (CheckRun, StatusContext)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusCheckRollupContextConnection","title":"<code>StatusCheckRollupContextConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StatusCheckRollupContextConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"check_run_count\",\n        \"check_run_counts_by_state\",\n        \"edges\",\n        \"nodes\",\n        \"page_info\",\n        \"status_context_count\",\n        \"status_context_counts_by_state\",\n        \"total_count\",\n    )\n    check_run_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"checkRunCount\"\n    )\n    check_run_counts_by_state = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(CheckRunStateCount)),\n        graphql_name=\"checkRunCountsByState\",\n    )\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"StatusCheckRollupContextEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"StatusCheckRollupContext\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    status_context_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"statusContextCount\"\n    )\n    status_context_counts_by_state = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"StatusContextStateCount\")),\n        graphql_name=\"statusContextCountsByState\",\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusCheckRollupContextEdge","title":"<code>StatusCheckRollupContextEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StatusCheckRollupContextEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"StatusCheckRollupContext\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusContext","title":"<code>StatusContext</code>","text":"<p>             Bases: <code>Type</code>, <code>RequirableByPullRequest</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StatusContext(sgqlc.types.Type, RequirableByPullRequest, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"avatar_url\",\n        \"commit\",\n        \"context\",\n        \"created_at\",\n        \"creator\",\n        \"description\",\n        \"state\",\n        \"target_url\",\n    )\n    avatar_url = sgqlc.types.Field(\n        URI,\n        graphql_name=\"avatarUrl\",\n        args=sgqlc.types.ArgDict(\n            ((\"size\", sgqlc.types.Arg(Int, graphql_name=\"size\", default=40)),)\n        ),\n    )\n    commit = sgqlc.types.Field(Commit, graphql_name=\"commit\")\n    context = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"context\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    creator = sgqlc.types.Field(Actor, graphql_name=\"creator\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    state = sgqlc.types.Field(sgqlc.types.non_null(StatusState), graphql_name=\"state\")\n    target_url = sgqlc.types.Field(URI, graphql_name=\"targetUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusContextStateCount","title":"<code>StatusContextStateCount</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StatusContextStateCount(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"count\", \"state\")\n    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"count\")\n    state = sgqlc.types.Field(sgqlc.types.non_null(StatusState), graphql_name=\"state\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusState","title":"<code>StatusState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class StatusState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ERROR\", \"EXPECTED\", \"FAILURE\", \"PENDING\", \"SUCCESS\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubmitPullRequestReviewInput","title":"<code>SubmitPullRequestReviewInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SubmitPullRequestReviewInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"pull_request_id\",\n        \"pull_request_review_id\",\n        \"event\",\n        \"body\",\n        \"client_mutation_id\",\n    )\n    pull_request_id = sgqlc.types.Field(ID, graphql_name=\"pullRequestId\")\n    pull_request_review_id = sgqlc.types.Field(ID, graphql_name=\"pullRequestReviewId\")\n    event = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestReviewEvent), graphql_name=\"event\"\n    )\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubmitPullRequestReviewPayload","title":"<code>SubmitPullRequestReviewPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SubmitPullRequestReviewPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request_review\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request_review = sgqlc.types.Field(\n        \"PullRequestReview\", graphql_name=\"pullRequestReview\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Submodule","title":"<code>Submodule</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Submodule(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"branch\", \"git_url\", \"name\", \"path\", \"subproject_commit_oid\")\n    branch = sgqlc.types.Field(String, graphql_name=\"branch\")\n    git_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"gitUrl\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    subproject_commit_oid = sgqlc.types.Field(\n        GitObjectID, graphql_name=\"subprojectCommitOid\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubmoduleConnection","title":"<code>SubmoduleConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SubmoduleConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"SubmoduleEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(Submodule), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubmoduleEdge","title":"<code>SubmoduleEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SubmoduleEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(Submodule, graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Subscribable","title":"<code>Subscribable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Subscribable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"viewer_can_subscribe\", \"viewer_subscription\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    viewer_can_subscribe = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanSubscribe\"\n    )\n    viewer_subscription = sgqlc.types.Field(\n        SubscriptionState, graphql_name=\"viewerSubscription\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubscribedEvent","title":"<code>SubscribedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SubscribedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"subscribable\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    subscribable = sgqlc.types.Field(\n        sgqlc.types.non_null(Subscribable), graphql_name=\"subscribable\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubscriptionState","title":"<code>SubscriptionState</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SubscriptionState(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"IGNORED\", \"SUBSCRIBED\", \"UNSUBSCRIBED\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SuggestedReviewer","title":"<code>SuggestedReviewer</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class SuggestedReviewer(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_author\", \"is_commenter\", \"reviewer\")\n    is_author = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isAuthor\"\n    )\n    is_commenter = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCommenter\"\n    )\n    reviewer = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"reviewer\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Tag","title":"<code>Tag</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>GitObject</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Tag(sgqlc.types.Type, Node, GitObject):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"message\", \"name\", \"tagger\", \"target\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    tagger = sgqlc.types.Field(GitActor, graphql_name=\"tagger\")\n    target = sgqlc.types.Field(sgqlc.types.non_null(GitObject), graphql_name=\"target\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Team","title":"<code>Team</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Subscribable</code>, <code>MemberStatusable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Team(sgqlc.types.Type, Node, Subscribable, MemberStatusable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"ancestors\",\n        \"avatar_url\",\n        \"child_teams\",\n        \"combined_slug\",\n        \"created_at\",\n        \"database_id\",\n        \"description\",\n        \"discussion\",\n        \"discussions\",\n        \"discussions_resource_path\",\n        \"discussions_url\",\n        \"edit_team_resource_path\",\n        \"edit_team_url\",\n        \"invitations\",\n        \"members\",\n        \"members_resource_path\",\n        \"members_url\",\n        \"name\",\n        \"new_team_resource_path\",\n        \"new_team_url\",\n        \"organization\",\n        \"parent_team\",\n        \"privacy\",\n        \"repositories\",\n        \"repositories_resource_path\",\n        \"repositories_url\",\n        \"resource_path\",\n        \"slug\",\n        \"teams_resource_path\",\n        \"teams_url\",\n        \"updated_at\",\n        \"url\",\n        \"viewer_can_administer\",\n    )\n    ancestors = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamConnection),\n        graphql_name=\"ancestors\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    avatar_url = sgqlc.types.Field(\n        URI,\n        graphql_name=\"avatarUrl\",\n        args=sgqlc.types.ArgDict(\n            ((\"size\", sgqlc.types.Arg(Int, graphql_name=\"size\", default=400)),)\n        ),\n    )\n    child_teams = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamConnection),\n        graphql_name=\"childTeams\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(TeamOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\n                    \"user_logins\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"userLogins\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"immediate_only\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"immediateOnly\", default=True\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    combined_slug = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"combinedSlug\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    discussion = sgqlc.types.Field(\n        \"TeamDiscussion\",\n        graphql_name=\"discussion\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"number\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"number\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    discussions = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamDiscussionConnection),\n        graphql_name=\"discussions\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"is_pinned\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isPinned\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        TeamDiscussionOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    discussions_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"discussionsResourcePath\"\n    )\n    discussions_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"discussionsUrl\"\n    )\n    edit_team_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"editTeamResourcePath\"\n    )\n    edit_team_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"editTeamUrl\"\n    )\n    invitations = sgqlc.types.Field(\n        OrganizationInvitationConnection,\n        graphql_name=\"invitations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    members = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamMemberConnection),\n        graphql_name=\"members\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"membership\",\n                    sgqlc.types.Arg(\n                        TeamMembershipType, graphql_name=\"membership\", default=\"ALL\"\n                    ),\n                ),\n                (\n                    \"role\",\n                    sgqlc.types.Arg(TeamMemberRole, graphql_name=\"role\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        TeamMemberOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    members_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"membersResourcePath\"\n    )\n    members_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"membersUrl\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    new_team_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"newTeamResourcePath\"\n    )\n    new_team_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"newTeamUrl\"\n    )\n    organization = sgqlc.types.Field(\n        sgqlc.types.non_null(Organization), graphql_name=\"organization\"\n    )\n    parent_team = sgqlc.types.Field(\"Team\", graphql_name=\"parentTeam\")\n    privacy = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamPrivacy), graphql_name=\"privacy\"\n    )\n    repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamRepositoryConnection),\n        graphql_name=\"repositories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\"query\", sgqlc.types.Arg(String, graphql_name=\"query\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        TeamRepositoryOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    repositories_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"repositoriesResourcePath\"\n    )\n    repositories_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"repositoriesUrl\"\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"slug\")\n    teams_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"teamsResourcePath\"\n    )\n    teams_url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"teamsUrl\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    viewer_can_administer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanAdminister\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamAddMemberAuditEntry","title":"<code>TeamAddMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>TeamAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamAddMemberAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData, TeamAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_ldap_mapped\",)\n    is_ldap_mapped = sgqlc.types.Field(Boolean, graphql_name=\"isLdapMapped\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamAddRepositoryAuditEntry","title":"<code>TeamAddRepositoryAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code>, <code>TeamAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamAddRepositoryAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n    TeamAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_ldap_mapped\",)\n    is_ldap_mapped = sgqlc.types.Field(Boolean, graphql_name=\"isLdapMapped\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamAuditEntryData","title":"<code>TeamAuditEntryData</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamAuditEntryData(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"team\", \"team_name\", \"team_resource_path\", \"team_url\")\n    team = sgqlc.types.Field(\"Team\", graphql_name=\"team\")\n    team_name = sgqlc.types.Field(String, graphql_name=\"teamName\")\n    team_resource_path = sgqlc.types.Field(URI, graphql_name=\"teamResourcePath\")\n    team_url = sgqlc.types.Field(URI, graphql_name=\"teamUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamChangeParentTeamAuditEntry","title":"<code>TeamChangeParentTeamAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>TeamAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamChangeParentTeamAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData, TeamAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"is_ldap_mapped\",\n        \"parent_team\",\n        \"parent_team_name\",\n        \"parent_team_name_was\",\n        \"parent_team_resource_path\",\n        \"parent_team_url\",\n        \"parent_team_was\",\n        \"parent_team_was_resource_path\",\n        \"parent_team_was_url\",\n    )\n    is_ldap_mapped = sgqlc.types.Field(Boolean, graphql_name=\"isLdapMapped\")\n    parent_team = sgqlc.types.Field(Team, graphql_name=\"parentTeam\")\n    parent_team_name = sgqlc.types.Field(String, graphql_name=\"parentTeamName\")\n    parent_team_name_was = sgqlc.types.Field(String, graphql_name=\"parentTeamNameWas\")\n    parent_team_resource_path = sgqlc.types.Field(\n        URI, graphql_name=\"parentTeamResourcePath\"\n    )\n    parent_team_url = sgqlc.types.Field(URI, graphql_name=\"parentTeamUrl\")\n    parent_team_was = sgqlc.types.Field(Team, graphql_name=\"parentTeamWas\")\n    parent_team_was_resource_path = sgqlc.types.Field(\n        URI, graphql_name=\"parentTeamWasResourcePath\"\n    )\n    parent_team_was_url = sgqlc.types.Field(URI, graphql_name=\"parentTeamWasUrl\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamConnection","title":"<code>TeamConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"TeamEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Team\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussion","title":"<code>TeamDiscussion</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Comment</code>, <code>Deletable</code>, <code>Reactable</code>, <code>Subscribable</code>, <code>UniformResourceLocatable</code>, <code>Updatable</code>, <code>UpdatableComment</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussion(\n    sgqlc.types.Type,\n    Node,\n    Comment,\n    Deletable,\n    Reactable,\n    Subscribable,\n    UniformResourceLocatable,\n    Updatable,\n    UpdatableComment,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"body_version\",\n        \"comments\",\n        \"comments_resource_path\",\n        \"comments_url\",\n        \"is_pinned\",\n        \"is_private\",\n        \"number\",\n        \"team\",\n        \"title\",\n        \"viewer_can_pin\",\n    )\n    body_version = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"bodyVersion\"\n    )\n    comments = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamDiscussionCommentConnection),\n        graphql_name=\"comments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        TeamDiscussionCommentOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\n                    \"from_comment\",\n                    sgqlc.types.Arg(Int, graphql_name=\"fromComment\", default=None),\n                ),\n            )\n        ),\n    )\n    comments_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"commentsResourcePath\"\n    )\n    comments_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"commentsUrl\"\n    )\n    is_pinned = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPinned\"\n    )\n    is_private = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isPrivate\"\n    )\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n    team = sgqlc.types.Field(sgqlc.types.non_null(Team), graphql_name=\"team\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    viewer_can_pin = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanPin\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionComment","title":"<code>TeamDiscussionComment</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Comment</code>, <code>Deletable</code>, <code>Reactable</code>, <code>UniformResourceLocatable</code>, <code>Updatable</code>, <code>UpdatableComment</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionComment(\n    sgqlc.types.Type,\n    Node,\n    Comment,\n    Deletable,\n    Reactable,\n    UniformResourceLocatable,\n    Updatable,\n    UpdatableComment,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"body_version\", \"discussion\", \"number\")\n    body_version = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"bodyVersion\"\n    )\n    discussion = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamDiscussion), graphql_name=\"discussion\"\n    )\n    number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"number\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionCommentConnection","title":"<code>TeamDiscussionCommentConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionCommentConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"TeamDiscussionCommentEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"TeamDiscussionComment\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionCommentEdge","title":"<code>TeamDiscussionCommentEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionCommentEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"TeamDiscussionComment\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionCommentOrder","title":"<code>TeamDiscussionCommentOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionCommentOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamDiscussionCommentOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionCommentOrderField","title":"<code>TeamDiscussionCommentOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionCommentOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"NUMBER\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionConnection","title":"<code>TeamDiscussionConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"TeamDiscussionEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"TeamDiscussion\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionEdge","title":"<code>TeamDiscussionEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"TeamDiscussion\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionOrder","title":"<code>TeamDiscussionOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamDiscussionOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionOrderField","title":"<code>TeamDiscussionOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamDiscussionOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamEdge","title":"<code>TeamEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"Team\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberConnection","title":"<code>TeamMemberConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamMemberConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"TeamMemberEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberEdge","title":"<code>TeamMemberEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamMemberEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"cursor\",\n        \"member_access_resource_path\",\n        \"member_access_url\",\n        \"node\",\n        \"role\",\n    )\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    member_access_resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"memberAccessResourcePath\"\n    )\n    member_access_url = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"memberAccessUrl\"\n    )\n    node = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"node\")\n    role = sgqlc.types.Field(sgqlc.types.non_null(TeamMemberRole), graphql_name=\"role\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberOrder","title":"<code>TeamMemberOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamMemberOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamMemberOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberOrderField","title":"<code>TeamMemberOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamMemberOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"LOGIN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberRole","title":"<code>TeamMemberRole</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamMemberRole(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"MAINTAINER\", \"MEMBER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMembershipType","title":"<code>TeamMembershipType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamMembershipType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ALL\", \"CHILD_TEAM\", \"IMMEDIATE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamOrder","title":"<code>TeamOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamOrderField","title":"<code>TeamOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"NAME\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamPrivacy","title":"<code>TeamPrivacy</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamPrivacy(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"SECRET\", \"VISIBLE\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRemoveMemberAuditEntry","title":"<code>TeamRemoveMemberAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>TeamAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamRemoveMemberAuditEntry(\n    sgqlc.types.Type, Node, AuditEntry, OrganizationAuditEntryData, TeamAuditEntryData\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_ldap_mapped\",)\n    is_ldap_mapped = sgqlc.types.Field(Boolean, graphql_name=\"isLdapMapped\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRemoveRepositoryAuditEntry","title":"<code>TeamRemoveRepositoryAuditEntry</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>AuditEntry</code>, <code>OrganizationAuditEntryData</code>, <code>RepositoryAuditEntryData</code>, <code>TeamAuditEntryData</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamRemoveRepositoryAuditEntry(\n    sgqlc.types.Type,\n    Node,\n    AuditEntry,\n    OrganizationAuditEntryData,\n    RepositoryAuditEntryData,\n    TeamAuditEntryData,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_ldap_mapped\",)\n    is_ldap_mapped = sgqlc.types.Field(Boolean, graphql_name=\"isLdapMapped\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRepositoryConnection","title":"<code>TeamRepositoryConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamRepositoryConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"TeamRepositoryEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"Repository\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRepositoryEdge","title":"<code>TeamRepositoryEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamRepositoryEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\", \"permission\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(sgqlc.types.non_null(\"Repository\"), graphql_name=\"node\")\n    permission = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryPermission), graphql_name=\"permission\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRepositoryOrder","title":"<code>TeamRepositoryOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamRepositoryOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(TeamRepositoryOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRepositoryOrderField","title":"<code>TeamRepositoryOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamRepositoryOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"CREATED_AT\",\n        \"NAME\",\n        \"PERMISSION\",\n        \"PUSHED_AT\",\n        \"STARGAZERS\",\n        \"UPDATED_AT\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRole","title":"<code>TeamRole</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TeamRole(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ADMIN\", \"MEMBER\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TextMatch","title":"<code>TextMatch</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TextMatch(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"fragment\", \"highlights\", \"property\")\n    fragment = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"fragment\")\n    highlights = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(\"TextMatchHighlight\"))\n        ),\n        graphql_name=\"highlights\",\n    )\n    property = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"property\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TextMatchHighlight","title":"<code>TextMatchHighlight</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TextMatchHighlight(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"begin_indice\", \"end_indice\", \"text\")\n    begin_indice = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"beginIndice\"\n    )\n    end_indice = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"endIndice\")\n    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"text\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Topic","title":"<code>Topic</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Starrable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Topic(sgqlc.types.Type, Node, Starrable):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"name\", \"related_topics\", \"repositories\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    related_topics = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(\"Topic\"))),\n        graphql_name=\"relatedTopics\",\n        args=sgqlc.types.ArgDict(\n            ((\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=3)),)\n        ),\n    )\n    repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryConnection),\n        graphql_name=\"repositories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"privacy\",\n                    sgqlc.types.Arg(\n                        RepositoryPrivacy, graphql_name=\"privacy\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\n                    \"affiliations\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryAffiliation),\n                        graphql_name=\"affiliations\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"owner_affiliations\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryAffiliation),\n                        graphql_name=\"ownerAffiliations\",\n                        default=(\"OWNER\", \"COLLABORATOR\"),\n                    ),\n                ),\n                (\n                    \"is_locked\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isLocked\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"sponsorable_only\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"sponsorableOnly\", default=False\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TopicAuditEntryData","title":"<code>TopicAuditEntryData</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TopicAuditEntryData(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"topic\", \"topic_name\")\n    topic = sgqlc.types.Field(\"Topic\", graphql_name=\"topic\")\n    topic_name = sgqlc.types.Field(String, graphql_name=\"topicName\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TopicSuggestionDeclineReason","title":"<code>TopicSuggestionDeclineReason</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TopicSuggestionDeclineReason(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"NOT_RELEVANT\", \"PERSONAL_PREFERENCE\", \"TOO_GENERAL\", \"TOO_SPECIFIC\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TrackedIssueStates","title":"<code>TrackedIssueStates</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TrackedIssueStates(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CLOSED\", \"OPEN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TransferIssueInput","title":"<code>TransferIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TransferIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"issue_id\",\n        \"repository_id\",\n        \"create_labels_if_missing\",\n        \"client_mutation_id\",\n    )\n    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"issueId\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    create_labels_if_missing = sgqlc.types.Field(\n        Boolean, graphql_name=\"createLabelsIfMissing\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TransferIssuePayload","title":"<code>TransferIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TransferIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"issue\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    issue = sgqlc.types.Field(\"Issue\", graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TransferredEvent","title":"<code>TransferredEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TransferredEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"from_repository\", \"issue\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    from_repository = sgqlc.types.Field(Repository, graphql_name=\"fromRepository\")\n    issue = sgqlc.types.Field(sgqlc.types.non_null(Issue), graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Tree","title":"<code>Tree</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>GitObject</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Tree(sgqlc.types.Type, Node, GitObject):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"entries\",)\n    entries = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(TreeEntry)), graphql_name=\"entries\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TreeEntry","title":"<code>TreeEntry</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class TreeEntry(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"extension\",\n        \"is_generated\",\n        \"line_count\",\n        \"mode\",\n        \"name\",\n        \"object\",\n        \"oid\",\n        \"path\",\n        \"repository\",\n        \"size\",\n        \"submodule\",\n        \"type\",\n    )\n    extension = sgqlc.types.Field(String, graphql_name=\"extension\")\n    is_generated = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isGenerated\"\n    )\n    line_count = sgqlc.types.Field(Int, graphql_name=\"lineCount\")\n    mode = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"mode\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    object = sgqlc.types.Field(GitObject, graphql_name=\"object\")\n    oid = sgqlc.types.Field(sgqlc.types.non_null(GitObjectID), graphql_name=\"oid\")\n    path = sgqlc.types.Field(String, graphql_name=\"path\")\n    repository = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Repository\"), graphql_name=\"repository\"\n    )\n    size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"size\")\n    submodule = sgqlc.types.Field(Submodule, graphql_name=\"submodule\")\n    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"type\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.URI","title":"<code>URI</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class URI(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnarchiveRepositoryInput","title":"<code>UnarchiveRepositoryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnarchiveRepositoryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnarchiveRepositoryPayload","title":"<code>UnarchiveRepositoryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnarchiveRepositoryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnassignedEvent","title":"<code>UnassignedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnassignedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"assignable\", \"assignee\", \"created_at\", \"user\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    assignable = sgqlc.types.Field(\n        sgqlc.types.non_null(Assignable), graphql_name=\"assignable\"\n    )\n    assignee = sgqlc.types.Field(\"Assignee\", graphql_name=\"assignee\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnfollowOrganizationInput","title":"<code>UnfollowOrganizationInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnfollowOrganizationInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"organization_id\", \"client_mutation_id\")\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnfollowOrganizationPayload","title":"<code>UnfollowOrganizationPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnfollowOrganizationPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"organization\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    organization = sgqlc.types.Field(\"Organization\", graphql_name=\"organization\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnfollowUserInput","title":"<code>UnfollowUserInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnfollowUserInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"user_id\", \"client_mutation_id\")\n    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"userId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnfollowUserPayload","title":"<code>UnfollowUserPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnfollowUserPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"user\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    user = sgqlc.types.Field(\"User\", graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UniformResourceLocatable","title":"<code>UniformResourceLocatable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UniformResourceLocatable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"resource_path\", \"url\")\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnknownSignature","title":"<code>UnknownSignature</code>","text":"<p>             Bases: <code>Type</code>, <code>GitSignature</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnknownSignature(sgqlc.types.Type, GitSignature):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = ()\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlabeledEvent","title":"<code>UnlabeledEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnlabeledEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"label\", \"labelable\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    label = sgqlc.types.Field(sgqlc.types.non_null(Label), graphql_name=\"label\")\n    labelable = sgqlc.types.Field(\n        sgqlc.types.non_null(Labelable), graphql_name=\"labelable\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlinkRepositoryFromProjectInput","title":"<code>UnlinkRepositoryFromProjectInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnlinkRepositoryFromProjectInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"repository_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlinkRepositoryFromProjectPayload","title":"<code>UnlinkRepositoryFromProjectPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnlinkRepositoryFromProjectPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project = sgqlc.types.Field(\"Project\", graphql_name=\"project\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlockLockableInput","title":"<code>UnlockLockableInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnlockLockableInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"lockable_id\", \"client_mutation_id\")\n    lockable_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"lockableId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlockLockablePayload","title":"<code>UnlockLockablePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnlockLockablePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"client_mutation_id\", \"unlocked_record\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    unlocked_record = sgqlc.types.Field(Lockable, graphql_name=\"unlockedRecord\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlockedEvent","title":"<code>UnlockedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnlockedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"lockable\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    lockable = sgqlc.types.Field(\n        sgqlc.types.non_null(Lockable), graphql_name=\"lockable\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkDiscussionCommentAsAnswerInput","title":"<code>UnmarkDiscussionCommentAsAnswerInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnmarkDiscussionCommentAsAnswerInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkDiscussionCommentAsAnswerPayload","title":"<code>UnmarkDiscussionCommentAsAnswerPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnmarkDiscussionCommentAsAnswerPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"discussion\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    discussion = sgqlc.types.Field(\"Discussion\", graphql_name=\"discussion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkFileAsViewedInput","title":"<code>UnmarkFileAsViewedInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnmarkFileAsViewedInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_id\", \"path\", \"client_mutation_id\")\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"path\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkFileAsViewedPayload","title":"<code>UnmarkFileAsViewedPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnmarkFileAsViewedPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkIssueAsDuplicateInput","title":"<code>UnmarkIssueAsDuplicateInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnmarkIssueAsDuplicateInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"duplicate_id\", \"canonical_id\", \"client_mutation_id\")\n    duplicate_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"duplicateId\"\n    )\n    canonical_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"canonicalId\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkIssueAsDuplicatePayload","title":"<code>UnmarkIssueAsDuplicatePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnmarkIssueAsDuplicatePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"duplicate\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    duplicate = sgqlc.types.Field(\"IssueOrPullRequest\", graphql_name=\"duplicate\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkedAsDuplicateEvent","title":"<code>UnmarkedAsDuplicateEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnmarkedAsDuplicateEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"actor\",\n        \"canonical\",\n        \"created_at\",\n        \"duplicate\",\n        \"is_cross_repository\",\n    )\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    canonical = sgqlc.types.Field(\"IssueOrPullRequest\", graphql_name=\"canonical\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    duplicate = sgqlc.types.Field(\"IssueOrPullRequest\", graphql_name=\"duplicate\")\n    is_cross_repository = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCrossRepository\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnminimizeCommentInput","title":"<code>UnminimizeCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnminimizeCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"subject_id\", \"client_mutation_id\")\n    subject_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"subjectId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnminimizeCommentPayload","title":"<code>UnminimizeCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnminimizeCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"unminimized_comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    unminimized_comment = sgqlc.types.Field(\n        Minimizable, graphql_name=\"unminimizedComment\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnpinIssueInput","title":"<code>UnpinIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnpinIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"issue_id\", \"client_mutation_id\")\n    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"issueId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnpinIssuePayload","title":"<code>UnpinIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnpinIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"issue\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    issue = sgqlc.types.Field(\"Issue\", graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnpinnedEvent","title":"<code>UnpinnedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnpinnedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"issue\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    issue = sgqlc.types.Field(sgqlc.types.non_null(Issue), graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnresolveReviewThreadInput","title":"<code>UnresolveReviewThreadInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnresolveReviewThreadInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"thread_id\", \"client_mutation_id\")\n    thread_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"threadId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnresolveReviewThreadPayload","title":"<code>UnresolveReviewThreadPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnresolveReviewThreadPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"thread\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    thread = sgqlc.types.Field(\"PullRequestReviewThread\", graphql_name=\"thread\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnsubscribedEvent","title":"<code>UnsubscribedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UnsubscribedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"created_at\", \"subscribable\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    subscribable = sgqlc.types.Field(\n        sgqlc.types.non_null(Subscribable), graphql_name=\"subscribable\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Updatable","title":"<code>Updatable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Updatable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"viewer_can_update\",)\n    viewer_can_update = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanUpdate\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatableComment","title":"<code>UpdatableComment</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatableComment(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"viewer_cannot_update_reasons\",)\n    viewer_cannot_update_reasons = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(CommentCannotUpdateReason))\n        ),\n        graphql_name=\"viewerCannotUpdateReasons\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateBranchProtectionRuleInput","title":"<code>UpdateBranchProtectionRuleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateBranchProtectionRuleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"branch_protection_rule_id\",\n        \"pattern\",\n        \"requires_approving_reviews\",\n        \"required_approving_review_count\",\n        \"requires_commit_signatures\",\n        \"requires_linear_history\",\n        \"blocks_creations\",\n        \"allows_force_pushes\",\n        \"allows_deletions\",\n        \"is_admin_enforced\",\n        \"requires_status_checks\",\n        \"requires_strict_status_checks\",\n        \"requires_code_owner_reviews\",\n        \"dismisses_stale_reviews\",\n        \"restricts_review_dismissals\",\n        \"review_dismissal_actor_ids\",\n        \"bypass_pull_request_actor_ids\",\n        \"bypass_force_push_actor_ids\",\n        \"restricts_pushes\",\n        \"push_actor_ids\",\n        \"required_status_check_contexts\",\n        \"required_status_checks\",\n        \"requires_conversation_resolution\",\n        \"client_mutation_id\",\n    )\n    branch_protection_rule_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"branchProtectionRuleId\"\n    )\n    pattern = sgqlc.types.Field(String, graphql_name=\"pattern\")\n    requires_approving_reviews = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresApprovingReviews\"\n    )\n    required_approving_review_count = sgqlc.types.Field(\n        Int, graphql_name=\"requiredApprovingReviewCount\"\n    )\n    requires_commit_signatures = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresCommitSignatures\"\n    )\n    requires_linear_history = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresLinearHistory\"\n    )\n    blocks_creations = sgqlc.types.Field(Boolean, graphql_name=\"blocksCreations\")\n    allows_force_pushes = sgqlc.types.Field(Boolean, graphql_name=\"allowsForcePushes\")\n    allows_deletions = sgqlc.types.Field(Boolean, graphql_name=\"allowsDeletions\")\n    is_admin_enforced = sgqlc.types.Field(Boolean, graphql_name=\"isAdminEnforced\")\n    requires_status_checks = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresStatusChecks\"\n    )\n    requires_strict_status_checks = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresStrictStatusChecks\"\n    )\n    requires_code_owner_reviews = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresCodeOwnerReviews\"\n    )\n    dismisses_stale_reviews = sgqlc.types.Field(\n        Boolean, graphql_name=\"dismissesStaleReviews\"\n    )\n    restricts_review_dismissals = sgqlc.types.Field(\n        Boolean, graphql_name=\"restrictsReviewDismissals\"\n    )\n    review_dismissal_actor_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)),\n        graphql_name=\"reviewDismissalActorIds\",\n    )\n    bypass_pull_request_actor_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)),\n        graphql_name=\"bypassPullRequestActorIds\",\n    )\n    bypass_force_push_actor_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)),\n        graphql_name=\"bypassForcePushActorIds\",\n    )\n    restricts_pushes = sgqlc.types.Field(Boolean, graphql_name=\"restrictsPushes\")\n    push_actor_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"pushActorIds\"\n    )\n    required_status_check_contexts = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n        graphql_name=\"requiredStatusCheckContexts\",\n    )\n    required_status_checks = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(RequiredStatusCheckInput)),\n        graphql_name=\"requiredStatusChecks\",\n    )\n    requires_conversation_resolution = sgqlc.types.Field(\n        Boolean, graphql_name=\"requiresConversationResolution\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateBranchProtectionRulePayload","title":"<code>UpdateBranchProtectionRulePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateBranchProtectionRulePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"branch_protection_rule\", \"client_mutation_id\")\n    branch_protection_rule = sgqlc.types.Field(\n        \"BranchProtectionRule\", graphql_name=\"branchProtectionRule\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateCheckRunInput","title":"<code>UpdateCheckRunInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateCheckRunInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"check_run_id\",\n        \"name\",\n        \"details_url\",\n        \"external_id\",\n        \"status\",\n        \"started_at\",\n        \"conclusion\",\n        \"completed_at\",\n        \"output\",\n        \"actions\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    check_run_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"checkRunId\"\n    )\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    details_url = sgqlc.types.Field(URI, graphql_name=\"detailsUrl\")\n    external_id = sgqlc.types.Field(String, graphql_name=\"externalId\")\n    status = sgqlc.types.Field(RequestableCheckStatusState, graphql_name=\"status\")\n    started_at = sgqlc.types.Field(DateTime, graphql_name=\"startedAt\")\n    conclusion = sgqlc.types.Field(CheckConclusionState, graphql_name=\"conclusion\")\n    completed_at = sgqlc.types.Field(DateTime, graphql_name=\"completedAt\")\n    output = sgqlc.types.Field(CheckRunOutput, graphql_name=\"output\")\n    actions = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(CheckRunAction)),\n        graphql_name=\"actions\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateCheckRunPayload","title":"<code>UpdateCheckRunPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateCheckRunPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"check_run\", \"client_mutation_id\")\n    check_run = sgqlc.types.Field(\"CheckRun\", graphql_name=\"checkRun\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateCheckSuitePreferencesInput","title":"<code>UpdateCheckSuitePreferencesInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateCheckSuitePreferencesInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"auto_trigger_preferences\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    auto_trigger_preferences = sgqlc.types.Field(\n        sgqlc.types.non_null(\n            sgqlc.types.list_of(sgqlc.types.non_null(CheckSuiteAutoTriggerPreference))\n        ),\n        graphql_name=\"autoTriggerPreferences\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateCheckSuitePreferencesPayload","title":"<code>UpdateCheckSuitePreferencesPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateCheckSuitePreferencesPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateDiscussionCommentInput","title":"<code>UpdateDiscussionCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateDiscussionCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"comment_id\", \"body\", \"client_mutation_id\")\n    comment_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"commentId\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateDiscussionCommentPayload","title":"<code>UpdateDiscussionCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateDiscussionCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    comment = sgqlc.types.Field(\"DiscussionComment\", graphql_name=\"comment\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateDiscussionInput","title":"<code>UpdateDiscussionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateDiscussionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"discussion_id\",\n        \"title\",\n        \"body\",\n        \"category_id\",\n        \"client_mutation_id\",\n    )\n    discussion_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"discussionId\"\n    )\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    category_id = sgqlc.types.Field(ID, graphql_name=\"categoryId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateDiscussionPayload","title":"<code>UpdateDiscussionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateDiscussionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"discussion\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    discussion = sgqlc.types.Field(\"Discussion\", graphql_name=\"discussion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseAdministratorRoleInput","title":"<code>UpdateEnterpriseAdministratorRoleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseAdministratorRoleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"login\", \"role\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"login\")\n    role = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseAdministratorRole), graphql_name=\"role\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseAdministratorRolePayload","title":"<code>UpdateEnterpriseAdministratorRolePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseAdministratorRolePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput","title":"<code>UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"enterprise_id\",\n        \"setting_value\",\n        \"policy_value\",\n        \"client_mutation_id\",\n    )\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    policy_value = sgqlc.types.Field(\n        EnterpriseAllowPrivateRepositoryForkingPolicyValue, graphql_name=\"policyValue\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload","title":"<code>UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseDefaultRepositoryPermissionSettingInput","title":"<code>UpdateEnterpriseDefaultRepositoryPermissionSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseDefaultRepositoryPermissionSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseDefaultRepositoryPermissionSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseDefaultRepositoryPermissionSettingPayload","title":"<code>UpdateEnterpriseDefaultRepositoryPermissionSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseDefaultRepositoryPermissionSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput","title":"<code>UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput(\n    sgqlc.types.Input\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload","title":"<code>UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload(\n    sgqlc.types.Type\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanCreateRepositoriesSettingInput","title":"<code>UpdateEnterpriseMembersCanCreateRepositoriesSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanCreateRepositoriesSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"enterprise_id\",\n        \"setting_value\",\n        \"members_can_create_repositories_policy_enabled\",\n        \"members_can_create_public_repositories\",\n        \"members_can_create_private_repositories\",\n        \"members_can_create_internal_repositories\",\n        \"client_mutation_id\",\n    )\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        EnterpriseMembersCanCreateRepositoriesSettingValue, graphql_name=\"settingValue\"\n    )\n    members_can_create_repositories_policy_enabled = sgqlc.types.Field(\n        Boolean, graphql_name=\"membersCanCreateRepositoriesPolicyEnabled\"\n    )\n    members_can_create_public_repositories = sgqlc.types.Field(\n        Boolean, graphql_name=\"membersCanCreatePublicRepositories\"\n    )\n    members_can_create_private_repositories = sgqlc.types.Field(\n        Boolean, graphql_name=\"membersCanCreatePrivateRepositories\"\n    )\n    members_can_create_internal_repositories = sgqlc.types.Field(\n        Boolean, graphql_name=\"membersCanCreateInternalRepositories\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload","title":"<code>UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanDeleteIssuesSettingInput","title":"<code>UpdateEnterpriseMembersCanDeleteIssuesSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanDeleteIssuesSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanDeleteIssuesSettingPayload","title":"<code>UpdateEnterpriseMembersCanDeleteIssuesSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanDeleteIssuesSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput","title":"<code>UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload","title":"<code>UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput","title":"<code>UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload","title":"<code>UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanMakePurchasesSettingInput","title":"<code>UpdateEnterpriseMembersCanMakePurchasesSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanMakePurchasesSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseMembersCanMakePurchasesSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanMakePurchasesSettingPayload","title":"<code>UpdateEnterpriseMembersCanMakePurchasesSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanMakePurchasesSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput","title":"<code>UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload","title":"<code>UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput","title":"<code>UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload","title":"<code>UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseOrganizationProjectsSettingInput","title":"<code>UpdateEnterpriseOrganizationProjectsSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseOrganizationProjectsSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseOrganizationProjectsSettingPayload","title":"<code>UpdateEnterpriseOrganizationProjectsSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseOrganizationProjectsSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseOwnerOrganizationRoleInput","title":"<code>UpdateEnterpriseOwnerOrganizationRoleInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseOwnerOrganizationRoleInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"enterprise_id\",\n        \"organization_id\",\n        \"organization_role\",\n        \"client_mutation_id\",\n    )\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    organization_role = sgqlc.types.Field(\n        sgqlc.types.non_null(RoleInOrganization), graphql_name=\"organizationRole\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseOwnerOrganizationRolePayload","title":"<code>UpdateEnterpriseOwnerOrganizationRolePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseOwnerOrganizationRolePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseProfileInput","title":"<code>UpdateEnterpriseProfileInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseProfileInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"enterprise_id\",\n        \"name\",\n        \"description\",\n        \"website_url\",\n        \"location\",\n        \"client_mutation_id\",\n    )\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    website_url = sgqlc.types.Field(String, graphql_name=\"websiteUrl\")\n    location = sgqlc.types.Field(String, graphql_name=\"location\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseProfilePayload","title":"<code>UpdateEnterpriseProfilePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseProfilePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseRepositoryProjectsSettingInput","title":"<code>UpdateEnterpriseRepositoryProjectsSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseRepositoryProjectsSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseRepositoryProjectsSettingPayload","title":"<code>UpdateEnterpriseRepositoryProjectsSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseRepositoryProjectsSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseTeamDiscussionsSettingInput","title":"<code>UpdateEnterpriseTeamDiscussionsSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseTeamDiscussionsSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledDisabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseTeamDiscussionsSettingPayload","title":"<code>UpdateEnterpriseTeamDiscussionsSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseTeamDiscussionsSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput","title":"<code>UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"enterprise_id\", \"setting_value\", \"client_mutation_id\")\n    enterprise_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"enterpriseId\"\n    )\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(EnterpriseEnabledSettingValue), graphql_name=\"settingValue\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload","title":"<code>UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"enterprise\", \"message\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    enterprise = sgqlc.types.Field(\"Enterprise\", graphql_name=\"enterprise\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnvironmentInput","title":"<code>UpdateEnvironmentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnvironmentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"environment_id\",\n        \"wait_timer\",\n        \"reviewers\",\n        \"client_mutation_id\",\n    )\n    environment_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"environmentId\"\n    )\n    wait_timer = sgqlc.types.Field(Int, graphql_name=\"waitTimer\")\n    reviewers = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"reviewers\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnvironmentPayload","title":"<code>UpdateEnvironmentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateEnvironmentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"environment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    environment = sgqlc.types.Field(\"Environment\", graphql_name=\"environment\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListEnabledSettingInput","title":"<code>UpdateIpAllowListEnabledSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIpAllowListEnabledSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"owner_id\", \"setting_value\", \"client_mutation_id\")\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListEnabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListEnabledSettingPayload","title":"<code>UpdateIpAllowListEnabledSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIpAllowListEnabledSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"owner\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    owner = sgqlc.types.Field(\"IpAllowListOwner\", graphql_name=\"owner\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListEntryInput","title":"<code>UpdateIpAllowListEntryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIpAllowListEntryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"ip_allow_list_entry_id\",\n        \"allow_list_value\",\n        \"name\",\n        \"is_active\",\n        \"client_mutation_id\",\n    )\n    ip_allow_list_entry_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"ipAllowListEntryId\"\n    )\n    allow_list_value = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"allowListValue\"\n    )\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    is_active = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isActive\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListEntryPayload","title":"<code>UpdateIpAllowListEntryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIpAllowListEntryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"ip_allow_list_entry\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    ip_allow_list_entry = sgqlc.types.Field(\n        \"IpAllowListEntry\", graphql_name=\"ipAllowListEntry\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListForInstalledAppsEnabledSettingInput","title":"<code>UpdateIpAllowListForInstalledAppsEnabledSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIpAllowListForInstalledAppsEnabledSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"owner_id\", \"setting_value\", \"client_mutation_id\")\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(IpAllowListForInstalledAppsEnabledSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListForInstalledAppsEnabledSettingPayload","title":"<code>UpdateIpAllowListForInstalledAppsEnabledSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIpAllowListForInstalledAppsEnabledSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"owner\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    owner = sgqlc.types.Field(\"IpAllowListOwner\", graphql_name=\"owner\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIssueCommentInput","title":"<code>UpdateIssueCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIssueCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"body\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIssueCommentPayload","title":"<code>UpdateIssueCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIssueCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"issue_comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    issue_comment = sgqlc.types.Field(\"IssueComment\", graphql_name=\"issueComment\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIssueInput","title":"<code>UpdateIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"id\",\n        \"title\",\n        \"body\",\n        \"assignee_ids\",\n        \"milestone_id\",\n        \"label_ids\",\n        \"state\",\n        \"project_ids\",\n        \"client_mutation_id\",\n    )\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"assigneeIds\"\n    )\n    milestone_id = sgqlc.types.Field(ID, graphql_name=\"milestoneId\")\n    label_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"labelIds\"\n    )\n    state = sgqlc.types.Field(IssueState, graphql_name=\"state\")\n    project_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"projectIds\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIssuePayload","title":"<code>UpdateIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"client_mutation_id\", \"issue\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    issue = sgqlc.types.Field(\"Issue\", graphql_name=\"issue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateNotificationRestrictionSettingInput","title":"<code>UpdateNotificationRestrictionSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateNotificationRestrictionSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"owner_id\", \"setting_value\", \"client_mutation_id\")\n    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"ownerId\")\n    setting_value = sgqlc.types.Field(\n        sgqlc.types.non_null(NotificationRestrictionSettingValue),\n        graphql_name=\"settingValue\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateNotificationRestrictionSettingPayload","title":"<code>UpdateNotificationRestrictionSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateNotificationRestrictionSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"owner\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    owner = sgqlc.types.Field(\"VerifiableDomainOwner\", graphql_name=\"owner\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateOrganizationAllowPrivateRepositoryForkingSettingInput","title":"<code>UpdateOrganizationAllowPrivateRepositoryForkingSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateOrganizationAllowPrivateRepositoryForkingSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"organization_id\", \"forking_enabled\", \"client_mutation_id\")\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    forking_enabled = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"forkingEnabled\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload","title":"<code>UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"message\", \"organization\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n    organization = sgqlc.types.Field(\"Organization\", graphql_name=\"organization\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateOrganizationWebCommitSignoffSettingInput","title":"<code>UpdateOrganizationWebCommitSignoffSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateOrganizationWebCommitSignoffSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"organization_id\",\n        \"web_commit_signoff_required\",\n        \"client_mutation_id\",\n    )\n    organization_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"organizationId\"\n    )\n    web_commit_signoff_required = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"webCommitSignoffRequired\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateOrganizationWebCommitSignoffSettingPayload","title":"<code>UpdateOrganizationWebCommitSignoffSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateOrganizationWebCommitSignoffSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"message\", \"organization\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n    organization = sgqlc.types.Field(\"Organization\", graphql_name=\"organization\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectCardInput","title":"<code>UpdateProjectCardInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectCardInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_card_id\", \"is_archived\", \"note\", \"client_mutation_id\")\n    project_card_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"projectCardId\"\n    )\n    is_archived = sgqlc.types.Field(Boolean, graphql_name=\"isArchived\")\n    note = sgqlc.types.Field(String, graphql_name=\"note\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectCardPayload","title":"<code>UpdateProjectCardPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectCardPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_card\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_card = sgqlc.types.Field(\"ProjectCard\", graphql_name=\"projectCard\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectColumnInput","title":"<code>UpdateProjectColumnInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectColumnInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_column_id\", \"name\", \"client_mutation_id\")\n    project_column_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"projectColumnId\"\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectColumnPayload","title":"<code>UpdateProjectColumnPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectColumnPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_column\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_column = sgqlc.types.Field(\"ProjectColumn\", graphql_name=\"projectColumn\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectDraftIssueInput","title":"<code>UpdateProjectDraftIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectDraftIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"draft_issue_id\",\n        \"title\",\n        \"body\",\n        \"assignee_ids\",\n        \"client_mutation_id\",\n    )\n    draft_issue_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"draftIssueId\"\n    )\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"assigneeIds\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectDraftIssuePayload","title":"<code>UpdateProjectDraftIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectDraftIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"draft_issue\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    draft_issue = sgqlc.types.Field(\"DraftIssue\", graphql_name=\"draftIssue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectInput","title":"<code>UpdateProjectInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"project_id\",\n        \"name\",\n        \"body\",\n        \"state\",\n        \"public\",\n        \"client_mutation_id\",\n    )\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    state = sgqlc.types.Field(ProjectState, graphql_name=\"state\")\n    public = sgqlc.types.Field(Boolean, graphql_name=\"public\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectNextInput","title":"<code>UpdateProjectNextInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectNextInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"project_id\",\n        \"title\",\n        \"description\",\n        \"short_description\",\n        \"closed\",\n        \"public\",\n        \"client_mutation_id\",\n    )\n    project_id = sgqlc.types.Field(ID, graphql_name=\"projectId\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    short_description = sgqlc.types.Field(String, graphql_name=\"shortDescription\")\n    closed = sgqlc.types.Field(Boolean, graphql_name=\"closed\")\n    public = sgqlc.types.Field(Boolean, graphql_name=\"public\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectNextItemFieldInput","title":"<code>UpdateProjectNextItemFieldInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectNextItemFieldInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"project_id\",\n        \"item_id\",\n        \"field_id\",\n        \"value\",\n        \"client_mutation_id\",\n    )\n    project_id = sgqlc.types.Field(ID, graphql_name=\"projectId\")\n    item_id = sgqlc.types.Field(ID, graphql_name=\"itemId\")\n    field_id = sgqlc.types.Field(ID, graphql_name=\"fieldId\")\n    value = sgqlc.types.Field(String, graphql_name=\"value\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectNextItemFieldPayload","title":"<code>UpdateProjectNextItemFieldPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectNextItemFieldPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_next_item\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_next_item = sgqlc.types.Field(\n        \"ProjectNextItem\", graphql_name=\"projectNextItem\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectNextPayload","title":"<code>UpdateProjectNextPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectNextPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_next\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_next = sgqlc.types.Field(\"ProjectNext\", graphql_name=\"projectNext\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectPayload","title":"<code>UpdateProjectPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project = sgqlc.types.Field(\"Project\", graphql_name=\"project\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2DraftIssueInput","title":"<code>UpdateProjectV2DraftIssueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectV2DraftIssueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"draft_issue_id\",\n        \"title\",\n        \"body\",\n        \"assignee_ids\",\n        \"client_mutation_id\",\n    )\n    draft_issue_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"draftIssueId\"\n    )\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"assigneeIds\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2DraftIssuePayload","title":"<code>UpdateProjectV2DraftIssuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectV2DraftIssuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"draft_issue\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    draft_issue = sgqlc.types.Field(\"DraftIssue\", graphql_name=\"draftIssue\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2Input","title":"<code>UpdateProjectV2Input</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectV2Input(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"project_id\",\n        \"title\",\n        \"short_description\",\n        \"readme\",\n        \"closed\",\n        \"public\",\n        \"client_mutation_id\",\n    )\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    short_description = sgqlc.types.Field(String, graphql_name=\"shortDescription\")\n    readme = sgqlc.types.Field(String, graphql_name=\"readme\")\n    closed = sgqlc.types.Field(Boolean, graphql_name=\"closed\")\n    public = sgqlc.types.Field(Boolean, graphql_name=\"public\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2ItemFieldValueInput","title":"<code>UpdateProjectV2ItemFieldValueInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectV2ItemFieldValueInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"project_id\",\n        \"item_id\",\n        \"field_id\",\n        \"value\",\n        \"client_mutation_id\",\n    )\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"itemId\")\n    field_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"fieldId\")\n    value = sgqlc.types.Field(\n        sgqlc.types.non_null(ProjectV2FieldValue), graphql_name=\"value\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2ItemFieldValuePayload","title":"<code>UpdateProjectV2ItemFieldValuePayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectV2ItemFieldValuePayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_v2_item\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_v2_item = sgqlc.types.Field(\"ProjectV2Item\", graphql_name=\"projectV2Item\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2ItemPositionInput","title":"<code>UpdateProjectV2ItemPositionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectV2ItemPositionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"project_id\", \"item_id\", \"after_id\", \"client_mutation_id\")\n    project_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"projectId\")\n    item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"itemId\")\n    after_id = sgqlc.types.Field(ID, graphql_name=\"afterId\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2ItemPositionPayload","title":"<code>UpdateProjectV2ItemPositionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectV2ItemPositionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"items\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    items = sgqlc.types.Field(\n        ProjectV2ItemConnection,\n        graphql_name=\"items\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2Payload","title":"<code>UpdateProjectV2Payload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateProjectV2Payload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"project_v2\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    project_v2 = sgqlc.types.Field(\"ProjectV2\", graphql_name=\"projectV2\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestBranchInput","title":"<code>UpdatePullRequestBranchInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatePullRequestBranchInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_id\", \"expected_head_oid\", \"client_mutation_id\")\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    expected_head_oid = sgqlc.types.Field(GitObjectID, graphql_name=\"expectedHeadOid\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestBranchPayload","title":"<code>UpdatePullRequestBranchPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatePullRequestBranchPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestInput","title":"<code>UpdatePullRequestInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatePullRequestInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"pull_request_id\",\n        \"base_ref_name\",\n        \"title\",\n        \"body\",\n        \"state\",\n        \"maintainer_can_modify\",\n        \"assignee_ids\",\n        \"milestone_id\",\n        \"label_ids\",\n        \"project_ids\",\n        \"client_mutation_id\",\n    )\n    pull_request_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestId\"\n    )\n    base_ref_name = sgqlc.types.Field(String, graphql_name=\"baseRefName\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    state = sgqlc.types.Field(PullRequestUpdateState, graphql_name=\"state\")\n    maintainer_can_modify = sgqlc.types.Field(\n        Boolean, graphql_name=\"maintainerCanModify\"\n    )\n    assignee_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"assigneeIds\"\n    )\n    milestone_id = sgqlc.types.Field(ID, graphql_name=\"milestoneId\")\n    label_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"labelIds\"\n    )\n    project_ids = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name=\"projectIds\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestPayload","title":"<code>UpdatePullRequestPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatePullRequestPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"client_mutation_id\", \"pull_request\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request = sgqlc.types.Field(\"PullRequest\", graphql_name=\"pullRequest\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestReviewCommentInput","title":"<code>UpdatePullRequestReviewCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatePullRequestReviewCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_review_comment_id\", \"body\", \"client_mutation_id\")\n    pull_request_review_comment_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestReviewCommentId\"\n    )\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestReviewCommentPayload","title":"<code>UpdatePullRequestReviewCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatePullRequestReviewCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request_review_comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request_review_comment = sgqlc.types.Field(\n        \"PullRequestReviewComment\", graphql_name=\"pullRequestReviewComment\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestReviewInput","title":"<code>UpdatePullRequestReviewInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatePullRequestReviewInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"pull_request_review_id\", \"body\", \"client_mutation_id\")\n    pull_request_review_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"pullRequestReviewId\"\n    )\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestReviewPayload","title":"<code>UpdatePullRequestReviewPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdatePullRequestReviewPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"pull_request_review\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    pull_request_review = sgqlc.types.Field(\n        \"PullRequestReview\", graphql_name=\"pullRequestReview\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRefInput","title":"<code>UpdateRefInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateRefInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"ref_id\", \"oid\", \"force\", \"client_mutation_id\")\n    ref_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"refId\")\n    oid = sgqlc.types.Field(sgqlc.types.non_null(GitObjectID), graphql_name=\"oid\")\n    force = sgqlc.types.Field(Boolean, graphql_name=\"force\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRefPayload","title":"<code>UpdateRefPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateRefPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"ref\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    ref = sgqlc.types.Field(\"Ref\", graphql_name=\"ref\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRepositoryInput","title":"<code>UpdateRepositoryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateRepositoryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"name\",\n        \"description\",\n        \"template\",\n        \"homepage_url\",\n        \"has_wiki_enabled\",\n        \"has_issues_enabled\",\n        \"has_projects_enabled\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    name = sgqlc.types.Field(String, graphql_name=\"name\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    template = sgqlc.types.Field(Boolean, graphql_name=\"template\")\n    homepage_url = sgqlc.types.Field(URI, graphql_name=\"homepageUrl\")\n    has_wiki_enabled = sgqlc.types.Field(Boolean, graphql_name=\"hasWikiEnabled\")\n    has_issues_enabled = sgqlc.types.Field(Boolean, graphql_name=\"hasIssuesEnabled\")\n    has_projects_enabled = sgqlc.types.Field(Boolean, graphql_name=\"hasProjectsEnabled\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRepositoryPayload","title":"<code>UpdateRepositoryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateRepositoryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRepositoryWebCommitSignoffSettingInput","title":"<code>UpdateRepositoryWebCommitSignoffSettingInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateRepositoryWebCommitSignoffSettingInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"repository_id\",\n        \"web_commit_signoff_required\",\n        \"client_mutation_id\",\n    )\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    web_commit_signoff_required = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"webCommitSignoffRequired\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRepositoryWebCommitSignoffSettingPayload","title":"<code>UpdateRepositoryWebCommitSignoffSettingPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateRepositoryWebCommitSignoffSettingPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"message\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateSponsorshipPreferencesInput","title":"<code>UpdateSponsorshipPreferencesInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateSponsorshipPreferencesInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"sponsor_id\",\n        \"sponsor_login\",\n        \"sponsorable_id\",\n        \"sponsorable_login\",\n        \"receive_emails\",\n        \"privacy_level\",\n        \"client_mutation_id\",\n    )\n    sponsor_id = sgqlc.types.Field(ID, graphql_name=\"sponsorId\")\n    sponsor_login = sgqlc.types.Field(String, graphql_name=\"sponsorLogin\")\n    sponsorable_id = sgqlc.types.Field(ID, graphql_name=\"sponsorableId\")\n    sponsorable_login = sgqlc.types.Field(String, graphql_name=\"sponsorableLogin\")\n    receive_emails = sgqlc.types.Field(Boolean, graphql_name=\"receiveEmails\")\n    privacy_level = sgqlc.types.Field(SponsorshipPrivacy, graphql_name=\"privacyLevel\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateSponsorshipPreferencesPayload","title":"<code>UpdateSponsorshipPreferencesPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateSponsorshipPreferencesPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"sponsorship\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    sponsorship = sgqlc.types.Field(\"Sponsorship\", graphql_name=\"sponsorship\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateSubscriptionInput","title":"<code>UpdateSubscriptionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateSubscriptionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"subscribable_id\", \"state\", \"client_mutation_id\")\n    subscribable_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"subscribableId\"\n    )\n    state = sgqlc.types.Field(\n        sgqlc.types.non_null(SubscriptionState), graphql_name=\"state\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateSubscriptionPayload","title":"<code>UpdateSubscriptionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateSubscriptionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"subscribable\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    subscribable = sgqlc.types.Field(Subscribable, graphql_name=\"subscribable\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamDiscussionCommentInput","title":"<code>UpdateTeamDiscussionCommentInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateTeamDiscussionCommentInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"body\", \"body_version\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    body_version = sgqlc.types.Field(String, graphql_name=\"bodyVersion\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamDiscussionCommentPayload","title":"<code>UpdateTeamDiscussionCommentPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateTeamDiscussionCommentPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"team_discussion_comment\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    team_discussion_comment = sgqlc.types.Field(\n        \"TeamDiscussionComment\", graphql_name=\"teamDiscussionComment\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamDiscussionInput","title":"<code>UpdateTeamDiscussionInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateTeamDiscussionInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"id\",\n        \"title\",\n        \"body\",\n        \"body_version\",\n        \"pinned\",\n        \"client_mutation_id\",\n    )\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    body = sgqlc.types.Field(String, graphql_name=\"body\")\n    body_version = sgqlc.types.Field(String, graphql_name=\"bodyVersion\")\n    pinned = sgqlc.types.Field(Boolean, graphql_name=\"pinned\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamDiscussionPayload","title":"<code>UpdateTeamDiscussionPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateTeamDiscussionPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"team_discussion\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    team_discussion = sgqlc.types.Field(\"TeamDiscussion\", graphql_name=\"teamDiscussion\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamsRepositoryInput","title":"<code>UpdateTeamsRepositoryInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateTeamsRepositoryInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"team_ids\", \"permission\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    team_ids = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),\n        graphql_name=\"teamIds\",\n    )\n    permission = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryPermission), graphql_name=\"permission\"\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamsRepositoryPayload","title":"<code>UpdateTeamsRepositoryPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateTeamsRepositoryPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"repository\", \"teams\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n    teams = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(\"Team\")), graphql_name=\"teams\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTopicsInput","title":"<code>UpdateTopicsInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateTopicsInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"repository_id\", \"topic_names\", \"client_mutation_id\")\n    repository_id = sgqlc.types.Field(\n        sgqlc.types.non_null(ID), graphql_name=\"repositoryId\"\n    )\n    topic_names = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),\n        graphql_name=\"topicNames\",\n    )\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTopicsPayload","title":"<code>UpdateTopicsPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UpdateTopicsPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"invalid_topic_names\", \"repository\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    invalid_topic_names = sgqlc.types.Field(\n        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n        graphql_name=\"invalidTopicNames\",\n    )\n    repository = sgqlc.types.Field(\"Repository\", graphql_name=\"repository\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.User","title":"<code>User</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code>, <code>Actor</code>, <code>PackageOwner</code>, <code>ProjectOwner</code>, <code>ProjectNextOwner</code>, <code>ProjectV2Owner</code>, <code>ProjectV2Recent</code>, <code>RepositoryDiscussionAuthor</code>, <code>RepositoryDiscussionCommentAuthor</code>, <code>RepositoryOwner</code>, <code>UniformResourceLocatable</code>, <code>ProfileOwner</code>, <code>Sponsorable</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class User(\n    sgqlc.types.Type,\n    Node,\n    Actor,\n    PackageOwner,\n    ProjectOwner,\n    ProjectNextOwner,\n    ProjectV2Owner,\n    ProjectV2Recent,\n    RepositoryDiscussionAuthor,\n    RepositoryDiscussionCommentAuthor,\n    RepositoryOwner,\n    UniformResourceLocatable,\n    ProfileOwner,\n    Sponsorable,\n):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"bio\",\n        \"bio_html\",\n        \"can_receive_organization_emails_when_notifications_restricted\",\n        \"commit_comments\",\n        \"company\",\n        \"company_html\",\n        \"contributions_collection\",\n        \"created_at\",\n        \"database_id\",\n        \"followers\",\n        \"following\",\n        \"gist\",\n        \"gist_comments\",\n        \"gists\",\n        \"hovercard\",\n        \"interaction_ability\",\n        \"is_bounty_hunter\",\n        \"is_campus_expert\",\n        \"is_developer_program_member\",\n        \"is_employee\",\n        \"is_following_viewer\",\n        \"is_git_hub_star\",\n        \"is_hireable\",\n        \"is_site_admin\",\n        \"is_viewer\",\n        \"issue_comments\",\n        \"issues\",\n        \"organization\",\n        \"organization_verified_domain_emails\",\n        \"organizations\",\n        \"public_keys\",\n        \"pull_requests\",\n        \"repositories_contributed_to\",\n        \"saved_replies\",\n        \"starred_repositories\",\n        \"status\",\n        \"top_repositories\",\n        \"twitter_username\",\n        \"updated_at\",\n        \"viewer_can_follow\",\n        \"viewer_is_following\",\n        \"watching\",\n    )\n    bio = sgqlc.types.Field(String, graphql_name=\"bio\")\n    bio_html = sgqlc.types.Field(sgqlc.types.non_null(HTML), graphql_name=\"bioHTML\")\n    can_receive_organization_emails_when_notifications_restricted = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean),\n        graphql_name=\"canReceiveOrganizationEmailsWhenNotificationsRestricted\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"login\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"login\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    commit_comments = sgqlc.types.Field(\n        sgqlc.types.non_null(CommitCommentConnection),\n        graphql_name=\"commitComments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    company = sgqlc.types.Field(String, graphql_name=\"company\")\n    company_html = sgqlc.types.Field(\n        sgqlc.types.non_null(HTML), graphql_name=\"companyHTML\"\n    )\n    contributions_collection = sgqlc.types.Field(\n        sgqlc.types.non_null(ContributionsCollection),\n        graphql_name=\"contributionsCollection\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"organization_id\",\n                    sgqlc.types.Arg(ID, graphql_name=\"organizationID\", default=None),\n                ),\n                (\"from_\", sgqlc.types.Arg(DateTime, graphql_name=\"from\", default=None)),\n                (\"to\", sgqlc.types.Arg(DateTime, graphql_name=\"to\", default=None)),\n            )\n        ),\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    followers = sgqlc.types.Field(\n        sgqlc.types.non_null(FollowerConnection),\n        graphql_name=\"followers\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    following = sgqlc.types.Field(\n        sgqlc.types.non_null(FollowingConnection),\n        graphql_name=\"following\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    gist = sgqlc.types.Field(\n        Gist,\n        graphql_name=\"gist\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    gist_comments = sgqlc.types.Field(\n        sgqlc.types.non_null(GistCommentConnection),\n        graphql_name=\"gistComments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    gists = sgqlc.types.Field(\n        sgqlc.types.non_null(GistConnection),\n        graphql_name=\"gists\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"privacy\",\n                    sgqlc.types.Arg(GistPrivacy, graphql_name=\"privacy\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(GistOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    hovercard = sgqlc.types.Field(\n        sgqlc.types.non_null(Hovercard),\n        graphql_name=\"hovercard\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"primary_subject_id\",\n                    sgqlc.types.Arg(ID, graphql_name=\"primarySubjectId\", default=None),\n                ),\n            )\n        ),\n    )\n    interaction_ability = sgqlc.types.Field(\n        RepositoryInteractionAbility, graphql_name=\"interactionAbility\"\n    )\n    is_bounty_hunter = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isBountyHunter\"\n    )\n    is_campus_expert = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isCampusExpert\"\n    )\n    is_developer_program_member = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isDeveloperProgramMember\"\n    )\n    is_employee = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isEmployee\"\n    )\n    is_following_viewer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isFollowingViewer\"\n    )\n    is_git_hub_star = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isGitHubStar\"\n    )\n    is_hireable = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isHireable\"\n    )\n    is_site_admin = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isSiteAdmin\"\n    )\n    is_viewer = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isViewer\"\n    )\n    issue_comments = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueCommentConnection),\n        graphql_name=\"issueComments\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        IssueCommentOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    issues = sgqlc.types.Field(\n        sgqlc.types.non_null(IssueConnection),\n        graphql_name=\"issues\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(IssueState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"filter_by\",\n                    sgqlc.types.Arg(\n                        IssueFilters, graphql_name=\"filterBy\", default=None\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    organization = sgqlc.types.Field(\n        Organization,\n        graphql_name=\"organization\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"login\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"login\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    organization_verified_domain_emails = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),\n        graphql_name=\"organizationVerifiedDomainEmails\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"login\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"login\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    organizations = sgqlc.types.Field(\n        sgqlc.types.non_null(OrganizationConnection),\n        graphql_name=\"organizations\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    public_keys = sgqlc.types.Field(\n        sgqlc.types.non_null(PublicKeyConnection),\n        graphql_name=\"publicKeys\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pull_requests = sgqlc.types.Field(\n        sgqlc.types.non_null(PullRequestConnection),\n        graphql_name=\"pullRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"states\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(PullRequestState)),\n                        graphql_name=\"states\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"labels\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(sgqlc.types.non_null(String)),\n                        graphql_name=\"labels\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"head_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"headRefName\", default=None),\n                ),\n                (\n                    \"base_ref_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"baseRefName\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(IssueOrder, graphql_name=\"orderBy\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    repositories_contributed_to = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryConnection),\n        graphql_name=\"repositoriesContributedTo\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"privacy\",\n                    sgqlc.types.Arg(\n                        RepositoryPrivacy, graphql_name=\"privacy\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\n                    \"is_locked\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isLocked\", default=None),\n                ),\n                (\n                    \"include_user_repositories\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"includeUserRepositories\", default=None\n                    ),\n                ),\n                (\n                    \"contribution_types\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryContributionType),\n                        graphql_name=\"contributionTypes\",\n                        default=None,\n                    ),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    saved_replies = sgqlc.types.Field(\n        SavedReplyConnection,\n        graphql_name=\"savedReplies\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        SavedReplyOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"UPDATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    starred_repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(StarredRepositoryConnection),\n        graphql_name=\"starredRepositories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"owned_by_viewer\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"ownedByViewer\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(StarOrder, graphql_name=\"orderBy\", default=None),\n                ),\n            )\n        ),\n    )\n    status = sgqlc.types.Field(\"UserStatus\", graphql_name=\"status\")\n    top_repositories = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryConnection),\n        graphql_name=\"topRepositories\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(RepositoryOrder),\n                        graphql_name=\"orderBy\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"since\",\n                    sgqlc.types.Arg(DateTime, graphql_name=\"since\", default=None),\n                ),\n            )\n        ),\n    )\n    twitter_username = sgqlc.types.Field(String, graphql_name=\"twitterUsername\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    viewer_can_follow = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanFollow\"\n    )\n    viewer_is_following = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerIsFollowing\"\n    )\n    watching = sgqlc.types.Field(\n        sgqlc.types.non_null(RepositoryConnection),\n        graphql_name=\"watching\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"privacy\",\n                    sgqlc.types.Arg(\n                        RepositoryPrivacy, graphql_name=\"privacy\", default=None\n                    ),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        RepositoryOrder, graphql_name=\"orderBy\", default=None\n                    ),\n                ),\n                (\n                    \"affiliations\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryAffiliation),\n                        graphql_name=\"affiliations\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"owner_affiliations\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(RepositoryAffiliation),\n                        graphql_name=\"ownerAffiliations\",\n                        default=(\"OWNER\", \"COLLABORATOR\"),\n                    ),\n                ),\n                (\n                    \"is_locked\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"isLocked\", default=None),\n                ),\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserBlockDuration","title":"<code>UserBlockDuration</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserBlockDuration(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"ONE_DAY\", \"ONE_MONTH\", \"ONE_WEEK\", \"PERMANENT\", \"THREE_DAYS\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserBlockedEvent","title":"<code>UserBlockedEvent</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserBlockedEvent(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"actor\", \"block_duration\", \"created_at\", \"subject\")\n    actor = sgqlc.types.Field(Actor, graphql_name=\"actor\")\n    block_duration = sgqlc.types.Field(\n        sgqlc.types.non_null(UserBlockDuration), graphql_name=\"blockDuration\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    subject = sgqlc.types.Field(User, graphql_name=\"subject\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserConnection","title":"<code>UserConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(sgqlc.types.list_of(\"UserEdge\"), graphql_name=\"edges\")\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"User\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserContentEdit","title":"<code>UserContentEdit</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserContentEdit(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"deleted_at\",\n        \"deleted_by\",\n        \"diff\",\n        \"edited_at\",\n        \"editor\",\n        \"updated_at\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    deleted_at = sgqlc.types.Field(DateTime, graphql_name=\"deletedAt\")\n    deleted_by = sgqlc.types.Field(Actor, graphql_name=\"deletedBy\")\n    diff = sgqlc.types.Field(String, graphql_name=\"diff\")\n    edited_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"editedAt\"\n    )\n    editor = sgqlc.types.Field(Actor, graphql_name=\"editor\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserContentEditConnection","title":"<code>UserContentEditConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserContentEditConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"UserContentEditEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"UserContentEdit\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserContentEditEdge","title":"<code>UserContentEditEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserContentEditEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"UserContentEdit\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserEdge","title":"<code>UserEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"User\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserEmailMetadata","title":"<code>UserEmailMetadata</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserEmailMetadata(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"primary\", \"type\", \"value\")\n    primary = sgqlc.types.Field(Boolean, graphql_name=\"primary\")\n    type = sgqlc.types.Field(String, graphql_name=\"type\")\n    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"value\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatus","title":"<code>UserStatus</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserStatus(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"emoji\",\n        \"emoji_html\",\n        \"expires_at\",\n        \"indicates_limited_availability\",\n        \"message\",\n        \"organization\",\n        \"updated_at\",\n        \"user\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    emoji = sgqlc.types.Field(String, graphql_name=\"emoji\")\n    emoji_html = sgqlc.types.Field(HTML, graphql_name=\"emojiHTML\")\n    expires_at = sgqlc.types.Field(DateTime, graphql_name=\"expiresAt\")\n    indicates_limited_availability = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"indicatesLimitedAvailability\"\n    )\n    message = sgqlc.types.Field(String, graphql_name=\"message\")\n    organization = sgqlc.types.Field(Organization, graphql_name=\"organization\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    user = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name=\"user\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatusConnection","title":"<code>UserStatusConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserStatusConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"UserStatusEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"UserStatus\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatusEdge","title":"<code>UserStatusEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserStatusEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"UserStatus\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatusOrder","title":"<code>UserStatusOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserStatusOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(UserStatusOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatusOrderField","title":"<code>UserStatusOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class UserStatusOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"UPDATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomain","title":"<code>VerifiableDomain</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class VerifiableDomain(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"database_id\",\n        \"dns_host_name\",\n        \"domain\",\n        \"has_found_host_name\",\n        \"has_found_verification_token\",\n        \"is_approved\",\n        \"is_required_for_policy_enforcement\",\n        \"is_verified\",\n        \"owner\",\n        \"punycode_encoded_domain\",\n        \"token_expiration_time\",\n        \"updated_at\",\n        \"verification_token\",\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    dns_host_name = sgqlc.types.Field(URI, graphql_name=\"dnsHostName\")\n    domain = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"domain\")\n    has_found_host_name = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasFoundHostName\"\n    )\n    has_found_verification_token = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"hasFoundVerificationToken\"\n    )\n    is_approved = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isApproved\"\n    )\n    is_required_for_policy_enforcement = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isRequiredForPolicyEnforcement\"\n    )\n    is_verified = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"isVerified\"\n    )\n    owner = sgqlc.types.Field(\n        sgqlc.types.non_null(\"VerifiableDomainOwner\"), graphql_name=\"owner\"\n    )\n    punycode_encoded_domain = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"punycodeEncodedDomain\"\n    )\n    token_expiration_time = sgqlc.types.Field(\n        DateTime, graphql_name=\"tokenExpirationTime\"\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    verification_token = sgqlc.types.Field(String, graphql_name=\"verificationToken\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainConnection","title":"<code>VerifiableDomainConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class VerifiableDomainConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"VerifiableDomainEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(\n        sgqlc.types.list_of(\"VerifiableDomain\"), graphql_name=\"nodes\"\n    )\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainEdge","title":"<code>VerifiableDomainEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class VerifiableDomainEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"VerifiableDomain\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainOrder","title":"<code>VerifiableDomainOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class VerifiableDomainOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(VerifiableDomainOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainOrderField","title":"<code>VerifiableDomainOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class VerifiableDomainOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\", \"DOMAIN\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainOwner","title":"<code>VerifiableDomainOwner</code>","text":"<p>             Bases: <code>Union</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class VerifiableDomainOwner(sgqlc.types.Union):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __types__ = (Enterprise, Organization)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifyVerifiableDomainInput","title":"<code>VerifyVerifiableDomainInput</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class VerifyVerifiableDomainInput(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"client_mutation_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifyVerifiableDomainPayload","title":"<code>VerifyVerifiableDomainPayload</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class VerifyVerifiableDomainPayload(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"client_mutation_id\", \"domain\")\n    client_mutation_id = sgqlc.types.Field(String, graphql_name=\"clientMutationId\")\n    domain = sgqlc.types.Field(\"VerifiableDomain\", graphql_name=\"domain\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ViewerHovercardContext","title":"<code>ViewerHovercardContext</code>","text":"<p>             Bases: <code>Type</code>, <code>HovercardContext</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class ViewerHovercardContext(sgqlc.types.Type, HovercardContext):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"viewer\",)\n    viewer = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name=\"viewer\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Votable","title":"<code>Votable</code>","text":"<p>             Bases: <code>Interface</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Votable(sgqlc.types.Interface):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"upvote_count\", \"viewer_can_upvote\", \"viewer_has_upvoted\")\n    upvote_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"upvoteCount\"\n    )\n    viewer_can_upvote = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerCanUpvote\"\n    )\n    viewer_has_upvoted = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"viewerHasUpvoted\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Workflow","title":"<code>Workflow</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class Workflow(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"created_at\", \"database_id\", \"name\", \"runs\", \"updated_at\")\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    runs = sgqlc.types.Field(\n        sgqlc.types.non_null(WorkflowRunConnection),\n        graphql_name=\"runs\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        WorkflowRunOrder,\n                        graphql_name=\"orderBy\",\n                        default={\"field\": \"CREATED_AT\", \"direction\": \"DESC\"},\n                    ),\n                ),\n            )\n        ),\n    )\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRun","title":"<code>WorkflowRun</code>","text":"<p>             Bases: <code>Type</code>, <code>Node</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class WorkflowRun(sgqlc.types.Type, Node):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"check_suite\",\n        \"created_at\",\n        \"database_id\",\n        \"deployment_reviews\",\n        \"pending_deployment_requests\",\n        \"resource_path\",\n        \"run_number\",\n        \"updated_at\",\n        \"url\",\n        \"workflow\",\n    )\n    check_suite = sgqlc.types.Field(\n        sgqlc.types.non_null(CheckSuite), graphql_name=\"checkSuite\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"createdAt\"\n    )\n    database_id = sgqlc.types.Field(Int, graphql_name=\"databaseId\")\n    deployment_reviews = sgqlc.types.Field(\n        sgqlc.types.non_null(DeploymentReviewConnection),\n        graphql_name=\"deploymentReviews\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    pending_deployment_requests = sgqlc.types.Field(\n        sgqlc.types.non_null(DeploymentRequestConnection),\n        graphql_name=\"pendingDeploymentRequests\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"after\", sgqlc.types.Arg(String, graphql_name=\"after\", default=None)),\n                (\n                    \"before\",\n                    sgqlc.types.Arg(String, graphql_name=\"before\", default=None),\n                ),\n                (\"first\", sgqlc.types.Arg(Int, graphql_name=\"first\", default=None)),\n                (\"last\", sgqlc.types.Arg(Int, graphql_name=\"last\", default=None)),\n            )\n        ),\n    )\n    resource_path = sgqlc.types.Field(\n        sgqlc.types.non_null(URI), graphql_name=\"resourcePath\"\n    )\n    run_number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"runNumber\")\n    updated_at = sgqlc.types.Field(\n        sgqlc.types.non_null(DateTime), graphql_name=\"updatedAt\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(URI), graphql_name=\"url\")\n    workflow = sgqlc.types.Field(\n        sgqlc.types.non_null(Workflow), graphql_name=\"workflow\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRunConnection","title":"<code>WorkflowRunConnection</code>","text":"<p>             Bases: <code>Connection</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class WorkflowRunConnection(sgqlc.types.relay.Connection):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"edges\", \"nodes\", \"page_info\", \"total_count\")\n    edges = sgqlc.types.Field(\n        sgqlc.types.list_of(\"WorkflowRunEdge\"), graphql_name=\"edges\"\n    )\n    nodes = sgqlc.types.Field(sgqlc.types.list_of(\"WorkflowRun\"), graphql_name=\"nodes\")\n    page_info = sgqlc.types.Field(\n        sgqlc.types.non_null(PageInfo), graphql_name=\"pageInfo\"\n    )\n    total_count = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"totalCount\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRunEdge","title":"<code>WorkflowRunEdge</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class WorkflowRunEdge(sgqlc.types.Type):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"cursor\", \"node\")\n    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"cursor\")\n    node = sgqlc.types.Field(\"WorkflowRun\", graphql_name=\"node\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRunOrder","title":"<code>WorkflowRunOrder</code>","text":"<p>             Bases: <code>Input</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class WorkflowRunOrder(sgqlc.types.Input):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"field\", \"direction\")\n    field = sgqlc.types.Field(\n        sgqlc.types.non_null(WorkflowRunOrderField), graphql_name=\"field\"\n    )\n    direction = sgqlc.types.Field(\n        sgqlc.types.non_null(OrderDirection), graphql_name=\"direction\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRunOrderField","title":"<code>WorkflowRunOrderField</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class WorkflowRunOrderField(sgqlc.types.Enum):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"CREATED_AT\",)\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.X509Certificate","title":"<code>X509Certificate</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for more info.</p> Source code in <code>prefect_github/schemas/graphql_schema.py</code> <pre><code>class X509Certificate(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"}]}