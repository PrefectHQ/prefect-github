{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-github Welcome! Prefect integrations interacting with GitHub. The tasks within this collection were created by a code generator using the GitHub GraphQL schema. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-github with pip : pip install prefect-github Write and run a flow from prefect import flow from prefect_github import GitHubCredentials from prefect_github.repository import query_repository from prefect_github.mutations import add_star_starrable @flow () def github_add_star_flow (): github_credentials = GitHubCredentials . load ( \"github-token\" ) repository_id = query_repository ( \"PrefectHQ\" , \"Prefect\" , github_credentials = github_credentials , return_fields = \"id\" )[ \"id\" ] starrable = add_star_starrable ( repository_id , github_credentials ) return starrable github_add_star_flow () Resources If you encounter any bugs while using prefect-github , feel free to open an issue in the prefect-github repository. If you have any questions or issues while using prefect-github , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-github for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-github.git cd prefect-github/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-github","text":"","title":"prefect-github"},{"location":"#welcome","text":"Prefect integrations interacting with GitHub. The tasks within this collection were created by a code generator using the GitHub GraphQL schema.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-github with pip : pip install prefect-github","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_github import GitHubCredentials from prefect_github.repository import query_repository from prefect_github.mutations import add_star_starrable @flow () def github_add_star_flow (): github_credentials = GitHubCredentials . load ( \"github-token\" ) repository_id = query_repository ( \"PrefectHQ\" , \"Prefect\" , github_credentials = github_credentials , return_fields = \"id\" )[ \"id\" ] starrable = add_star_starrable ( repository_id , github_credentials ) return starrable github_add_star_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-github , feel free to open an issue in the prefect-github repository. If you have any questions or issues while using prefect-github , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-github for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-github.git cd prefect-github/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_github.credentials Credential classes used to perform authenticated interactions with GitHub GitHubCredentials Block used to manage GitHub authentication. Parameters: Name Type Description Default token the token to authenticate into GitHub. required Examples: Load stored GitHub credentials: from prefect_github import GitHubCredentials github_credentials_block = GitHubCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_github/credentials.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 class GitHubCredentials ( Block ): \"\"\" Block used to manage GitHub authentication. Args: token: the token to authenticate into GitHub. Examples: Load stored GitHub credentials: ```python from prefect_github import GitHubCredentials github_credentials_block = GitHubCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"GitHub Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250\" # noqa token : SecretStr = None def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials(token=token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" if self . token is not None : base_headers = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } else : base_headers = None endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , base_headers = base_headers ) return endpoint get_endpoint Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: Type Description HTTPEndpoint An authenticated GitHub GraphQL HTTPEndpoint Example Gets an authenticated GitHub GraphQL HTTPEndpoint. from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow (): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials ( token = token ) endpoint = github_credentials . get_endpoint () return endpoint example_get_endpoint_flow () Source code in prefect_github/credentials.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials(token=token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" if self . token is not None : base_headers = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } else : base_headers = None endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , base_headers = base_headers ) return endpoint","title":"Credentials"},{"location":"credentials/#prefect_github.credentials","text":"Credential classes used to perform authenticated interactions with GitHub","title":"credentials"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials","text":"Block used to manage GitHub authentication. Parameters: Name Type Description Default token the token to authenticate into GitHub. required Examples: Load stored GitHub credentials: from prefect_github import GitHubCredentials github_credentials_block = GitHubCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_github/credentials.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 class GitHubCredentials ( Block ): \"\"\" Block used to manage GitHub authentication. Args: token: the token to authenticate into GitHub. Examples: Load stored GitHub credentials: ```python from prefect_github import GitHubCredentials github_credentials_block = GitHubCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"GitHub Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250\" # noqa token : SecretStr = None def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials(token=token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" if self . token is not None : base_headers = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } else : base_headers = None endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , base_headers = base_headers ) return endpoint","title":"GitHubCredentials"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials.get_endpoint","text":"Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: Type Description HTTPEndpoint An authenticated GitHub GraphQL HTTPEndpoint Example Gets an authenticated GitHub GraphQL HTTPEndpoint. from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow (): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials ( token = token ) endpoint = github_credentials . get_endpoint () return endpoint example_get_endpoint_flow () Source code in prefect_github/credentials.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials(token=token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" if self . token is not None : base_headers = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } else : base_headers = None endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , base_headers = base_headers ) return endpoint","title":"get_endpoint()"},{"location":"graphql/","text":"prefect_github.graphql This is a module containing: generic GraphQL tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. execute_graphql async Generic function for executing GraphQL operations. Parameters: Name Type Description Default op Union [ Operation , str ] The operation, either as a valid GraphQL string or sgqlc.Operation. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Examples: Queries the first three issues from the Prefect repository using a string query. from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials ( token = token ) params = dict ( owner = \"PrefectHQ\" , name = \"Prefect\" ) result = execute_graphql ( op , github_credentials , ** params ) return result example_execute_graphql_flow () Queries the first three issues from Prefect repository using a sgqlc.Operation. from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = Operation ( graphql_schema . Query ) op_settings = op . repository ( owner = \"PrefectHQ\" , name = \"Prefect\" ) . issues ( first = 3 ) . nodes () op_settings . __fields__ ( \"id\" , \"title\" ) token = \"ghp_...\" github_credentials = GitHubCredentials ( token = token ) result = execute_graphql ( op , github_credentials , ) return result example_execute_graphql_flow () Source code in prefect_github/graphql.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 @task async def execute_graphql ( op : Union [ Operation , str ], github_credentials : GitHubCredentials , ** vars ) -> Dict [ str , Any ]: # NOTE: Maintainers can update these examples to match their collection! \"\"\" Generic function for executing GraphQL operations. Args: op: The operation, either as a valid GraphQL string or sgqlc.Operation. github_credentials: Credentials to use for authentication with GitHub. Returns: A dict of the returned fields. Examples: Queries the first three issues from the Prefect repository using a string query. ```python from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials(token=token) params = dict(owner=\"PrefectHQ\", name=\"Prefect\") result = execute_graphql(op, github_credentials, **params) return result example_execute_graphql_flow() ``` Queries the first three issues from Prefect repository using a sgqlc.Operation. ```python from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = Operation(graphql_schema.Query) op_settings = op.repository( owner=\"PrefectHQ\", name=\"Prefect\" ).issues( first=3 ).nodes() op_settings.__fields__(\"id\", \"title\") token = \"ghp_...\" github_credentials = GitHubCredentials(token=token) result = execute_graphql( op, github_credentials, ) return result example_execute_graphql_flow() ``` \"\"\" result = await _execute_graphql_op ( op , github_credentials , ** vars ) return result","title":"Graphql"},{"location":"graphql/#prefect_github.graphql","text":"This is a module containing: generic GraphQL tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended.","title":"graphql"},{"location":"graphql/#prefect_github.graphql.execute_graphql","text":"Generic function for executing GraphQL operations. Parameters: Name Type Description Default op Union [ Operation , str ] The operation, either as a valid GraphQL string or sgqlc.Operation. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Examples: Queries the first three issues from the Prefect repository using a string query. from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials ( token = token ) params = dict ( owner = \"PrefectHQ\" , name = \"Prefect\" ) result = execute_graphql ( op , github_credentials , ** params ) return result example_execute_graphql_flow () Queries the first three issues from Prefect repository using a sgqlc.Operation. from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = Operation ( graphql_schema . Query ) op_settings = op . repository ( owner = \"PrefectHQ\" , name = \"Prefect\" ) . issues ( first = 3 ) . nodes () op_settings . __fields__ ( \"id\" , \"title\" ) token = \"ghp_...\" github_credentials = GitHubCredentials ( token = token ) result = execute_graphql ( op , github_credentials , ) return result example_execute_graphql_flow () Source code in prefect_github/graphql.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 @task async def execute_graphql ( op : Union [ Operation , str ], github_credentials : GitHubCredentials , ** vars ) -> Dict [ str , Any ]: # NOTE: Maintainers can update these examples to match their collection! \"\"\" Generic function for executing GraphQL operations. Args: op: The operation, either as a valid GraphQL string or sgqlc.Operation. github_credentials: Credentials to use for authentication with GitHub. Returns: A dict of the returned fields. Examples: Queries the first three issues from the Prefect repository using a string query. ```python from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials(token=token) params = dict(owner=\"PrefectHQ\", name=\"Prefect\") result = execute_graphql(op, github_credentials, **params) return result example_execute_graphql_flow() ``` Queries the first three issues from Prefect repository using a sgqlc.Operation. ```python from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = Operation(graphql_schema.Query) op_settings = op.repository( owner=\"PrefectHQ\", name=\"Prefect\" ).issues( first=3 ).nodes() op_settings.__fields__(\"id\", \"title\") token = \"ghp_...\" github_credentials = GitHubCredentials(token=token) result = execute_graphql( op, github_credentials, ) return result example_execute_graphql_flow() ``` \"\"\" result = await _execute_graphql_op ( op , github_credentials , ** vars ) return result","title":"execute_graphql()"},{"location":"mutations/","text":"prefect_github.mutations This is a module containing: GitHub mutation tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py. add_comment_subject async Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @task async def add_comment_subject ( subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"subject\" ] add_pull_request_review async Adds a review to a Pull Request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required commit_oid datetime The commit OID the review pertains to. None body str The contents of the review body comment. None event graphql_schema . PullRequestReviewEvent The event to perform on the pull request review. None comments Iterable [ graphql_schema . DraftPullRequestReviewComment ] The review line comments. None threads Iterable [ graphql_schema . DraftPullRequestReviewThread ] The review line comment threads. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 @task async def add_pull_request_review ( pull_request_id : str , github_credentials : GitHubCredentials , commit_oid : datetime = None , body : str = None , event : graphql_schema . PullRequestReviewEvent = None , comments : Iterable [ graphql_schema . DraftPullRequestReviewComment ] = None , threads : Iterable [ graphql_schema . DraftPullRequestReviewThread ] = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a review to a Pull Request. Args: pull_request_id: The Node ID of the pull request to modify. github_credentials: Credentials to use for authentication with GitHub. commit_oid: The commit OID the review pertains to. body: The contents of the review body comment. event: The event to perform on the pull request review. comments: The review line comments. threads: The review line comment threads. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_pull_request_review ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , commit_oid = commit_oid , body = body , event = event , comments = comments , threads = threads , ) ) ) . pull_request_review ( ** strip_kwargs ()) op_stack = ( \"addPullRequestReview\" , \"pullRequestReview\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addPullRequestReview\" ][ \"pullRequestReview\" ] add_reaction async Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 @task async def add_reaction ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"reaction\" ] add_reaction_subject async Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 @task async def add_reaction_subject ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"subject\" ] add_star_starrable async Adds a star to a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to star. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 @task async def add_star_starrable ( starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a star to a Starrable. Args: starrable_id: The Starrable ID to star. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"addStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addStar\" ][ \"starrable\" ] close_issue async Close an issue. Parameters: Name Type Description Default issue_id str ID of the issue to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required state_reason graphql_schema . IssueClosedStateReason The reason the issue is to be closed. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 @task async def close_issue ( issue_id : str , github_credentials : GitHubCredentials , state_reason : graphql_schema . IssueClosedStateReason = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Close an issue. Args: issue_id: ID of the issue to be closed. github_credentials: Credentials to use for authentication with GitHub. state_reason: The reason the issue is to be closed. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_issue ( ** strip_kwargs ( input = dict ( issue_id = issue_id , state_reason = state_reason , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"closeIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closeIssue\" ][ \"issue\" ] close_pull_request async Close a pull request. Parameters: Name Type Description Default pull_request_id str ID of the pull request to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def close_pull_request ( pull_request_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Close a pull request. Args: pull_request_id: ID of the pull request to be closed. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_pull_request ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"closePullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closePullRequest\" ][ \"pullRequest\" ] create_issue async Creates a new issue. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required title str The title for the issue. required assignee_ids Iterable [ str ] The Node ID for the user assignee for this issue. required label_ids Iterable [ str ] An array of Node IDs of labels for this issue. required project_ids Iterable [ str ] An array of Node IDs for projects associated with this issue. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The body for the issue description. None milestone_id str The Node ID of the milestone for this issue. None issue_template str The name of an issue template in the repository, assigns labels and assignees from the template to the issue. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @task async def create_issue ( repository_id : str , title : str , assignee_ids : Iterable [ str ], label_ids : Iterable [ str ], project_ids : Iterable [ str ], github_credentials : GitHubCredentials , body : str = None , milestone_id : str = None , issue_template : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Creates a new issue. Args: repository_id: The Node ID of the repository. title: The title for the issue. assignee_ids: The Node ID for the user assignee for this issue. label_ids: An array of Node IDs of labels for this issue. project_ids: An array of Node IDs for projects associated with this issue. github_credentials: Credentials to use for authentication with GitHub. body: The body for the issue description. milestone_id: The Node ID of the milestone for this issue. issue_template: The name of an issue template in the repository, assigns labels and assignees from the template to the issue. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_issue ( ** strip_kwargs ( input = dict ( repository_id = repository_id , title = title , assignee_ids = assignee_ids , label_ids = label_ids , project_ids = project_ids , body = body , milestone_id = milestone_id , issue_template = issue_template , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"createIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createIssue\" ][ \"issue\" ] create_pull_request async Create a new pull request. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required base_ref_name str The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. required head_ref_name str The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head_ref_name with a user like this: username:branch . required title str The title of the pull request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The contents of the pull request. None maintainer_can_modify bool Indicates whether maintainers can modify the pull request. None draft bool Indicates whether this pull request should be a draft. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 @task async def create_pull_request ( repository_id : str , base_ref_name : str , head_ref_name : str , title : str , github_credentials : GitHubCredentials , body : str = None , maintainer_can_modify : bool = None , draft : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Create a new pull request. Args: repository_id: The Node ID of the repository. base_ref_name: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. head_ref_name: The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head_ref_name` with a user like this: `username:branch`. title: The title of the pull request. github_credentials: Credentials to use for authentication with GitHub. body: The contents of the pull request. maintainer_can_modify: Indicates whether maintainers can modify the pull request. draft: Indicates whether this pull request should be a draft. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_pull_request ( ** strip_kwargs ( input = dict ( repository_id = repository_id , base_ref_name = base_ref_name , head_ref_name = head_ref_name , title = title , body = body , maintainer_can_modify = maintainer_can_modify , draft = draft , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"createPullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createPullRequest\" ][ \"pullRequest\" ] remove_reaction async Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 @task async def remove_reaction ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"reaction\" ] remove_reaction_subject async Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 @task async def remove_reaction_subject ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"subject\" ] remove_star_starrable async Removes a star from a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to unstar. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 @task async def remove_star_starrable ( starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a star from a Starrable. Args: starrable_id: The Starrable ID to unstar. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"removeStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeStar\" ][ \"starrable\" ] request_reviews async Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable [ str ] The Node IDs of the user to request. required team_ids Iterable [ str ] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 @task async def request_reviews ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) op_stack = ( \"requestReviews\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ] request_reviews_pull_request async Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable [ str ] The Node IDs of the user to request. required team_ids Iterable [ str ] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 @task async def request_reviews_pull_request ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"requestReviews\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ][ \"pullRequest\" ]","title":"Mutations"},{"location":"mutations/#prefect_github.mutations","text":"This is a module containing: GitHub mutation tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py.","title":"mutations"},{"location":"mutations/#prefect_github.mutations.add_comment_subject","text":"Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @task async def add_comment_subject ( subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"subject\" ]","title":"add_comment_subject()"},{"location":"mutations/#prefect_github.mutations.add_pull_request_review","text":"Adds a review to a Pull Request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required commit_oid datetime The commit OID the review pertains to. None body str The contents of the review body comment. None event graphql_schema . PullRequestReviewEvent The event to perform on the pull request review. None comments Iterable [ graphql_schema . DraftPullRequestReviewComment ] The review line comments. None threads Iterable [ graphql_schema . DraftPullRequestReviewThread ] The review line comment threads. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 @task async def add_pull_request_review ( pull_request_id : str , github_credentials : GitHubCredentials , commit_oid : datetime = None , body : str = None , event : graphql_schema . PullRequestReviewEvent = None , comments : Iterable [ graphql_schema . DraftPullRequestReviewComment ] = None , threads : Iterable [ graphql_schema . DraftPullRequestReviewThread ] = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a review to a Pull Request. Args: pull_request_id: The Node ID of the pull request to modify. github_credentials: Credentials to use for authentication with GitHub. commit_oid: The commit OID the review pertains to. body: The contents of the review body comment. event: The event to perform on the pull request review. comments: The review line comments. threads: The review line comment threads. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_pull_request_review ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , commit_oid = commit_oid , body = body , event = event , comments = comments , threads = threads , ) ) ) . pull_request_review ( ** strip_kwargs ()) op_stack = ( \"addPullRequestReview\" , \"pullRequestReview\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addPullRequestReview\" ][ \"pullRequestReview\" ]","title":"add_pull_request_review()"},{"location":"mutations/#prefect_github.mutations.add_reaction","text":"Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 @task async def add_reaction ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"reaction\" ]","title":"add_reaction()"},{"location":"mutations/#prefect_github.mutations.add_reaction_subject","text":"Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 @task async def add_reaction_subject ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"subject\" ]","title":"add_reaction_subject()"},{"location":"mutations/#prefect_github.mutations.add_star_starrable","text":"Adds a star to a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to star. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 @task async def add_star_starrable ( starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Adds a star to a Starrable. Args: starrable_id: The Starrable ID to star. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"addStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addStar\" ][ \"starrable\" ]","title":"add_star_starrable()"},{"location":"mutations/#prefect_github.mutations.close_issue","text":"Close an issue. Parameters: Name Type Description Default issue_id str ID of the issue to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required state_reason graphql_schema . IssueClosedStateReason The reason the issue is to be closed. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 @task async def close_issue ( issue_id : str , github_credentials : GitHubCredentials , state_reason : graphql_schema . IssueClosedStateReason = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Close an issue. Args: issue_id: ID of the issue to be closed. github_credentials: Credentials to use for authentication with GitHub. state_reason: The reason the issue is to be closed. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_issue ( ** strip_kwargs ( input = dict ( issue_id = issue_id , state_reason = state_reason , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"closeIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closeIssue\" ][ \"issue\" ]","title":"close_issue()"},{"location":"mutations/#prefect_github.mutations.close_pull_request","text":"Close a pull request. Parameters: Name Type Description Default pull_request_id str ID of the pull request to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def close_pull_request ( pull_request_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Close a pull request. Args: pull_request_id: ID of the pull request to be closed. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_pull_request ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"closePullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closePullRequest\" ][ \"pullRequest\" ]","title":"close_pull_request()"},{"location":"mutations/#prefect_github.mutations.create_issue","text":"Creates a new issue. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required title str The title for the issue. required assignee_ids Iterable [ str ] The Node ID for the user assignee for this issue. required label_ids Iterable [ str ] An array of Node IDs of labels for this issue. required project_ids Iterable [ str ] An array of Node IDs for projects associated with this issue. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The body for the issue description. None milestone_id str The Node ID of the milestone for this issue. None issue_template str The name of an issue template in the repository, assigns labels and assignees from the template to the issue. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @task async def create_issue ( repository_id : str , title : str , assignee_ids : Iterable [ str ], label_ids : Iterable [ str ], project_ids : Iterable [ str ], github_credentials : GitHubCredentials , body : str = None , milestone_id : str = None , issue_template : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Creates a new issue. Args: repository_id: The Node ID of the repository. title: The title for the issue. assignee_ids: The Node ID for the user assignee for this issue. label_ids: An array of Node IDs of labels for this issue. project_ids: An array of Node IDs for projects associated with this issue. github_credentials: Credentials to use for authentication with GitHub. body: The body for the issue description. milestone_id: The Node ID of the milestone for this issue. issue_template: The name of an issue template in the repository, assigns labels and assignees from the template to the issue. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_issue ( ** strip_kwargs ( input = dict ( repository_id = repository_id , title = title , assignee_ids = assignee_ids , label_ids = label_ids , project_ids = project_ids , body = body , milestone_id = milestone_id , issue_template = issue_template , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"createIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createIssue\" ][ \"issue\" ]","title":"create_issue()"},{"location":"mutations/#prefect_github.mutations.create_pull_request","text":"Create a new pull request. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required base_ref_name str The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. required head_ref_name str The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head_ref_name with a user like this: username:branch . required title str The title of the pull request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The contents of the pull request. None maintainer_can_modify bool Indicates whether maintainers can modify the pull request. None draft bool Indicates whether this pull request should be a draft. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 @task async def create_pull_request ( repository_id : str , base_ref_name : str , head_ref_name : str , title : str , github_credentials : GitHubCredentials , body : str = None , maintainer_can_modify : bool = None , draft : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Create a new pull request. Args: repository_id: The Node ID of the repository. base_ref_name: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. head_ref_name: The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head_ref_name` with a user like this: `username:branch`. title: The title of the pull request. github_credentials: Credentials to use for authentication with GitHub. body: The contents of the pull request. maintainer_can_modify: Indicates whether maintainers can modify the pull request. draft: Indicates whether this pull request should be a draft. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_pull_request ( ** strip_kwargs ( input = dict ( repository_id = repository_id , base_ref_name = base_ref_name , head_ref_name = head_ref_name , title = title , body = body , maintainer_can_modify = maintainer_can_modify , draft = draft , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"createPullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createPullRequest\" ][ \"pullRequest\" ]","title":"create_pull_request()"},{"location":"mutations/#prefect_github.mutations.remove_reaction","text":"Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 @task async def remove_reaction ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"reaction\" ]","title":"remove_reaction()"},{"location":"mutations/#prefect_github.mutations.remove_reaction_subject","text":"Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 @task async def remove_reaction_subject ( subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"subject\" ]","title":"remove_reaction_subject()"},{"location":"mutations/#prefect_github.mutations.remove_star_starrable","text":"Removes a star from a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to unstar. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 @task async def remove_star_starrable ( starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Removes a star from a Starrable. Args: starrable_id: The Starrable ID to unstar. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"removeStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeStar\" ][ \"starrable\" ]","title":"remove_star_starrable()"},{"location":"mutations/#prefect_github.mutations.request_reviews","text":"Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable [ str ] The Node IDs of the user to request. required team_ids Iterable [ str ] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 @task async def request_reviews ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) op_stack = ( \"requestReviews\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ]","title":"request_reviews()"},{"location":"mutations/#prefect_github.mutations.request_reviews_pull_request","text":"Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable [ str ] The Node IDs of the user to request. required team_ids Iterable [ str ] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 @task async def request_reviews_pull_request ( pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"requestReviews\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ][ \"pullRequest\" ]","title":"request_reviews_pull_request()"},{"location":"organization/","text":"prefect_github.organization This is a module containing: GitHub query_organization* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py. query_organization async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @task async def query_organization ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"organization\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ] query_organization_audit_log async Audit log entries of the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str The query string to filter audit entries. None order_by graphql_schema . AuditLogOrder Ordering options for the returned audit log entries. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 @task async def query_organization_audit_log ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . AuditLogOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Audit log entries of the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: The query string to filter audit entries. order_by: Ordering options for the returned audit log entries. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . audit_log ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"organization\" , \"auditLog\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"auditLog\" ] query_organization_domains async A list of domains owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_verified bool Filter by if the domain is verified. None is_approved bool Filter by if the domain is approved. None order_by graphql_schema . VerifiableDomainOrder Ordering options for verifiable domains returned. {'field': 'DOMAIN', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def query_organization_domains ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , is_verified : bool = None , is_approved : bool = None , order_by : graphql_schema . VerifiableDomainOrder = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of domains owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_verified: Filter by if the domain is verified. is_approved: Filter by if the domain is approved. order_by: Ordering options for verifiable domains returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . domains ( ** strip_kwargs ( after = after , before = before , first = first , last = last , is_verified = is_verified , is_approved = is_approved , order_by = order_by , ) ) op_stack = ( \"organization\" , \"domains\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"domains\" ] query_organization_enterprise_owners async A list of owners of the organization's enterprise account. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str The search string to look for. None organization_role graphql_schema . RoleInOrganization The organization role to filter by. None order_by graphql_schema . OrgEnterpriseOwnerOrder Ordering options for enterprise owners returned from the connection. {'field': 'LOGIN', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 @task async def query_organization_enterprise_owners ( login : str , github_credentials : GitHubCredentials , query : str = None , organization_role : graphql_schema . RoleInOrganization = None , order_by : graphql_schema . OrgEnterpriseOwnerOrder = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of owners of the organization's enterprise account. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: The search string to look for. organization_role: The organization role to filter by. order_by: Ordering options for enterprise owners returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . enterprise_owners ( ** strip_kwargs ( query = query , organization_role = organization_role , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"enterpriseOwners\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"enterpriseOwners\" ] query_organization_interaction_ability async The interaction ability settings for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 @task async def query_organization_interaction_ability ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"interactionAbility\" ] query_organization_ip_allow_list_entries async The IP addresses that are allowed to access resources owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . IpAllowListEntryOrder Ordering options for IP allow list entries returned. {'field': 'ALLOW_LIST_VALUE', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 @task async def query_organization_ip_allow_list_entries ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . IpAllowListEntryOrder = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The IP addresses that are allowed to access resources owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for IP allow list entries returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . ip_allow_list_entries ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"ipAllowListEntries\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"ipAllowListEntries\" ] query_organization_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 @task async def query_organization_item_showcase ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"itemShowcase\" ] query_organization_member_statuses async Get the status messages members of this entity have set that are either public or visible only to the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . UserStatusOrder Ordering options for user statuses returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 @task async def query_organization_member_statuses ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . UserStatusOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Get the status messages members of this entity have set that are either public or visible only to the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for user statuses returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . member_statuses ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"memberStatuses\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"memberStatuses\" ] query_organization_members_with_role async A list of users who are members of this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 @task async def query_organization_members_with_role ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who are members of this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . members_with_role ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"membersWithRole\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"membersWithRole\" ] query_organization_packages async A list of packages under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 @task async def query_organization_packages ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"organization\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"packages\" ] query_organization_pending_members async A list of users who have been invited to join this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 @task async def query_organization_pending_members ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who have been invited to join this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pending_members ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pendingMembers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pendingMembers\" ] query_organization_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 @task async def query_organization_pinnable_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The organization's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnableItems\" ] query_organization_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 @task async def query_organization_pinned_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The organization's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnedItems\" ] query_organization_project async Find project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 @task async def query_organization_project ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: login: The organization's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"project\" ] query_organization_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default login str The organization's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 @task async def query_organization_project_next ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: login: The organization's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectNext\" ] query_organization_project_v2 async Find a project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 @task async def query_organization_project_v2 ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by number. Args: login: The organization's login. number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectV2\" ] query_organization_projects async A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 @task async def query_organization_projects ( login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The organization's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projects\" ] query_organization_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 @task async def query_organization_projects_next ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"organization\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsNext\" ] query_organization_projects_v2 async A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 @task async def query_organization_projects_v2 ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for under the the owner. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"organization\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsV2\" ] query_organization_recent_projects async Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 @task async def query_organization_recent_projects ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Recent projects that this user has modified in the context of the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"recentProjects\" ] query_organization_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 @task async def query_organization_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"organization\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositories\" ] query_organization_repository async Find Repository. Parameters: Name Type Description Default login str The organization's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 @task async def query_organization_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The organization's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"organization\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repository\" ] query_organization_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 @task async def query_organization_repository_discussion_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"organization\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussionComments\" ] query_organization_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 @task async def query_organization_repository_discussions ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"organization\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussions\" ] query_organization_repository_migrations async A list of all repository migrations for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None state graphql_schema . MigrationState Filter repository migrations by state. None repository_name str Filter repository migrations by repository name. None order_by graphql_schema . RepositoryMigrationOrder Ordering options for repository migrations returned. {'field': 'CREATED_AT', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 @task async def query_organization_repository_migrations ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , state : graphql_schema . MigrationState = None , repository_name : str = None , order_by : graphql_schema . RepositoryMigrationOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of all repository migrations for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. state: Filter repository migrations by state. repository_name: Filter repository migrations by repository name. order_by: Ordering options for repository migrations returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_migrations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , state = state , repository_name = repository_name , order_by = order_by , ) ) op_stack = ( \"organization\" , \"repositoryMigrations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryMigrations\" ] query_organization_saml_identity_provider async The Organization's SAML identity providers. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 @task async def query_organization_saml_identity_provider ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The Organization's SAML identity providers. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . saml_identity_provider ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"samlIdentityProvider\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"samlIdentityProvider\" ] query_organization_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 @task async def query_organization_sponsoring ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsoring\" ] query_organization_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 @task async def query_organization_sponsors ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsors\" ] query_organization_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The organization's login. required actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 @task async def query_organization_sponsors_activities ( login : str , actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The organization's login. actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsActivities\" ] query_organization_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 @task async def query_organization_sponsors_listing ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsListing\" ] query_organization_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 @task async def query_organization_sponsorship_for_viewer_as_sponsor ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsor\" ] query_organization_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 @task async def query_organization_sponsorship_for_viewer_as_sponsorable ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_organization_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 @task async def query_organization_sponsorship_newsletters ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipNewsletters\" ] query_organization_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 @task async def query_organization_sponsorships_as_maintainer ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsMaintainer\" ] query_organization_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 @task async def query_organization_sponsorships_as_sponsor ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsSponsor\" ] query_organization_team async Find an organization's team by its slug. Parameters: Name Type Description Default login str The organization's login. required slug str The name or slug of the team to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @task async def query_organization_team ( login : str , slug : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization's team by its slug. Args: login: The organization's login. slug: The name or slug of the team to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . team ( ** strip_kwargs ( slug = slug , ) ) op_stack = ( \"organization\" , \"team\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"team\" ] query_organization_teams async A list of teams in this organization. Parameters: Name Type Description Default login str The organization's login. required user_logins Iterable [ str ] User logins to filter by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . TeamPrivacy If non-null, filters teams according to privacy. None role graphql_schema . TeamRole If non-null, filters teams according to whether the viewer is an admin or member on team. None query str If non-null, filters teams with query on team name and team slug. None order_by graphql_schema . TeamOrder Ordering options for teams returned from the connection. None ldap_mapped bool If true, filters teams that are mapped to an LDAP Group (Enterprise only). None root_teams_only bool If true, restrict to only root teams. False after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def query_organization_teams ( login : str , user_logins : Iterable [ str ], github_credentials : GitHubCredentials , privacy : graphql_schema . TeamPrivacy = None , role : graphql_schema . TeamRole = None , query : str = None , order_by : graphql_schema . TeamOrder = None , ldap_mapped : bool = None , root_teams_only : bool = False , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of teams in this organization. Args: login: The organization's login. user_logins: User logins to filter by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters teams according to privacy. role: If non-null, filters teams according to whether the viewer is an admin or member on team. query: If non-null, filters teams with query on team name and team slug. order_by: Ordering options for teams returned from the connection. ldap_mapped: If true, filters teams that are mapped to an LDAP Group (Enterprise only). root_teams_only: If true, restrict to only root teams. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . teams ( ** strip_kwargs ( user_logins = user_logins , privacy = privacy , role = role , query = query , order_by = order_by , ldap_mapped = ldap_mapped , root_teams_only = root_teams_only , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"teams\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"teams\" ]","title":"Organization"},{"location":"organization/#prefect_github.organization","text":"This is a module containing: GitHub query_organization* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py.","title":"organization"},{"location":"organization/#prefect_github.organization.query_organization","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @task async def query_organization ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"organization\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ]","title":"query_organization()"},{"location":"organization/#prefect_github.organization.query_organization_audit_log","text":"Audit log entries of the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str The query string to filter audit entries. None order_by graphql_schema . AuditLogOrder Ordering options for the returned audit log entries. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 @task async def query_organization_audit_log ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . AuditLogOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Audit log entries of the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: The query string to filter audit entries. order_by: Ordering options for the returned audit log entries. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . audit_log ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"organization\" , \"auditLog\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"auditLog\" ]","title":"query_organization_audit_log()"},{"location":"organization/#prefect_github.organization.query_organization_domains","text":"A list of domains owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_verified bool Filter by if the domain is verified. None is_approved bool Filter by if the domain is approved. None order_by graphql_schema . VerifiableDomainOrder Ordering options for verifiable domains returned. {'field': 'DOMAIN', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def query_organization_domains ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , is_verified : bool = None , is_approved : bool = None , order_by : graphql_schema . VerifiableDomainOrder = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of domains owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_verified: Filter by if the domain is verified. is_approved: Filter by if the domain is approved. order_by: Ordering options for verifiable domains returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . domains ( ** strip_kwargs ( after = after , before = before , first = first , last = last , is_verified = is_verified , is_approved = is_approved , order_by = order_by , ) ) op_stack = ( \"organization\" , \"domains\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"domains\" ]","title":"query_organization_domains()"},{"location":"organization/#prefect_github.organization.query_organization_enterprise_owners","text":"A list of owners of the organization's enterprise account. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str The search string to look for. None organization_role graphql_schema . RoleInOrganization The organization role to filter by. None order_by graphql_schema . OrgEnterpriseOwnerOrder Ordering options for enterprise owners returned from the connection. {'field': 'LOGIN', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 @task async def query_organization_enterprise_owners ( login : str , github_credentials : GitHubCredentials , query : str = None , organization_role : graphql_schema . RoleInOrganization = None , order_by : graphql_schema . OrgEnterpriseOwnerOrder = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of owners of the organization's enterprise account. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: The search string to look for. organization_role: The organization role to filter by. order_by: Ordering options for enterprise owners returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . enterprise_owners ( ** strip_kwargs ( query = query , organization_role = organization_role , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"enterpriseOwners\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"enterpriseOwners\" ]","title":"query_organization_enterprise_owners()"},{"location":"organization/#prefect_github.organization.query_organization_interaction_ability","text":"The interaction ability settings for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 @task async def query_organization_interaction_ability ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"interactionAbility\" ]","title":"query_organization_interaction_ability()"},{"location":"organization/#prefect_github.organization.query_organization_ip_allow_list_entries","text":"The IP addresses that are allowed to access resources owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . IpAllowListEntryOrder Ordering options for IP allow list entries returned. {'field': 'ALLOW_LIST_VALUE', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 @task async def query_organization_ip_allow_list_entries ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . IpAllowListEntryOrder = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The IP addresses that are allowed to access resources owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for IP allow list entries returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . ip_allow_list_entries ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"ipAllowListEntries\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"ipAllowListEntries\" ]","title":"query_organization_ip_allow_list_entries()"},{"location":"organization/#prefect_github.organization.query_organization_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 @task async def query_organization_item_showcase ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"itemShowcase\" ]","title":"query_organization_item_showcase()"},{"location":"organization/#prefect_github.organization.query_organization_member_statuses","text":"Get the status messages members of this entity have set that are either public or visible only to the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . UserStatusOrder Ordering options for user statuses returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 @task async def query_organization_member_statuses ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . UserStatusOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Get the status messages members of this entity have set that are either public or visible only to the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for user statuses returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . member_statuses ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"memberStatuses\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"memberStatuses\" ]","title":"query_organization_member_statuses()"},{"location":"organization/#prefect_github.organization.query_organization_members_with_role","text":"A list of users who are members of this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 @task async def query_organization_members_with_role ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who are members of this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . members_with_role ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"membersWithRole\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"membersWithRole\" ]","title":"query_organization_members_with_role()"},{"location":"organization/#prefect_github.organization.query_organization_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 @task async def query_organization_packages ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"organization\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"packages\" ]","title":"query_organization_packages()"},{"location":"organization/#prefect_github.organization.query_organization_pending_members","text":"A list of users who have been invited to join this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 @task async def query_organization_pending_members ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who have been invited to join this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pending_members ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pendingMembers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pendingMembers\" ]","title":"query_organization_pending_members()"},{"location":"organization/#prefect_github.organization.query_organization_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 @task async def query_organization_pinnable_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The organization's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnableItems\" ]","title":"query_organization_pinnable_items()"},{"location":"organization/#prefect_github.organization.query_organization_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 @task async def query_organization_pinned_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The organization's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnedItems\" ]","title":"query_organization_pinned_items()"},{"location":"organization/#prefect_github.organization.query_organization_project","text":"Find project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 @task async def query_organization_project ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: login: The organization's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"project\" ]","title":"query_organization_project()"},{"location":"organization/#prefect_github.organization.query_organization_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default login str The organization's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 @task async def query_organization_project_next ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: login: The organization's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectNext\" ]","title":"query_organization_project_next()"},{"location":"organization/#prefect_github.organization.query_organization_project_v2","text":"Find a project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 @task async def query_organization_project_v2 ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by number. Args: login: The organization's login. number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectV2\" ]","title":"query_organization_project_v2()"},{"location":"organization/#prefect_github.organization.query_organization_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 @task async def query_organization_projects ( login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The organization's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projects\" ]","title":"query_organization_projects()"},{"location":"organization/#prefect_github.organization.query_organization_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 @task async def query_organization_projects_next ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"organization\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsNext\" ]","title":"query_organization_projects_next()"},{"location":"organization/#prefect_github.organization.query_organization_projects_v2","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 @task async def query_organization_projects_v2 ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for under the the owner. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"organization\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsV2\" ]","title":"query_organization_projects_v2()"},{"location":"organization/#prefect_github.organization.query_organization_recent_projects","text":"Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 @task async def query_organization_recent_projects ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Recent projects that this user has modified in the context of the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"recentProjects\" ]","title":"query_organization_recent_projects()"},{"location":"organization/#prefect_github.organization.query_organization_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 @task async def query_organization_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"organization\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositories\" ]","title":"query_organization_repositories()"},{"location":"organization/#prefect_github.organization.query_organization_repository","text":"Find Repository. Parameters: Name Type Description Default login str The organization's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 @task async def query_organization_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The organization's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"organization\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repository\" ]","title":"query_organization_repository()"},{"location":"organization/#prefect_github.organization.query_organization_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 @task async def query_organization_repository_discussion_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"organization\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussionComments\" ]","title":"query_organization_repository_discussion_comments()"},{"location":"organization/#prefect_github.organization.query_organization_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 @task async def query_organization_repository_discussions ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"organization\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussions\" ]","title":"query_organization_repository_discussions()"},{"location":"organization/#prefect_github.organization.query_organization_repository_migrations","text":"A list of all repository migrations for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None state graphql_schema . MigrationState Filter repository migrations by state. None repository_name str Filter repository migrations by repository name. None order_by graphql_schema . RepositoryMigrationOrder Ordering options for repository migrations returned. {'field': 'CREATED_AT', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 @task async def query_organization_repository_migrations ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , state : graphql_schema . MigrationState = None , repository_name : str = None , order_by : graphql_schema . RepositoryMigrationOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of all repository migrations for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. state: Filter repository migrations by state. repository_name: Filter repository migrations by repository name. order_by: Ordering options for repository migrations returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_migrations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , state = state , repository_name = repository_name , order_by = order_by , ) ) op_stack = ( \"organization\" , \"repositoryMigrations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryMigrations\" ]","title":"query_organization_repository_migrations()"},{"location":"organization/#prefect_github.organization.query_organization_saml_identity_provider","text":"The Organization's SAML identity providers. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 @task async def query_organization_saml_identity_provider ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The Organization's SAML identity providers. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . saml_identity_provider ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"samlIdentityProvider\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"samlIdentityProvider\" ]","title":"query_organization_saml_identity_provider()"},{"location":"organization/#prefect_github.organization.query_organization_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 @task async def query_organization_sponsoring ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsoring\" ]","title":"query_organization_sponsoring()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 @task async def query_organization_sponsors ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsors\" ]","title":"query_organization_sponsors()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The organization's login. required actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 @task async def query_organization_sponsors_activities ( login : str , actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The organization's login. actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsActivities\" ]","title":"query_organization_sponsors_activities()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 @task async def query_organization_sponsors_listing ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsListing\" ]","title":"query_organization_sponsors_listing()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 @task async def query_organization_sponsorship_for_viewer_as_sponsor ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_organization_sponsorship_for_viewer_as_sponsor()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 @task async def query_organization_sponsorship_for_viewer_as_sponsorable ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_organization_sponsorship_for_viewer_as_sponsorable()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 @task async def query_organization_sponsorship_newsletters ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipNewsletters\" ]","title":"query_organization_sponsorship_newsletters()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 @task async def query_organization_sponsorships_as_maintainer ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_organization_sponsorships_as_maintainer()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 @task async def query_organization_sponsorships_as_sponsor ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_organization_sponsorships_as_sponsor()"},{"location":"organization/#prefect_github.organization.query_organization_team","text":"Find an organization's team by its slug. Parameters: Name Type Description Default login str The organization's login. required slug str The name or slug of the team to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @task async def query_organization_team ( login : str , slug : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization's team by its slug. Args: login: The organization's login. slug: The name or slug of the team to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . team ( ** strip_kwargs ( slug = slug , ) ) op_stack = ( \"organization\" , \"team\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"team\" ]","title":"query_organization_team()"},{"location":"organization/#prefect_github.organization.query_organization_teams","text":"A list of teams in this organization. Parameters: Name Type Description Default login str The organization's login. required user_logins Iterable [ str ] User logins to filter by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . TeamPrivacy If non-null, filters teams according to privacy. None role graphql_schema . TeamRole If non-null, filters teams according to whether the viewer is an admin or member on team. None query str If non-null, filters teams with query on team name and team slug. None order_by graphql_schema . TeamOrder Ordering options for teams returned from the connection. None ldap_mapped bool If true, filters teams that are mapped to an LDAP Group (Enterprise only). None root_teams_only bool If true, restrict to only root teams. False after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def query_organization_teams ( login : str , user_logins : Iterable [ str ], github_credentials : GitHubCredentials , privacy : graphql_schema . TeamPrivacy = None , role : graphql_schema . TeamRole = None , query : str = None , order_by : graphql_schema . TeamOrder = None , ldap_mapped : bool = None , root_teams_only : bool = False , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of teams in this organization. Args: login: The organization's login. user_logins: User logins to filter by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters teams according to privacy. role: If non-null, filters teams according to whether the viewer is an admin or member on team. query: If non-null, filters teams with query on team name and team slug. order_by: Ordering options for teams returned from the connection. ldap_mapped: If true, filters teams that are mapped to an LDAP Group (Enterprise only). root_teams_only: If true, restrict to only root teams. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . teams ( ** strip_kwargs ( user_logins = user_logins , privacy = privacy , role = role , query = query , order_by = order_by , ldap_mapped = ldap_mapped , root_teams_only = root_teams_only , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"teams\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"teams\" ]","title":"query_organization_teams()"},{"location":"repository/","text":"prefect_github.repository This is a module containing: GitHub query_repository* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py. query_repository async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 @task async def query_repository ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repository\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ] query_repository_assignable_users async A list of users that can be assigned to issues in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 @task async def query_repository_assignable_users ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users that can be assigned to issues in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . assignable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"assignableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"assignableUsers\" ] query_repository_branch_protection_rules async A list of branch protection rules for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 @task async def query_repository_branch_protection_rules ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of branch protection rules for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . branch_protection_rules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"branchProtectionRules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"branchProtectionRules\" ] query_repository_code_of_conduct async Returns the code of conduct for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 @task async def query_repository_code_of_conduct ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns the code of conduct for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . code_of_conduct ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"codeOfConduct\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"codeOfConduct\" ] query_repository_collaborators async A list of collaborators associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True affiliation graphql_schema . CollaboratorAffiliation Collaborators affiliation level with a repository. None query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 @task async def query_repository_collaborators ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , affiliation : graphql_schema . CollaboratorAffiliation = None , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of collaborators associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. affiliation: Collaborators affiliation level with a repository. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . collaborators ( ** strip_kwargs ( affiliation = affiliation , query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"collaborators\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"collaborators\" ] query_repository_commit_comments async A list of commit comments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 @task async def query_repository_commit_comments ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"commitComments\" ] query_repository_contact_links async Returns a list of contact links associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 @task async def query_repository_contact_links ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of contact links associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . contact_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"contactLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"contactLinks\" ] query_repository_default_branch_ref async The Ref associated with the repository's default branch. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 @task async def query_repository_default_branch_ref ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The Ref associated with the repository's default branch. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . default_branch_ref ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"defaultBranchRef\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"defaultBranchRef\" ] query_repository_deploy_keys async A list of deploy keys that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 @task async def query_repository_deploy_keys ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of deploy keys that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deploy_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployKeys\" ] query_repository_deployments async Deployments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environments Iterable [ str ] Environments to list deployments for. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . DeploymentOrder Ordering options for deployments returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 @task async def query_repository_deployments ( owner : str , name : str , environments : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . DeploymentOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Deployments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. environments: Environments to list deployments for. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for deployments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deployments ( ** strip_kwargs ( environments = environments , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployments\" ] query_repository_discussion async Returns a single discussion from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the discussion to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 @task async def query_repository_discussion ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single discussion from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the discussion to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"discussion\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussion\" ] query_repository_discussion_categories async A list of discussion categories that are available in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None filter_by_assignable bool Filter by categories that are assignable by the viewer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 @task async def query_repository_discussion_categories ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , filter_by_assignable : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussion categories that are available in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. filter_by_assignable: Filter by categories that are assignable by the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion_categories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , filter_by_assignable = filter_by_assignable , ) ) op_stack = ( \"repository\" , \"discussionCategories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussionCategories\" ] query_repository_discussions async A list of discussions that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None category_id str Only include discussions that belong to the category with this ID. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 @task async def query_repository_discussions ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , category_id : str = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussions that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. category_id: Only include discussions that belong to the category with this ID. order_by: Ordering options for discussions returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , category_id = category_id , order_by = order_by , ) ) op_stack = ( \"repository\" , \"discussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussions\" ] query_repository_environment async Returns a single active environment from the current repository by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environment_name str The name of the environment to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 @task async def query_repository_environment ( owner : str , name : str , environment_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single active environment from the current repository by name. Args: owner: The login field of a user or organization. name: The name of the repository. environment_name: The name of the environment to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environment ( ** strip_kwargs ( name = environment_name , ) ) op_stack = ( \"repository\" , \"environment\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environment\" ] query_repository_environments async A list of environments that are in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 @task async def query_repository_environments ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of environments that are in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"environments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environments\" ] query_repository_forks async A list of direct forked repositories. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 @task async def query_repository_forks ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of direct forked repositories. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . forks ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"forks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"forks\" ] query_repository_funding_links async The funding links for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 @task async def query_repository_funding_links ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The funding links for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . funding_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"fundingLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"fundingLinks\" ] query_repository_interaction_ability async The interaction ability settings for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 @task async def query_repository_interaction_ability ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"interactionAbility\" ] query_repository_issue async Returns a single issue from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 @task async def query_repository_issue ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single issue from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issue\" ] query_repository_issue_or_pull_request async Returns a single issue-like object from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 @task async def query_repository_issue_or_pull_request ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single issue-like object from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_or_pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issueOrPullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueOrPullRequest\" ] query_repository_issue_templates async Returns a list of issue templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 @task async def query_repository_issue_templates ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of issue templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"issueTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueTemplates\" ] query_repository_issues async A list of issues that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 @task async def query_repository_issues ( owner : str , name : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issues\" ] query_repository_label async Returns a single label by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required label_name str Label name. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 @task async def query_repository_label ( owner : str , name : str , label_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single label by name. Args: owner: The login field of a user or organization. name: The name of the repository. label_name: Label name. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . label ( ** strip_kwargs ( name = label_name , ) ) op_stack = ( \"repository\" , \"label\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"label\" ] query_repository_labels async A list of labels associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . LabelOrder Ordering options for labels returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str If provided, searches labels by name and description. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 @task async def query_repository_labels ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . LabelOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of labels associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for labels returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: If provided, searches labels by name and description. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . labels ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , query = query , ) ) op_stack = ( \"repository\" , \"labels\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"labels\" ] query_repository_languages async A list containing a breakdown of the language composition of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . LanguageOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 @task async def query_repository_languages ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . LanguageOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list containing a breakdown of the language composition of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . languages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"languages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"languages\" ] query_repository_latest_release async Get the latest release for the repository if one exists. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 @task async def query_repository_latest_release ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Get the latest release for the repository if one exists. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . latest_release ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"latestRelease\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"latestRelease\" ] query_repository_license_info async The license associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 @task async def query_repository_license_info ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The license associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . license_info ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"licenseInfo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"licenseInfo\" ] query_repository_mentionable_users async A list of Users that can be mentioned in the context of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 @task async def query_repository_mentionable_users ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of Users that can be mentioned in the context of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . mentionable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"mentionableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"mentionableUsers\" ] query_repository_milestone async Returns a single milestone from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the milestone to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 @task async def query_repository_milestone ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single milestone from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the milestone to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestone ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"milestone\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestone\" ] query_repository_milestones async A list of milestones associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . MilestoneState ] Filter by the state of the milestones. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . MilestoneOrder Ordering options for milestones. None query str Filters milestones with a query on the title. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 @task async def query_repository_milestones ( owner : str , name : str , states : Iterable [ graphql_schema . MilestoneState ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . MilestoneOrder = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of milestones associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the milestones. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for milestones. query: Filters milestones with a query on the title. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestones ( ** strip_kwargs ( states = states , after = after , before = before , first = first , last = last , order_by = order_by , query = query , ) ) op_stack = ( \"repository\" , \"milestones\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestones\" ] query_repository_object async A Git object in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True oid datetime The Git object ID. None expression str A Git revision expression suitable for rev-parse. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 @task async def query_repository_object ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , oid : datetime = None , expression : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A Git object in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. oid: The Git object ID. expression: A Git revision expression suitable for rev-parse. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . object ( ** strip_kwargs ( oid = oid , expression = expression , ) ) op_stack = ( \"repository\" , \"object\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"object\" ] query_repository_owner async The User owner of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 @task async def query_repository_owner ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The User owner of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . owner ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"owner\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"owner\" ] query_repository_packages async A list of packages under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 @task async def query_repository_packages ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"repository\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"packages\" ] query_repository_pinned_discussions async A list of discussions that have been pinned in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 @task async def query_repository_pinned_discussions ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussions that have been pinned in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedDiscussions\" ] query_repository_pinned_issues async A list of pinned issues for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 @task async def query_repository_pinned_issues ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pinned issues for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_issues ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedIssues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedIssues\" ] query_repository_primary_language async The primary language of the repository's code. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 @task async def query_repository_primary_language ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The primary language of the repository's code. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . primary_language ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"primaryLanguage\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"primaryLanguage\" ] query_repository_project async Find project by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 @task async def query_repository_project ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"project\" ] query_repository_project_next async Finds and returns the Project (beta) according to the provided Project (beta) number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The ProjectNext number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 @task async def query_repository_project_next ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Finds and returns the Project (beta) according to the provided Project (beta) number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The ProjectNext number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectNext\" ] query_repository_project_v2 async Finds and returns the Project according to the provided Project number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The Project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 @task async def query_repository_project_v2 ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Finds and returns the Project according to the provided Project number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The Project number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectV2\" ] query_repository_projects async A list of projects under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 @task async def query_repository_projects ( owner : str , name : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projects\" ] query_repository_projects_next async List of projects (beta) linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for linked to the repo. None sort_by graphql_schema . ProjectNextOrderField How to order the returned project (beta) objects. 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 @task async def query_repository_projects_next ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of projects (beta) linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for linked to the repo. sort_by: How to order the returned project (beta) objects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"repository\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsNext\" ] query_repository_projects_v2 async List of projects linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for linked to the repo. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 @task async def query_repository_projects_v2 ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of projects linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for linked to the repo. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"repository\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsV2\" ] query_repository_pull_request async Returns a single pull request from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the pull request to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 @task async def query_repository_pull_request ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single pull request from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the pull request to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequest\" ] query_repository_pull_request_templates async Returns a list of pull request templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 @task async def query_repository_pull_request_templates ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of pull request templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"pullRequestTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequestTemplates\" ] query_repository_pull_requests async A list of pull requests that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 @task async def query_repository_pull_requests ( owner : str , name : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequests\" ] query_repository_recent_projects async Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 @task async def query_repository_recent_projects ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Recent projects that this user has modified in the context of the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"recentProjects\" ] query_repository_ref async Fetch a given ref from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required qualified_name str The ref to retrieve. Fully qualified matches are checked in order ( refs/heads/master ) before falling back onto checks for short name matches ( master ). required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @task async def query_repository_ref ( owner : str , name : str , qualified_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Fetch a given ref from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. qualified_name: The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`). github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . ref ( ** strip_kwargs ( qualified_name = qualified_name , ) ) op_stack = ( \"repository\" , \"ref\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"ref\" ] query_repository_refs async Fetch a list of refs from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required ref_prefix str A ref name prefix like refs/heads/ , refs/tags/ , etc. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters refs with query on name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None direction graphql_schema . OrderDirection None order_by graphql_schema . RefOrder Ordering options for refs returned from the connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 @task async def query_repository_refs ( owner : str , name : str , ref_prefix : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , direction : graphql_schema . OrderDirection = None , order_by : graphql_schema . RefOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Fetch a list of refs from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. ref_prefix: A ref name prefix like `refs/heads/`, `refs/tags/`, etc. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters refs with query on name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. direction: DEPRECATED: use orderBy. The ordering direction. order_by: Ordering options for refs returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . refs ( ** strip_kwargs ( ref_prefix = ref_prefix , query = query , after = after , before = before , first = first , last = last , direction = direction , order_by = order_by , ) ) op_stack = ( \"repository\" , \"refs\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"refs\" ] query_repository_release async Lookup a single release given various criteria. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required tag_name str The name of the Tag the Release was created from. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 @task async def query_repository_release ( owner : str , name : str , tag_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Lookup a single release given various criteria. Args: owner: The login field of a user or organization. name: The name of the repository. tag_name: The name of the Tag the Release was created from. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . release ( ** strip_kwargs ( tag_name = tag_name , ) ) op_stack = ( \"repository\" , \"release\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"release\" ] query_repository_releases async List of releases which are dependent on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . ReleaseOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 @task async def query_repository_releases ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . ReleaseOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of releases which are dependent on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . releases ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"releases\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"releases\" ] query_repository_repository_topics async A list of applied repository-topic associations for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 @task async def query_repository_repository_topics ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of applied repository-topic associations for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . repository_topics ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"repositoryTopics\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"repositoryTopics\" ] query_repository_stargazers async A list of users who have starred this starrable. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 @task async def query_repository_stargazers ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who have starred this starrable. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . stargazers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"stargazers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"stargazers\" ] query_repository_submodules async Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 @task async def query_repository_submodules ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . submodules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"submodules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"submodules\" ] query_repository_vulnerability_alerts async A list of vulnerability alerts that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ] Filter by the state of the alert. required dependency_scopes Iterable [ graphql_schema . RepositoryVulnerabilityAlertDependencyScope ] Filter by the scope of the alert's dependency. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 @task async def query_repository_vulnerability_alerts ( owner : str , name : str , states : Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ], dependency_scopes : Iterable [ graphql_schema . RepositoryVulnerabilityAlertDependencyScope ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of vulnerability alerts that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the alert. dependency_scopes: Filter by the scope of the alert's dependency. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . vulnerability_alerts ( ** strip_kwargs ( states = states , dependency_scopes = dependency_scopes , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"vulnerabilityAlerts\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"vulnerabilityAlerts\" ] query_repository_watchers async A list of users watching the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 @task async def query_repository_watchers ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users watching the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . watchers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"watchers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"watchers\" ]","title":"Repository"},{"location":"repository/#prefect_github.repository","text":"This is a module containing: GitHub query_repository* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py.","title":"repository"},{"location":"repository/#prefect_github.repository.query_repository","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 @task async def query_repository ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repository\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ]","title":"query_repository()"},{"location":"repository/#prefect_github.repository.query_repository_assignable_users","text":"A list of users that can be assigned to issues in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 @task async def query_repository_assignable_users ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users that can be assigned to issues in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . assignable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"assignableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"assignableUsers\" ]","title":"query_repository_assignable_users()"},{"location":"repository/#prefect_github.repository.query_repository_branch_protection_rules","text":"A list of branch protection rules for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 @task async def query_repository_branch_protection_rules ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of branch protection rules for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . branch_protection_rules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"branchProtectionRules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"branchProtectionRules\" ]","title":"query_repository_branch_protection_rules()"},{"location":"repository/#prefect_github.repository.query_repository_code_of_conduct","text":"Returns the code of conduct for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 @task async def query_repository_code_of_conduct ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns the code of conduct for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . code_of_conduct ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"codeOfConduct\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"codeOfConduct\" ]","title":"query_repository_code_of_conduct()"},{"location":"repository/#prefect_github.repository.query_repository_collaborators","text":"A list of collaborators associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True affiliation graphql_schema . CollaboratorAffiliation Collaborators affiliation level with a repository. None query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 @task async def query_repository_collaborators ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , affiliation : graphql_schema . CollaboratorAffiliation = None , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of collaborators associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. affiliation: Collaborators affiliation level with a repository. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . collaborators ( ** strip_kwargs ( affiliation = affiliation , query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"collaborators\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"collaborators\" ]","title":"query_repository_collaborators()"},{"location":"repository/#prefect_github.repository.query_repository_commit_comments","text":"A list of commit comments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 @task async def query_repository_commit_comments ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"commitComments\" ]","title":"query_repository_commit_comments()"},{"location":"repository/#prefect_github.repository.query_repository_contact_links","text":"Returns a list of contact links associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 @task async def query_repository_contact_links ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of contact links associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . contact_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"contactLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"contactLinks\" ]","title":"query_repository_contact_links()"},{"location":"repository/#prefect_github.repository.query_repository_default_branch_ref","text":"The Ref associated with the repository's default branch. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 @task async def query_repository_default_branch_ref ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The Ref associated with the repository's default branch. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . default_branch_ref ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"defaultBranchRef\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"defaultBranchRef\" ]","title":"query_repository_default_branch_ref()"},{"location":"repository/#prefect_github.repository.query_repository_deploy_keys","text":"A list of deploy keys that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 @task async def query_repository_deploy_keys ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of deploy keys that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deploy_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployKeys\" ]","title":"query_repository_deploy_keys()"},{"location":"repository/#prefect_github.repository.query_repository_deployments","text":"Deployments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environments Iterable [ str ] Environments to list deployments for. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . DeploymentOrder Ordering options for deployments returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 @task async def query_repository_deployments ( owner : str , name : str , environments : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . DeploymentOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Deployments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. environments: Environments to list deployments for. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for deployments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deployments ( ** strip_kwargs ( environments = environments , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployments\" ]","title":"query_repository_deployments()"},{"location":"repository/#prefect_github.repository.query_repository_discussion","text":"Returns a single discussion from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the discussion to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 @task async def query_repository_discussion ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single discussion from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the discussion to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"discussion\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussion\" ]","title":"query_repository_discussion()"},{"location":"repository/#prefect_github.repository.query_repository_discussion_categories","text":"A list of discussion categories that are available in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None filter_by_assignable bool Filter by categories that are assignable by the viewer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 @task async def query_repository_discussion_categories ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , filter_by_assignable : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussion categories that are available in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. filter_by_assignable: Filter by categories that are assignable by the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion_categories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , filter_by_assignable = filter_by_assignable , ) ) op_stack = ( \"repository\" , \"discussionCategories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussionCategories\" ]","title":"query_repository_discussion_categories()"},{"location":"repository/#prefect_github.repository.query_repository_discussions","text":"A list of discussions that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None category_id str Only include discussions that belong to the category with this ID. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 @task async def query_repository_discussions ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , category_id : str = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussions that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. category_id: Only include discussions that belong to the category with this ID. order_by: Ordering options for discussions returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , category_id = category_id , order_by = order_by , ) ) op_stack = ( \"repository\" , \"discussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussions\" ]","title":"query_repository_discussions()"},{"location":"repository/#prefect_github.repository.query_repository_environment","text":"Returns a single active environment from the current repository by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environment_name str The name of the environment to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 @task async def query_repository_environment ( owner : str , name : str , environment_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single active environment from the current repository by name. Args: owner: The login field of a user or organization. name: The name of the repository. environment_name: The name of the environment to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environment ( ** strip_kwargs ( name = environment_name , ) ) op_stack = ( \"repository\" , \"environment\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environment\" ]","title":"query_repository_environment()"},{"location":"repository/#prefect_github.repository.query_repository_environments","text":"A list of environments that are in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 @task async def query_repository_environments ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of environments that are in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"environments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environments\" ]","title":"query_repository_environments()"},{"location":"repository/#prefect_github.repository.query_repository_forks","text":"A list of direct forked repositories. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 @task async def query_repository_forks ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of direct forked repositories. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . forks ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"forks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"forks\" ]","title":"query_repository_forks()"},{"location":"repository/#prefect_github.repository.query_repository_funding_links","text":"The funding links for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 @task async def query_repository_funding_links ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The funding links for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . funding_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"fundingLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"fundingLinks\" ]","title":"query_repository_funding_links()"},{"location":"repository/#prefect_github.repository.query_repository_interaction_ability","text":"The interaction ability settings for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 @task async def query_repository_interaction_ability ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"interactionAbility\" ]","title":"query_repository_interaction_ability()"},{"location":"repository/#prefect_github.repository.query_repository_issue","text":"Returns a single issue from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 @task async def query_repository_issue ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single issue from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issue\" ]","title":"query_repository_issue()"},{"location":"repository/#prefect_github.repository.query_repository_issue_or_pull_request","text":"Returns a single issue-like object from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 @task async def query_repository_issue_or_pull_request ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single issue-like object from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_or_pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issueOrPullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueOrPullRequest\" ]","title":"query_repository_issue_or_pull_request()"},{"location":"repository/#prefect_github.repository.query_repository_issue_templates","text":"Returns a list of issue templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 @task async def query_repository_issue_templates ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of issue templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"issueTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueTemplates\" ]","title":"query_repository_issue_templates()"},{"location":"repository/#prefect_github.repository.query_repository_issues","text":"A list of issues that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 @task async def query_repository_issues ( owner : str , name : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issues\" ]","title":"query_repository_issues()"},{"location":"repository/#prefect_github.repository.query_repository_label","text":"Returns a single label by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required label_name str Label name. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 @task async def query_repository_label ( owner : str , name : str , label_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single label by name. Args: owner: The login field of a user or organization. name: The name of the repository. label_name: Label name. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . label ( ** strip_kwargs ( name = label_name , ) ) op_stack = ( \"repository\" , \"label\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"label\" ]","title":"query_repository_label()"},{"location":"repository/#prefect_github.repository.query_repository_labels","text":"A list of labels associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . LabelOrder Ordering options for labels returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str If provided, searches labels by name and description. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 @task async def query_repository_labels ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . LabelOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of labels associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for labels returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: If provided, searches labels by name and description. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . labels ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , query = query , ) ) op_stack = ( \"repository\" , \"labels\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"labels\" ]","title":"query_repository_labels()"},{"location":"repository/#prefect_github.repository.query_repository_languages","text":"A list containing a breakdown of the language composition of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . LanguageOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 @task async def query_repository_languages ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . LanguageOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list containing a breakdown of the language composition of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . languages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"languages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"languages\" ]","title":"query_repository_languages()"},{"location":"repository/#prefect_github.repository.query_repository_latest_release","text":"Get the latest release for the repository if one exists. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 @task async def query_repository_latest_release ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Get the latest release for the repository if one exists. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . latest_release ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"latestRelease\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"latestRelease\" ]","title":"query_repository_latest_release()"},{"location":"repository/#prefect_github.repository.query_repository_license_info","text":"The license associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 @task async def query_repository_license_info ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The license associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . license_info ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"licenseInfo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"licenseInfo\" ]","title":"query_repository_license_info()"},{"location":"repository/#prefect_github.repository.query_repository_mentionable_users","text":"A list of Users that can be mentioned in the context of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 @task async def query_repository_mentionable_users ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of Users that can be mentioned in the context of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . mentionable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"mentionableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"mentionableUsers\" ]","title":"query_repository_mentionable_users()"},{"location":"repository/#prefect_github.repository.query_repository_milestone","text":"Returns a single milestone from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the milestone to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 @task async def query_repository_milestone ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single milestone from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the milestone to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestone ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"milestone\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestone\" ]","title":"query_repository_milestone()"},{"location":"repository/#prefect_github.repository.query_repository_milestones","text":"A list of milestones associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . MilestoneState ] Filter by the state of the milestones. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . MilestoneOrder Ordering options for milestones. None query str Filters milestones with a query on the title. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 @task async def query_repository_milestones ( owner : str , name : str , states : Iterable [ graphql_schema . MilestoneState ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . MilestoneOrder = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of milestones associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the milestones. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for milestones. query: Filters milestones with a query on the title. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestones ( ** strip_kwargs ( states = states , after = after , before = before , first = first , last = last , order_by = order_by , query = query , ) ) op_stack = ( \"repository\" , \"milestones\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestones\" ]","title":"query_repository_milestones()"},{"location":"repository/#prefect_github.repository.query_repository_object","text":"A Git object in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True oid datetime The Git object ID. None expression str A Git revision expression suitable for rev-parse. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 @task async def query_repository_object ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , oid : datetime = None , expression : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A Git object in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. oid: The Git object ID. expression: A Git revision expression suitable for rev-parse. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . object ( ** strip_kwargs ( oid = oid , expression = expression , ) ) op_stack = ( \"repository\" , \"object\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"object\" ]","title":"query_repository_object()"},{"location":"repository/#prefect_github.repository.query_repository_owner","text":"The User owner of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 @task async def query_repository_owner ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The User owner of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . owner ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"owner\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"owner\" ]","title":"query_repository_owner()"},{"location":"repository/#prefect_github.repository.query_repository_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 @task async def query_repository_packages ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"repository\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"packages\" ]","title":"query_repository_packages()"},{"location":"repository/#prefect_github.repository.query_repository_pinned_discussions","text":"A list of discussions that have been pinned in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 @task async def query_repository_pinned_discussions ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of discussions that have been pinned in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedDiscussions\" ]","title":"query_repository_pinned_discussions()"},{"location":"repository/#prefect_github.repository.query_repository_pinned_issues","text":"A list of pinned issues for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 @task async def query_repository_pinned_issues ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pinned issues for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_issues ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedIssues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedIssues\" ]","title":"query_repository_pinned_issues()"},{"location":"repository/#prefect_github.repository.query_repository_primary_language","text":"The primary language of the repository's code. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 @task async def query_repository_primary_language ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The primary language of the repository's code. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . primary_language ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"primaryLanguage\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"primaryLanguage\" ]","title":"query_repository_primary_language()"},{"location":"repository/#prefect_github.repository.query_repository_project","text":"Find project by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 @task async def query_repository_project ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"project\" ]","title":"query_repository_project()"},{"location":"repository/#prefect_github.repository.query_repository_project_next","text":"Finds and returns the Project (beta) according to the provided Project (beta) number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The ProjectNext number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 @task async def query_repository_project_next ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Finds and returns the Project (beta) according to the provided Project (beta) number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The ProjectNext number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectNext\" ]","title":"query_repository_project_next()"},{"location":"repository/#prefect_github.repository.query_repository_project_v2","text":"Finds and returns the Project according to the provided Project number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The Project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 @task async def query_repository_project_v2 ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Finds and returns the Project according to the provided Project number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The Project number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectV2\" ]","title":"query_repository_project_v2()"},{"location":"repository/#prefect_github.repository.query_repository_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 @task async def query_repository_projects ( owner : str , name : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projects\" ]","title":"query_repository_projects()"},{"location":"repository/#prefect_github.repository.query_repository_projects_next","text":"List of projects (beta) linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for linked to the repo. None sort_by graphql_schema . ProjectNextOrderField How to order the returned project (beta) objects. 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 @task async def query_repository_projects_next ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of projects (beta) linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for linked to the repo. sort_by: How to order the returned project (beta) objects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"repository\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsNext\" ]","title":"query_repository_projects_next()"},{"location":"repository/#prefect_github.repository.query_repository_projects_v2","text":"List of projects linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for linked to the repo. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 @task async def query_repository_projects_v2 ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of projects linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for linked to the repo. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"repository\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsV2\" ]","title":"query_repository_projects_v2()"},{"location":"repository/#prefect_github.repository.query_repository_pull_request","text":"Returns a single pull request from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the pull request to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 @task async def query_repository_pull_request ( owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a single pull request from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the pull request to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequest\" ]","title":"query_repository_pull_request()"},{"location":"repository/#prefect_github.repository.query_repository_pull_request_templates","text":"Returns a list of pull request templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 @task async def query_repository_pull_request_templates ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of pull request templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"pullRequestTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequestTemplates\" ]","title":"query_repository_pull_request_templates()"},{"location":"repository/#prefect_github.repository.query_repository_pull_requests","text":"A list of pull requests that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 @task async def query_repository_pull_requests ( owner : str , name : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequests\" ]","title":"query_repository_pull_requests()"},{"location":"repository/#prefect_github.repository.query_repository_recent_projects","text":"Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 @task async def query_repository_recent_projects ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Recent projects that this user has modified in the context of the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"recentProjects\" ]","title":"query_repository_recent_projects()"},{"location":"repository/#prefect_github.repository.query_repository_ref","text":"Fetch a given ref from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required qualified_name str The ref to retrieve. Fully qualified matches are checked in order ( refs/heads/master ) before falling back onto checks for short name matches ( master ). required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @task async def query_repository_ref ( owner : str , name : str , qualified_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Fetch a given ref from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. qualified_name: The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`). github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . ref ( ** strip_kwargs ( qualified_name = qualified_name , ) ) op_stack = ( \"repository\" , \"ref\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"ref\" ]","title":"query_repository_ref()"},{"location":"repository/#prefect_github.repository.query_repository_refs","text":"Fetch a list of refs from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required ref_prefix str A ref name prefix like refs/heads/ , refs/tags/ , etc. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters refs with query on name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None direction graphql_schema . OrderDirection None order_by graphql_schema . RefOrder Ordering options for refs returned from the connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 @task async def query_repository_refs ( owner : str , name : str , ref_prefix : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , direction : graphql_schema . OrderDirection = None , order_by : graphql_schema . RefOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Fetch a list of refs from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. ref_prefix: A ref name prefix like `refs/heads/`, `refs/tags/`, etc. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters refs with query on name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. direction: DEPRECATED: use orderBy. The ordering direction. order_by: Ordering options for refs returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . refs ( ** strip_kwargs ( ref_prefix = ref_prefix , query = query , after = after , before = before , first = first , last = last , direction = direction , order_by = order_by , ) ) op_stack = ( \"repository\" , \"refs\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"refs\" ]","title":"query_repository_refs()"},{"location":"repository/#prefect_github.repository.query_repository_release","text":"Lookup a single release given various criteria. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required tag_name str The name of the Tag the Release was created from. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 @task async def query_repository_release ( owner : str , name : str , tag_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Lookup a single release given various criteria. Args: owner: The login field of a user or organization. name: The name of the repository. tag_name: The name of the Tag the Release was created from. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . release ( ** strip_kwargs ( tag_name = tag_name , ) ) op_stack = ( \"repository\" , \"release\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"release\" ]","title":"query_repository_release()"},{"location":"repository/#prefect_github.repository.query_repository_releases","text":"List of releases which are dependent on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . ReleaseOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 @task async def query_repository_releases ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . ReleaseOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of releases which are dependent on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . releases ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"releases\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"releases\" ]","title":"query_repository_releases()"},{"location":"repository/#prefect_github.repository.query_repository_repository_topics","text":"A list of applied repository-topic associations for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 @task async def query_repository_repository_topics ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of applied repository-topic associations for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . repository_topics ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"repositoryTopics\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"repositoryTopics\" ]","title":"query_repository_repository_topics()"},{"location":"repository/#prefect_github.repository.query_repository_stargazers","text":"A list of users who have starred this starrable. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 @task async def query_repository_stargazers ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users who have starred this starrable. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . stargazers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"stargazers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"stargazers\" ]","title":"query_repository_stargazers()"},{"location":"repository/#prefect_github.repository.query_repository_submodules","text":"Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 @task async def query_repository_submodules ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . submodules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"submodules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"submodules\" ]","title":"query_repository_submodules()"},{"location":"repository/#prefect_github.repository.query_repository_vulnerability_alerts","text":"A list of vulnerability alerts that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ] Filter by the state of the alert. required dependency_scopes Iterable [ graphql_schema . RepositoryVulnerabilityAlertDependencyScope ] Filter by the scope of the alert's dependency. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 @task async def query_repository_vulnerability_alerts ( owner : str , name : str , states : Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ], dependency_scopes : Iterable [ graphql_schema . RepositoryVulnerabilityAlertDependencyScope ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of vulnerability alerts that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the alert. dependency_scopes: Filter by the scope of the alert's dependency. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . vulnerability_alerts ( ** strip_kwargs ( states = states , dependency_scopes = dependency_scopes , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"vulnerabilityAlerts\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"vulnerabilityAlerts\" ]","title":"query_repository_vulnerability_alerts()"},{"location":"repository/#prefect_github.repository.query_repository_watchers","text":"A list of users watching the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 @task async def query_repository_watchers ( owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users watching the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . watchers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"watchers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"watchers\" ]","title":"query_repository_watchers()"},{"location":"repository_owner/","text":"prefect_github.repository_owner This is a module containing: GitHub query_repository_owner* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py. query_repository_owner async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @task async def query_repository_owner ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"repositoryOwner\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ] query_repository_owner_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 @task async def query_repository_owner_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"repositoryOwner\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repositories\" ] query_repository_owner_repository async Find Repository. Parameters: Name Type Description Default login str The username to lookup the owner by. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @task async def query_repository_owner_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The username to lookup the owner by. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repositoryOwner\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repository\" ]","title":"Repository Owner"},{"location":"repository_owner/#prefect_github.repository_owner","text":"This is a module containing: GitHub query_repository_owner* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py.","title":"repository_owner"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @task async def query_repository_owner ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"repositoryOwner\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ]","title":"query_repository_owner()"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 @task async def query_repository_owner_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"repositoryOwner\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repositories\" ]","title":"query_repository_owner_repositories()"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner_repository","text":"Find Repository. Parameters: Name Type Description Default login str The username to lookup the owner by. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @task async def query_repository_owner_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The username to lookup the owner by. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repositoryOwner\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repository\" ]","title":"query_repository_owner_repository()"},{"location":"user/","text":"prefect_github.user This is a module containing: GitHub query_user* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py. query_user async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 @task async def query_user ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"user\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ] query_user_commit_comments async A list of commit comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 @task async def query_user_commit_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"commitComments\" ] query_user_contributions_collection async The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 @task async def query_user_contributions_collection ( login : str , github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The collection of contributions this user has made to different repositories. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"user\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"contributionsCollection\" ] query_user_followers async A list of users the given user is followed by. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 @task async def query_user_followers ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is followed by. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"followers\" ] query_user_following async A list of users the given user is following. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 @task async def query_user_following ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is following. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"following\" ] query_user_gist async Find gist by repo name. Parameters: Name Type Description Default login str The user's login. required name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 @task async def query_user_gist ( login : str , name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find gist by repo name. Args: login: The user's login. name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"user\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gist\" ] query_user_gist_comments async A list of gist comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 @task async def query_user_gist_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of gist comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gistComments\" ] query_user_gists async A list of the Gists the user has created. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . GistPrivacy Filters Gists according to privacy. None order_by graphql_schema . GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 @task async def query_user_gists ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of the Gists the user has created. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gists\" ] query_user_interaction_ability async The interaction ability settings for this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 @task async def query_user_interaction_ability ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"user\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"interactionAbility\" ] query_user_issue_comments async A list of issue comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 @task async def query_user_issue_comments ( login : str , github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issue comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issueComments\" ] query_user_issues async A list of issues associated with this user. Parameters: Name Type Description Default login str The user's login. required labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 @task async def query_user_issues ( login : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues associated with this user. Args: login: The user's login. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issues\" ] query_user_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 @task async def query_user_item_showcase ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"user\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"itemShowcase\" ] query_user_organization async Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The user's login. required organization_login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 @task async def query_user_organization ( login : str , organization_login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization by its login that the user belongs to. Args: login: The user's login. organization_login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organization ( ** strip_kwargs ( login = organization_login , ) ) op_stack = ( \"user\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organization\" ] query_user_organizations async A list of organizations the user belongs to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 @task async def query_user_organizations ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of organizations the user belongs to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organizations\" ] query_user_packages async A list of packages under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 @task async def query_user_packages ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"user\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"packages\" ] query_user_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 @task async def query_user_pinnable_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The user's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnableItems\" ] query_user_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 @task async def query_user_pinned_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The user's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnedItems\" ] query_user_project async Find project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 @task async def query_user_project ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: login: The user's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"project\" ] query_user_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default login str The user's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 @task async def query_user_project_next ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: login: The user's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectNext\" ] query_user_project_v2 async Find a project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 @task async def query_user_project_v2 ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by number. Args: login: The user's login. number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectV2\" ] query_user_projects async A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 @task async def query_user_projects ( login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The user's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projects\" ] query_user_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 @task async def query_user_projects_next ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"user\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsNext\" ] query_user_projects_v2 async A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 @task async def query_user_projects_v2 ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for under the the owner. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"user\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsV2\" ] query_user_public_keys async A list of public keys associated with this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 @task async def query_user_public_keys ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of public keys associated with this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"publicKeys\" ] query_user_pull_requests async A list of pull requests associated with this user. Parameters: Name Type Description Default login str The user's login. required states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 @task async def query_user_pull_requests ( login : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests associated with this user. Args: login: The user's login. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pullRequests\" ] query_user_recent_projects async Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 @task async def query_user_recent_projects ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Recent projects that this user has modified in the context of the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"recentProjects\" ] query_user_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 @task async def query_user_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"user\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositories\" ] query_user_repositories_contributed_to async A list of repositories that the user recently contributed to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable [ graphql_schema . RepositoryContributionType ] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 @task async def query_user_repositories_contributed_to ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user recently contributed to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoriesContributedTo\" ] query_user_repository async Find Repository. Parameters: Name Type Description Default login str The user's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 @task async def query_user_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The user's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"user\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repository\" ] query_user_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 @task async def query_user_repository_discussion_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"user\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussionComments\" ] query_user_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 @task async def query_user_repository_discussions ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"user\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussions\" ] query_user_saved_replies async Replies this user has saved. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 @task async def query_user_saved_replies ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Replies this user has saved. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"savedReplies\" ] query_user_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 @task async def query_user_sponsoring ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsoring\" ] query_user_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 @task async def query_user_sponsors ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsors\" ] query_user_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The user's login. required actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 @task async def query_user_sponsors_activities ( login : str , actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The user's login. actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsActivities\" ] query_user_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 @task async def query_user_sponsors_listing ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsListing\" ] query_user_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 @task async def query_user_sponsorship_for_viewer_as_sponsor ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsor\" ] query_user_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 @task async def query_user_sponsorship_for_viewer_as_sponsorable ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_user_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 @task async def query_user_sponsorship_newsletters ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipNewsletters\" ] query_user_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 @task async def query_user_sponsorships_as_maintainer ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsMaintainer\" ] query_user_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 @task async def query_user_sponsorships_as_sponsor ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsSponsor\" ] query_user_starred_repositories async Repositories the user has starred. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 @task async def query_user_starred_repositories ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has starred. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"user\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"starredRepositories\" ] query_user_status async The user's description of what they're currently doing. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 @task async def query_user_status ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The user's description of what they're currently doing. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . status ( ** strip_kwargs ()) op_stack = ( \"user\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"status\" ] query_user_top_repositories async Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default login str The user's login. required order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 @task async def query_user_top_repositories ( login : str , order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: login: The user's login. order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"user\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"topRepositories\" ] query_user_watching async A list of repositories the given user is watching. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 @task async def query_user_watching ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories the given user is watching. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"watching\" ]","title":"User"},{"location":"user/#prefect_github.user","text":"This is a module containing: GitHub query_user* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py.","title":"user"},{"location":"user/#prefect_github.user.query_user","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 @task async def query_user ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"user\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ]","title":"query_user()"},{"location":"user/#prefect_github.user.query_user_commit_comments","text":"A list of commit comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 @task async def query_user_commit_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"commitComments\" ]","title":"query_user_commit_comments()"},{"location":"user/#prefect_github.user.query_user_contributions_collection","text":"The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 @task async def query_user_contributions_collection ( login : str , github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The collection of contributions this user has made to different repositories. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"user\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"contributionsCollection\" ]","title":"query_user_contributions_collection()"},{"location":"user/#prefect_github.user.query_user_followers","text":"A list of users the given user is followed by. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 @task async def query_user_followers ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is followed by. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"followers\" ]","title":"query_user_followers()"},{"location":"user/#prefect_github.user.query_user_following","text":"A list of users the given user is following. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 @task async def query_user_following ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is following. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"following\" ]","title":"query_user_following()"},{"location":"user/#prefect_github.user.query_user_gist","text":"Find gist by repo name. Parameters: Name Type Description Default login str The user's login. required name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 @task async def query_user_gist ( login : str , name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find gist by repo name. Args: login: The user's login. name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"user\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gist\" ]","title":"query_user_gist()"},{"location":"user/#prefect_github.user.query_user_gist_comments","text":"A list of gist comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 @task async def query_user_gist_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of gist comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gistComments\" ]","title":"query_user_gist_comments()"},{"location":"user/#prefect_github.user.query_user_gists","text":"A list of the Gists the user has created. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . GistPrivacy Filters Gists according to privacy. None order_by graphql_schema . GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 @task async def query_user_gists ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of the Gists the user has created. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gists\" ]","title":"query_user_gists()"},{"location":"user/#prefect_github.user.query_user_interaction_ability","text":"The interaction ability settings for this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 @task async def query_user_interaction_ability ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"user\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"interactionAbility\" ]","title":"query_user_interaction_ability()"},{"location":"user/#prefect_github.user.query_user_issue_comments","text":"A list of issue comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 @task async def query_user_issue_comments ( login : str , github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issue comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issueComments\" ]","title":"query_user_issue_comments()"},{"location":"user/#prefect_github.user.query_user_issues","text":"A list of issues associated with this user. Parameters: Name Type Description Default login str The user's login. required labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 @task async def query_user_issues ( login : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues associated with this user. Args: login: The user's login. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issues\" ]","title":"query_user_issues()"},{"location":"user/#prefect_github.user.query_user_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 @task async def query_user_item_showcase ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"user\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"itemShowcase\" ]","title":"query_user_item_showcase()"},{"location":"user/#prefect_github.user.query_user_organization","text":"Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The user's login. required organization_login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 @task async def query_user_organization ( login : str , organization_login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization by its login that the user belongs to. Args: login: The user's login. organization_login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organization ( ** strip_kwargs ( login = organization_login , ) ) op_stack = ( \"user\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organization\" ]","title":"query_user_organization()"},{"location":"user/#prefect_github.user.query_user_organizations","text":"A list of organizations the user belongs to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 @task async def query_user_organizations ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of organizations the user belongs to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organizations\" ]","title":"query_user_organizations()"},{"location":"user/#prefect_github.user.query_user_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 @task async def query_user_packages ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"user\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"packages\" ]","title":"query_user_packages()"},{"location":"user/#prefect_github.user.query_user_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 @task async def query_user_pinnable_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The user's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnableItems\" ]","title":"query_user_pinnable_items()"},{"location":"user/#prefect_github.user.query_user_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 @task async def query_user_pinned_items ( login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The user's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnedItems\" ]","title":"query_user_pinned_items()"},{"location":"user/#prefect_github.user.query_user_project","text":"Find project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 @task async def query_user_project ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: login: The user's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"project\" ]","title":"query_user_project()"},{"location":"user/#prefect_github.user.query_user_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default login str The user's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 @task async def query_user_project_next ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: login: The user's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectNext\" ]","title":"query_user_project_next()"},{"location":"user/#prefect_github.user.query_user_project_v2","text":"Find a project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 @task async def query_user_project_v2 ( login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by number. Args: login: The user's login. number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectV2\" ]","title":"query_user_project_v2()"},{"location":"user/#prefect_github.user.query_user_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 @task async def query_user_projects ( login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The user's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projects\" ]","title":"query_user_projects()"},{"location":"user/#prefect_github.user.query_user_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 @task async def query_user_projects_next ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"user\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsNext\" ]","title":"query_user_projects_next()"},{"location":"user/#prefect_github.user.query_user_projects_v2","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 @task async def query_user_projects_v2 ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for under the the owner. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"user\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsV2\" ]","title":"query_user_projects_v2()"},{"location":"user/#prefect_github.user.query_user_public_keys","text":"A list of public keys associated with this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 @task async def query_user_public_keys ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of public keys associated with this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"publicKeys\" ]","title":"query_user_public_keys()"},{"location":"user/#prefect_github.user.query_user_pull_requests","text":"A list of pull requests associated with this user. Parameters: Name Type Description Default login str The user's login. required states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 @task async def query_user_pull_requests ( login : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests associated with this user. Args: login: The user's login. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pullRequests\" ]","title":"query_user_pull_requests()"},{"location":"user/#prefect_github.user.query_user_recent_projects","text":"Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 @task async def query_user_recent_projects ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Recent projects that this user has modified in the context of the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"recentProjects\" ]","title":"query_user_recent_projects()"},{"location":"user/#prefect_github.user.query_user_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 @task async def query_user_repositories ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"user\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositories\" ]","title":"query_user_repositories()"},{"location":"user/#prefect_github.user.query_user_repositories_contributed_to","text":"A list of repositories that the user recently contributed to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable [ graphql_schema . RepositoryContributionType ] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 @task async def query_user_repositories_contributed_to ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user recently contributed to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoriesContributedTo\" ]","title":"query_user_repositories_contributed_to()"},{"location":"user/#prefect_github.user.query_user_repository","text":"Find Repository. Parameters: Name Type Description Default login str The user's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 @task async def query_user_repository ( login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: login: The user's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"user\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repository\" ]","title":"query_user_repository()"},{"location":"user/#prefect_github.user.query_user_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 @task async def query_user_repository_discussion_comments ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"user\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussionComments\" ]","title":"query_user_repository_discussion_comments()"},{"location":"user/#prefect_github.user.query_user_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 @task async def query_user_repository_discussions ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"user\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussions\" ]","title":"query_user_repository_discussions()"},{"location":"user/#prefect_github.user.query_user_saved_replies","text":"Replies this user has saved. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 @task async def query_user_saved_replies ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Replies this user has saved. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"savedReplies\" ]","title":"query_user_saved_replies()"},{"location":"user/#prefect_github.user.query_user_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 @task async def query_user_sponsoring ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsoring\" ]","title":"query_user_sponsoring()"},{"location":"user/#prefect_github.user.query_user_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 @task async def query_user_sponsors ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsors\" ]","title":"query_user_sponsors()"},{"location":"user/#prefect_github.user.query_user_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The user's login. required actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 @task async def query_user_sponsors_activities ( login : str , actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The user's login. actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsActivities\" ]","title":"query_user_sponsors_activities()"},{"location":"user/#prefect_github.user.query_user_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 @task async def query_user_sponsors_listing ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsListing\" ]","title":"query_user_sponsors_listing()"},{"location":"user/#prefect_github.user.query_user_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 @task async def query_user_sponsorship_for_viewer_as_sponsor ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_user_sponsorship_for_viewer_as_sponsor()"},{"location":"user/#prefect_github.user.query_user_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 @task async def query_user_sponsorship_for_viewer_as_sponsorable ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_user_sponsorship_for_viewer_as_sponsorable()"},{"location":"user/#prefect_github.user.query_user_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 @task async def query_user_sponsorship_newsletters ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipNewsletters\" ]","title":"query_user_sponsorship_newsletters()"},{"location":"user/#prefect_github.user.query_user_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 @task async def query_user_sponsorships_as_maintainer ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_user_sponsorships_as_maintainer()"},{"location":"user/#prefect_github.user.query_user_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 @task async def query_user_sponsorships_as_sponsor ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_user_sponsorships_as_sponsor()"},{"location":"user/#prefect_github.user.query_user_starred_repositories","text":"Repositories the user has starred. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 @task async def query_user_starred_repositories ( login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has starred. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"user\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"starredRepositories\" ]","title":"query_user_starred_repositories()"},{"location":"user/#prefect_github.user.query_user_status","text":"The user's description of what they're currently doing. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 @task async def query_user_status ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The user's description of what they're currently doing. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . status ( ** strip_kwargs ()) op_stack = ( \"user\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"status\" ]","title":"query_user_status()"},{"location":"user/#prefect_github.user.query_user_top_repositories","text":"Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default login str The user's login. required order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 @task async def query_user_top_repositories ( login : str , order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: login: The user's login. order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"user\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"topRepositories\" ]","title":"query_user_top_repositories()"},{"location":"user/#prefect_github.user.query_user_watching","text":"A list of repositories the given user is watching. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 @task async def query_user_watching ( login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories the given user is watching. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"watching\" ]","title":"query_user_watching()"},{"location":"utils/","text":"prefect_github.utils Utilities to assist with using generated collections. camel_to_snake_case Converts CamelCase and lowerCamelCase to snake_case. Parameters: Name Type Description Default string str The string in CamelCase or lowerCamelCase to convert. required Returns: Type Description str A snake_case version of the string. Source code in prefect_github/utils.py 13 14 15 16 17 18 19 20 21 22 def camel_to_snake_case ( string : str ) -> str : \"\"\" Converts CamelCase and lowerCamelCase to snake_case. Args: string: The string in CamelCase or lowerCamelCase to convert. Returns: A snake_case version of the string. \"\"\" string = SNAKE_CASE_REGEX1 . sub ( r \"\\1_\\2\" , string ) return SNAKE_CASE_REGEX2 . sub ( r \"\\1_\\2\" , string ) . lower () initialize_return_fields_defaults Reads config_path to parse out the desired default fields to return. Parameters: Name Type Description Default config_path Union [ Path , str ] The path to the config file. required Source code in prefect_github/utils.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize_return_fields_defaults ( config_path : Union [ Path , str ]) -> List : \"\"\" Reads config_path to parse out the desired default fields to return. Args: config_path: The path to the config file. \"\"\" with open ( config_path , \"r\" ) as f : config = json . load ( f ) return_fields_defaults = defaultdict ( lambda : []) for op_type , sub_op_types in config . items (): for sub_op_type in sub_op_types : if isinstance ( sub_op_type , str ): return_fields_defaults [( op_type ,)] . append ( camel_to_snake_case ( sub_op_type ) ) elif isinstance ( sub_op_type , dict ): sub_op_type_key = list ( sub_op_type . keys ())[ 0 ] return_fields_defaults [( op_type , sub_op_type_key )] = [ camel_to_snake_case ( field ) for field in sub_op_type [ sub_op_type_key ] ] return return_fields_defaults strip_kwargs Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_github/utils.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" stripped_dict = {} for k , v in kwargs . items (): if isinstance ( v , dict ): v = strip_kwargs ( ** v ) if v is not None : stripped_dict [ k ] = v return stripped_dict or {}","title":"Utils"},{"location":"utils/#prefect_github.utils","text":"Utilities to assist with using generated collections.","title":"utils"},{"location":"utils/#prefect_github.utils.camel_to_snake_case","text":"Converts CamelCase and lowerCamelCase to snake_case. Parameters: Name Type Description Default string str The string in CamelCase or lowerCamelCase to convert. required Returns: Type Description str A snake_case version of the string. Source code in prefect_github/utils.py 13 14 15 16 17 18 19 20 21 22 def camel_to_snake_case ( string : str ) -> str : \"\"\" Converts CamelCase and lowerCamelCase to snake_case. Args: string: The string in CamelCase or lowerCamelCase to convert. Returns: A snake_case version of the string. \"\"\" string = SNAKE_CASE_REGEX1 . sub ( r \"\\1_\\2\" , string ) return SNAKE_CASE_REGEX2 . sub ( r \"\\1_\\2\" , string ) . lower ()","title":"camel_to_snake_case()"},{"location":"utils/#prefect_github.utils.initialize_return_fields_defaults","text":"Reads config_path to parse out the desired default fields to return. Parameters: Name Type Description Default config_path Union [ Path , str ] The path to the config file. required Source code in prefect_github/utils.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize_return_fields_defaults ( config_path : Union [ Path , str ]) -> List : \"\"\" Reads config_path to parse out the desired default fields to return. Args: config_path: The path to the config file. \"\"\" with open ( config_path , \"r\" ) as f : config = json . load ( f ) return_fields_defaults = defaultdict ( lambda : []) for op_type , sub_op_types in config . items (): for sub_op_type in sub_op_types : if isinstance ( sub_op_type , str ): return_fields_defaults [( op_type ,)] . append ( camel_to_snake_case ( sub_op_type ) ) elif isinstance ( sub_op_type , dict ): sub_op_type_key = list ( sub_op_type . keys ())[ 0 ] return_fields_defaults [( op_type , sub_op_type_key )] = [ camel_to_snake_case ( field ) for field in sub_op_type [ sub_op_type_key ] ] return return_fields_defaults","title":"initialize_return_fields_defaults()"},{"location":"utils/#prefect_github.utils.strip_kwargs","text":"Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_github/utils.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" stripped_dict = {} for k , v in kwargs . items (): if isinstance ( v , dict ): v = strip_kwargs ( ** v ) if v is not None : stripped_dict [ k ] = v return stripped_dict or {}","title":"strip_kwargs()"},{"location":"viewer/","text":"prefect_github.viewer This is a module containing: GitHub query_viewer* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py. query_viewer async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @task async def query_viewer ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) op_stack = ( \"viewer\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ] query_viewer_commit_comments async A list of commit comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 @task async def query_viewer_commit_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"commitComments\" ] query_viewer_contributions_collection async The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 @task async def query_viewer_contributions_collection ( github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The collection of contributions this user has made to different repositories. Args: github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"viewer\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"contributionsCollection\" ] query_viewer_followers async A list of users the given user is followed by. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 @task async def query_viewer_followers ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is followed by. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"followers\" ] query_viewer_following async A list of users the given user is following. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 @task async def query_viewer_following ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is following. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"following\" ] query_viewer_gist async Find gist by repo name. Parameters: Name Type Description Default name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @task async def query_viewer_gist ( name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find gist by repo name. Args: name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"viewer\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gist\" ] query_viewer_gist_comments async A list of gist comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 @task async def query_viewer_gist_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of gist comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gistComments\" ] query_viewer_gists async A list of the Gists the user has created. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . GistPrivacy Filters Gists according to privacy. None order_by graphql_schema . GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task async def query_viewer_gists ( github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of the Gists the user has created. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gists\" ] query_viewer_interaction_ability async The interaction ability settings for this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 @task async def query_viewer_interaction_ability ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this user. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"interactionAbility\" ] query_viewer_issue_comments async A list of issue comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 @task async def query_viewer_issue_comments ( github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issue comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issueComments\" ] query_viewer_issues async A list of issues associated with this user. Parameters: Name Type Description Default labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 @task async def query_viewer_issues ( labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues associated with this user. Args: labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issues\" ] query_viewer_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 @task async def query_viewer_item_showcase ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"itemShowcase\" ] query_viewer_organization async Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 @task async def query_viewer_organization ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization by its login that the user belongs to. Args: login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"viewer\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organization\" ] query_viewer_organizations async A list of organizations the user belongs to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 @task async def query_viewer_organizations ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of organizations the user belongs to. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organizations\" ] query_viewer_packages async A list of packages under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 @task async def query_viewer_packages ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"packages\" ] query_viewer_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 @task async def query_viewer_pinnable_items ( types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnableItems\" ] query_viewer_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 @task async def query_viewer_pinned_items ( types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnedItems\" ] query_viewer_project async Find project by number. Parameters: Name Type Description Default number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def query_viewer_project ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"project\" ] query_viewer_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 @task async def query_viewer_project_next ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectNext\" ] query_viewer_project_v2 async Find a project by number. Parameters: Name Type Description Default number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 @task async def query_viewer_project_v2 ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by number. Args: number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectV2\" ] query_viewer_projects async A list of projects under the owner. Parameters: Name Type Description Default states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 @task async def query_viewer_projects ( states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projects\" ] query_viewer_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 @task async def query_viewer_projects_next ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"viewer\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsNext\" ] query_viewer_projects_v2 async A list of projects under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 @task async def query_viewer_projects_v2 ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for under the the owner. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsV2\" ] query_viewer_public_keys async A list of public keys associated with this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 @task async def query_viewer_public_keys ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of public keys associated with this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"publicKeys\" ] query_viewer_pull_requests async A list of pull requests associated with this user. Parameters: Name Type Description Default states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 @task async def query_viewer_pull_requests ( states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests associated with this user. Args: states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pullRequests\" ] query_viewer_recent_projects async Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 @task async def query_viewer_recent_projects ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Recent projects that this user has modified in the context of the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"recentProjects\" ] query_viewer_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 @task async def query_viewer_repositories ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"viewer\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositories\" ] query_viewer_repositories_contributed_to async A list of repositories that the user recently contributed to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable [ graphql_schema . RepositoryContributionType ] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 @task async def query_viewer_repositories_contributed_to ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user recently contributed to. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoriesContributedTo\" ] query_viewer_repository async Find Repository. Parameters: Name Type Description Default name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 @task async def query_viewer_repository ( name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"viewer\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repository\" ] query_viewer_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 @task async def query_viewer_repository_discussion_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussionComments\" ] query_viewer_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 @task async def query_viewer_repository_discussions ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussions\" ] query_viewer_saved_replies async Replies this user has saved. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 @task async def query_viewer_saved_replies ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Replies this user has saved. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"savedReplies\" ] query_viewer_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 @task async def query_viewer_sponsoring ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsoring\" ] query_viewer_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 @task async def query_viewer_sponsors ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsors\" ] query_viewer_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 @task async def query_viewer_sponsors_activities ( actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsActivities\" ] query_viewer_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 @task async def query_viewer_sponsors_listing ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsListing\" ] query_viewer_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 @task async def query_viewer_sponsorship_for_viewer_as_sponsor ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsor\" ] query_viewer_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 @task async def query_viewer_sponsorship_for_viewer_as_sponsorable ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_viewer_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 @task async def query_viewer_sponsorship_newsletters ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipNewsletters\" ] query_viewer_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 @task async def query_viewer_sponsorships_as_maintainer ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsMaintainer\" ] query_viewer_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 @task async def query_viewer_sponsorships_as_sponsor ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsSponsor\" ] query_viewer_starred_repositories async Repositories the user has starred. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 @task async def query_viewer_starred_repositories ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has starred. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"starredRepositories\" ] query_viewer_status async The user's description of what they're currently doing. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @task async def query_viewer_status ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The user's description of what they're currently doing. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . status ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"status\" ] query_viewer_top_repositories async Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 @task async def query_viewer_top_repositories ( order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"viewer\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"topRepositories\" ] query_viewer_watching async A list of repositories the given user is watching. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 @task async def query_viewer_watching ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories the given user is watching. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"watching\" ]","title":"Viewer"},{"location":"viewer/#prefect_github.viewer","text":"This is a module containing: GitHub query_viewer* tasks It was auto-generated using prefect-collection-generator so manually editing this file is not recommended. If this module is outdated, rerun scripts/generate.py.","title":"viewer"},{"location":"viewer/#prefect_github.viewer.query_viewer","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @task async def query_viewer ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The query root of GitHub's GraphQL interface. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) op_stack = ( \"viewer\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ]","title":"query_viewer()"},{"location":"viewer/#prefect_github.viewer.query_viewer_commit_comments","text":"A list of commit comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 @task async def query_viewer_commit_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of commit comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"commitComments\" ]","title":"query_viewer_commit_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_contributions_collection","text":"The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 @task async def query_viewer_contributions_collection ( github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The collection of contributions this user has made to different repositories. Args: github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"viewer\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"contributionsCollection\" ]","title":"query_viewer_contributions_collection()"},{"location":"viewer/#prefect_github.viewer.query_viewer_followers","text":"A list of users the given user is followed by. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 @task async def query_viewer_followers ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is followed by. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"followers\" ]","title":"query_viewer_followers()"},{"location":"viewer/#prefect_github.viewer.query_viewer_following","text":"A list of users the given user is following. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 @task async def query_viewer_following ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of users the given user is following. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"following\" ]","title":"query_viewer_following()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gist","text":"Find gist by repo name. Parameters: Name Type Description Default name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @task async def query_viewer_gist ( name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find gist by repo name. Args: name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"viewer\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gist\" ]","title":"query_viewer_gist()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gist_comments","text":"A list of gist comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 @task async def query_viewer_gist_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of gist comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gistComments\" ]","title":"query_viewer_gist_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gists","text":"A list of the Gists the user has created. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . GistPrivacy Filters Gists according to privacy. None order_by graphql_schema . GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task async def query_viewer_gists ( github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of the Gists the user has created. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gists\" ]","title":"query_viewer_gists()"},{"location":"viewer/#prefect_github.viewer.query_viewer_interaction_ability","text":"The interaction ability settings for this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 @task async def query_viewer_interaction_ability ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The interaction ability settings for this user. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"interactionAbility\" ]","title":"query_viewer_interaction_ability()"},{"location":"viewer/#prefect_github.viewer.query_viewer_issue_comments","text":"A list of issue comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 @task async def query_viewer_issue_comments ( github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issue comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issueComments\" ]","title":"query_viewer_issue_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_issues","text":"A list of issues associated with this user. Parameters: Name Type Description Default labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 @task async def query_viewer_issues ( labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of issues associated with this user. Args: labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issues\" ]","title":"query_viewer_issues()"},{"location":"viewer/#prefect_github.viewer.query_viewer_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 @task async def query_viewer_item_showcase ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"itemShowcase\" ]","title":"query_viewer_item_showcase()"},{"location":"viewer/#prefect_github.viewer.query_viewer_organization","text":"Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 @task async def query_viewer_organization ( login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find an organization by its login that the user belongs to. Args: login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"viewer\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organization\" ]","title":"query_viewer_organization()"},{"location":"viewer/#prefect_github.viewer.query_viewer_organizations","text":"A list of organizations the user belongs to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 @task async def query_viewer_organizations ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of organizations the user belongs to. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organizations\" ]","title":"query_viewer_organizations()"},{"location":"viewer/#prefect_github.viewer.query_viewer_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 @task async def query_viewer_packages ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of packages under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"packages\" ]","title":"query_viewer_packages()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 @task async def query_viewer_pinnable_items ( types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnableItems\" ]","title":"query_viewer_pinnable_items()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 @task async def query_viewer_pinned_items ( types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnedItems\" ]","title":"query_viewer_pinned_items()"},{"location":"viewer/#prefect_github.viewer.query_viewer_project","text":"Find project by number. Parameters: Name Type Description Default number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def query_viewer_project ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find project by number. Args: number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"project\" ]","title":"query_viewer_project()"},{"location":"viewer/#prefect_github.viewer.query_viewer_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 @task async def query_viewer_project_next ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by project (beta) number. Args: number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectNext\" ]","title":"query_viewer_project_next()"},{"location":"viewer/#prefect_github.viewer.query_viewer_project_v2","text":"Find a project by number. Parameters: Name Type Description Default number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 @task async def query_viewer_project_v2 ( number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find a project by number. Args: number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectV2\" ]","title":"query_viewer_project_v2()"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 @task async def query_viewer_projects ( states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projects\" ]","title":"query_viewer_projects()"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 @task async def query_viewer_projects_next ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects (beta) under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"viewer\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsNext\" ]","title":"query_viewer_projects_next()"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects_v2","text":"A list of projects under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 @task async def query_viewer_projects_v2 ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of projects under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for under the the owner. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsV2\" ]","title":"query_viewer_projects_v2()"},{"location":"viewer/#prefect_github.viewer.query_viewer_public_keys","text":"A list of public keys associated with this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 @task async def query_viewer_public_keys ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of public keys associated with this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"publicKeys\" ]","title":"query_viewer_public_keys()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pull_requests","text":"A list of pull requests associated with this user. Parameters: Name Type Description Default states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 @task async def query_viewer_pull_requests ( states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of pull requests associated with this user. Args: states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pullRequests\" ]","title":"query_viewer_pull_requests()"},{"location":"viewer/#prefect_github.viewer.query_viewer_recent_projects","text":"Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 @task async def query_viewer_recent_projects ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Recent projects that this user has modified in the context of the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"recentProjects\" ]","title":"query_viewer_recent_projects()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 @task async def query_viewer_repositories ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user owns. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"viewer\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositories\" ]","title":"query_viewer_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repositories_contributed_to","text":"A list of repositories that the user recently contributed to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable [ graphql_schema . RepositoryContributionType ] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 @task async def query_viewer_repositories_contributed_to ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories that the user recently contributed to. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoriesContributedTo\" ]","title":"query_viewer_repositories_contributed_to()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository","text":"Find Repository. Parameters: Name Type Description Default name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 @task async def query_viewer_repository ( name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Find Repository. Args: name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"viewer\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repository\" ]","title":"query_viewer_repository()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 @task async def query_viewer_repository_discussion_comments ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussion comments this user has authored. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussionComments\" ]","title":"query_viewer_repository_discussion_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 @task async def query_viewer_repository_discussions ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Discussions this user has started. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussions\" ]","title":"query_viewer_repository_discussions()"},{"location":"viewer/#prefect_github.viewer.query_viewer_saved_replies","text":"Replies this user has saved. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 @task async def query_viewer_saved_replies ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Replies this user has saved. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"savedReplies\" ]","title":"query_viewer_saved_replies()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 @task async def query_viewer_sponsoring ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of users and organizations this entity is sponsoring. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsoring\" ]","title":"query_viewer_sponsoring()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 @task async def query_viewer_sponsors ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsors for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsors\" ]","title":"query_viewer_sponsors()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 @task async def query_viewer_sponsors_activities ( actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Events involving this sponsorable, such as new sponsorships. Args: actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsActivities\" ]","title":"query_viewer_sponsors_activities()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 @task async def query_viewer_sponsors_listing ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The GitHub Sponsors listing for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsListing\" ]","title":"query_viewer_sponsors_listing()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 @task async def query_viewer_sponsorship_for_viewer_as_sponsor ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_viewer_sponsorship_for_viewer_as_sponsor()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 @task async def query_viewer_sponsorship_for_viewer_as_sponsorable ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_viewer_sponsorship_for_viewer_as_sponsorable()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 @task async def query_viewer_sponsorship_newsletters ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipNewsletters\" ]","title":"query_viewer_sponsorship_newsletters()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 @task async def query_viewer_sponsorships_as_maintainer ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the maintainer. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_viewer_sponsorships_as_maintainer()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 @task async def query_viewer_sponsorships_as_sponsor ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" This object's sponsorships as the sponsor. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_viewer_sponsorships_as_sponsor()"},{"location":"viewer/#prefect_github.viewer.query_viewer_starred_repositories","text":"Repositories the user has starred. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 @task async def query_viewer_starred_repositories ( github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has starred. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"starredRepositories\" ]","title":"query_viewer_starred_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_status","text":"The user's description of what they're currently doing. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @task async def query_viewer_status ( github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" The user's description of what they're currently doing. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . status ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"status\" ]","title":"query_viewer_status()"},{"location":"viewer/#prefect_github.viewer.query_viewer_top_repositories","text":"Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 @task async def query_viewer_top_repositories ( order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"viewer\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"topRepositories\" ]","title":"query_viewer_top_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_watching","text":"A list of repositories the given user is watching. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ['OWNER', 'COLLABORATOR'] is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 @task async def query_viewer_watching ( github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = [ \"OWNER\" , \"COLLABORATOR\" , ], is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" A list of repositories the given user is watching. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"watching\" ]","title":"query_viewer_watching()"}]}