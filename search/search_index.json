{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-github Welcome! Prefect integrations interacting with GitHub. The tasks within this collection were created by a code generator using the GitHub GraphQL schema. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-github with pip : pip install prefect-github Then, register to view the block on Prefect Cloud: prefect block register -m prefect_github Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Write and run a flow from prefect import flow from prefect_github import GitHubCredentials from prefect_github.repository import query_repository from prefect_github.mutations import add_star_starrable @flow () def github_add_star_flow (): github_credentials = GitHubCredentials . load ( \"github-token\" ) repository_id = query_repository ( \"PrefectHQ\" , \"Prefect\" , github_credentials = github_credentials , return_fields = \"id\" )[ \"id\" ] starrable = add_star_starrable ( repository_id , github_credentials ) return starrable github_add_star_flow () Resources If you encounter any bugs while using prefect-github , feel free to open an issue in the prefect-github repository. If you have any questions or issues while using prefect-github , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-github for updates too! Development If you'd like to install a version of prefect-github for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-github.git cd prefect-github/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-github","text":"","title":"prefect-github"},{"location":"#welcome","text":"Prefect integrations interacting with GitHub. The tasks within this collection were created by a code generator using the GitHub GraphQL schema.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-github with pip : pip install prefect-github Then, register to view the block on Prefect Cloud: prefect block register -m prefect_github Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_github import GitHubCredentials from prefect_github.repository import query_repository from prefect_github.mutations import add_star_starrable @flow () def github_add_star_flow (): github_credentials = GitHubCredentials . load ( \"github-token\" ) repository_id = query_repository ( \"PrefectHQ\" , \"Prefect\" , github_credentials = github_credentials , return_fields = \"id\" )[ \"id\" ] starrable = add_star_starrable ( repository_id , github_credentials ) return starrable github_add_star_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-github , feel free to open an issue in the prefect-github repository. If you have any questions or issues while using prefect-github , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-github for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-github for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-github.git cd prefect-github/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_github.credentials Credential classes used to perform authenticated interactions with GitHub Classes GitHubCredentials Bases: Block Block used to manage GitHub authentication. Attributes: Name Type Description token SecretStr the token to authenticate into GitHub. Examples: Load stored GitHub credentials: from prefect_github import GitHubCredentials github_credentials_block = GitHubCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_github/credentials.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class GitHubCredentials ( Block ): \"\"\" Block used to manage GitHub authentication. Attributes: token: the token to authenticate into GitHub. Examples: Load stored GitHub credentials: ```python from prefect_github import GitHubCredentials github_credentials_block = GitHubCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"GitHub Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250\" # noqa token : SecretStr = Field ( default = None , description = \"A GitHub personal access token (PAT).\" ) def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials(token=token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" if self . token is not None : base_headers = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } else : base_headers = None endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , base_headers = base_headers ) return endpoint Functions get_endpoint Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: Type Description HTTPEndpoint An authenticated GitHub GraphQL HTTPEndpoint Example Gets an authenticated GitHub GraphQL HTTPEndpoint. from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow (): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials ( token = token ) endpoint = github_credentials . get_endpoint () return endpoint example_get_endpoint_flow () Source code in prefect_github/credentials.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials(token=token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" if self . token is not None : base_headers = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } else : base_headers = None endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , base_headers = base_headers ) return endpoint","title":"Credentials"},{"location":"credentials/#prefect_github.credentials","text":"Credential classes used to perform authenticated interactions with GitHub","title":"credentials"},{"location":"credentials/#prefect_github.credentials-classes","text":"","title":"Classes"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials","text":"Bases: Block Block used to manage GitHub authentication. Attributes: Name Type Description token SecretStr the token to authenticate into GitHub. Examples: Load stored GitHub credentials: from prefect_github import GitHubCredentials github_credentials_block = GitHubCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_github/credentials.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class GitHubCredentials ( Block ): \"\"\" Block used to manage GitHub authentication. Attributes: token: the token to authenticate into GitHub. Examples: Load stored GitHub credentials: ```python from prefect_github import GitHubCredentials github_credentials_block = GitHubCredentials.load(\"BLOCK_NAME\") ``` \"\"\" _block_type_name = \"GitHub Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250\" # noqa token : SecretStr = Field ( default = None , description = \"A GitHub personal access token (PAT).\" ) def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials(token=token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" if self . token is not None : base_headers = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } else : base_headers = None endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , base_headers = base_headers ) return endpoint","title":"GitHubCredentials"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials-functions","text":"","title":"Functions"},{"location":"credentials/#prefect_github.credentials.GitHubCredentials.get_endpoint","text":"Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: Type Description HTTPEndpoint An authenticated GitHub GraphQL HTTPEndpoint Example Gets an authenticated GitHub GraphQL HTTPEndpoint. from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow (): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials ( token = token ) endpoint = github_credentials . get_endpoint () return endpoint example_get_endpoint_flow () Source code in prefect_github/credentials.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get_endpoint ( self ) -> HTTPEndpoint : \"\"\" Gets an authenticated GitHub GraphQL HTTPEndpoint. Returns: An authenticated GitHub GraphQL HTTPEndpoint Example: Gets an authenticated GitHub GraphQL HTTPEndpoint. ```python from prefect import flow from prefect_github import GitHubCredentials @flow def example_get_endpoint_flow(): token = \"token_xxxxxxx\" github_credentials = GitHubCredentials(token=token) endpoint = github_credentials.get_endpoint() return endpoint example_get_endpoint_flow() ``` \"\"\" if self . token is not None : base_headers = { \"Authorization\" : f \"Bearer { self . token . get_secret_value () } \" } else : base_headers = None endpoint = HTTPEndpoint ( \"https://api.github.com/graphql\" , base_headers = base_headers ) return endpoint","title":"get_endpoint()"},{"location":"graphql/","text":"prefect_github.graphql This is a module containing generic GraphQL tasks Classes Functions execute_graphql async Generic function for executing GraphQL operations. Parameters: Name Type Description Default op Union [ Operation , str ] The operation, either as a valid GraphQL string or sgqlc.Operation. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required error_key str The key name to look out for in the response that indicates an error has occurred with the request. 'errors' Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Examples: Queries the first three issues from the Prefect repository using a string query. from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials ( token = token ) params = dict ( owner = \"PrefectHQ\" , name = \"Prefect\" ) result = execute_graphql ( op , github_credentials , ** params ) return result example_execute_graphql_flow () Queries the first three issues from Prefect repository using a sgqlc.Operation. from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = Operation ( graphql_schema . Query ) op_settings = op . repository ( owner = \"PrefectHQ\" , name = \"Prefect\" ) . issues ( first = 3 ) . nodes () op_settings . __fields__ ( \"id\" , \"title\" ) token = \"ghp_...\" github_credentials = GitHubCredentials ( token = token ) result = execute_graphql ( op , github_credentials , ) return result example_execute_graphql_flow () Source code in prefect_github/graphql.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 @task async def execute_graphql ( op : Union [ Operation , str ], github_credentials : GitHubCredentials , error_key : str = \"errors\" , ** vars , ) -> Dict [ str , Any ]: # NOTE: Maintainers can update these examples to match their collection! \"\"\" Generic function for executing GraphQL operations. Args: op: The operation, either as a valid GraphQL string or sgqlc.Operation. github_credentials: Credentials to use for authentication with GitHub. error_key: The key name to look out for in the response that indicates an error has occurred with the request. Returns: A dict of the returned fields. Examples: Queries the first three issues from the Prefect repository using a string query. ```python from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials(token=token) params = dict(owner=\"PrefectHQ\", name=\"Prefect\") result = execute_graphql(op, github_credentials, **params) return result example_execute_graphql_flow() ``` Queries the first three issues from Prefect repository using a sgqlc.Operation. ```python from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = Operation(graphql_schema.Query) op_settings = op.repository( owner=\"PrefectHQ\", name=\"Prefect\" ).issues( first=3 ).nodes() op_settings.__fields__(\"id\", \"title\") token = \"ghp_...\" github_credentials = GitHubCredentials(token=token) result = execute_graphql( op, github_credentials, ) return result example_execute_graphql_flow() ``` \"\"\" result = await _execute_graphql_op ( op , github_credentials , error_key = error_key , ** vars ) return result","title":"Graphql"},{"location":"graphql/#prefect_github.graphql","text":"This is a module containing generic GraphQL tasks","title":"graphql"},{"location":"graphql/#prefect_github.graphql-classes","text":"","title":"Classes"},{"location":"graphql/#prefect_github.graphql-functions","text":"","title":"Functions"},{"location":"graphql/#prefect_github.graphql.execute_graphql","text":"Generic function for executing GraphQL operations. Parameters: Name Type Description Default op Union [ Operation , str ] The operation, either as a valid GraphQL string or sgqlc.Operation. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required error_key str The key name to look out for in the response that indicates an error has occurred with the request. 'errors' Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Examples: Queries the first three issues from the Prefect repository using a string query. from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials ( token = token ) params = dict ( owner = \"PrefectHQ\" , name = \"Prefect\" ) result = execute_graphql ( op , github_credentials , ** params ) return result example_execute_graphql_flow () Queries the first three issues from Prefect repository using a sgqlc.Operation. from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow () def example_execute_graphql_flow (): op = Operation ( graphql_schema . Query ) op_settings = op . repository ( owner = \"PrefectHQ\" , name = \"Prefect\" ) . issues ( first = 3 ) . nodes () op_settings . __fields__ ( \"id\" , \"title\" ) token = \"ghp_...\" github_credentials = GitHubCredentials ( token = token ) result = execute_graphql ( op , github_credentials , ) return result example_execute_graphql_flow () Source code in prefect_github/graphql.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 @task async def execute_graphql ( op : Union [ Operation , str ], github_credentials : GitHubCredentials , error_key : str = \"errors\" , ** vars , ) -> Dict [ str , Any ]: # NOTE: Maintainers can update these examples to match their collection! \"\"\" Generic function for executing GraphQL operations. Args: op: The operation, either as a valid GraphQL string or sgqlc.Operation. github_credentials: Credentials to use for authentication with GitHub. error_key: The key name to look out for in the response that indicates an error has occurred with the request. Returns: A dict of the returned fields. Examples: Queries the first three issues from the Prefect repository using a string query. ```python from prefect import flow from prefect_github import GitHubCredentials from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = ''' query GitHubRepoIssues($owner: String!, $name: String!) { repository(owner: $owner, name: $name) { issues(last: 3) { nodes { number title } } } } ''' token = \"ghp_...\" github_credentials = GitHubCredentials(token=token) params = dict(owner=\"PrefectHQ\", name=\"Prefect\") result = execute_graphql(op, github_credentials, **params) return result example_execute_graphql_flow() ``` Queries the first three issues from Prefect repository using a sgqlc.Operation. ```python from prefect import flow from sgqlc.operation import Operation from prefect_github import GitHubCredentials from prefect_github.schemas import graphql_schema from prefect_github.graphql import execute_graphql @flow() def example_execute_graphql_flow(): op = Operation(graphql_schema.Query) op_settings = op.repository( owner=\"PrefectHQ\", name=\"Prefect\" ).issues( first=3 ).nodes() op_settings.__fields__(\"id\", \"title\") token = \"ghp_...\" github_credentials = GitHubCredentials(token=token) result = execute_graphql( op, github_credentials, ) return result example_execute_graphql_flow() ``` \"\"\" result = await _execute_graphql_op ( op , github_credentials , error_key = error_key , ** vars ) return result","title":"execute_graphql()"},{"location":"mutations/","text":"prefect_github.mutations This is a module containing: GitHub mutation tasks Classes Functions add_comment_subject async Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @task async def add_comment_subject ( # noqa subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"subject\" ] add_pull_request_review async Adds a review to a Pull Request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required commit_oid datetime The commit OID the review pertains to. None body str The contents of the review body comment. None event graphql_schema . PullRequestReviewEvent The event to perform on the pull request review. None comments Iterable [ graphql_schema . DraftPullRequestReviewComment ] The review line comments. None threads Iterable [ graphql_schema . DraftPullRequestReviewThread ] The review line comment threads. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 @task async def add_pull_request_review ( # noqa pull_request_id : str , github_credentials : GitHubCredentials , commit_oid : datetime = None , body : str = None , event : graphql_schema . PullRequestReviewEvent = None , comments : Iterable [ graphql_schema . DraftPullRequestReviewComment ] = None , threads : Iterable [ graphql_schema . DraftPullRequestReviewThread ] = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a review to a Pull Request. Args: pull_request_id: The Node ID of the pull request to modify. github_credentials: Credentials to use for authentication with GitHub. commit_oid: The commit OID the review pertains to. body: The contents of the review body comment. event: The event to perform on the pull request review. comments: The review line comments. threads: The review line comment threads. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_pull_request_review ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , commit_oid = commit_oid , body = body , event = event , comments = comments , threads = threads , ) ) ) . pull_request_review ( ** strip_kwargs ()) op_stack = ( \"addPullRequestReview\" , \"pullRequestReview\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addPullRequestReview\" ][ \"pullRequestReview\" ] add_reaction async Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 @task async def add_reaction ( # noqa subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"reaction\" ] add_reaction_subject async Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 @task async def add_reaction_subject ( # noqa subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"subject\" ] add_star_starrable async Adds a star to a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to star. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 @task async def add_star_starrable ( # noqa starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a star to a Starrable. Args: starrable_id: The Starrable ID to star. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"addStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addStar\" ][ \"starrable\" ] close_issue async Close an issue. Parameters: Name Type Description Default issue_id str ID of the issue to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required state_reason graphql_schema . IssueClosedStateReason The reason the issue is to be closed. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 @task async def close_issue ( # noqa issue_id : str , github_credentials : GitHubCredentials , state_reason : graphql_schema . IssueClosedStateReason = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Close an issue. Args: issue_id: ID of the issue to be closed. github_credentials: Credentials to use for authentication with GitHub. state_reason: The reason the issue is to be closed. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_issue ( ** strip_kwargs ( input = dict ( issue_id = issue_id , state_reason = state_reason , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"closeIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closeIssue\" ][ \"issue\" ] close_pull_request async Close a pull request. Parameters: Name Type Description Default pull_request_id str ID of the pull request to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def close_pull_request ( # noqa pull_request_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Close a pull request. Args: pull_request_id: ID of the pull request to be closed. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_pull_request ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"closePullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closePullRequest\" ][ \"pullRequest\" ] create_issue async Creates a new issue. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required title str The title for the issue. required assignee_ids Iterable [ str ] The Node ID for the user assignee for this issue. required label_ids Iterable [ str ] An array of Node IDs of labels for this issue. required project_ids Iterable [ str ] An array of Node IDs for projects associated with this issue. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The body for the issue description. None milestone_id str The Node ID of the milestone for this issue. None issue_template str The name of an issue template in the repository, assigns labels and assignees from the template to the issue. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @task async def create_issue ( # noqa repository_id : str , title : str , assignee_ids : Iterable [ str ], label_ids : Iterable [ str ], project_ids : Iterable [ str ], github_credentials : GitHubCredentials , body : str = None , milestone_id : str = None , issue_template : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Creates a new issue. Args: repository_id: The Node ID of the repository. title: The title for the issue. assignee_ids: The Node ID for the user assignee for this issue. label_ids: An array of Node IDs of labels for this issue. project_ids: An array of Node IDs for projects associated with this issue. github_credentials: Credentials to use for authentication with GitHub. body: The body for the issue description. milestone_id: The Node ID of the milestone for this issue. issue_template: The name of an issue template in the repository, assigns labels and assignees from the template to the issue. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_issue ( ** strip_kwargs ( input = dict ( repository_id = repository_id , title = title , assignee_ids = assignee_ids , label_ids = label_ids , project_ids = project_ids , body = body , milestone_id = milestone_id , issue_template = issue_template , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"createIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createIssue\" ][ \"issue\" ] create_pull_request async Create a new pull request. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required base_ref_name str The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. required head_ref_name str The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head_ref_name with a user like this: username:branch . required title str The title of the pull request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The contents of the pull request. None maintainer_can_modify bool Indicates whether maintainers can modify the pull request. None draft bool Indicates whether this pull request should be a draft. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 @task async def create_pull_request ( # noqa repository_id : str , base_ref_name : str , head_ref_name : str , title : str , github_credentials : GitHubCredentials , body : str = None , maintainer_can_modify : bool = None , draft : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Create a new pull request. Args: repository_id: The Node ID of the repository. base_ref_name: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. head_ref_name: The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head_ref_name` with a user like this: `username:branch`. title: The title of the pull request. github_credentials: Credentials to use for authentication with GitHub. body: The contents of the pull request. maintainer_can_modify: Indicates whether maintainers can modify the pull request. draft: Indicates whether this pull request should be a draft. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_pull_request ( ** strip_kwargs ( input = dict ( repository_id = repository_id , base_ref_name = base_ref_name , head_ref_name = head_ref_name , title = title , body = body , maintainer_can_modify = maintainer_can_modify , draft = draft , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"createPullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createPullRequest\" ][ \"pullRequest\" ] remove_reaction async Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 @task async def remove_reaction ( # noqa subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"reaction\" ] remove_reaction_subject async Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 @task async def remove_reaction_subject ( # noqa subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"subject\" ] remove_star_starrable async Removes a star from a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to unstar. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 @task async def remove_star_starrable ( # noqa starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Removes a star from a Starrable. Args: starrable_id: The Starrable ID to unstar. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"removeStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeStar\" ][ \"starrable\" ] request_reviews async Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable [ str ] The Node IDs of the user to request. required team_ids Iterable [ str ] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 @task async def request_reviews ( # noqa pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) op_stack = ( \"requestReviews\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ] request_reviews_pull_request async Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable [ str ] The Node IDs of the user to request. required team_ids Iterable [ str ] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 @task async def request_reviews_pull_request ( # noqa pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"requestReviews\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ][ \"pullRequest\" ]","title":"Mutations"},{"location":"mutations/#prefect_github.mutations","text":"This is a module containing: GitHub mutation tasks","title":"mutations"},{"location":"mutations/#prefect_github.mutations-classes","text":"","title":"Classes"},{"location":"mutations/#prefect_github.mutations-functions","text":"","title":"Functions"},{"location":"mutations/#prefect_github.mutations.add_comment_subject","text":"Adds a comment to an Issue or Pull Request. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required body str The contents of the comment. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @task async def add_comment_subject ( # noqa subject_id : str , body : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a comment to an Issue or Pull Request. Args: subject_id: The Node ID of the subject to modify. body: The contents of the comment. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_comment ( ** strip_kwargs ( input = dict ( subject_id = subject_id , body = body , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addComment\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addComment\" ][ \"subject\" ]","title":"add_comment_subject()"},{"location":"mutations/#prefect_github.mutations.add_pull_request_review","text":"Adds a review to a Pull Request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required commit_oid datetime The commit OID the review pertains to. None body str The contents of the review body comment. None event graphql_schema . PullRequestReviewEvent The event to perform on the pull request review. None comments Iterable [ graphql_schema . DraftPullRequestReviewComment ] The review line comments. None threads Iterable [ graphql_schema . DraftPullRequestReviewThread ] The review line comment threads. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 @task async def add_pull_request_review ( # noqa pull_request_id : str , github_credentials : GitHubCredentials , commit_oid : datetime = None , body : str = None , event : graphql_schema . PullRequestReviewEvent = None , comments : Iterable [ graphql_schema . DraftPullRequestReviewComment ] = None , threads : Iterable [ graphql_schema . DraftPullRequestReviewThread ] = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a review to a Pull Request. Args: pull_request_id: The Node ID of the pull request to modify. github_credentials: Credentials to use for authentication with GitHub. commit_oid: The commit OID the review pertains to. body: The contents of the review body comment. event: The event to perform on the pull request review. comments: The review line comments. threads: The review line comment threads. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_pull_request_review ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , commit_oid = commit_oid , body = body , event = event , comments = comments , threads = threads , ) ) ) . pull_request_review ( ** strip_kwargs ()) op_stack = ( \"addPullRequestReview\" , \"pullRequestReview\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addPullRequestReview\" ][ \"pullRequestReview\" ]","title":"add_pull_request_review()"},{"location":"mutations/#prefect_github.mutations.add_reaction","text":"Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 @task async def add_reaction ( # noqa subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"reaction\" ]","title":"add_reaction()"},{"location":"mutations/#prefect_github.mutations.add_reaction_subject","text":"Adds a reaction to a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji to react with. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 @task async def add_reaction_subject ( # noqa subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a reaction to a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji to react with. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"addReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addReaction\" ][ \"subject\" ]","title":"add_reaction_subject()"},{"location":"mutations/#prefect_github.mutations.add_star_starrable","text":"Adds a star to a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to star. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 @task async def add_star_starrable ( # noqa starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Adds a star to a Starrable. Args: starrable_id: The Starrable ID to star. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . add_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"addStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"addStar\" ][ \"starrable\" ]","title":"add_star_starrable()"},{"location":"mutations/#prefect_github.mutations.close_issue","text":"Close an issue. Parameters: Name Type Description Default issue_id str ID of the issue to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required state_reason graphql_schema . IssueClosedStateReason The reason the issue is to be closed. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 @task async def close_issue ( # noqa issue_id : str , github_credentials : GitHubCredentials , state_reason : graphql_schema . IssueClosedStateReason = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Close an issue. Args: issue_id: ID of the issue to be closed. github_credentials: Credentials to use for authentication with GitHub. state_reason: The reason the issue is to be closed. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_issue ( ** strip_kwargs ( input = dict ( issue_id = issue_id , state_reason = state_reason , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"closeIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closeIssue\" ][ \"issue\" ]","title":"close_issue()"},{"location":"mutations/#prefect_github.mutations.close_pull_request","text":"Close a pull request. Parameters: Name Type Description Default pull_request_id str ID of the pull request to be closed. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def close_pull_request ( # noqa pull_request_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Close a pull request. Args: pull_request_id: ID of the pull request to be closed. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . close_pull_request ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"closePullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"closePullRequest\" ][ \"pullRequest\" ]","title":"close_pull_request()"},{"location":"mutations/#prefect_github.mutations.create_issue","text":"Creates a new issue. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required title str The title for the issue. required assignee_ids Iterable [ str ] The Node ID for the user assignee for this issue. required label_ids Iterable [ str ] An array of Node IDs of labels for this issue. required project_ids Iterable [ str ] An array of Node IDs for projects associated with this issue. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The body for the issue description. None milestone_id str The Node ID of the milestone for this issue. None issue_template str The name of an issue template in the repository, assigns labels and assignees from the template to the issue. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 @task async def create_issue ( # noqa repository_id : str , title : str , assignee_ids : Iterable [ str ], label_ids : Iterable [ str ], project_ids : Iterable [ str ], github_credentials : GitHubCredentials , body : str = None , milestone_id : str = None , issue_template : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Creates a new issue. Args: repository_id: The Node ID of the repository. title: The title for the issue. assignee_ids: The Node ID for the user assignee for this issue. label_ids: An array of Node IDs of labels for this issue. project_ids: An array of Node IDs for projects associated with this issue. github_credentials: Credentials to use for authentication with GitHub. body: The body for the issue description. milestone_id: The Node ID of the milestone for this issue. issue_template: The name of an issue template in the repository, assigns labels and assignees from the template to the issue. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_issue ( ** strip_kwargs ( input = dict ( repository_id = repository_id , title = title , assignee_ids = assignee_ids , label_ids = label_ids , project_ids = project_ids , body = body , milestone_id = milestone_id , issue_template = issue_template , ) ) ) . issue ( ** strip_kwargs ()) op_stack = ( \"createIssue\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createIssue\" ][ \"issue\" ]","title":"create_issue()"},{"location":"mutations/#prefect_github.mutations.create_pull_request","text":"Create a new pull request. Parameters: Name Type Description Default repository_id str The Node ID of the repository. required base_ref_name str The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. required head_ref_name str The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head_ref_name with a user like this: username:branch . required title str The title of the pull request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required body str The contents of the pull request. None maintainer_can_modify bool Indicates whether maintainers can modify the pull request. None draft bool Indicates whether this pull request should be a draft. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 @task async def create_pull_request ( # noqa repository_id : str , base_ref_name : str , head_ref_name : str , title : str , github_credentials : GitHubCredentials , body : str = None , maintainer_can_modify : bool = None , draft : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Create a new pull request. Args: repository_id: The Node ID of the repository. base_ref_name: The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. head_ref_name: The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head_ref_name` with a user like this: `username:branch`. title: The title of the pull request. github_credentials: Credentials to use for authentication with GitHub. body: The contents of the pull request. maintainer_can_modify: Indicates whether maintainers can modify the pull request. draft: Indicates whether this pull request should be a draft. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . create_pull_request ( ** strip_kwargs ( input = dict ( repository_id = repository_id , base_ref_name = base_ref_name , head_ref_name = head_ref_name , title = title , body = body , maintainer_can_modify = maintainer_can_modify , draft = draft , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"createPullRequest\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"createPullRequest\" ][ \"pullRequest\" ]","title":"create_pull_request()"},{"location":"mutations/#prefect_github.mutations.remove_reaction","text":"Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 @task async def remove_reaction ( # noqa subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . reaction ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"reaction\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"reaction\" ]","title":"remove_reaction()"},{"location":"mutations/#prefect_github.mutations.remove_reaction_subject","text":"Removes a reaction from a subject. Parameters: Name Type Description Default subject_id str The Node ID of the subject to modify. required content graphql_schema . ReactionContent The name of the emoji reaction to remove. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 @task async def remove_reaction_subject ( # noqa subject_id : str , content : graphql_schema . ReactionContent , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Removes a reaction from a subject. Args: subject_id: The Node ID of the subject to modify. content: The name of the emoji reaction to remove. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_reaction ( ** strip_kwargs ( input = dict ( subject_id = subject_id , content = content , ) ) ) . subject ( ** strip_kwargs ()) op_stack = ( \"removeReaction\" , \"subject\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeReaction\" ][ \"subject\" ]","title":"remove_reaction_subject()"},{"location":"mutations/#prefect_github.mutations.remove_star_starrable","text":"Removes a star from a Starrable. Parameters: Name Type Description Default starrable_id str The Starrable ID to unstar. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 @task async def remove_star_starrable ( # noqa starrable_id : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Removes a star from a Starrable. Args: starrable_id: The Starrable ID to unstar. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . remove_star ( ** strip_kwargs ( input = dict ( starrable_id = starrable_id , ) ) ) . starrable ( ** strip_kwargs ()) op_stack = ( \"removeStar\" , \"starrable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"removeStar\" ][ \"starrable\" ]","title":"remove_star_starrable()"},{"location":"mutations/#prefect_github.mutations.request_reviews","text":"Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable [ str ] The Node IDs of the user to request. required team_ids Iterable [ str ] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 @task async def request_reviews ( # noqa pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) op_stack = ( \"requestReviews\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ]","title":"request_reviews()"},{"location":"mutations/#prefect_github.mutations.request_reviews_pull_request","text":"Set review requests on a pull request. Parameters: Name Type Description Default pull_request_id str The Node ID of the pull request to modify. required user_ids Iterable [ str ] The Node IDs of the user to request. required team_ids Iterable [ str ] The Node IDs of the team to request. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required union bool Add users to the set rather than replace. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/mutations.py 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 @task async def request_reviews_pull_request ( # noqa pull_request_id : str , user_ids : Iterable [ str ], team_ids : Iterable [ str ], github_credentials : GitHubCredentials , union : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Set review requests on a pull request. Args: pull_request_id: The Node ID of the pull request to modify. user_ids: The Node IDs of the user to request. team_ids: The Node IDs of the team to request. github_credentials: Credentials to use for authentication with GitHub. union: Add users to the set rather than replace. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Mutation ) op_selection = op . request_reviews ( ** strip_kwargs ( input = dict ( pull_request_id = pull_request_id , user_ids = user_ids , team_ids = team_ids , union = union , ) ) ) . pull_request ( ** strip_kwargs ()) op_stack = ( \"requestReviews\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"requestReviews\" ][ \"pullRequest\" ]","title":"request_reviews_pull_request()"},{"location":"organization/","text":"prefect_github.organization This is a module containing: GitHub query_organization* tasks Classes Functions query_organization async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @task async def query_organization ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"organization\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ] query_organization_audit_log async Audit log entries of the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str The query string to filter audit entries. None order_by graphql_schema . AuditLogOrder Ordering options for the returned audit log entries. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 @task async def query_organization_audit_log ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . AuditLogOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Audit log entries of the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: The query string to filter audit entries. order_by: Ordering options for the returned audit log entries. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . audit_log ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"organization\" , \"auditLog\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"auditLog\" ] query_organization_domains async A list of domains owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_verified bool Filter by if the domain is verified. None is_approved bool Filter by if the domain is approved. None order_by graphql_schema . VerifiableDomainOrder Ordering options for verifiable domains returned. {'field': 'DOMAIN', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def query_organization_domains ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , is_verified : bool = None , is_approved : bool = None , order_by : graphql_schema . VerifiableDomainOrder = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of domains owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_verified: Filter by if the domain is verified. is_approved: Filter by if the domain is approved. order_by: Ordering options for verifiable domains returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . domains ( ** strip_kwargs ( after = after , before = before , first = first , last = last , is_verified = is_verified , is_approved = is_approved , order_by = order_by , ) ) op_stack = ( \"organization\" , \"domains\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"domains\" ] query_organization_enterprise_owners async A list of owners of the organization's enterprise account. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str The search string to look for. None organization_role graphql_schema . RoleInOrganization The organization role to filter by. None order_by graphql_schema . OrgEnterpriseOwnerOrder Ordering options for enterprise owners returned from the connection. {'field': 'LOGIN', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 @task async def query_organization_enterprise_owners ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , organization_role : graphql_schema . RoleInOrganization = None , order_by : graphql_schema . OrgEnterpriseOwnerOrder = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of owners of the organization's enterprise account. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: The search string to look for. organization_role: The organization role to filter by. order_by: Ordering options for enterprise owners returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . enterprise_owners ( ** strip_kwargs ( query = query , organization_role = organization_role , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"enterpriseOwners\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"enterpriseOwners\" ] query_organization_interaction_ability async The interaction ability settings for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 @task async def query_organization_interaction_ability ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The interaction ability settings for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"interactionAbility\" ] query_organization_ip_allow_list_entries async The IP addresses that are allowed to access resources owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . IpAllowListEntryOrder Ordering options for IP allow list entries returned. {'field': 'ALLOW_LIST_VALUE', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 @task async def query_organization_ip_allow_list_entries ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . IpAllowListEntryOrder = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The IP addresses that are allowed to access resources owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for IP allow list entries returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . ip_allow_list_entries ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"ipAllowListEntries\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"ipAllowListEntries\" ] query_organization_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 @task async def query_organization_item_showcase ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"itemShowcase\" ] query_organization_member_statuses async Get the status messages members of this entity have set that are either public or visible only to the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . UserStatusOrder Ordering options for user statuses returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 @task async def query_organization_member_statuses ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . UserStatusOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Get the status messages members of this entity have set that are either public or visible only to the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for user statuses returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . member_statuses ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"memberStatuses\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"memberStatuses\" ] query_organization_members_with_role async A list of users who are members of this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 @task async def query_organization_members_with_role ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users who are members of this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . members_with_role ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"membersWithRole\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"membersWithRole\" ] query_organization_packages async A list of packages under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 @task async def query_organization_packages ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of packages under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"organization\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"packages\" ] query_organization_pending_members async A list of users who have been invited to join this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 @task async def query_organization_pending_members ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users who have been invited to join this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pending_members ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pendingMembers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pendingMembers\" ] query_organization_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 @task async def query_organization_pinnable_items ( # noqa login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The organization's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnableItems\" ] query_organization_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 @task async def query_organization_pinned_items ( # noqa login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The organization's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnedItems\" ] query_organization_project async Find project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 @task async def query_organization_project ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find project by number. Args: login: The organization's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"project\" ] query_organization_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default login str The organization's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 @task async def query_organization_project_next ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by project (beta) number. Args: login: The organization's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectNext\" ] query_organization_project_v2 async Find a project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 @task async def query_organization_project_v2 ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by number. Args: login: The organization's login. number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectV2\" ] query_organization_projects async A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 @task async def query_organization_projects ( # noqa login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: login: The organization's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projects\" ] query_organization_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 @task async def query_organization_projects_next ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects (beta) under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( query = query , sort_by = sort_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsNext\" ] query_organization_projects_v2 async A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 @task async def query_organization_projects_v2 ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: A project to search for under the the owner. order_by: How to order the returned projects. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_v2 ( ** strip_kwargs ( query = query , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsV2\" ] query_organization_recent_projects async Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 @task async def query_organization_recent_projects ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Recent projects that this user has modified in the context of the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"recentProjects\" ] query_organization_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 @task async def query_organization_repositories ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user owns. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"organization\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositories\" ] query_organization_repository async Find Repository. Parameters: Name Type Description Default login str The organization's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 @task async def query_organization_repository ( # noqa login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find Repository. Args: login: The organization's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"organization\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repository\" ] query_organization_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 @task async def query_organization_repository_discussion_comments ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussion comments this user has authored. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"organization\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussionComments\" ] query_organization_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 @task async def query_organization_repository_discussions ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussions this user has started. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"organization\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussions\" ] query_organization_repository_migrations async A list of all repository migrations for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None state graphql_schema . MigrationState Filter repository migrations by state. None repository_name str Filter repository migrations by repository name. None order_by graphql_schema . RepositoryMigrationOrder Ordering options for repository migrations returned. {'field': 'CREATED_AT', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 @task async def query_organization_repository_migrations ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , state : graphql_schema . MigrationState = None , repository_name : str = None , order_by : graphql_schema . RepositoryMigrationOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of all repository migrations for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. state: Filter repository migrations by state. repository_name: Filter repository migrations by repository name. order_by: Ordering options for repository migrations returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_migrations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , state = state , repository_name = repository_name , order_by = order_by , ) ) op_stack = ( \"organization\" , \"repositoryMigrations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryMigrations\" ] query_organization_saml_identity_provider async The Organization's SAML identity providers. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 @task async def query_organization_saml_identity_provider ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The Organization's SAML identity providers. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . saml_identity_provider ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"samlIdentityProvider\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"samlIdentityProvider\" ] query_organization_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 @task async def query_organization_sponsoring ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of users and organizations this entity is sponsoring. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsoring\" ] query_organization_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 @task async def query_organization_sponsors ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsors for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsors\" ] query_organization_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The organization's login. required actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 @task async def query_organization_sponsors_activities ( # noqa login : str , actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The organization's login. actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsActivities\" ] query_organization_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 @task async def query_organization_sponsors_listing ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsListing\" ] query_organization_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 @task async def query_organization_sponsorship_for_viewer_as_sponsor ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsor\" ] query_organization_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 @task async def query_organization_sponsorship_for_viewer_as_sponsorable ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_organization_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 @task async def query_organization_sponsorship_newsletters ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipNewsletters\" ] query_organization_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 @task async def query_organization_sponsorships_as_maintainer ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the maintainer. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsMaintainer\" ] query_organization_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 @task async def query_organization_sponsorships_as_sponsor ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the sponsor. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsSponsor\" ] query_organization_team async Find an organization's team by its slug. Parameters: Name Type Description Default login str The organization's login. required slug str The name or slug of the team to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @task async def query_organization_team ( # noqa login : str , slug : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find an organization's team by its slug. Args: login: The organization's login. slug: The name or slug of the team to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . team ( ** strip_kwargs ( slug = slug , ) ) op_stack = ( \"organization\" , \"team\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"team\" ] query_organization_teams async A list of teams in this organization. Parameters: Name Type Description Default login str The organization's login. required user_logins Iterable [ str ] User logins to filter by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . TeamPrivacy If non-null, filters teams according to privacy. None role graphql_schema . TeamRole If non-null, filters teams according to whether the viewer is an admin or member on team. None query str If non-null, filters teams with query on team name and team slug. None order_by graphql_schema . TeamOrder Ordering options for teams returned from the connection. None ldap_mapped bool If true, filters teams that are mapped to an LDAP Group (Enterprise only). None root_teams_only bool If true, restrict to only root teams. False after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def query_organization_teams ( # noqa login : str , user_logins : Iterable [ str ], github_credentials : GitHubCredentials , privacy : graphql_schema . TeamPrivacy = None , role : graphql_schema . TeamRole = None , query : str = None , order_by : graphql_schema . TeamOrder = None , ldap_mapped : bool = None , root_teams_only : bool = False , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of teams in this organization. Args: login: The organization's login. user_logins: User logins to filter by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters teams according to privacy. role: If non-null, filters teams according to whether the viewer is an admin or member on team. query: If non-null, filters teams with query on team name and team slug. order_by: Ordering options for teams returned from the connection. ldap_mapped: If true, filters teams that are mapped to an LDAP Group (Enterprise only). root_teams_only: If true, restrict to only root teams. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . teams ( ** strip_kwargs ( user_logins = user_logins , privacy = privacy , role = role , query = query , order_by = order_by , ldap_mapped = ldap_mapped , root_teams_only = root_teams_only , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"teams\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"teams\" ]","title":"Organization"},{"location":"organization/#prefect_github.organization","text":"This is a module containing: GitHub query_organization* tasks","title":"organization"},{"location":"organization/#prefect_github.organization-classes","text":"","title":"Classes"},{"location":"organization/#prefect_github.organization-functions","text":"","title":"Functions"},{"location":"organization/#prefect_github.organization.query_organization","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @task async def query_organization ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"organization\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ]","title":"query_organization()"},{"location":"organization/#prefect_github.organization.query_organization_audit_log","text":"Audit log entries of the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str The query string to filter audit entries. None order_by graphql_schema . AuditLogOrder Ordering options for the returned audit log entries. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 @task async def query_organization_audit_log ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . AuditLogOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Audit log entries of the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: The query string to filter audit entries. order_by: Ordering options for the returned audit log entries. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . audit_log ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"organization\" , \"auditLog\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"auditLog\" ]","title":"query_organization_audit_log()"},{"location":"organization/#prefect_github.organization.query_organization_domains","text":"A list of domains owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_verified bool Filter by if the domain is verified. None is_approved bool Filter by if the domain is approved. None order_by graphql_schema . VerifiableDomainOrder Ordering options for verifiable domains returned. {'field': 'DOMAIN', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def query_organization_domains ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , is_verified : bool = None , is_approved : bool = None , order_by : graphql_schema . VerifiableDomainOrder = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of domains owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_verified: Filter by if the domain is verified. is_approved: Filter by if the domain is approved. order_by: Ordering options for verifiable domains returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . domains ( ** strip_kwargs ( after = after , before = before , first = first , last = last , is_verified = is_verified , is_approved = is_approved , order_by = order_by , ) ) op_stack = ( \"organization\" , \"domains\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"domains\" ]","title":"query_organization_domains()"},{"location":"organization/#prefect_github.organization.query_organization_enterprise_owners","text":"A list of owners of the organization's enterprise account. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str The search string to look for. None organization_role graphql_schema . RoleInOrganization The organization role to filter by. None order_by graphql_schema . OrgEnterpriseOwnerOrder Ordering options for enterprise owners returned from the connection. {'field': 'LOGIN', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 @task async def query_organization_enterprise_owners ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , organization_role : graphql_schema . RoleInOrganization = None , order_by : graphql_schema . OrgEnterpriseOwnerOrder = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of owners of the organization's enterprise account. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: The search string to look for. organization_role: The organization role to filter by. order_by: Ordering options for enterprise owners returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . enterprise_owners ( ** strip_kwargs ( query = query , organization_role = organization_role , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"enterpriseOwners\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"enterpriseOwners\" ]","title":"query_organization_enterprise_owners()"},{"location":"organization/#prefect_github.organization.query_organization_interaction_ability","text":"The interaction ability settings for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 @task async def query_organization_interaction_ability ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The interaction ability settings for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"interactionAbility\" ]","title":"query_organization_interaction_ability()"},{"location":"organization/#prefect_github.organization.query_organization_ip_allow_list_entries","text":"The IP addresses that are allowed to access resources owned by the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . IpAllowListEntryOrder Ordering options for IP allow list entries returned. {'field': 'ALLOW_LIST_VALUE', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 @task async def query_organization_ip_allow_list_entries ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . IpAllowListEntryOrder = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The IP addresses that are allowed to access resources owned by the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for IP allow list entries returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . ip_allow_list_entries ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"ipAllowListEntries\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"ipAllowListEntries\" ]","title":"query_organization_ip_allow_list_entries()"},{"location":"organization/#prefect_github.organization.query_organization_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 @task async def query_organization_item_showcase ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"itemShowcase\" ]","title":"query_organization_item_showcase()"},{"location":"organization/#prefect_github.organization.query_organization_member_statuses","text":"Get the status messages members of this entity have set that are either public or visible only to the organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . UserStatusOrder Ordering options for user statuses returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 @task async def query_organization_member_statuses ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . UserStatusOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Get the status messages members of this entity have set that are either public or visible only to the organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for user statuses returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . member_statuses ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"memberStatuses\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"memberStatuses\" ]","title":"query_organization_member_statuses()"},{"location":"organization/#prefect_github.organization.query_organization_members_with_role","text":"A list of users who are members of this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 @task async def query_organization_members_with_role ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users who are members of this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . members_with_role ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"membersWithRole\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"membersWithRole\" ]","title":"query_organization_members_with_role()"},{"location":"organization/#prefect_github.organization.query_organization_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 @task async def query_organization_packages ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of packages under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"organization\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"packages\" ]","title":"query_organization_packages()"},{"location":"organization/#prefect_github.organization.query_organization_pending_members","text":"A list of users who have been invited to join this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 @task async def query_organization_pending_members ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users who have been invited to join this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pending_members ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pendingMembers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pendingMembers\" ]","title":"query_organization_pending_members()"},{"location":"organization/#prefect_github.organization.query_organization_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 @task async def query_organization_pinnable_items ( # noqa login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The organization's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnableItems\" ]","title":"query_organization_pinnable_items()"},{"location":"organization/#prefect_github.organization.query_organization_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The organization's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 @task async def query_organization_pinned_items ( # noqa login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The organization's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"pinnedItems\" ]","title":"query_organization_pinned_items()"},{"location":"organization/#prefect_github.organization.query_organization_project","text":"Find project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 @task async def query_organization_project ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find project by number. Args: login: The organization's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"project\" ]","title":"query_organization_project()"},{"location":"organization/#prefect_github.organization.query_organization_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default login str The organization's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 @task async def query_organization_project_next ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by project (beta) number. Args: login: The organization's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectNext\" ]","title":"query_organization_project_next()"},{"location":"organization/#prefect_github.organization.query_organization_project_v2","text":"Find a project by number. Parameters: Name Type Description Default login str The organization's login. required number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 @task async def query_organization_project_v2 ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by number. Args: login: The organization's login. number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"organization\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectV2\" ]","title":"query_organization_project_v2()"},{"location":"organization/#prefect_github.organization.query_organization_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 @task async def query_organization_projects ( # noqa login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: login: The organization's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projects\" ]","title":"query_organization_projects()"},{"location":"organization/#prefect_github.organization.query_organization_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 @task async def query_organization_projects_next ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects (beta) under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( query = query , sort_by = sort_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsNext\" ]","title":"query_organization_projects_next()"},{"location":"organization/#prefect_github.organization.query_organization_projects_v2","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 @task async def query_organization_projects_v2 ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. query: A project to search for under the the owner. order_by: How to order the returned projects. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . projects_v2 ( ** strip_kwargs ( query = query , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"projectsV2\" ]","title":"query_organization_projects_v2()"},{"location":"organization/#prefect_github.organization.query_organization_recent_projects","text":"Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 @task async def query_organization_recent_projects ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Recent projects that this user has modified in the context of the owner. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"recentProjects\" ]","title":"query_organization_recent_projects()"},{"location":"organization/#prefect_github.organization.query_organization_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 @task async def query_organization_repositories ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user owns. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"organization\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositories\" ]","title":"query_organization_repositories()"},{"location":"organization/#prefect_github.organization.query_organization_repository","text":"Find Repository. Parameters: Name Type Description Default login str The organization's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 @task async def query_organization_repository ( # noqa login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find Repository. Args: login: The organization's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"organization\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repository\" ]","title":"query_organization_repository()"},{"location":"organization/#prefect_github.organization.query_organization_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 @task async def query_organization_repository_discussion_comments ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussion comments this user has authored. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"organization\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussionComments\" ]","title":"query_organization_repository_discussion_comments()"},{"location":"organization/#prefect_github.organization.query_organization_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 @task async def query_organization_repository_discussions ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussions this user has started. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"organization\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryDiscussions\" ]","title":"query_organization_repository_discussions()"},{"location":"organization/#prefect_github.organization.query_organization_repository_migrations","text":"A list of all repository migrations for this organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None state graphql_schema . MigrationState Filter repository migrations by state. None repository_name str Filter repository migrations by repository name. None order_by graphql_schema . RepositoryMigrationOrder Ordering options for repository migrations returned. {'field': 'CREATED_AT', 'direction': 'ASC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 @task async def query_organization_repository_migrations ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , state : graphql_schema . MigrationState = None , repository_name : str = None , order_by : graphql_schema . RepositoryMigrationOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of all repository migrations for this organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. state: Filter repository migrations by state. repository_name: Filter repository migrations by repository name. order_by: Ordering options for repository migrations returned. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . repository_migrations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , state = state , repository_name = repository_name , order_by = order_by , ) ) op_stack = ( \"organization\" , \"repositoryMigrations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"repositoryMigrations\" ]","title":"query_organization_repository_migrations()"},{"location":"organization/#prefect_github.organization.query_organization_saml_identity_provider","text":"The Organization's SAML identity providers. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 @task async def query_organization_saml_identity_provider ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The Organization's SAML identity providers. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . saml_identity_provider ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"samlIdentityProvider\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"samlIdentityProvider\" ]","title":"query_organization_saml_identity_provider()"},{"location":"organization/#prefect_github.organization.query_organization_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 @task async def query_organization_sponsoring ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of users and organizations this entity is sponsoring. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsoring\" ]","title":"query_organization_sponsoring()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 @task async def query_organization_sponsors ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsors for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsors\" ]","title":"query_organization_sponsors()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The organization's login. required actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 @task async def query_organization_sponsors_activities ( # noqa login : str , actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The organization's login. actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsActivities\" ]","title":"query_organization_sponsors_activities()"},{"location":"organization/#prefect_github.organization.query_organization_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 @task async def query_organization_sponsors_listing ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorsListing\" ]","title":"query_organization_sponsors_listing()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 @task async def query_organization_sponsorship_for_viewer_as_sponsor ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_organization_sponsorship_for_viewer_as_sponsor()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 @task async def query_organization_sponsorship_for_viewer_as_sponsorable ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"organization\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_organization_sponsorship_for_viewer_as_sponsorable()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 @task async def query_organization_sponsorship_newsletters ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipNewsletters\" ]","title":"query_organization_sponsorship_newsletters()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 @task async def query_organization_sponsorships_as_maintainer ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the maintainer. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_organization_sponsorships_as_maintainer()"},{"location":"organization/#prefect_github.organization.query_organization_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The organization's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 @task async def query_organization_sponsorships_as_sponsor ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the sponsor. Args: login: The organization's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login , ) ) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"organization\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_organization_sponsorships_as_sponsor()"},{"location":"organization/#prefect_github.organization.query_organization_team","text":"Find an organization's team by its slug. Parameters: Name Type Description Default login str The organization's login. required slug str The name or slug of the team to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @task async def query_organization_team ( # noqa login : str , slug : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find an organization's team by its slug. Args: login: The organization's login. slug: The name or slug of the team to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . team ( ** strip_kwargs ( slug = slug , ) ) op_stack = ( \"organization\" , \"team\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"team\" ]","title":"query_organization_team()"},{"location":"organization/#prefect_github.organization.query_organization_teams","text":"A list of teams in this organization. Parameters: Name Type Description Default login str The organization's login. required user_logins Iterable [ str ] User logins to filter by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . TeamPrivacy If non-null, filters teams according to privacy. None role graphql_schema . TeamRole If non-null, filters teams according to whether the viewer is an admin or member on team. None query str If non-null, filters teams with query on team name and team slug. None order_by graphql_schema . TeamOrder Ordering options for teams returned from the connection. None ldap_mapped bool If true, filters teams that are mapped to an LDAP Group (Enterprise only). None root_teams_only bool If true, restrict to only root teams. False after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/organization.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 @task async def query_organization_teams ( # noqa login : str , user_logins : Iterable [ str ], github_credentials : GitHubCredentials , privacy : graphql_schema . TeamPrivacy = None , role : graphql_schema . TeamRole = None , query : str = None , order_by : graphql_schema . TeamOrder = None , ldap_mapped : bool = None , root_teams_only : bool = False , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of teams in this organization. Args: login: The organization's login. user_logins: User logins to filter by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters teams according to privacy. role: If non-null, filters teams according to whether the viewer is an admin or member on team. query: If non-null, filters teams with query on team name and team slug. order_by: Ordering options for teams returned from the connection. ldap_mapped: If true, filters teams that are mapped to an LDAP Group (Enterprise only). root_teams_only: If true, restrict to only root teams. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . organization ( ** strip_kwargs ( login = login ,)) . teams ( ** strip_kwargs ( user_logins = user_logins , privacy = privacy , role = role , query = query , order_by = order_by , ldap_mapped = ldap_mapped , root_teams_only = root_teams_only , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"organization\" , \"teams\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"organization\" ][ \"teams\" ]","title":"query_organization_teams()"},{"location":"repository/","text":"prefect_github.repository This is a module containing: GitHub query_repository* tasks and the GitHub storage block. Classes GitHubRepository Bases: ReadableDeploymentStorage Interact with files stored on GitHub repositories. Source code in prefect_github/repository.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 class GitHubRepository ( ReadableDeploymentStorage ): \"\"\" Interact with files stored on GitHub repositories. \"\"\" _block_type_name = \"GitHub Repository\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250\" # noqa: E501 repository_url : str = Field ( default =... , title = \"Repository URL\" , description = ( \"The URL of a GitHub repository to read from, in either HTTPS or SSH \" \"format. If you are using a private repo, it must be in the HTTPS format.\" ), ) reference : Optional [ str ] = Field ( default = None , description = \"An optional reference to pin to; can be a branch name or tag.\" , ) credentials : Optional [ GitHubCredentials ] = Field ( default = None , description = \"An optional GitHubCredentials block for using private GitHub repos.\" , # noqa: E501 ) @validator ( \"credentials\" ) def _ensure_credentials_go_with_https ( cls , v : str , values : dict ): \"\"\"Ensure that credentials are not provided with 'SSH' formatted GitHub URLs.\"\"\" if v is not None : if urlparse ( values [ \"repository_url\" ]) . scheme != \"https\" : raise InvalidRepositoryURLError ( ( \"Crendentials can only be used with GitHub repositories \" \"using the 'HTTPS' format. You must either remove the \" \"credential if you wish to use the 'SSH' format and are not \" \"using a private repository, or you must change the repository \" \"url to the 'HTTPS' format. \" ) ) return v def _create_repo_url ( self ) -> str : \"\"\"Format the URL provided to the `git clone` command. For private repos: https://<oauth-key>@github.com/<username>/<repo>.git All other repos should be the same as `self.repository`. \"\"\" url_components = urlparse ( self . repository_url ) if url_components . scheme == \"https\" and self . credentials is not None : token_value = self . credentials . token . get_secret_value () updated_components = url_components . _replace ( netloc = f \" { token_value } @ { url_components . netloc } \" ) full_url = urlunparse ( updated_components ) else : full_url = self . repository_url return full_url @staticmethod def _get_paths ( dst_dir : Union [ str , None ], src_dir : str , sub_directory : str ) -> Tuple [ str , str ]: \"\"\"Returns the fully formed paths for GitHubRepository contents in the form (content_source, content_destination). \"\"\" if dst_dir is None : content_destination = Path ( \".\" ) . absolute () else : content_destination = Path ( dst_dir ) content_source = Path ( src_dir ) if sub_directory : content_destination = content_destination . joinpath ( sub_directory ) content_source = content_source . joinpath ( sub_directory ) return str ( content_source ), str ( content_destination ) @sync_compatible async def get_directory ( self , from_path : Optional [ str ] = None , local_path : Optional [ str ] = None ) -> None : \"\"\" Clones a GitHub project specified in `from_path` to the provided `local_path`; defaults to cloning the repository reference configured on the Block to the present working directory. Args: from_path: If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. local_path: A local path to clone to; defaults to present working directory. \"\"\" # CONSTRUCT COMMAND cmd = f \"git clone { self . _create_repo_url () } \" if self . reference : cmd += f \" -b { self . reference } \" # Limit git history cmd += \" --depth 1\" # Clone to a temporary directory and move the subdirectory over with TemporaryDirectory ( suffix = \"prefect\" ) as tmp_dir : tmp_path_str = tmp_dir cmd += f \" { tmp_path_str } \" cmd = shlex . split ( cmd ) err_stream = io . StringIO () out_stream = io . StringIO () process = await run_process ( cmd , stream_output = ( out_stream , err_stream )) if process . returncode != 0 : err_stream . seek ( 0 ) raise RuntimeError ( f \"Failed to pull from remote: \\n { err_stream . read () } \" ) content_source , content_destination = self . _get_paths ( dst_dir = local_path , src_dir = tmp_path_str , sub_directory = from_path ) copy_tree ( src = content_source , dst = content_destination ) Functions get_directory async Clones a GitHub project specified in from_path to the provided local_path ; defaults to cloning the repository reference configured on the Block to the present working directory. Parameters: Name Type Description Default from_path Optional [ str ] If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. None local_path Optional [ str ] A local path to clone to; defaults to present working directory. None Source code in prefect_github/repository.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 @sync_compatible async def get_directory ( self , from_path : Optional [ str ] = None , local_path : Optional [ str ] = None ) -> None : \"\"\" Clones a GitHub project specified in `from_path` to the provided `local_path`; defaults to cloning the repository reference configured on the Block to the present working directory. Args: from_path: If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. local_path: A local path to clone to; defaults to present working directory. \"\"\" # CONSTRUCT COMMAND cmd = f \"git clone { self . _create_repo_url () } \" if self . reference : cmd += f \" -b { self . reference } \" # Limit git history cmd += \" --depth 1\" # Clone to a temporary directory and move the subdirectory over with TemporaryDirectory ( suffix = \"prefect\" ) as tmp_dir : tmp_path_str = tmp_dir cmd += f \" { tmp_path_str } \" cmd = shlex . split ( cmd ) err_stream = io . StringIO () out_stream = io . StringIO () process = await run_process ( cmd , stream_output = ( out_stream , err_stream )) if process . returncode != 0 : err_stream . seek ( 0 ) raise RuntimeError ( f \"Failed to pull from remote: \\n { err_stream . read () } \" ) content_source , content_destination = self . _get_paths ( dst_dir = local_path , src_dir = tmp_path_str , sub_directory = from_path ) copy_tree ( src = content_source , dst = content_destination ) Functions query_repository async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 @task async def query_repository ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repository\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ] query_repository_assignable_users async A list of users that can be assigned to issues in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 @task async def query_repository_assignable_users ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users that can be assigned to issues in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . assignable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"assignableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"assignableUsers\" ] query_repository_branch_protection_rules async A list of branch protection rules for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 @task async def query_repository_branch_protection_rules ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of branch protection rules for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . branch_protection_rules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"branchProtectionRules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"branchProtectionRules\" ] query_repository_code_of_conduct async Returns the code of conduct for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 @task async def query_repository_code_of_conduct ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns the code of conduct for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . code_of_conduct ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"codeOfConduct\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"codeOfConduct\" ] query_repository_collaborators async A list of collaborators associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True affiliation graphql_schema . CollaboratorAffiliation Collaborators affiliation level with a repository. None query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 @task async def query_repository_collaborators ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , affiliation : graphql_schema . CollaboratorAffiliation = None , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of collaborators associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. affiliation: Collaborators affiliation level with a repository. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . collaborators ( ** strip_kwargs ( affiliation = affiliation , query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"collaborators\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"collaborators\" ] query_repository_commit_comments async A list of commit comments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 @task async def query_repository_commit_comments ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of commit comments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"commitComments\" ] query_repository_contact_links async Returns a list of contact links associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 @task async def query_repository_contact_links ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a list of contact links associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . contact_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"contactLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"contactLinks\" ] query_repository_default_branch_ref async The Ref associated with the repository's default branch. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 @task async def query_repository_default_branch_ref ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The Ref associated with the repository's default branch. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . default_branch_ref ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"defaultBranchRef\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"defaultBranchRef\" ] query_repository_deploy_keys async A list of deploy keys that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 @task async def query_repository_deploy_keys ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of deploy keys that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deploy_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployKeys\" ] query_repository_deployments async Deployments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environments Iterable [ str ] Environments to list deployments for. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . DeploymentOrder Ordering options for deployments returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 @task async def query_repository_deployments ( # noqa owner : str , name : str , environments : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . DeploymentOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Deployments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. environments: Environments to list deployments for. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for deployments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deployments ( ** strip_kwargs ( environments = environments , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployments\" ] query_repository_discussion async Returns a single discussion from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the discussion to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 @task async def query_repository_discussion ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single discussion from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the discussion to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"discussion\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussion\" ] query_repository_discussion_categories async A list of discussion categories that are available in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None filter_by_assignable bool Filter by categories that are assignable by the viewer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 @task async def query_repository_discussion_categories ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , filter_by_assignable : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of discussion categories that are available in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. filter_by_assignable: Filter by categories that are assignable by the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion_categories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , filter_by_assignable = filter_by_assignable , ) ) op_stack = ( \"repository\" , \"discussionCategories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussionCategories\" ] query_repository_discussion_category async A discussion category by slug. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required slug str The slug of the discussion category to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 @task async def query_repository_discussion_category ( # noqa owner : str , name : str , slug : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A discussion category by slug. Args: owner: The login field of a user or organization. name: The name of the repository. slug: The slug of the discussion category to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion_category ( ** strip_kwargs ( slug = slug , ) ) op_stack = ( \"repository\" , \"discussionCategory\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussionCategory\" ] query_repository_discussions async A list of discussions that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None category_id str Only include discussions that belong to the category with this ID. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 @task async def query_repository_discussions ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , category_id : str = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of discussions that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. category_id: Only include discussions that belong to the category with this ID. order_by: Ordering options for discussions returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , category_id = category_id , order_by = order_by , ) ) op_stack = ( \"repository\" , \"discussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussions\" ] query_repository_environment async Returns a single active environment from the current repository by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environment_name str The name of the environment to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 @task async def query_repository_environment ( # noqa owner : str , name : str , environment_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single active environment from the current repository by name. Args: owner: The login field of a user or organization. name: The name of the repository. environment_name: The name of the environment to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environment ( ** strip_kwargs ( name = environment_name , ) ) op_stack = ( \"repository\" , \"environment\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environment\" ] query_repository_environments async A list of environments that are in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 @task async def query_repository_environments ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of environments that are in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"environments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environments\" ] query_repository_forks async A list of direct forked repositories. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 @task async def query_repository_forks ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of direct forked repositories. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . forks ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"forks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"forks\" ] query_repository_funding_links async The funding links for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 @task async def query_repository_funding_links ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The funding links for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . funding_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"fundingLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"fundingLinks\" ] query_repository_interaction_ability async The interaction ability settings for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 @task async def query_repository_interaction_ability ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The interaction ability settings for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"interactionAbility\" ] query_repository_issue async Returns a single issue from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 @task async def query_repository_issue ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single issue from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issue\" ] query_repository_issue_or_pull_request async Returns a single issue-like object from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 @task async def query_repository_issue_or_pull_request ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single issue-like object from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_or_pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issueOrPullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueOrPullRequest\" ] query_repository_issue_templates async Returns a list of issue templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 @task async def query_repository_issue_templates ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a list of issue templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"issueTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueTemplates\" ] query_repository_issues async A list of issues that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 @task async def query_repository_issues ( # noqa owner : str , name : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issues that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issues\" ] query_repository_label async Returns a single label by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required label_name str Label name. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 @task async def query_repository_label ( # noqa owner : str , name : str , label_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single label by name. Args: owner: The login field of a user or organization. name: The name of the repository. label_name: Label name. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . label ( ** strip_kwargs ( name = label_name , ) ) op_stack = ( \"repository\" , \"label\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"label\" ] query_repository_labels async A list of labels associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . LabelOrder Ordering options for labels returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str If provided, searches labels by name and description. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 @task async def query_repository_labels ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . LabelOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of labels associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for labels returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: If provided, searches labels by name and description. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . labels ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , query = query , ) ) op_stack = ( \"repository\" , \"labels\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"labels\" ] query_repository_languages async A list containing a breakdown of the language composition of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . LanguageOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 @task async def query_repository_languages ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . LanguageOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list containing a breakdown of the language composition of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . languages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"languages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"languages\" ] query_repository_latest_release async Get the latest release for the repository if one exists. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 @task async def query_repository_latest_release ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Get the latest release for the repository if one exists. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . latest_release ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"latestRelease\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"latestRelease\" ] query_repository_license_info async The license associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 @task async def query_repository_license_info ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The license associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . license_info ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"licenseInfo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"licenseInfo\" ] query_repository_mentionable_users async A list of Users that can be mentioned in the context of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 @task async def query_repository_mentionable_users ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of Users that can be mentioned in the context of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . mentionable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"mentionableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"mentionableUsers\" ] query_repository_milestone async Returns a single milestone from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the milestone to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 @task async def query_repository_milestone ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single milestone from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the milestone to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestone ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"milestone\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestone\" ] query_repository_milestones async A list of milestones associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . MilestoneState ] Filter by the state of the milestones. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . MilestoneOrder Ordering options for milestones. None query str Filters milestones with a query on the title. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 @task async def query_repository_milestones ( # noqa owner : str , name : str , states : Iterable [ graphql_schema . MilestoneState ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . MilestoneOrder = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of milestones associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the milestones. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for milestones. query: Filters milestones with a query on the title. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestones ( ** strip_kwargs ( states = states , after = after , before = before , first = first , last = last , order_by = order_by , query = query , ) ) op_stack = ( \"repository\" , \"milestones\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestones\" ] query_repository_object async A Git object in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True oid datetime The Git object ID. None expression str A Git revision expression suitable for rev-parse. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 @task async def query_repository_object ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , oid : datetime = None , expression : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A Git object in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. oid: The Git object ID. expression: A Git revision expression suitable for rev-parse. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . object ( ** strip_kwargs ( oid = oid , expression = expression , ) ) op_stack = ( \"repository\" , \"object\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"object\" ] query_repository_owner async The User owner of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 @task async def query_repository_owner ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The User owner of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . owner ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"owner\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"owner\" ] query_repository_packages async A list of packages under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 @task async def query_repository_packages ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of packages under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"repository\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"packages\" ] query_repository_pinned_discussions async A list of discussions that have been pinned in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 @task async def query_repository_pinned_discussions ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of discussions that have been pinned in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedDiscussions\" ] query_repository_pinned_issues async A list of pinned issues for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 @task async def query_repository_pinned_issues ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of pinned issues for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_issues ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedIssues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedIssues\" ] query_repository_primary_language async The primary language of the repository's code. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 @task async def query_repository_primary_language ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The primary language of the repository's code. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . primary_language ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"primaryLanguage\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"primaryLanguage\" ] query_repository_project async Find project by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 @task async def query_repository_project ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find project by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"project\" ] query_repository_project_next async Finds and returns the Project (beta) according to the provided Project (beta) number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The ProjectNext number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 @task async def query_repository_project_next ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Finds and returns the Project (beta) according to the provided Project (beta) number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The ProjectNext number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectNext\" ] query_repository_project_v2 async Finds and returns the Project according to the provided Project number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The Project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 @task async def query_repository_project_v2 ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Finds and returns the Project according to the provided Project number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The Project number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectV2\" ] query_repository_projects async A list of projects under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 @task async def query_repository_projects ( # noqa owner : str , name : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projects\" ] query_repository_projects_next async List of projects (beta) linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for linked to the repo. None sort_by graphql_schema . ProjectNextOrderField How to order the returned project (beta) objects. 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 @task async def query_repository_projects_next ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of projects (beta) linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for linked to the repo. sort_by: How to order the returned project (beta) objects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"repository\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsNext\" ] query_repository_projects_v2 async List of projects linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for linked to the repo. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 @task async def query_repository_projects_v2 ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of projects linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for linked to the repo. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"repository\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsV2\" ] query_repository_pull_request async Returns a single pull request from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the pull request to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 @task async def query_repository_pull_request ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single pull request from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the pull request to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequest\" ] query_repository_pull_request_templates async Returns a list of pull request templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 @task async def query_repository_pull_request_templates ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a list of pull request templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"pullRequestTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequestTemplates\" ] query_repository_pull_requests async A list of pull requests that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 @task async def query_repository_pull_requests ( # noqa owner : str , name : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of pull requests that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequests\" ] query_repository_recent_projects async Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 @task async def query_repository_recent_projects ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Recent projects that this user has modified in the context of the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"recentProjects\" ] query_repository_ref async Fetch a given ref from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required qualified_name str The ref to retrieve. Fully qualified matches are checked in order ( refs/heads/master ) before falling back onto checks for short name matches ( master ). required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 @task async def query_repository_ref ( # noqa owner : str , name : str , qualified_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Fetch a given ref from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. qualified_name: The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`). github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . ref ( ** strip_kwargs ( qualified_name = qualified_name , ) ) op_stack = ( \"repository\" , \"ref\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"ref\" ] query_repository_refs async Fetch a list of refs from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required ref_prefix str A ref name prefix like refs/heads/ , refs/tags/ , etc. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters refs with query on name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None direction graphql_schema . OrderDirection None order_by graphql_schema . RefOrder Ordering options for refs returned from the connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 @task async def query_repository_refs ( # noqa owner : str , name : str , ref_prefix : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , direction : graphql_schema . OrderDirection = None , order_by : graphql_schema . RefOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Fetch a list of refs from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. ref_prefix: A ref name prefix like `refs/heads/`, `refs/tags/`, etc. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters refs with query on name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. direction: DEPRECATED: use orderBy. The ordering direction. order_by: Ordering options for refs returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . refs ( ** strip_kwargs ( ref_prefix = ref_prefix , query = query , after = after , before = before , first = first , last = last , direction = direction , order_by = order_by , ) ) op_stack = ( \"repository\" , \"refs\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"refs\" ] query_repository_release async Lookup a single release given various criteria. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required tag_name str The name of the Tag the Release was created from. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 @task async def query_repository_release ( # noqa owner : str , name : str , tag_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Lookup a single release given various criteria. Args: owner: The login field of a user or organization. name: The name of the repository. tag_name: The name of the Tag the Release was created from. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . release ( ** strip_kwargs ( tag_name = tag_name , ) ) op_stack = ( \"repository\" , \"release\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"release\" ] query_repository_releases async List of releases which are dependent on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . ReleaseOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 @task async def query_repository_releases ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . ReleaseOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of releases which are dependent on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . releases ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"releases\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"releases\" ] query_repository_repository_topics async A list of applied repository-topic associations for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 @task async def query_repository_repository_topics ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of applied repository-topic associations for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . repository_topics ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"repositoryTopics\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"repositoryTopics\" ] query_repository_stargazers async A list of users who have starred this starrable. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 @task async def query_repository_stargazers ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users who have starred this starrable. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . stargazers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"stargazers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"stargazers\" ] query_repository_submodules async Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 @task async def query_repository_submodules ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . submodules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"submodules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"submodules\" ] query_repository_vulnerability_alerts async A list of vulnerability alerts that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ] Filter by the state of the alert. required dependency_scopes Iterable [ graphql_schema . RepositoryVulnerabilityAlertDependencyScope ] Filter by the scope of the alert's dependency. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 @task async def query_repository_vulnerability_alerts ( # noqa owner : str , name : str , states : Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ], dependency_scopes : Iterable [ graphql_schema . RepositoryVulnerabilityAlertDependencyScope ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of vulnerability alerts that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the alert. dependency_scopes: Filter by the scope of the alert's dependency. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . vulnerability_alerts ( ** strip_kwargs ( states = states , dependency_scopes = dependency_scopes , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"vulnerabilityAlerts\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"vulnerabilityAlerts\" ] query_repository_watchers async A list of users watching the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 @task async def query_repository_watchers ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users watching the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . watchers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"watchers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"watchers\" ]","title":"Repository"},{"location":"repository/#prefect_github.repository","text":"This is a module containing: GitHub query_repository* tasks and the GitHub storage block.","title":"repository"},{"location":"repository/#prefect_github.repository-classes","text":"","title":"Classes"},{"location":"repository/#prefect_github.repository.GitHubRepository","text":"Bases: ReadableDeploymentStorage Interact with files stored on GitHub repositories. Source code in prefect_github/repository.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 class GitHubRepository ( ReadableDeploymentStorage ): \"\"\" Interact with files stored on GitHub repositories. \"\"\" _block_type_name = \"GitHub Repository\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/187oCWsD18m5yooahq1vU0/ace41e99ab6dc40c53e5584365a33821/github.png?h=250\" # noqa: E501 repository_url : str = Field ( default =... , title = \"Repository URL\" , description = ( \"The URL of a GitHub repository to read from, in either HTTPS or SSH \" \"format. If you are using a private repo, it must be in the HTTPS format.\" ), ) reference : Optional [ str ] = Field ( default = None , description = \"An optional reference to pin to; can be a branch name or tag.\" , ) credentials : Optional [ GitHubCredentials ] = Field ( default = None , description = \"An optional GitHubCredentials block for using private GitHub repos.\" , # noqa: E501 ) @validator ( \"credentials\" ) def _ensure_credentials_go_with_https ( cls , v : str , values : dict ): \"\"\"Ensure that credentials are not provided with 'SSH' formatted GitHub URLs.\"\"\" if v is not None : if urlparse ( values [ \"repository_url\" ]) . scheme != \"https\" : raise InvalidRepositoryURLError ( ( \"Crendentials can only be used with GitHub repositories \" \"using the 'HTTPS' format. You must either remove the \" \"credential if you wish to use the 'SSH' format and are not \" \"using a private repository, or you must change the repository \" \"url to the 'HTTPS' format. \" ) ) return v def _create_repo_url ( self ) -> str : \"\"\"Format the URL provided to the `git clone` command. For private repos: https://<oauth-key>@github.com/<username>/<repo>.git All other repos should be the same as `self.repository`. \"\"\" url_components = urlparse ( self . repository_url ) if url_components . scheme == \"https\" and self . credentials is not None : token_value = self . credentials . token . get_secret_value () updated_components = url_components . _replace ( netloc = f \" { token_value } @ { url_components . netloc } \" ) full_url = urlunparse ( updated_components ) else : full_url = self . repository_url return full_url @staticmethod def _get_paths ( dst_dir : Union [ str , None ], src_dir : str , sub_directory : str ) -> Tuple [ str , str ]: \"\"\"Returns the fully formed paths for GitHubRepository contents in the form (content_source, content_destination). \"\"\" if dst_dir is None : content_destination = Path ( \".\" ) . absolute () else : content_destination = Path ( dst_dir ) content_source = Path ( src_dir ) if sub_directory : content_destination = content_destination . joinpath ( sub_directory ) content_source = content_source . joinpath ( sub_directory ) return str ( content_source ), str ( content_destination ) @sync_compatible async def get_directory ( self , from_path : Optional [ str ] = None , local_path : Optional [ str ] = None ) -> None : \"\"\" Clones a GitHub project specified in `from_path` to the provided `local_path`; defaults to cloning the repository reference configured on the Block to the present working directory. Args: from_path: If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. local_path: A local path to clone to; defaults to present working directory. \"\"\" # CONSTRUCT COMMAND cmd = f \"git clone { self . _create_repo_url () } \" if self . reference : cmd += f \" -b { self . reference } \" # Limit git history cmd += \" --depth 1\" # Clone to a temporary directory and move the subdirectory over with TemporaryDirectory ( suffix = \"prefect\" ) as tmp_dir : tmp_path_str = tmp_dir cmd += f \" { tmp_path_str } \" cmd = shlex . split ( cmd ) err_stream = io . StringIO () out_stream = io . StringIO () process = await run_process ( cmd , stream_output = ( out_stream , err_stream )) if process . returncode != 0 : err_stream . seek ( 0 ) raise RuntimeError ( f \"Failed to pull from remote: \\n { err_stream . read () } \" ) content_source , content_destination = self . _get_paths ( dst_dir = local_path , src_dir = tmp_path_str , sub_directory = from_path ) copy_tree ( src = content_source , dst = content_destination )","title":"GitHubRepository"},{"location":"repository/#prefect_github.repository.GitHubRepository-functions","text":"","title":"Functions"},{"location":"repository/#prefect_github.repository.GitHubRepository.get_directory","text":"Clones a GitHub project specified in from_path to the provided local_path ; defaults to cloning the repository reference configured on the Block to the present working directory. Parameters: Name Type Description Default from_path Optional [ str ] If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. None local_path Optional [ str ] A local path to clone to; defaults to present working directory. None Source code in prefect_github/repository.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 @sync_compatible async def get_directory ( self , from_path : Optional [ str ] = None , local_path : Optional [ str ] = None ) -> None : \"\"\" Clones a GitHub project specified in `from_path` to the provided `local_path`; defaults to cloning the repository reference configured on the Block to the present working directory. Args: from_path: If provided, interpreted as a subdirectory of the underlying repository that will be copied to the provided local path. local_path: A local path to clone to; defaults to present working directory. \"\"\" # CONSTRUCT COMMAND cmd = f \"git clone { self . _create_repo_url () } \" if self . reference : cmd += f \" -b { self . reference } \" # Limit git history cmd += \" --depth 1\" # Clone to a temporary directory and move the subdirectory over with TemporaryDirectory ( suffix = \"prefect\" ) as tmp_dir : tmp_path_str = tmp_dir cmd += f \" { tmp_path_str } \" cmd = shlex . split ( cmd ) err_stream = io . StringIO () out_stream = io . StringIO () process = await run_process ( cmd , stream_output = ( out_stream , err_stream )) if process . returncode != 0 : err_stream . seek ( 0 ) raise RuntimeError ( f \"Failed to pull from remote: \\n { err_stream . read () } \" ) content_source , content_destination = self . _get_paths ( dst_dir = local_path , src_dir = tmp_path_str , sub_directory = from_path ) copy_tree ( src = content_source , dst = content_destination )","title":"get_directory()"},{"location":"repository/#prefect_github.repository-functions","text":"","title":"Functions"},{"location":"repository/#prefect_github.repository.query_repository","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 @task async def query_repository ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repository\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ]","title":"query_repository()"},{"location":"repository/#prefect_github.repository.query_repository_assignable_users","text":"A list of users that can be assigned to issues in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 @task async def query_repository_assignable_users ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users that can be assigned to issues in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . assignable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"assignableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"assignableUsers\" ]","title":"query_repository_assignable_users()"},{"location":"repository/#prefect_github.repository.query_repository_branch_protection_rules","text":"A list of branch protection rules for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 @task async def query_repository_branch_protection_rules ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of branch protection rules for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . branch_protection_rules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"branchProtectionRules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"branchProtectionRules\" ]","title":"query_repository_branch_protection_rules()"},{"location":"repository/#prefect_github.repository.query_repository_code_of_conduct","text":"Returns the code of conduct for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 @task async def query_repository_code_of_conduct ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns the code of conduct for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . code_of_conduct ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"codeOfConduct\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"codeOfConduct\" ]","title":"query_repository_code_of_conduct()"},{"location":"repository/#prefect_github.repository.query_repository_collaborators","text":"A list of collaborators associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True affiliation graphql_schema . CollaboratorAffiliation Collaborators affiliation level with a repository. None query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 @task async def query_repository_collaborators ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , affiliation : graphql_schema . CollaboratorAffiliation = None , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of collaborators associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. affiliation: Collaborators affiliation level with a repository. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . collaborators ( ** strip_kwargs ( affiliation = affiliation , query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"collaborators\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"collaborators\" ]","title":"query_repository_collaborators()"},{"location":"repository/#prefect_github.repository.query_repository_commit_comments","text":"A list of commit comments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 @task async def query_repository_commit_comments ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of commit comments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"commitComments\" ]","title":"query_repository_commit_comments()"},{"location":"repository/#prefect_github.repository.query_repository_contact_links","text":"Returns a list of contact links associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 @task async def query_repository_contact_links ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a list of contact links associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . contact_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"contactLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"contactLinks\" ]","title":"query_repository_contact_links()"},{"location":"repository/#prefect_github.repository.query_repository_default_branch_ref","text":"The Ref associated with the repository's default branch. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 @task async def query_repository_default_branch_ref ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The Ref associated with the repository's default branch. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . default_branch_ref ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"defaultBranchRef\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"defaultBranchRef\" ]","title":"query_repository_default_branch_ref()"},{"location":"repository/#prefect_github.repository.query_repository_deploy_keys","text":"A list of deploy keys that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 @task async def query_repository_deploy_keys ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of deploy keys that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deploy_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployKeys\" ]","title":"query_repository_deploy_keys()"},{"location":"repository/#prefect_github.repository.query_repository_deployments","text":"Deployments associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environments Iterable [ str ] Environments to list deployments for. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . DeploymentOrder Ordering options for deployments returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 @task async def query_repository_deployments ( # noqa owner : str , name : str , environments : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . DeploymentOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" , }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Deployments associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. environments: Environments to list deployments for. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for deployments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . deployments ( ** strip_kwargs ( environments = environments , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"deployments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"deployments\" ]","title":"query_repository_deployments()"},{"location":"repository/#prefect_github.repository.query_repository_discussion","text":"Returns a single discussion from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the discussion to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 @task async def query_repository_discussion ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single discussion from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the discussion to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"discussion\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussion\" ]","title":"query_repository_discussion()"},{"location":"repository/#prefect_github.repository.query_repository_discussion_categories","text":"A list of discussion categories that are available in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None filter_by_assignable bool Filter by categories that are assignable by the viewer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 @task async def query_repository_discussion_categories ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , filter_by_assignable : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of discussion categories that are available in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. filter_by_assignable: Filter by categories that are assignable by the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion_categories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , filter_by_assignable = filter_by_assignable , ) ) op_stack = ( \"repository\" , \"discussionCategories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussionCategories\" ]","title":"query_repository_discussion_categories()"},{"location":"repository/#prefect_github.repository.query_repository_discussion_category","text":"A discussion category by slug. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required slug str The slug of the discussion category to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 @task async def query_repository_discussion_category ( # noqa owner : str , name : str , slug : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A discussion category by slug. Args: owner: The login field of a user or organization. name: The name of the repository. slug: The slug of the discussion category to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussion_category ( ** strip_kwargs ( slug = slug , ) ) op_stack = ( \"repository\" , \"discussionCategory\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussionCategory\" ]","title":"query_repository_discussion_category()"},{"location":"repository/#prefect_github.repository.query_repository_discussions","text":"A list of discussions that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None category_id str Only include discussions that belong to the category with this ID. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 @task async def query_repository_discussions ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , category_id : str = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of discussions that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. category_id: Only include discussions that belong to the category with this ID. order_by: Ordering options for discussions returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , category_id = category_id , order_by = order_by , ) ) op_stack = ( \"repository\" , \"discussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"discussions\" ]","title":"query_repository_discussions()"},{"location":"repository/#prefect_github.repository.query_repository_environment","text":"Returns a single active environment from the current repository by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required environment_name str The name of the environment to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 @task async def query_repository_environment ( # noqa owner : str , name : str , environment_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single active environment from the current repository by name. Args: owner: The login field of a user or organization. name: The name of the repository. environment_name: The name of the environment to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environment ( ** strip_kwargs ( name = environment_name , ) ) op_stack = ( \"repository\" , \"environment\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environment\" ]","title":"query_repository_environment()"},{"location":"repository/#prefect_github.repository.query_repository_environments","text":"A list of environments that are in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 @task async def query_repository_environments ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of environments that are in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . environments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"environments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"environments\" ]","title":"query_repository_environments()"},{"location":"repository/#prefect_github.repository.query_repository_forks","text":"A list of direct forked repositories. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 @task async def query_repository_forks ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of direct forked repositories. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . forks ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"forks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"forks\" ]","title":"query_repository_forks()"},{"location":"repository/#prefect_github.repository.query_repository_funding_links","text":"The funding links for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 @task async def query_repository_funding_links ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The funding links for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . funding_links ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"fundingLinks\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"fundingLinks\" ]","title":"query_repository_funding_links()"},{"location":"repository/#prefect_github.repository.query_repository_interaction_ability","text":"The interaction ability settings for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 @task async def query_repository_interaction_ability ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The interaction ability settings for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"interactionAbility\" ]","title":"query_repository_interaction_ability()"},{"location":"repository/#prefect_github.repository.query_repository_issue","text":"Returns a single issue from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 @task async def query_repository_issue ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single issue from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issue\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issue\" ]","title":"query_repository_issue()"},{"location":"repository/#prefect_github.repository.query_repository_issue_or_pull_request","text":"Returns a single issue-like object from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the issue to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 @task async def query_repository_issue_or_pull_request ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single issue-like object from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the issue to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_or_pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"issueOrPullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueOrPullRequest\" ]","title":"query_repository_issue_or_pull_request()"},{"location":"repository/#prefect_github.repository.query_repository_issue_templates","text":"Returns a list of issue templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 @task async def query_repository_issue_templates ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a list of issue templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issue_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"issueTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issueTemplates\" ]","title":"query_repository_issue_templates()"},{"location":"repository/#prefect_github.repository.query_repository_issues","text":"A list of issues that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 @task async def query_repository_issues ( # noqa owner : str , name : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issues that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"issues\" ]","title":"query_repository_issues()"},{"location":"repository/#prefect_github.repository.query_repository_label","text":"Returns a single label by name. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required label_name str Label name. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 @task async def query_repository_label ( # noqa owner : str , name : str , label_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single label by name. Args: owner: The login field of a user or organization. name: The name of the repository. label_name: Label name. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . label ( ** strip_kwargs ( name = label_name , ) ) op_stack = ( \"repository\" , \"label\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"label\" ]","title":"query_repository_label()"},{"location":"repository/#prefect_github.repository.query_repository_labels","text":"A list of labels associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . LabelOrder Ordering options for labels returned from the connection. {'field': 'CREATED_AT', 'direction': 'ASC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str If provided, searches labels by name and description. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 @task async def query_repository_labels ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . LabelOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of labels associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for labels returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: If provided, searches labels by name and description. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . labels ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , query = query , ) ) op_stack = ( \"repository\" , \"labels\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"labels\" ]","title":"query_repository_labels()"},{"location":"repository/#prefect_github.repository.query_repository_languages","text":"A list containing a breakdown of the language composition of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . LanguageOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 @task async def query_repository_languages ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . LanguageOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list containing a breakdown of the language composition of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . languages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"languages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"languages\" ]","title":"query_repository_languages()"},{"location":"repository/#prefect_github.repository.query_repository_latest_release","text":"Get the latest release for the repository if one exists. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 @task async def query_repository_latest_release ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Get the latest release for the repository if one exists. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . latest_release ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"latestRelease\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"latestRelease\" ]","title":"query_repository_latest_release()"},{"location":"repository/#prefect_github.repository.query_repository_license_info","text":"The license associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 @task async def query_repository_license_info ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The license associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . license_info ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"licenseInfo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"licenseInfo\" ]","title":"query_repository_license_info()"},{"location":"repository/#prefect_github.repository.query_repository_mentionable_users","text":"A list of Users that can be mentioned in the context of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters users with query on user name and login. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 @task async def query_repository_mentionable_users ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of Users that can be mentioned in the context of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters users with query on user name and login. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . mentionable_users ( ** strip_kwargs ( query = query , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"mentionableUsers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"mentionableUsers\" ]","title":"query_repository_mentionable_users()"},{"location":"repository/#prefect_github.repository.query_repository_milestone","text":"Returns a single milestone from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the milestone to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 @task async def query_repository_milestone ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single milestone from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the milestone to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestone ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"milestone\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestone\" ]","title":"query_repository_milestone()"},{"location":"repository/#prefect_github.repository.query_repository_milestones","text":"A list of milestones associated with the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . MilestoneState ] Filter by the state of the milestones. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . MilestoneOrder Ordering options for milestones. None query str Filters milestones with a query on the title. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 @task async def query_repository_milestones ( # noqa owner : str , name : str , states : Iterable [ graphql_schema . MilestoneState ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . MilestoneOrder = None , query : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of milestones associated with the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the milestones. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for milestones. query: Filters milestones with a query on the title. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . milestones ( ** strip_kwargs ( states = states , after = after , before = before , first = first , last = last , order_by = order_by , query = query , ) ) op_stack = ( \"repository\" , \"milestones\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"milestones\" ]","title":"query_repository_milestones()"},{"location":"repository/#prefect_github.repository.query_repository_object","text":"A Git object in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True oid datetime The Git object ID. None expression str A Git revision expression suitable for rev-parse. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 @task async def query_repository_object ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , oid : datetime = None , expression : str = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A Git object in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. oid: The Git object ID. expression: A Git revision expression suitable for rev-parse. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . object ( ** strip_kwargs ( oid = oid , expression = expression , ) ) op_stack = ( \"repository\" , \"object\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"object\" ]","title":"query_repository_object()"},{"location":"repository/#prefect_github.repository.query_repository_owner","text":"The User owner of the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 @task async def query_repository_owner ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The User owner of the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . owner ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"owner\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"owner\" ]","title":"query_repository_owner()"},{"location":"repository/#prefect_github.repository.query_repository_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 @task async def query_repository_packages ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of packages under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"repository\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"packages\" ]","title":"query_repository_packages()"},{"location":"repository/#prefect_github.repository.query_repository_pinned_discussions","text":"A list of discussions that have been pinned in this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 @task async def query_repository_pinned_discussions ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of discussions that have been pinned in this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedDiscussions\" ]","title":"query_repository_pinned_discussions()"},{"location":"repository/#prefect_github.repository.query_repository_pinned_issues","text":"A list of pinned issues for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 @task async def query_repository_pinned_issues ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of pinned issues for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pinned_issues ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pinnedIssues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pinnedIssues\" ]","title":"query_repository_pinned_issues()"},{"location":"repository/#prefect_github.repository.query_repository_primary_language","text":"The primary language of the repository's code. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 @task async def query_repository_primary_language ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The primary language of the repository's code. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . primary_language ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"primaryLanguage\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"primaryLanguage\" ]","title":"query_repository_primary_language()"},{"location":"repository/#prefect_github.repository.query_repository_project","text":"Find project by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 @task async def query_repository_project ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find project by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"project\" ]","title":"query_repository_project()"},{"location":"repository/#prefect_github.repository.query_repository_project_next","text":"Finds and returns the Project (beta) according to the provided Project (beta) number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The ProjectNext number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 @task async def query_repository_project_next ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Finds and returns the Project (beta) according to the provided Project (beta) number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The ProjectNext number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectNext\" ]","title":"query_repository_project_next()"},{"location":"repository/#prefect_github.repository.query_repository_project_v2","text":"Finds and returns the Project according to the provided Project number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The Project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 @task async def query_repository_project_v2 ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Finds and returns the Project according to the provided Project number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The Project number. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectV2\" ]","title":"query_repository_project_v2()"},{"location":"repository/#prefect_github.repository.query_repository_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 @task async def query_repository_projects ( # noqa owner : str , name : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , follow_renames : bool = True , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projects\" ]","title":"query_repository_projects()"},{"location":"repository/#prefect_github.repository.query_repository_projects_next","text":"List of projects (beta) linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project (beta) to search for linked to the repo. None sort_by graphql_schema . ProjectNextOrderField How to order the returned project (beta) objects. 'TITLE' return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 @task async def query_repository_projects_next ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of projects (beta) linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project (beta) to search for linked to the repo. sort_by: How to order the returned project (beta) objects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_next ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , sort_by = sort_by , ) ) op_stack = ( \"repository\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsNext\" ]","title":"query_repository_projects_next()"},{"location":"repository/#prefect_github.repository.query_repository_projects_v2","text":"List of projects linked to this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None query str A project to search for linked to the repo. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 @task async def query_repository_projects_v2 ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of projects linked to this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. query: A project to search for linked to the repo. order_by: How to order the returned projects. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . projects_v2 ( ** strip_kwargs ( after = after , before = before , first = first , last = last , query = query , order_by = order_by , ) ) op_stack = ( \"repository\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"projectsV2\" ]","title":"query_repository_projects_v2()"},{"location":"repository/#prefect_github.repository.query_repository_pull_request","text":"Returns a single pull request from the current repository by number. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required number int The number for the pull request to be returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 @task async def query_repository_pull_request ( # noqa owner : str , name : str , number : int , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a single pull request from the current repository by number. Args: owner: The login field of a user or organization. name: The name of the repository. number: The number for the pull request to be returned. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"repository\" , \"pullRequest\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequest\" ]","title":"query_repository_pull_request()"},{"location":"repository/#prefect_github.repository.query_repository_pull_request_templates","text":"Returns a list of pull request templates associated to the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 @task async def query_repository_pull_request_templates ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a list of pull request templates associated to the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_request_templates ( ** strip_kwargs ()) op_stack = ( \"repository\" , \"pullRequestTemplates\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequestTemplates\" ]","title":"query_repository_pull_request_templates()"},{"location":"repository/#prefect_github.repository.query_repository_pull_requests","text":"A list of pull requests that have been opened in the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 @task async def query_repository_pull_requests ( # noqa owner : str , name : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , follow_renames : bool = True , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of pull requests that have been opened in the repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"pullRequests\" ]","title":"query_repository_pull_requests()"},{"location":"repository/#prefect_github.repository.query_repository_recent_projects","text":"Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 @task async def query_repository_recent_projects ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Recent projects that this user has modified in the context of the owner. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"recentProjects\" ]","title":"query_repository_recent_projects()"},{"location":"repository/#prefect_github.repository.query_repository_ref","text":"Fetch a given ref from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required qualified_name str The ref to retrieve. Fully qualified matches are checked in order ( refs/heads/master ) before falling back onto checks for short name matches ( master ). required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 @task async def query_repository_ref ( # noqa owner : str , name : str , qualified_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Fetch a given ref from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. qualified_name: The ref to retrieve. Fully qualified matches are checked in order (`refs/heads/master`) before falling back onto checks for short name matches (`master`). github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . ref ( ** strip_kwargs ( qualified_name = qualified_name , ) ) op_stack = ( \"repository\" , \"ref\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"ref\" ]","title":"query_repository_ref()"},{"location":"repository/#prefect_github.repository.query_repository_refs","text":"Fetch a list of refs from the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required ref_prefix str A ref name prefix like refs/heads/ , refs/tags/ , etc. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True query str Filters refs with query on name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None direction graphql_schema . OrderDirection None order_by graphql_schema . RefOrder Ordering options for refs returned from the connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 @task async def query_repository_refs ( # noqa owner : str , name : str , ref_prefix : str , github_credentials : GitHubCredentials , follow_renames : bool = True , query : str = None , after : str = None , before : str = None , first : int = None , last : int = None , direction : graphql_schema . OrderDirection = None , order_by : graphql_schema . RefOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Fetch a list of refs from the repository. Args: owner: The login field of a user or organization. name: The name of the repository. ref_prefix: A ref name prefix like `refs/heads/`, `refs/tags/`, etc. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. query: Filters refs with query on name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. direction: DEPRECATED: use orderBy. The ordering direction. order_by: Ordering options for refs returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . refs ( ** strip_kwargs ( ref_prefix = ref_prefix , query = query , after = after , before = before , first = first , last = last , direction = direction , order_by = order_by , ) ) op_stack = ( \"repository\" , \"refs\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"refs\" ]","title":"query_repository_refs()"},{"location":"repository/#prefect_github.repository.query_repository_release","text":"Lookup a single release given various criteria. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required tag_name str The name of the Tag the Release was created from. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 @task async def query_repository_release ( # noqa owner : str , name : str , tag_name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Lookup a single release given various criteria. Args: owner: The login field of a user or organization. name: The name of the repository. tag_name: The name of the Tag the Release was created from. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . release ( ** strip_kwargs ( tag_name = tag_name , ) ) op_stack = ( \"repository\" , \"release\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"release\" ]","title":"query_repository_release()"},{"location":"repository/#prefect_github.repository.query_repository_releases","text":"List of releases which are dependent on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . ReleaseOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 @task async def query_repository_releases ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . ReleaseOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of releases which are dependent on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . releases ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"releases\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"releases\" ]","title":"query_repository_releases()"},{"location":"repository/#prefect_github.repository.query_repository_repository_topics","text":"A list of applied repository-topic associations for this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 @task async def query_repository_repository_topics ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of applied repository-topic associations for this repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . repository_topics ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"repositoryTopics\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"repositoryTopics\" ]","title":"query_repository_repository_topics()"},{"location":"repository/#prefect_github.repository.query_repository_stargazers","text":"A list of users who have starred this starrable. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 @task async def query_repository_stargazers ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users who have starred this starrable. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . stargazers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"repository\" , \"stargazers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"stargazers\" ]","title":"query_repository_stargazers()"},{"location":"repository/#prefect_github.repository.query_repository_submodules","text":"Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 @task async def query_repository_submodules ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Returns a list of all submodules in this repository parsed from the .gitmodules file as of the default branch's HEAD commit. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . submodules ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"submodules\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"submodules\" ]","title":"query_repository_submodules()"},{"location":"repository/#prefect_github.repository.query_repository_vulnerability_alerts","text":"A list of vulnerability alerts that are on this repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required states Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ] Filter by the state of the alert. required dependency_scopes Iterable [ graphql_schema . RepositoryVulnerabilityAlertDependencyScope ] Filter by the scope of the alert's dependency. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 @task async def query_repository_vulnerability_alerts ( # noqa owner : str , name : str , states : Iterable [ graphql_schema . RepositoryVulnerabilityAlertState ], dependency_scopes : Iterable [ graphql_schema . RepositoryVulnerabilityAlertDependencyScope ], github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of vulnerability alerts that are on this repository. Args: owner: The login field of a user or organization. name: The name of the repository. states: Filter by the state of the alert. dependency_scopes: Filter by the scope of the alert's dependency. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . vulnerability_alerts ( ** strip_kwargs ( states = states , dependency_scopes = dependency_scopes , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"vulnerabilityAlerts\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"vulnerabilityAlerts\" ]","title":"query_repository_vulnerability_alerts()"},{"location":"repository/#prefect_github.repository.query_repository_watchers","text":"A list of users watching the repository. Parameters: Name Type Description Default owner str The login field of a user or organization. required name str The name of the repository. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository.py 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 @task async def query_repository_watchers ( # noqa owner : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users watching the repository. Args: owner: The login field of a user or organization. name: The name of the repository. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository ( ** strip_kwargs ( owner = owner , name = name , follow_renames = follow_renames , ) ) . watchers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"repository\" , \"watchers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repository\" ][ \"watchers\" ]","title":"query_repository_watchers()"},{"location":"repository_owner/","text":"prefect_github.repository_owner This is a module containing: GitHub query_repository_owner* tasks Classes Functions query_repository_owner async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @task async def query_repository_owner ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"repositoryOwner\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ] query_repository_owner_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 @task async def query_repository_owner_repositories ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user owns. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"repositoryOwner\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repositories\" ] query_repository_owner_repository async Find Repository. Parameters: Name Type Description Default login str The username to lookup the owner by. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @task async def query_repository_owner_repository ( # noqa login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find Repository. Args: login: The username to lookup the owner by. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repositoryOwner\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repository\" ]","title":"Repository Owner"},{"location":"repository_owner/#prefect_github.repository_owner","text":"This is a module containing: GitHub query_repository_owner* tasks","title":"repository_owner"},{"location":"repository_owner/#prefect_github.repository_owner-classes","text":"","title":"Classes"},{"location":"repository_owner/#prefect_github.repository_owner-functions","text":"","title":"Functions"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 @task async def query_repository_owner ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"repositoryOwner\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ]","title":"query_repository_owner()"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The username to lookup the owner by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 @task async def query_repository_owner_repositories ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user owns. Args: login: The username to lookup the owner by. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"repositoryOwner\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repositories\" ]","title":"query_repository_owner_repositories()"},{"location":"repository_owner/#prefect_github.repository_owner.query_repository_owner_repository","text":"Find Repository. Parameters: Name Type Description Default login str The username to lookup the owner by. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/repository_owner.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @task async def query_repository_owner_repository ( # noqa login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find Repository. Args: login: The username to lookup the owner by. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . repository_owner ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"repositoryOwner\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"repositoryOwner\" ][ \"repository\" ]","title":"query_repository_owner_repository()"},{"location":"user/","text":"prefect_github.user This is a module containing: GitHub query_user* tasks Classes Functions query_user async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 @task async def query_user ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"user\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ] query_user_commit_comments async A list of commit comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 @task async def query_user_commit_comments ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of commit comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"commitComments\" ] query_user_contributions_collection async The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 @task async def query_user_contributions_collection ( # noqa login : str , github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The collection of contributions this user has made to different repositories. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"user\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"contributionsCollection\" ] query_user_followers async A list of users the given user is followed by. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 @task async def query_user_followers ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users the given user is followed by. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"followers\" ] query_user_following async A list of users the given user is following. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 @task async def query_user_following ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users the given user is following. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"following\" ] query_user_gist async Find gist by repo name. Parameters: Name Type Description Default login str The user's login. required name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 @task async def query_user_gist ( # noqa login : str , name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find gist by repo name. Args: login: The user's login. name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"user\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gist\" ] query_user_gist_comments async A list of gist comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 @task async def query_user_gist_comments ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of gist comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gistComments\" ] query_user_gists async A list of the Gists the user has created. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . GistPrivacy Filters Gists according to privacy. None order_by graphql_schema . GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 @task async def query_user_gists ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of the Gists the user has created. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gists\" ] query_user_interaction_ability async The interaction ability settings for this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 @task async def query_user_interaction_ability ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The interaction ability settings for this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"user\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"interactionAbility\" ] query_user_issue_comments async A list of issue comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 @task async def query_user_issue_comments ( # noqa login : str , github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issue comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issueComments\" ] query_user_issues async A list of issues associated with this user. Parameters: Name Type Description Default login str The user's login. required labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 @task async def query_user_issues ( # noqa login : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issues associated with this user. Args: login: The user's login. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issues\" ] query_user_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 @task async def query_user_item_showcase ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"user\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"itemShowcase\" ] query_user_organization async Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The user's login. required organization_login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 @task async def query_user_organization ( # noqa login : str , organization_login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find an organization by its login that the user belongs to. Args: login: The user's login. organization_login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organization ( ** strip_kwargs ( login = organization_login , ) ) op_stack = ( \"user\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organization\" ] query_user_organizations async A list of organizations the user belongs to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 @task async def query_user_organizations ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of organizations the user belongs to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organizations\" ] query_user_packages async A list of packages under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 @task async def query_user_packages ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of packages under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"user\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"packages\" ] query_user_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 @task async def query_user_pinnable_items ( # noqa login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The user's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnableItems\" ] query_user_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 @task async def query_user_pinned_items ( # noqa login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The user's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnedItems\" ] query_user_project async Find project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 @task async def query_user_project ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find project by number. Args: login: The user's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"project\" ] query_user_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default login str The user's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 @task async def query_user_project_next ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by project (beta) number. Args: login: The user's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectNext\" ] query_user_project_v2 async Find a project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 @task async def query_user_project_v2 ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by number. Args: login: The user's login. number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectV2\" ] query_user_projects async A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 @task async def query_user_projects ( # noqa login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: login: The user's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projects\" ] query_user_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 @task async def query_user_projects_next ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects (beta) under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( query = query , sort_by = sort_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsNext\" ] query_user_projects_v2 async A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 @task async def query_user_projects_v2 ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. query: A project to search for under the the owner. order_by: How to order the returned projects. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_v2 ( ** strip_kwargs ( query = query , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsV2\" ] query_user_public_keys async A list of public keys associated with this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 @task async def query_user_public_keys ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of public keys associated with this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"publicKeys\" ] query_user_pull_requests async A list of pull requests associated with this user. Parameters: Name Type Description Default login str The user's login. required states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 @task async def query_user_pull_requests ( # noqa login : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of pull requests associated with this user. Args: login: The user's login. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pullRequests\" ] query_user_recent_projects async Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 @task async def query_user_recent_projects ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Recent projects that this user has modified in the context of the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"recentProjects\" ] query_user_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 @task async def query_user_repositories ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user owns. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"user\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositories\" ] query_user_repositories_contributed_to async A list of repositories that the user recently contributed to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable [ graphql_schema . RepositoryContributionType ] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 @task async def query_user_repositories_contributed_to ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user recently contributed to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoriesContributedTo\" ] query_user_repository async Find Repository. Parameters: Name Type Description Default login str The user's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 @task async def query_user_repository ( # noqa login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find Repository. Args: login: The user's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"user\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repository\" ] query_user_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 @task async def query_user_repository_discussion_comments ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussion comments this user has authored. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"user\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussionComments\" ] query_user_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 @task async def query_user_repository_discussions ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussions this user has started. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"user\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussions\" ] query_user_saved_replies async Replies this user has saved. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 @task async def query_user_saved_replies ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Replies this user has saved. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"savedReplies\" ] query_user_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 @task async def query_user_sponsoring ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of users and organizations this entity is sponsoring. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsoring\" ] query_user_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 @task async def query_user_sponsors ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsors for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsors\" ] query_user_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The user's login. required actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 @task async def query_user_sponsors_activities ( # noqa login : str , actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The user's login. actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsActivities\" ] query_user_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 @task async def query_user_sponsors_listing ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsListing\" ] query_user_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 @task async def query_user_sponsorship_for_viewer_as_sponsor ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsor\" ] query_user_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 @task async def query_user_sponsorship_for_viewer_as_sponsorable ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_user_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 @task async def query_user_sponsorship_newsletters ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipNewsletters\" ] query_user_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 @task async def query_user_sponsorships_as_maintainer ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the maintainer. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsMaintainer\" ] query_user_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 @task async def query_user_sponsorships_as_sponsor ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the sponsor. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsSponsor\" ] query_user_starred_repositories async Repositories the user has starred. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 @task async def query_user_starred_repositories ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Repositories the user has starred. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"user\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"starredRepositories\" ] query_user_status async The user's description of what they're currently doing. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 @task async def query_user_status ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The user's description of what they're currently doing. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . status ( ** strip_kwargs ()) op_stack = ( \"user\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"status\" ] query_user_top_repositories async Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default login str The user's login. required order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 @task async def query_user_top_repositories ( # noqa login : str , order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: login: The user's login. order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"user\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"topRepositories\" ] query_user_watching async A list of repositories the given user is watching. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 @task async def query_user_watching ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories the given user is watching. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"watching\" ]","title":"User"},{"location":"user/#prefect_github.user","text":"This is a module containing: GitHub query_user* tasks","title":"user"},{"location":"user/#prefect_github.user-classes","text":"","title":"Classes"},{"location":"user/#prefect_github.user-functions","text":"","title":"Functions"},{"location":"user/#prefect_github.user.query_user","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 @task async def query_user ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"user\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ]","title":"query_user()"},{"location":"user/#prefect_github.user.query_user_commit_comments","text":"A list of commit comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 @task async def query_user_commit_comments ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of commit comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"commitComments\" ]","title":"query_user_commit_comments()"},{"location":"user/#prefect_github.user.query_user_contributions_collection","text":"The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 @task async def query_user_contributions_collection ( # noqa login : str , github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The collection of contributions this user has made to different repositories. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"user\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"contributionsCollection\" ]","title":"query_user_contributions_collection()"},{"location":"user/#prefect_github.user.query_user_followers","text":"A list of users the given user is followed by. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 @task async def query_user_followers ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users the given user is followed by. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"followers\" ]","title":"query_user_followers()"},{"location":"user/#prefect_github.user.query_user_following","text":"A list of users the given user is following. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 @task async def query_user_following ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users the given user is following. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"following\" ]","title":"query_user_following()"},{"location":"user/#prefect_github.user.query_user_gist","text":"Find gist by repo name. Parameters: Name Type Description Default login str The user's login. required name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 @task async def query_user_gist ( # noqa login : str , name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find gist by repo name. Args: login: The user's login. name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"user\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gist\" ]","title":"query_user_gist()"},{"location":"user/#prefect_github.user.query_user_gist_comments","text":"A list of gist comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 @task async def query_user_gist_comments ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of gist comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gistComments\" ]","title":"query_user_gist_comments()"},{"location":"user/#prefect_github.user.query_user_gists","text":"A list of the Gists the user has created. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . GistPrivacy Filters Gists according to privacy. None order_by graphql_schema . GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 @task async def query_user_gists ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of the Gists the user has created. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"gists\" ]","title":"query_user_gists()"},{"location":"user/#prefect_github.user.query_user_interaction_ability","text":"The interaction ability settings for this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 @task async def query_user_interaction_ability ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The interaction ability settings for this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"user\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"interactionAbility\" ]","title":"query_user_interaction_ability()"},{"location":"user/#prefect_github.user.query_user_issue_comments","text":"A list of issue comments made by this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 @task async def query_user_issue_comments ( # noqa login : str , github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issue comments made by this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issueComments\" ]","title":"query_user_issue_comments()"},{"location":"user/#prefect_github.user.query_user_issues","text":"A list of issues associated with this user. Parameters: Name Type Description Default login str The user's login. required labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 @task async def query_user_issues ( # noqa login : str , labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issues associated with this user. Args: login: The user's login. labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"issues\" ]","title":"query_user_issues()"},{"location":"user/#prefect_github.user.query_user_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 @task async def query_user_item_showcase ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"user\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"itemShowcase\" ]","title":"query_user_item_showcase()"},{"location":"user/#prefect_github.user.query_user_organization","text":"Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The user's login. required organization_login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 @task async def query_user_organization ( # noqa login : str , organization_login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find an organization by its login that the user belongs to. Args: login: The user's login. organization_login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organization ( ** strip_kwargs ( login = organization_login , ) ) op_stack = ( \"user\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organization\" ]","title":"query_user_organization()"},{"location":"user/#prefect_github.user.query_user_organizations","text":"A list of organizations the user belongs to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 @task async def query_user_organizations ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of organizations the user belongs to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"organizations\" ]","title":"query_user_organizations()"},{"location":"user/#prefect_github.user.query_user_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 @task async def query_user_packages ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of packages under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"user\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"packages\" ]","title":"query_user_packages()"},{"location":"user/#prefect_github.user.query_user_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 @task async def query_user_pinnable_items ( # noqa login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: login: The user's login. types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnableItems\" ]","title":"query_user_pinnable_items()"},{"location":"user/#prefect_github.user.query_user_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default login str The user's login. required types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 @task async def query_user_pinned_items ( # noqa login : str , types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: login: The user's login. types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pinnedItems\" ]","title":"query_user_pinned_items()"},{"location":"user/#prefect_github.user.query_user_project","text":"Find project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 @task async def query_user_project ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find project by number. Args: login: The user's login. number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"project\" ]","title":"query_user_project()"},{"location":"user/#prefect_github.user.query_user_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default login str The user's login. required number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 @task async def query_user_project_next ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by project (beta) number. Args: login: The user's login. number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectNext\" ]","title":"query_user_project_next()"},{"location":"user/#prefect_github.user.query_user_project_v2","text":"Find a project by number. Parameters: Name Type Description Default login str The user's login. required number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 @task async def query_user_project_v2 ( # noqa login : str , number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by number. Args: login: The user's login. number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"user\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectV2\" ]","title":"query_user_project_v2()"},{"location":"user/#prefect_github.user.query_user_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 @task async def query_user_projects ( # noqa login : str , states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: login: The user's login. states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projects\" ]","title":"query_user_projects()"},{"location":"user/#prefect_github.user.query_user_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 @task async def query_user_projects_next ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects (beta) under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_next ( ** strip_kwargs ( query = query , sort_by = sort_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsNext\" ]","title":"query_user_projects_next()"},{"location":"user/#prefect_github.user.query_user_projects_v2","text":"A list of projects under the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 @task async def query_user_projects_v2 ( # noqa login : str , github_credentials : GitHubCredentials , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. query: A project to search for under the the owner. order_by: How to order the returned projects. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . projects_v2 ( ** strip_kwargs ( query = query , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"projectsV2\" ]","title":"query_user_projects_v2()"},{"location":"user/#prefect_github.user.query_user_public_keys","text":"A list of public keys associated with this user. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 @task async def query_user_public_keys ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of public keys associated with this user. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"publicKeys\" ]","title":"query_user_public_keys()"},{"location":"user/#prefect_github.user.query_user_pull_requests","text":"A list of pull requests associated with this user. Parameters: Name Type Description Default login str The user's login. required states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 @task async def query_user_pull_requests ( # noqa login : str , states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of pull requests associated with this user. Args: login: The user's login. states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"pullRequests\" ]","title":"query_user_pull_requests()"},{"location":"user/#prefect_github.user.query_user_recent_projects","text":"Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 @task async def query_user_recent_projects ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Recent projects that this user has modified in the context of the owner. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"recentProjects\" ]","title":"query_user_recent_projects()"},{"location":"user/#prefect_github.user.query_user_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 @task async def query_user_repositories ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user owns. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"user\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositories\" ]","title":"query_user_repositories()"},{"location":"user/#prefect_github.user.query_user_repositories_contributed_to","text":"A list of repositories that the user recently contributed to. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable [ graphql_schema . RepositoryContributionType ] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 @task async def query_user_repositories_contributed_to ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user recently contributed to. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoriesContributedTo\" ]","title":"query_user_repositories_contributed_to()"},{"location":"user/#prefect_github.user.query_user_repository","text":"Find Repository. Parameters: Name Type Description Default login str The user's login. required name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 @task async def query_user_repository ( # noqa login : str , name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find Repository. Args: login: The user's login. name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"user\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repository\" ]","title":"query_user_repository()"},{"location":"user/#prefect_github.user.query_user_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 @task async def query_user_repository_discussion_comments ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussion comments this user has authored. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"user\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussionComments\" ]","title":"query_user_repository_discussion_comments()"},{"location":"user/#prefect_github.user.query_user_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 @task async def query_user_repository_discussions ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussions this user has started. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"user\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"repositoryDiscussions\" ]","title":"query_user_repository_discussions()"},{"location":"user/#prefect_github.user.query_user_saved_replies","text":"Replies this user has saved. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 @task async def query_user_saved_replies ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Replies this user has saved. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"savedReplies\" ]","title":"query_user_saved_replies()"},{"location":"user/#prefect_github.user.query_user_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 @task async def query_user_sponsoring ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of users and organizations this entity is sponsoring. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsoring\" ]","title":"query_user_sponsoring()"},{"location":"user/#prefect_github.user.query_user_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 @task async def query_user_sponsors ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsors for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsors\" ]","title":"query_user_sponsors()"},{"location":"user/#prefect_github.user.query_user_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default login str The user's login. required actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 @task async def query_user_sponsors_activities ( # noqa login : str , actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Events involving this sponsorable, such as new sponsorships. Args: login: The user's login. actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsActivities\" ]","title":"query_user_sponsors_activities()"},{"location":"user/#prefect_github.user.query_user_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 @task async def query_user_sponsors_listing ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The GitHub Sponsors listing for this user or organization. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorsListing\" ]","title":"query_user_sponsors_listing()"},{"location":"user/#prefect_github.user.query_user_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 @task async def query_user_sponsorship_for_viewer_as_sponsor ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_user_sponsorship_for_viewer_as_sponsor()"},{"location":"user/#prefect_github.user.query_user_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 @task async def query_user_sponsorship_for_viewer_as_sponsorable ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs ()) op_stack = ( \"user\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_user_sponsorship_for_viewer_as_sponsorable()"},{"location":"user/#prefect_github.user.query_user_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 @task async def query_user_sponsorship_newsletters ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipNewsletters\" ]","title":"query_user_sponsorship_newsletters()"},{"location":"user/#prefect_github.user.query_user_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 @task async def query_user_sponsorships_as_maintainer ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the maintainer. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_user_sponsorships_as_maintainer()"},{"location":"user/#prefect_github.user.query_user_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 @task async def query_user_sponsorships_as_sponsor ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the sponsor. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"user\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_user_sponsorships_as_sponsor()"},{"location":"user/#prefect_github.user.query_user_starred_repositories","text":"Repositories the user has starred. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 @task async def query_user_starred_repositories ( # noqa login : str , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Repositories the user has starred. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"user\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"starredRepositories\" ]","title":"query_user_starred_repositories()"},{"location":"user/#prefect_github.user.query_user_status","text":"The user's description of what they're currently doing. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 @task async def query_user_status ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The user's description of what they're currently doing. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login , ) ) . status ( ** strip_kwargs ()) op_stack = ( \"user\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"status\" ]","title":"query_user_status()"},{"location":"user/#prefect_github.user.query_user_top_repositories","text":"Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default login str The user's login. required order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 @task async def query_user_top_repositories ( # noqa login : str , order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: login: The user's login. order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"user\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"topRepositories\" ]","title":"query_user_top_repositories()"},{"location":"user/#prefect_github.user.query_user_watching","text":"A list of repositories the given user is watching. Parameters: Name Type Description Default login str The user's login. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/user.py 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 @task async def query_user_watching ( # noqa login : str , github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories the given user is watching. Args: login: The user's login. github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . user ( ** strip_kwargs ( login = login ,)) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"user\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"user\" ][ \"watching\" ]","title":"query_user_watching()"},{"location":"utils/","text":"prefect_github.utils Utilities to assist with using generated collections. Functions camel_to_snake_case Converts CamelCase and lowerCamelCase to snake_case. Parameters: Name Type Description Default string str The string in CamelCase or lowerCamelCase to convert. required Returns: Type Description str A snake_case version of the string. Source code in prefect_github/utils.py 13 14 15 16 17 18 19 20 21 22 def camel_to_snake_case ( string : str ) -> str : \"\"\" Converts CamelCase and lowerCamelCase to snake_case. Args: string: The string in CamelCase or lowerCamelCase to convert. Returns: A snake_case version of the string. \"\"\" string = SNAKE_CASE_REGEX1 . sub ( r \"\\1_\\2\" , string ) return SNAKE_CASE_REGEX2 . sub ( r \"\\1_\\2\" , string ) . lower () initialize_return_fields_defaults Reads config_path to parse out the desired default fields to return. Parameters: Name Type Description Default config_path Union [ Path , str ] The path to the config file. required Source code in prefect_github/utils.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize_return_fields_defaults ( config_path : Union [ Path , str ]) -> List : \"\"\" Reads config_path to parse out the desired default fields to return. Args: config_path: The path to the config file. \"\"\" with open ( config_path , \"r\" ) as f : config = json . load ( f ) return_fields_defaults = defaultdict ( lambda : []) for op_type , sub_op_types in config . items (): for sub_op_type in sub_op_types : if isinstance ( sub_op_type , str ): return_fields_defaults [( op_type ,)] . append ( camel_to_snake_case ( sub_op_type ) ) elif isinstance ( sub_op_type , dict ): sub_op_type_key = list ( sub_op_type . keys ())[ 0 ] return_fields_defaults [( op_type , sub_op_type_key )] = [ camel_to_snake_case ( field ) for field in sub_op_type [ sub_op_type_key ] ] return return_fields_defaults strip_kwargs Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_github/utils.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" stripped_dict = {} for k , v in kwargs . items (): if isinstance ( v , dict ): v = strip_kwargs ( ** v ) if v is not None : stripped_dict [ k ] = v return stripped_dict or {}","title":"Utils"},{"location":"utils/#prefect_github.utils","text":"Utilities to assist with using generated collections.","title":"utils"},{"location":"utils/#prefect_github.utils-functions","text":"","title":"Functions"},{"location":"utils/#prefect_github.utils.camel_to_snake_case","text":"Converts CamelCase and lowerCamelCase to snake_case. Parameters: Name Type Description Default string str The string in CamelCase or lowerCamelCase to convert. required Returns: Type Description str A snake_case version of the string. Source code in prefect_github/utils.py 13 14 15 16 17 18 19 20 21 22 def camel_to_snake_case ( string : str ) -> str : \"\"\" Converts CamelCase and lowerCamelCase to snake_case. Args: string: The string in CamelCase or lowerCamelCase to convert. Returns: A snake_case version of the string. \"\"\" string = SNAKE_CASE_REGEX1 . sub ( r \"\\1_\\2\" , string ) return SNAKE_CASE_REGEX2 . sub ( r \"\\1_\\2\" , string ) . lower ()","title":"camel_to_snake_case()"},{"location":"utils/#prefect_github.utils.initialize_return_fields_defaults","text":"Reads config_path to parse out the desired default fields to return. Parameters: Name Type Description Default config_path Union [ Path , str ] The path to the config file. required Source code in prefect_github/utils.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize_return_fields_defaults ( config_path : Union [ Path , str ]) -> List : \"\"\" Reads config_path to parse out the desired default fields to return. Args: config_path: The path to the config file. \"\"\" with open ( config_path , \"r\" ) as f : config = json . load ( f ) return_fields_defaults = defaultdict ( lambda : []) for op_type , sub_op_types in config . items (): for sub_op_type in sub_op_types : if isinstance ( sub_op_type , str ): return_fields_defaults [( op_type ,)] . append ( camel_to_snake_case ( sub_op_type ) ) elif isinstance ( sub_op_type , dict ): sub_op_type_key = list ( sub_op_type . keys ())[ 0 ] return_fields_defaults [( op_type , sub_op_type_key )] = [ camel_to_snake_case ( field ) for field in sub_op_type [ sub_op_type_key ] ] return return_fields_defaults","title":"initialize_return_fields_defaults()"},{"location":"utils/#prefect_github.utils.strip_kwargs","text":"Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Parameters: Name Type Description Default **kwargs Dict Input keyword arguments. {} Returns: Type Description Dict Stripped version of kwargs. Source code in prefect_github/utils.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 def strip_kwargs ( ** kwargs : Dict ) -> Dict : \"\"\" Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None. Args: **kwargs: Input keyword arguments. Returns: Stripped version of kwargs. \"\"\" stripped_dict = {} for k , v in kwargs . items (): if isinstance ( v , dict ): v = strip_kwargs ( ** v ) if v is not None : stripped_dict [ k ] = v return stripped_dict or {}","title":"strip_kwargs()"},{"location":"viewer/","text":"prefect_github.viewer This is a module containing: GitHub query_viewer* tasks Classes Functions query_viewer async The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @task async def query_viewer ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) op_stack = ( \"viewer\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ] query_viewer_commit_comments async A list of commit comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 @task async def query_viewer_commit_comments ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of commit comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"commitComments\" ] query_viewer_contributions_collection async The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 @task async def query_viewer_contributions_collection ( # noqa github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The collection of contributions this user has made to different repositories. Args: github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"viewer\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"contributionsCollection\" ] query_viewer_followers async A list of users the given user is followed by. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 @task async def query_viewer_followers ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users the given user is followed by. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"followers\" ] query_viewer_following async A list of users the given user is following. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 @task async def query_viewer_following ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users the given user is following. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"following\" ] query_viewer_gist async Find gist by repo name. Parameters: Name Type Description Default name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @task async def query_viewer_gist ( # noqa name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find gist by repo name. Args: name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"viewer\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gist\" ] query_viewer_gist_comments async A list of gist comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 @task async def query_viewer_gist_comments ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of gist comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gistComments\" ] query_viewer_gists async A list of the Gists the user has created. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . GistPrivacy Filters Gists according to privacy. None order_by graphql_schema . GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task async def query_viewer_gists ( # noqa github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of the Gists the user has created. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gists\" ] query_viewer_interaction_ability async The interaction ability settings for this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 @task async def query_viewer_interaction_ability ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The interaction ability settings for this user. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"interactionAbility\" ] query_viewer_issue_comments async A list of issue comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 @task async def query_viewer_issue_comments ( # noqa github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issue comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issueComments\" ] query_viewer_issues async A list of issues associated with this user. Parameters: Name Type Description Default labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 @task async def query_viewer_issues ( # noqa labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issues associated with this user. Args: labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issues\" ] query_viewer_item_showcase async Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 @task async def query_viewer_item_showcase ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"itemShowcase\" ] query_viewer_organization async Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 @task async def query_viewer_organization ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find an organization by its login that the user belongs to. Args: login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"viewer\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organization\" ] query_viewer_organizations async A list of organizations the user belongs to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 @task async def query_viewer_organizations ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of organizations the user belongs to. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organizations\" ] query_viewer_packages async A list of packages under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 @task async def query_viewer_packages ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of packages under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"packages\" ] query_viewer_pinnable_items async A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 @task async def query_viewer_pinnable_items ( # noqa types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnableItems\" ] query_viewer_pinned_items async A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 @task async def query_viewer_pinned_items ( # noqa types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnedItems\" ] query_viewer_project async Find project by number. Parameters: Name Type Description Default number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def query_viewer_project ( # noqa number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find project by number. Args: number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"project\" ] query_viewer_project_next async Find a project by project (beta) number. Parameters: Name Type Description Default number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 @task async def query_viewer_project_next ( # noqa number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by project (beta) number. Args: number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectNext\" ] query_viewer_project_v2 async Find a project by number. Parameters: Name Type Description Default number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 @task async def query_viewer_project_v2 ( # noqa number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by number. Args: number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectV2\" ] query_viewer_projects async A list of projects under the owner. Parameters: Name Type Description Default states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 @task async def query_viewer_projects ( # noqa states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projects\" ] query_viewer_projects_next async A list of projects (beta) under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 @task async def query_viewer_projects_next ( # noqa github_credentials : GitHubCredentials , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects (beta) under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_next ( ** strip_kwargs ( query = query , sort_by = sort_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsNext\" ] query_viewer_projects_v2 async A list of projects under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 @task async def query_viewer_projects_v2 ( # noqa github_credentials : GitHubCredentials , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. query: A project to search for under the the owner. order_by: How to order the returned projects. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_v2 ( ** strip_kwargs ( query = query , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsV2\" ] query_viewer_public_keys async A list of public keys associated with this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 @task async def query_viewer_public_keys ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of public keys associated with this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"publicKeys\" ] query_viewer_pull_requests async A list of pull requests associated with this user. Parameters: Name Type Description Default states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 @task async def query_viewer_pull_requests ( # noqa states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of pull requests associated with this user. Args: states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pullRequests\" ] query_viewer_recent_projects async Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 @task async def query_viewer_recent_projects ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Recent projects that this user has modified in the context of the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"recentProjects\" ] query_viewer_repositories async A list of repositories that the user owns. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 @task async def query_viewer_repositories ( # noqa github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user owns. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"viewer\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositories\" ] query_viewer_repositories_contributed_to async A list of repositories that the user recently contributed to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable [ graphql_schema . RepositoryContributionType ] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 @task async def query_viewer_repositories_contributed_to ( # noqa github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user recently contributed to. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoriesContributedTo\" ] query_viewer_repository async Find Repository. Parameters: Name Type Description Default name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 @task async def query_viewer_repository ( # noqa name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find Repository. Args: name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"viewer\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repository\" ] query_viewer_repository_discussion_comments async Discussion comments this user has authored. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 @task async def query_viewer_repository_discussion_comments ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussion comments this user has authored. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussionComments\" ] query_viewer_repository_discussions async Discussions this user has started. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 @task async def query_viewer_repository_discussions ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussions this user has started. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussions\" ] query_viewer_saved_replies async Replies this user has saved. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 @task async def query_viewer_saved_replies ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Replies this user has saved. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"savedReplies\" ] query_viewer_sponsoring async List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 @task async def query_viewer_sponsoring ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of users and organizations this entity is sponsoring. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsoring\" ] query_viewer_sponsors async List of sponsors for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 @task async def query_viewer_sponsors ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsors for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsors\" ] query_viewer_sponsors_activities async Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 @task async def query_viewer_sponsors_activities ( # noqa actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Events involving this sponsorable, such as new sponsorships. Args: actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsActivities\" ] query_viewer_sponsors_listing async The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 @task async def query_viewer_sponsors_listing ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The GitHub Sponsors listing for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsListing\" ] query_viewer_sponsorship_for_viewer_as_sponsor async The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 @task async def query_viewer_sponsorship_for_viewer_as_sponsor ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsor\" ] query_viewer_sponsorship_for_viewer_as_sponsorable async The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 @task async def query_viewer_sponsorship_for_viewer_as_sponsorable ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsorable\" ] query_viewer_sponsorship_newsletters async List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 @task async def query_viewer_sponsorship_newsletters ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipNewsletters\" ] query_viewer_sponsorships_as_maintainer async This object's sponsorships as the maintainer. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 @task async def query_viewer_sponsorships_as_maintainer ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the maintainer. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsMaintainer\" ] query_viewer_sponsorships_as_sponsor async This object's sponsorships as the sponsor. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 @task async def query_viewer_sponsorships_as_sponsor ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the sponsor. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsSponsor\" ] query_viewer_starred_repositories async Repositories the user has starred. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 @task async def query_viewer_starred_repositories ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Repositories the user has starred. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"starredRepositories\" ] query_viewer_status async The user's description of what they're currently doing. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @task async def query_viewer_status ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The user's description of what they're currently doing. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . status ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"status\" ] query_viewer_top_repositories async Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 @task async def query_viewer_top_repositories ( # noqa order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"viewer\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"topRepositories\" ] query_viewer_watching async A list of repositories the given user is watching. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 @task async def query_viewer_watching ( # noqa github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories the given user is watching. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"watching\" ]","title":"Viewer"},{"location":"viewer/#prefect_github.viewer","text":"This is a module containing: GitHub query_viewer* tasks","title":"viewer"},{"location":"viewer/#prefect_github.viewer-classes","text":"","title":"Classes"},{"location":"viewer/#prefect_github.viewer-functions","text":"","title":"Functions"},{"location":"viewer/#prefect_github.viewer.query_viewer","text":"The query root of GitHub's GraphQL interface. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @task async def query_viewer ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The query root of GitHub's GraphQL interface. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) op_stack = ( \"viewer\" ,) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ]","title":"query_viewer()"},{"location":"viewer/#prefect_github.viewer.query_viewer_commit_comments","text":"A list of commit comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 @task async def query_viewer_commit_comments ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of commit comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . commit_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"commitComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"commitComments\" ]","title":"query_viewer_commit_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_contributions_collection","text":"The collection of contributions this user has made to different repositories. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required organization_id str The ID of the organization used to filter contributions. None from_ datetime Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. None to datetime Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 @task async def query_viewer_contributions_collection ( # noqa github_credentials : GitHubCredentials , organization_id : str = None , from_ : datetime = None , to : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The collection of contributions this user has made to different repositories. Args: github_credentials: Credentials to use for authentication with GitHub. organization_id: The ID of the organization used to filter contributions. from_: Only contributions made at this time or later will be counted. If omitted, defaults to a year ago. to: Only contributions made before and up to (including) this time will be counted. If omitted, defaults to the current time or one year from the provided from argument. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . contributions_collection ( ** strip_kwargs ( organization_id = organization_id , from_ = from_ , to = to , ) ) op_stack = ( \"viewer\" , \"contributionsCollection\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"contributionsCollection\" ]","title":"query_viewer_contributions_collection()"},{"location":"viewer/#prefect_github.viewer.query_viewer_followers","text":"A list of users the given user is followed by. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 @task async def query_viewer_followers ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users the given user is followed by. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . followers ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"followers\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"followers\" ]","title":"query_viewer_followers()"},{"location":"viewer/#prefect_github.viewer.query_viewer_following","text":"A list of users the given user is following. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 @task async def query_viewer_following ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of users the given user is following. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . following ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"following\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"following\" ]","title":"query_viewer_following()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gist","text":"Find gist by repo name. Parameters: Name Type Description Default name str The gist name to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @task async def query_viewer_gist ( # noqa name : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find gist by repo name. Args: name: The gist name to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist ( ** strip_kwargs ( name = name , ) ) op_stack = ( \"viewer\" , \"gist\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gist\" ]","title":"query_viewer_gist()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gist_comments","text":"A list of gist comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 @task async def query_viewer_gist_comments ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of gist comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gist_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gistComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gistComments\" ]","title":"query_viewer_gist_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_gists","text":"A list of the Gists the user has created. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . GistPrivacy Filters Gists according to privacy. None order_by graphql_schema . GistOrder Ordering options for gists returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @task async def query_viewer_gists ( # noqa github_credentials : GitHubCredentials , privacy : graphql_schema . GistPrivacy = None , order_by : graphql_schema . GistOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of the Gists the user has created. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: Filters Gists according to privacy. order_by: Ordering options for gists returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . gists ( ** strip_kwargs ( privacy = privacy , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"gists\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"gists\" ]","title":"query_viewer_gists()"},{"location":"viewer/#prefect_github.viewer.query_viewer_interaction_ability","text":"The interaction ability settings for this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 @task async def query_viewer_interaction_ability ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The interaction ability settings for this user. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . interaction_ability ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"interactionAbility\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"interactionAbility\" ]","title":"query_viewer_interaction_ability()"},{"location":"viewer/#prefect_github.viewer.query_viewer_issue_comments","text":"A list of issue comments made by this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueCommentOrder Ordering options for issue comments returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 @task async def query_viewer_issue_comments ( # noqa github_credentials : GitHubCredentials , order_by : graphql_schema . IssueCommentOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issue comments made by this user. Args: github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issue comments returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issue_comments ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issueComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issueComments\" ]","title":"query_viewer_issue_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_issues","text":"A list of issues associated with this user. Parameters: Name Type Description Default labels Iterable [ str ] A list of label names to filter the pull requests by. required states Iterable [ graphql_schema . IssueState ] A list of states to filter the issues by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . IssueOrder Ordering options for issues returned from the connection. None filter_by graphql_schema . IssueFilters Filtering options for issues returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 @task async def query_viewer_issues ( # noqa labels : Iterable [ str ], states : Iterable [ graphql_schema . IssueState ], github_credentials : GitHubCredentials , order_by : graphql_schema . IssueOrder = None , filter_by : graphql_schema . IssueFilters = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of issues associated with this user. Args: labels: A list of label names to filter the pull requests by. states: A list of states to filter the issues by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for issues returned from the connection. filter_by: Filtering options for issues returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . issues ( ** strip_kwargs ( labels = labels , states = states , order_by = order_by , filter_by = filter_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"issues\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"issues\" ]","title":"query_viewer_issues()"},{"location":"viewer/#prefect_github.viewer.query_viewer_item_showcase","text":"Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 @task async def query_viewer_item_showcase ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Showcases a selection of repositories and gists that the profile owner has either curated or that have been selected automatically based on popularity. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . item_showcase ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"itemShowcase\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"itemShowcase\" ]","title":"query_viewer_item_showcase()"},{"location":"viewer/#prefect_github.viewer.query_viewer_organization","text":"Find an organization by its login that the user belongs to. Parameters: Name Type Description Default login str The login of the organization to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 @task async def query_viewer_organization ( # noqa login : str , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find an organization by its login that the user belongs to. Args: login: The login of the organization to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organization ( ** strip_kwargs ( login = login , ) ) op_stack = ( \"viewer\" , \"organization\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organization\" ]","title":"query_viewer_organization()"},{"location":"viewer/#prefect_github.viewer.query_viewer_organizations","text":"A list of organizations the user belongs to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 @task async def query_viewer_organizations ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of organizations the user belongs to. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . organizations ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"organizations\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"organizations\" ]","title":"query_viewer_organizations()"},{"location":"viewer/#prefect_github.viewer.query_viewer_packages","text":"A list of packages under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None names Iterable [ str ] Find packages by their names. None repository_id str Find packages in a repository by ID. None package_type graphql_schema . PackageType Filter registry package by type. None order_by graphql_schema . PackageOrder Ordering of the returned packages. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 @task async def query_viewer_packages ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , names : Iterable [ str ] = None , repository_id : str = None , package_type : graphql_schema . PackageType = None , order_by : graphql_schema . PackageOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of packages under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. names: Find packages by their names. repository_id: Find packages in a repository by ID. package_type: Filter registry package by type. order_by: Ordering of the returned packages. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . packages ( ** strip_kwargs ( after = after , before = before , first = first , last = last , names = names , repository_id = repository_id , package_type = package_type , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"packages\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"packages\" ]","title":"query_viewer_packages()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pinnable_items","text":"A list of repositories and gists this profile owner can pin to their profile. Parameters: Name Type Description Default types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinnable items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 @task async def query_viewer_pinnable_items ( # noqa types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner can pin to their profile. Args: types: Filter the types of pinnable items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinnable_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnableItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnableItems\" ]","title":"query_viewer_pinnable_items()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pinned_items","text":"A list of repositories and gists this profile owner has pinned to their profile. Parameters: Name Type Description Default types Iterable [ graphql_schema . PinnableItemType ] Filter the types of pinned items that are returned. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 @task async def query_viewer_pinned_items ( # noqa types : Iterable [ graphql_schema . PinnableItemType ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories and gists this profile owner has pinned to their profile. Args: types: Filter the types of pinned items that are returned. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pinned_items ( ** strip_kwargs ( types = types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pinnedItems\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pinnedItems\" ]","title":"query_viewer_pinned_items()"},{"location":"viewer/#prefect_github.viewer.query_viewer_project","text":"Find project by number. Parameters: Name Type Description Default number int The project number to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 @task async def query_viewer_project ( # noqa number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find project by number. Args: number: The project number to find. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"project\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"project\" ]","title":"query_viewer_project()"},{"location":"viewer/#prefect_github.viewer.query_viewer_project_next","text":"Find a project by project (beta) number. Parameters: Name Type Description Default number int The project (beta) number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 @task async def query_viewer_project_next ( # noqa number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by project (beta) number. Args: number: The project (beta) number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_next ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectNext\" ]","title":"query_viewer_project_next()"},{"location":"viewer/#prefect_github.viewer.query_viewer_project_v2","text":"Find a project by number. Parameters: Name Type Description Default number int The project number. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 @task async def query_viewer_project_v2 ( # noqa number : int , github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find a project by number. Args: number: The project number. github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . project_v2 ( ** strip_kwargs ( number = number , ) ) op_stack = ( \"viewer\" , \"projectV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectV2\" ]","title":"query_viewer_project_v2()"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects","text":"A list of projects under the owner. Parameters: Name Type Description Default states Iterable [ graphql_schema . ProjectState ] A list of states to filter the projects by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required order_by graphql_schema . ProjectOrder Ordering options for projects returned from the connection. None search str Query to search projects by, currently only searching by name. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 @task async def query_viewer_projects ( # noqa states : Iterable [ graphql_schema . ProjectState ], github_credentials : GitHubCredentials , order_by : graphql_schema . ProjectOrder = None , search : str = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: states: A list of states to filter the projects by. github_credentials: Credentials to use for authentication with GitHub. order_by: Ordering options for projects returned from the connection. search: Query to search projects by, currently only searching by name. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects ( ** strip_kwargs ( states = states , order_by = order_by , search = search , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projects\" ]","title":"query_viewer_projects()"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects_next","text":"A list of projects (beta) under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project (beta) to search for under the the owner. None sort_by graphql_schema . ProjectNextOrderField How to order the returned projects (beta). 'TITLE' after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 @task async def query_viewer_projects_next ( # noqa github_credentials : GitHubCredentials , query : str = None , sort_by : graphql_schema . ProjectNextOrderField = \"TITLE\" , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects (beta) under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. query: A project (beta) to search for under the the owner. sort_by: How to order the returned projects (beta). after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_next ( ** strip_kwargs ( query = query , sort_by = sort_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projectsNext\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsNext\" ]","title":"query_viewer_projects_next()"},{"location":"viewer/#prefect_github.viewer.query_viewer_projects_v2","text":"A list of projects under the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required query str A project to search for under the the owner. None order_by graphql_schema . ProjectV2Order How to order the returned projects. {'field': 'NUMBER', 'direction': 'DESC'} after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 @task async def query_viewer_projects_v2 ( # noqa github_credentials : GitHubCredentials , query : str = None , order_by : graphql_schema . ProjectV2Order = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of projects under the owner. Args: github_credentials: Credentials to use for authentication with GitHub. query: A project to search for under the the owner. order_by: How to order the returned projects. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . projects_v2 ( ** strip_kwargs ( query = query , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"projectsV2\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"projectsV2\" ]","title":"query_viewer_projects_v2()"},{"location":"viewer/#prefect_github.viewer.query_viewer_public_keys","text":"A list of public keys associated with this user. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 @task async def query_viewer_public_keys ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of public keys associated with this user. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . public_keys ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"publicKeys\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"publicKeys\" ]","title":"query_viewer_public_keys()"},{"location":"viewer/#prefect_github.viewer.query_viewer_pull_requests","text":"A list of pull requests associated with this user. Parameters: Name Type Description Default states Iterable [ graphql_schema . PullRequestState ] A list of states to filter the pull requests by. required labels Iterable [ str ] A list of label names to filter the pull requests by. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required head_ref_name str The head ref name to filter the pull requests by. None base_ref_name str The base ref name to filter the pull requests by. None order_by graphql_schema . IssueOrder Ordering options for pull requests returned from the connection. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 @task async def query_viewer_pull_requests ( # noqa states : Iterable [ graphql_schema . PullRequestState ], labels : Iterable [ str ], github_credentials : GitHubCredentials , head_ref_name : str = None , base_ref_name : str = None , order_by : graphql_schema . IssueOrder = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of pull requests associated with this user. Args: states: A list of states to filter the pull requests by. labels: A list of label names to filter the pull requests by. github_credentials: Credentials to use for authentication with GitHub. head_ref_name: The head ref name to filter the pull requests by. base_ref_name: The base ref name to filter the pull requests by. order_by: Ordering options for pull requests returned from the connection. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . pull_requests ( ** strip_kwargs ( states = states , labels = labels , head_ref_name = head_ref_name , base_ref_name = base_ref_name , order_by = order_by , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"pullRequests\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"pullRequests\" ]","title":"query_viewer_pull_requests()"},{"location":"viewer/#prefect_github.viewer.query_viewer_recent_projects","text":"Recent projects that this user has modified in the context of the owner. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 @task async def query_viewer_recent_projects ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Recent projects that this user has modified in the context of the owner. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . recent_projects ( ** strip_kwargs ( after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"recentProjects\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"recentProjects\" ]","title":"query_viewer_recent_projects()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repositories","text":"A list of repositories that the user owns. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None is_fork bool If non-null, filters repositories according to whether they are forks of another repository. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 @task async def query_viewer_repositories ( # noqa github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , is_fork : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user owns. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. is_fork: If non-null, filters repositories according to whether they are forks of another repository. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , is_fork = is_fork , ) ) op_stack = ( \"viewer\" , \"repositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositories\" ]","title":"query_viewer_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repositories_contributed_to","text":"A list of repositories that the user recently contributed to. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None is_locked bool If non-null, filters repositories according to whether they have been locked. None include_user_repositories bool If true, include user repositories. None contribution_types Iterable [ graphql_schema . RepositoryContributionType ] If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 @task async def query_viewer_repositories_contributed_to ( # noqa github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , is_locked : bool = None , include_user_repositories : bool = None , contribution_types : Iterable [ graphql_schema . RepositoryContributionType ] = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories that the user recently contributed to. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. is_locked: If non-null, filters repositories according to whether they have been locked. include_user_repositories: If true, include user repositories. contribution_types: If non-null, include only the specified types of contributions. The GitHub.com UI uses [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repositories_contributed_to ( ** strip_kwargs ( privacy = privacy , order_by = order_by , is_locked = is_locked , include_user_repositories = include_user_repositories , contribution_types = contribution_types , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"repositoriesContributedTo\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoriesContributedTo\" ]","title":"query_viewer_repositories_contributed_to()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository","text":"Find Repository. Parameters: Name Type Description Default name str Name of Repository to find. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required follow_renames bool Follow repository renames. If disabled, a repository referenced by its old name will return an error. True return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 @task async def query_viewer_repository ( # noqa name : str , github_credentials : GitHubCredentials , follow_renames : bool = True , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Find Repository. Args: name: Name of Repository to find. github_credentials: Credentials to use for authentication with GitHub. follow_renames: Follow repository renames. If disabled, a repository referenced by its old name will return an error. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository ( ** strip_kwargs ( name = name , follow_renames = follow_renames , ) ) op_stack = ( \"viewer\" , \"repository\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repository\" ]","title":"query_viewer_repository()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository_discussion_comments","text":"Discussion comments this user has authored. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None repository_id str Filter discussion comments to only those in a specific repository. None only_answers bool Filter discussion comments to only those that were marked as the answer. False return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 @task async def query_viewer_repository_discussion_comments ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , repository_id : str = None , only_answers : bool = False , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussion comments this user has authored. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. repository_id: Filter discussion comments to only those in a specific repository. only_answers: Filter discussion comments to only those that were marked as the answer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussion_comments ( ** strip_kwargs ( after = after , before = before , first = first , last = last , repository_id = repository_id , only_answers = only_answers , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussionComments\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussionComments\" ]","title":"query_viewer_repository_discussion_comments()"},{"location":"viewer/#prefect_github.viewer.query_viewer_repository_discussions","text":"Discussions this user has started. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . DiscussionOrder Ordering options for discussions returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} repository_id str Filter discussions to only those in a specific repository. None answered bool Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 @task async def query_viewer_repository_discussions ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . DiscussionOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, repository_id : str = None , answered : bool = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Discussions this user has started. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for discussions returned from the connection. repository_id: Filter discussions to only those in a specific repository. answered: Filter discussions to only those that have been answered or not. Defaults to including both answered and unanswered discussions. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . repository_discussions ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , repository_id = repository_id , answered = answered , ) ) op_stack = ( \"viewer\" , \"repositoryDiscussions\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"repositoryDiscussions\" ]","title":"query_viewer_repository_discussions()"},{"location":"viewer/#prefect_github.viewer.query_viewer_saved_replies","text":"Replies this user has saved. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SavedReplyOrder The field to order saved replies by. {'field': 'UPDATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 @task async def query_viewer_saved_replies ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SavedReplyOrder = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Replies this user has saved. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: The field to order saved replies by. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . saved_replies ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"savedReplies\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"savedReplies\" ]","title":"query_viewer_saved_replies()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsoring","text":"List of users and organizations this entity is sponsoring. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorOrder Ordering options for the users and organizations returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 @task async def query_viewer_sponsoring ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of users and organizations this entity is sponsoring. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for the users and organizations returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsoring ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsoring\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsoring\" ]","title":"query_viewer_sponsoring()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors","text":"List of sponsors for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None tier_id str If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. None order_by graphql_schema . SponsorOrder Ordering options for sponsors returned from the connection. {'field': 'RELEVANCE', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 @task async def query_viewer_sponsors ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , tier_id : str = None , order_by : graphql_schema . SponsorOrder = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsors for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. tier_id: If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see. order_by: Ordering options for sponsors returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors ( ** strip_kwargs ( after = after , before = before , first = first , last = last , tier_id = tier_id , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsors\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsors\" ]","title":"query_viewer_sponsors()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors_activities","text":"Events involving this sponsorable, such as new sponsorships. Parameters: Name Type Description Default actions Iterable [ graphql_schema . SponsorsActivityAction ] Filter activities to only the specified actions. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None period graphql_schema . SponsorsActivityPeriod Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. 'MONTH' order_by graphql_schema . SponsorsActivityOrder Ordering options for activity returned from the connection. {'field': 'TIMESTAMP', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 @task async def query_viewer_sponsors_activities ( # noqa actions : Iterable [ graphql_schema . SponsorsActivityAction ], github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , period : graphql_schema . SponsorsActivityPeriod = \"MONTH\" , order_by : graphql_schema . SponsorsActivityOrder = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Events involving this sponsorable, such as new sponsorships. Args: actions: Filter activities to only the specified actions. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. period: Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred. order_by: Ordering options for activity returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_activities ( ** strip_kwargs ( actions = actions , after = after , before = before , first = first , last = last , period = period , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorsActivities\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsActivities\" ]","title":"query_viewer_sponsors_activities()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsors_listing","text":"The GitHub Sponsors listing for this user or organization. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 @task async def query_viewer_sponsors_listing ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The GitHub Sponsors listing for this user or organization. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsors_listing ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"sponsorsListing\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorsListing\" ]","title":"query_viewer_sponsors_listing()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_for_viewer_as_sponsor","text":"The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 @task async def query_viewer_sponsorship_for_viewer_as_sponsor ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsor ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsor\" ]","title":"query_viewer_sponsorship_for_viewer_as_sponsor()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_for_viewer_as_sponsorable","text":"The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 @task async def query_viewer_sponsorship_for_viewer_as_sponsorable ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_for_viewer_as_sponsorable ( ** strip_kwargs () ) op_stack = ( \"viewer\" , \"sponsorshipForViewerAsSponsorable\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipForViewerAsSponsorable\" ]","title":"query_viewer_sponsorship_for_viewer_as_sponsorable()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorship_newsletters","text":"List of sponsorship updates sent from this sponsorable to sponsors. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipNewsletterOrder Ordering options for sponsorship updates returned from the connection. {'field': 'CREATED_AT', 'direction': 'DESC'} return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 @task async def query_viewer_sponsorship_newsletters ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipNewsletterOrder = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" , }, return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" List of sponsorship updates sent from this sponsorable to sponsors. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorship updates returned from the connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorship_newsletters ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipNewsletters\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipNewsletters\" ]","title":"query_viewer_sponsorship_newsletters()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorships_as_maintainer","text":"This object's sponsorships as the maintainer. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None include_private bool Whether or not to include private sponsorships in the result set. False order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 @task async def query_viewer_sponsorships_as_maintainer ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , include_private : bool = False , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the maintainer. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. include_private: Whether or not to include private sponsorships in the result set. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_maintainer ( ** strip_kwargs ( after = after , before = before , first = first , last = last , include_private = include_private , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsMaintainer\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsMaintainer\" ]","title":"query_viewer_sponsorships_as_maintainer()"},{"location":"viewer/#prefect_github.viewer.query_viewer_sponsorships_as_sponsor","text":"This object's sponsorships as the sponsor. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None order_by graphql_schema . SponsorshipOrder Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 @task async def query_viewer_sponsorships_as_sponsor ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , order_by : graphql_schema . SponsorshipOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" This object's sponsorships as the sponsor. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. order_by: Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . sponsorships_as_sponsor ( ** strip_kwargs ( after = after , before = before , first = first , last = last , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"sponsorshipsAsSponsor\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"sponsorshipsAsSponsor\" ]","title":"query_viewer_sponsorships_as_sponsor()"},{"location":"viewer/#prefect_github.viewer.query_viewer_starred_repositories","text":"Repositories the user has starred. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None owned_by_viewer bool Filters starred repositories to only return repositories owned by the viewer. None order_by graphql_schema . StarOrder Order for connection. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 @task async def query_viewer_starred_repositories ( # noqa github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , owned_by_viewer : bool = None , order_by : graphql_schema . StarOrder = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Repositories the user has starred. Args: github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. owned_by_viewer: Filters starred repositories to only return repositories owned by the viewer. order_by: Order for connection. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . starred_repositories ( ** strip_kwargs ( after = after , before = before , first = first , last = last , owned_by_viewer = owned_by_viewer , order_by = order_by , ) ) op_stack = ( \"viewer\" , \"starredRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"starredRepositories\" ]","title":"query_viewer_starred_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_status","text":"The user's description of what they're currently doing. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 @task async def query_viewer_status ( # noqa github_credentials : GitHubCredentials , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" The user's description of what they're currently doing. Args: github_credentials: Credentials to use for authentication with GitHub. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . status ( ** strip_kwargs ()) op_stack = ( \"viewer\" , \"status\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"status\" ]","title":"query_viewer_status()"},{"location":"viewer/#prefect_github.viewer.query_viewer_top_repositories","text":"Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Parameters: Name Type Description Default order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. required github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None since datetime How far back in time to fetch contributed repositories. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 @task async def query_viewer_top_repositories ( # noqa order_by : graphql_schema . RepositoryOrder , github_credentials : GitHubCredentials , after : str = None , before : str = None , first : int = None , last : int = None , since : datetime = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created. Args: order_by: Ordering options for repositories returned from the connection. github_credentials: Credentials to use for authentication with GitHub. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. since: How far back in time to fetch contributed repositories. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . top_repositories ( ** strip_kwargs ( order_by = order_by , after = after , before = before , first = first , last = last , since = since , ) ) op_stack = ( \"viewer\" , \"topRepositories\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"topRepositories\" ]","title":"query_viewer_top_repositories()"},{"location":"viewer/#prefect_github.viewer.query_viewer_watching","text":"A list of repositories the given user is watching. Parameters: Name Type Description Default github_credentials GitHubCredentials Credentials to use for authentication with GitHub. required privacy graphql_schema . RepositoryPrivacy If non-null, filters repositories according to privacy. None order_by graphql_schema . RepositoryOrder Ordering options for repositories returned from the connection. None affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. None owner_affiliations Iterable [ graphql_schema . RepositoryAffiliation ] Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. ('OWNER', 'COLLABORATOR') is_locked bool If non-null, filters repositories according to whether they have been locked. None after str Returns the elements in the list that come after the specified cursor. None before str Returns the elements in the list that come before the specified cursor. None first int Returns the first n elements from the list. None last int Returns the last n elements from the list. None return_fields Iterable [ str ] Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. None Returns: Type Description Dict [ str , Any ] A dict of the returned fields. Source code in prefect_github/viewer.py 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 @task async def query_viewer_watching ( # noqa github_credentials : GitHubCredentials , privacy : graphql_schema . RepositoryPrivacy = None , order_by : graphql_schema . RepositoryOrder = None , affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = None , owner_affiliations : Iterable [ graphql_schema . RepositoryAffiliation ] = ( \"OWNER\" , \"COLLABORATOR\" , ), is_locked : bool = None , after : str = None , before : str = None , first : int = None , last : int = None , return_fields : Iterable [ str ] = None , ) -> Dict [ str , Any ]: # pragma: no cover \"\"\" A list of repositories the given user is watching. Args: github_credentials: Credentials to use for authentication with GitHub. privacy: If non-null, filters repositories according to privacy. order_by: Ordering options for repositories returned from the connection. affiliations: Affiliation options for repositories returned from the connection. If none specified, the results will include repositories for which the current viewer is an owner or collaborator, or member. owner_affiliations: Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns. is_locked: If non-null, filters repositories according to whether they have been locked. after: Returns the elements in the list that come after the specified cursor. before: Returns the elements in the list that come before the specified cursor. first: Returns the first _n_ elements from the list. last: Returns the last _n_ elements from the list. return_fields: Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json. Returns: A dict of the returned fields. \"\"\" op = Operation ( graphql_schema . Query ) op_selection = op . viewer ( ** strip_kwargs ()) . watching ( ** strip_kwargs ( privacy = privacy , order_by = order_by , affiliations = affiliations , owner_affiliations = owner_affiliations , is_locked = is_locked , after = after , before = before , first = first , last = last , ) ) op_stack = ( \"viewer\" , \"watching\" , ) op_selection = _subset_return_fields ( op_selection , op_stack , return_fields , return_fields_defaults ) result = await _execute_graphql_op ( op , github_credentials ) return result [ \"viewer\" ][ \"watching\" ]","title":"query_viewer_watching()"},{"location":"schemas/graphql_schema/","text":"prefect_github.schemas.graphql_schema Classes AbortQueuedMigrationsInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2161 2162 2163 2164 2165 2166 2167 2168 2169 class AbortQueuedMigrationsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AbortQueuedMigrationsPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6763 6764 6765 6766 6767 6768 6769 6770 6771 class AbortQueuedMigrationsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"success\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) success = sgqlc . types . Field ( Boolean , graphql_name = \"success\" ) AcceptEnterpriseAdministratorInvitationInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 class AcceptEnterpriseAdministratorInvitationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"invitation_id\" , \"client_mutation_id\" ) invitation_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"invitationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AcceptEnterpriseAdministratorInvitationPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6774 6775 6776 6777 6778 6779 6780 6781 6782 6783 6784 6785 class AcceptEnterpriseAdministratorInvitationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"invitation\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) invitation = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"invitation\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) AcceptTopicSuggestionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 class AcceptTopicSuggestionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AcceptTopicSuggestionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6788 6789 6790 6791 6792 6793 6794 6795 6796 class AcceptTopicSuggestionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"topic\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) topic = sgqlc . types . Field ( \"Topic\" , graphql_name = \"topic\" ) Actor Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6799 6800 6801 6802 6803 6804 6805 6806 6807 6808 6809 6810 6811 6812 6813 6814 6815 6816 6817 class Actor ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"login\" , \"resource_path\" , \"url\" ) avatar_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) ActorLocation Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6820 6821 6822 6823 6824 6825 6826 6827 6828 6829 6830 6831 class ActorLocation ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"city\" , \"country\" , \"country_code\" , \"region\" , \"region_code\" ) city = sgqlc . types . Field ( String , graphql_name = \"city\" ) country = sgqlc . types . Field ( String , graphql_name = \"country\" ) country_code = sgqlc . types . Field ( String , graphql_name = \"countryCode\" ) region = sgqlc . types . Field ( String , graphql_name = \"region\" ) region_code = sgqlc . types . Field ( String , graphql_name = \"regionCode\" ) ActorType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16 17 18 19 20 21 22 class ActorType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"TEAM\" , \"USER\" ) AddAssigneesToAssignableInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 class AddAssigneesToAssignableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignable_id\" , \"assignee_ids\" , \"client_mutation_id\" ) assignable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"assignableId\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"assigneeIds\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddAssigneesToAssignablePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6834 6835 6836 6837 6838 6839 6840 6841 6842 class AddAssigneesToAssignablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignable\" , \"client_mutation_id\" ) assignable = sgqlc . types . Field ( \"Assignable\" , graphql_name = \"assignable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 class AddCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"body\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6845 6846 6847 6848 6849 6850 6851 6852 6853 6854 6855 6856 6857 class AddCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment_edge\" , \"subject\" , \"timeline_edge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment_edge = sgqlc . types . Field ( \"IssueCommentEdge\" , graphql_name = \"commentEdge\" ) subject = sgqlc . types . Field ( \"Node\" , graphql_name = \"subject\" ) timeline_edge = sgqlc . types . Field ( \"IssueTimelineItemEdge\" , graphql_name = \"timelineEdge\" ) AddDiscussionCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 class AddDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"discussion_id\" , \"reply_to_id\" , \"body\" , \"client_mutation_id\" ) discussion_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"discussionId\" ) reply_to_id = sgqlc . types . Field ( ID , graphql_name = \"replyToId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddDiscussionCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6860 6861 6862 6863 6864 6865 6866 6867 6868 class AddDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"comment\" ) AddDiscussionPollVoteInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 class AddDiscussionPollVoteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"poll_option_id\" , \"client_mutation_id\" ) poll_option_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pollOptionId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddDiscussionPollVotePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6871 6872 6873 6874 6875 6876 6877 6878 6879 class AddDiscussionPollVotePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"poll_option\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) poll_option = sgqlc . types . Field ( \"DiscussionPollOption\" , graphql_name = \"pollOption\" ) AddEnterpriseSupportEntitlementInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 class AddEnterpriseSupportEntitlementInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddEnterpriseSupportEntitlementPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6882 6883 6884 6885 6886 6887 6888 6889 6890 class AddEnterpriseSupportEntitlementPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) AddLabelsToLabelableInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 class AddLabelsToLabelableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"labelable_id\" , \"label_ids\" , \"client_mutation_id\" ) labelable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"labelableId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"labelIds\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddLabelsToLabelablePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6893 6894 6895 6896 6897 6898 6899 6900 6901 class AddLabelsToLabelablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"labelable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) labelable = sgqlc . types . Field ( \"Labelable\" , graphql_name = \"labelable\" ) AddProjectCardInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 class AddProjectCardInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_column_id\" , \"content_id\" , \"note\" , \"client_mutation_id\" ) project_column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectColumnId\" ) content_id = sgqlc . types . Field ( ID , graphql_name = \"contentId\" ) note = sgqlc . types . Field ( String , graphql_name = \"note\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddProjectCardPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6904 6905 6906 6907 6908 6909 6910 6911 6912 6913 class AddProjectCardPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"card_edge\" , \"client_mutation_id\" , \"project_column\" ) card_edge = sgqlc . types . Field ( \"ProjectCardEdge\" , graphql_name = \"cardEdge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_column = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"projectColumn\" ) AddProjectColumnInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 class AddProjectColumnInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"name\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddProjectColumnPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6916 6917 6918 6919 6920 6921 6922 6923 6924 6925 class AddProjectColumnPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"column_edge\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) column_edge = sgqlc . types . Field ( \"ProjectColumnEdge\" , graphql_name = \"columnEdge\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) AddProjectDraftIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 class AddProjectDraftIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddProjectDraftIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6928 6929 6930 6931 6932 6933 6934 6935 6936 6937 6938 class AddProjectDraftIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_next_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_next_item = sgqlc . types . Field ( \"ProjectNextItem\" , graphql_name = \"projectNextItem\" ) AddProjectNextItemInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 class AddProjectNextItemInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"content_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) content_id = sgqlc . types . Field ( ID , graphql_name = \"contentId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddProjectNextItemPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6941 6942 6943 6944 6945 6946 6947 6948 6949 6950 6951 class AddProjectNextItemPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_next_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_next_item = sgqlc . types . Field ( \"ProjectNextItem\" , graphql_name = \"projectNextItem\" ) AddProjectV2DraftIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 class AddProjectV2DraftIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddProjectV2DraftIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6954 6955 6956 6957 6958 6959 6960 6961 6962 class AddProjectV2DraftIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_item = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"projectItem\" ) AddProjectV2ItemByIdInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 class AddProjectV2ItemByIdInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"content_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) content_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"contentId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddProjectV2ItemByIdPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6965 6966 6967 6968 6969 6970 6971 6972 6973 class AddProjectV2ItemByIdPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) item = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"item\" ) AddPullRequestReviewCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 class AddPullRequestReviewCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"pull_request_review_id\" , \"commit_oid\" , \"body\" , \"path\" , \"position\" , \"in_reply_to\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestId\" ) pull_request_review_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestReviewId\" ) commit_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"commitOID\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) in_reply_to = sgqlc . types . Field ( ID , graphql_name = \"inReplyTo\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddPullRequestReviewCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6976 6977 6978 6979 6980 6981 6982 6983 6984 6985 6986 6987 class AddPullRequestReviewCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment\" , \"comment_edge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"comment\" ) comment_edge = sgqlc . types . Field ( \"PullRequestReviewCommentEdge\" , graphql_name = \"commentEdge\" ) AddPullRequestReviewInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 class AddPullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"commit_oid\" , \"body\" , \"event\" , \"comments\" , \"threads\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) commit_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"commitOID\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) event = sgqlc . types . Field ( PullRequestReviewEvent , graphql_name = \"event\" ) comments = sgqlc . types . Field ( sgqlc . types . list_of ( \"DraftPullRequestReviewComment\" ), graphql_name = \"comments\" ) threads = sgqlc . types . Field ( sgqlc . types . list_of ( \"DraftPullRequestReviewThread\" ), graphql_name = \"threads\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddPullRequestReviewPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6990 6991 6992 6993 6994 6995 6996 6997 6998 6999 7000 7001 class AddPullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" , \"review_edge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" ) review_edge = sgqlc . types . Field ( \"PullRequestReviewEdge\" , graphql_name = \"reviewEdge\" ) AddPullRequestReviewThreadInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 class AddPullRequestReviewThreadInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"body\" , \"pull_request_id\" , \"pull_request_review_id\" , \"line\" , \"side\" , \"start_line\" , \"start_side\" , \"client_mutation_id\" , ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) pull_request_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestId\" ) pull_request_review_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestReviewId\" ) line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"line\" ) side = sgqlc . types . Field ( DiffSide , graphql_name = \"side\" ) start_line = sgqlc . types . Field ( Int , graphql_name = \"startLine\" ) start_side = sgqlc . types . Field ( DiffSide , graphql_name = \"startSide\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddPullRequestReviewThreadPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7004 7005 7006 7007 7008 7009 7010 7011 7012 class AddPullRequestReviewThreadPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"thread\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) thread = sgqlc . types . Field ( \"PullRequestReviewThread\" , graphql_name = \"thread\" ) AddReactionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 class AddReactionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"content\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) content = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionContent ), graphql_name = \"content\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddReactionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7015 7016 7017 7018 7019 7020 7021 7022 7023 7024 class AddReactionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"reaction\" , \"subject\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) reaction = sgqlc . types . Field ( \"Reaction\" , graphql_name = \"reaction\" ) subject = sgqlc . types . Field ( \"Reactable\" , graphql_name = \"subject\" ) AddStarInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 class AddStarInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"starrable_id\" , \"client_mutation_id\" ) starrable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"starrableId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddStarPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7027 7028 7029 7030 7031 7032 7033 7034 7035 class AddStarPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"starrable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) starrable = sgqlc . types . Field ( \"Starrable\" , graphql_name = \"starrable\" ) AddUpvoteInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2493 2494 2495 2496 2497 2498 2499 2500 2501 class AddUpvoteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddUpvotePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7038 7039 7040 7041 7042 7043 7044 7045 7046 class AddUpvotePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"subject\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) subject = sgqlc . types . Field ( \"Votable\" , graphql_name = \"subject\" ) AddVerifiableDomainInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 class AddVerifiableDomainInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"domain\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) domain = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"domain\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) AddVerifiableDomainPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7049 7050 7051 7052 7053 7054 7055 7056 7057 class AddVerifiableDomainPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"domain\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) domain = sgqlc . types . Field ( \"VerifiableDomain\" , graphql_name = \"domain\" ) AddedToProjectEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21620 21621 21622 21623 21624 21625 21626 21627 21628 21629 21630 21631 class AddedToProjectEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) App Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21634 21635 21636 21637 21638 21639 21640 21641 21642 21643 21644 21645 21646 21647 21648 21649 21650 21651 21652 21653 21654 21655 21656 21657 21658 21659 21660 21661 21662 21663 21664 21665 21666 21667 21668 21669 21670 21671 21672 21673 21674 21675 21676 21677 21678 21679 21680 21681 21682 21683 21684 21685 21686 21687 21688 21689 21690 21691 21692 21693 21694 21695 class App ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"description\" , \"ip_allow_list_entries\" , \"logo_background_color\" , \"logo_url\" , \"name\" , \"slug\" , \"updated_at\" , \"url\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) ip_allow_list_entries = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEntryConnection ), graphql_name = \"ipAllowListEntries\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( IpAllowListEntryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" }, ), ), ) ), ) logo_background_color = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"logoBackgroundColor\" ) logo_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"logoUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) ApproveDeploymentsInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 class ApproveDeploymentsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"workflow_run_id\" , \"environment_ids\" , \"comment\" , \"client_mutation_id\" , ) workflow_run_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"workflowRunId\" ) environment_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"environmentIds\" , ) comment = sgqlc . types . Field ( String , graphql_name = \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ApproveDeploymentsPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7060 7061 7062 7063 7064 7065 7066 7067 7068 7069 7070 7071 class ApproveDeploymentsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deployments\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deployments = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"Deployment\" )), graphql_name = \"deployments\" , ) ApproveVerifiableDomainInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2539 2540 2541 2542 2543 2544 2545 2546 2547 class ApproveVerifiableDomainInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ApproveVerifiableDomainPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7074 7075 7076 7077 7078 7079 7080 7081 7082 class ApproveVerifiableDomainPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"domain\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) domain = sgqlc . types . Field ( \"VerifiableDomain\" , graphql_name = \"domain\" ) ArchiveRepositoryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 class ArchiveRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ArchiveRepositoryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7085 7086 7087 7088 7089 7090 7091 7092 7093 class ArchiveRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) Assignable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7096 7097 7098 7099 7100 7101 7102 7103 7104 7105 7106 7107 7108 7109 7110 7111 7112 7113 7114 7115 7116 7117 class Assignable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignees\" ,) assignees = sgqlc . types . Field ( sgqlc . types . non_null ( \"UserConnection\" ), graphql_name = \"assignees\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) AssignedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21698 21699 21700 21701 21702 21703 21704 21705 21706 21707 21708 21709 21710 21711 21712 21713 class AssignedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"assignable\" , \"assignee\" , \"created_at\" , \"user\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) assignable = sgqlc . types . Field ( sgqlc . types . non_null ( Assignable ), graphql_name = \"assignable\" ) assignee = sgqlc . types . Field ( \"Assignee\" , graphql_name = \"assignee\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) Assignee Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32367 32368 32369 32370 32371 32372 32373 class Assignee ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Bot , Mannequin , Organization , User ) AuditEntry Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7120 7121 7122 7123 7124 7125 7126 7127 7128 7129 7130 7131 7132 7133 7134 7135 7136 7137 7138 7139 7140 7141 7142 7143 7144 7145 7146 7147 7148 7149 7150 7151 7152 7153 7154 7155 class AuditEntry ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"action\" , \"actor\" , \"actor_ip\" , \"actor_location\" , \"actor_login\" , \"actor_resource_path\" , \"actor_url\" , \"created_at\" , \"operation_type\" , \"user\" , \"user_login\" , \"user_resource_path\" , \"user_url\" , ) action = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"action\" ) actor = sgqlc . types . Field ( \"AuditEntryActor\" , graphql_name = \"actor\" ) actor_ip = sgqlc . types . Field ( String , graphql_name = \"actorIp\" ) actor_location = sgqlc . types . Field ( ActorLocation , graphql_name = \"actorLocation\" ) actor_login = sgqlc . types . Field ( String , graphql_name = \"actorLogin\" ) actor_resource_path = sgqlc . types . Field ( URI , graphql_name = \"actorResourcePath\" ) actor_url = sgqlc . types . Field ( URI , graphql_name = \"actorUrl\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( PreciseDateTime ), graphql_name = \"createdAt\" ) operation_type = sgqlc . types . Field ( OperationType , graphql_name = \"operationType\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) user_login = sgqlc . types . Field ( String , graphql_name = \"userLogin\" ) user_resource_path = sgqlc . types . Field ( URI , graphql_name = \"userResourcePath\" ) user_url = sgqlc . types . Field ( URI , graphql_name = \"userUrl\" ) AuditEntryActor Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32376 32377 32378 32379 32380 32381 32382 class AuditEntryActor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Bot , Organization , User ) AuditLogOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2563 2564 2565 2566 2567 2568 2569 2570 2571 class AuditLogOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( AuditLogOrderField , graphql_name = \"field\" ) direction = sgqlc . types . Field ( OrderDirection , graphql_name = \"direction\" ) AuditLogOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25 26 27 28 29 30 31 class AuditLogOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) AutoMergeDisabledEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21716 21717 21718 21719 21720 21721 21722 21723 21724 21725 21726 21727 21728 21729 21730 21731 21732 21733 21734 21735 21736 21737 class AutoMergeDisabledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"disabler\" , \"pull_request\" , \"reason\" , \"reason_code\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) disabler = sgqlc . types . Field ( \"User\" , graphql_name = \"disabler\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) reason = sgqlc . types . Field ( String , graphql_name = \"reason\" ) reason_code = sgqlc . types . Field ( String , graphql_name = \"reasonCode\" ) AutoMergeEnabledEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21740 21741 21742 21743 21744 21745 21746 21747 21748 21749 21750 21751 21752 class AutoMergeEnabledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"enabler\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enabler = sgqlc . types . Field ( \"User\" , graphql_name = \"enabler\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) AutoMergeRequest Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7158 7159 7160 7161 7162 7163 7164 7165 7166 7167 7168 7169 7170 7171 7172 7173 7174 7175 7176 7177 7178 7179 7180 7181 7182 7183 class AutoMergeRequest ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"author_email\" , \"commit_body\" , \"commit_headline\" , \"enabled_at\" , \"enabled_by\" , \"merge_method\" , \"pull_request\" , ) author_email = sgqlc . types . Field ( String , graphql_name = \"authorEmail\" ) commit_body = sgqlc . types . Field ( String , graphql_name = \"commitBody\" ) commit_headline = sgqlc . types . Field ( String , graphql_name = \"commitHeadline\" ) enabled_at = sgqlc . types . Field ( DateTime , graphql_name = \"enabledAt\" ) enabled_by = sgqlc . types . Field ( Actor , graphql_name = \"enabledBy\" ) merge_method = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestMergeMethod ), graphql_name = \"mergeMethod\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) AutoRebaseEnabledEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21755 21756 21757 21758 21759 21760 21761 21762 21763 21764 21765 21766 21767 class AutoRebaseEnabledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"enabler\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enabler = sgqlc . types . Field ( \"User\" , graphql_name = \"enabler\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) AutoSquashEnabledEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21770 21771 21772 21773 21774 21775 21776 21777 21778 21779 21780 21781 21782 class AutoSquashEnabledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"enabler\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enabler = sgqlc . types . Field ( \"User\" , graphql_name = \"enabler\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) AutomaticBaseChangeFailedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21785 21786 21787 21788 21789 21790 21791 21792 21793 21794 21795 21796 21797 21798 21799 21800 class AutomaticBaseChangeFailedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"new_base\" , \"old_base\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) new_base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"newBase\" ) old_base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"oldBase\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) AutomaticBaseChangeSucceededEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21803 21804 21805 21806 21807 21808 21809 21810 21811 21812 21813 21814 21815 21816 21817 21818 class AutomaticBaseChangeSucceededEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"new_base\" , \"old_base\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) new_base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"newBase\" ) old_base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"oldBase\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) Base64String Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 34 35 36 37 38 39 class Base64String ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema BaseRefChangedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21821 21822 21823 21824 21825 21826 21827 21828 21829 21830 21831 21832 21833 21834 21835 21836 21837 21838 21839 21840 21841 21842 21843 21844 21845 21846 21847 21848 class BaseRefChangedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"current_ref_name\" , \"database_id\" , \"previous_ref_name\" , \"pull_request\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) current_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"currentRefName\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) previous_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"previousRefName\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) BaseRefDeletedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21851 21852 21853 21854 21855 21856 21857 21858 21859 21860 21861 21862 21863 class BaseRefDeletedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"base_ref_name\" , \"created_at\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) base_ref_name = sgqlc . types . Field ( String , graphql_name = \"baseRefName\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) BaseRefForcePushedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21866 21867 21868 21869 21870 21871 21872 21873 21874 21875 21876 21877 21878 21879 21880 21881 21882 21883 21884 21885 21886 21887 21888 21889 class BaseRefForcePushedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"after_commit\" , \"before_commit\" , \"created_at\" , \"pull_request\" , \"ref\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) after_commit = sgqlc . types . Field ( \"Commit\" , graphql_name = \"afterCommit\" ) before_commit = sgqlc . types . Field ( \"Commit\" , graphql_name = \"beforeCommit\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) Blame Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7186 7187 7188 7189 7190 7191 7192 7193 7194 7195 7196 class Blame ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ranges\" ,) ranges = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"BlameRange\" ))), graphql_name = \"ranges\" , ) BlameRange Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7199 7200 7201 7202 7203 7204 7205 7206 7207 7208 7209 7210 7211 7212 7213 class BlameRange ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"age\" , \"commit\" , \"ending_line\" , \"starting_line\" ) age = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"age\" ) commit = sgqlc . types . Field ( sgqlc . types . non_null ( \"Commit\" ), graphql_name = \"commit\" ) ending_line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"endingLine\" ) starting_line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"startingLine\" ) Blob Bases: sgqlc . types . Type , GitObject , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21892 21893 21894 21895 21896 21897 21898 21899 21900 21901 21902 21903 21904 class Blob ( sgqlc . types . Type , GitObject , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"byte_size\" , \"is_binary\" , \"is_truncated\" , \"text\" ) byte_size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"byteSize\" ) is_binary = sgqlc . types . Field ( Boolean , graphql_name = \"isBinary\" ) is_truncated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isTruncated\" ) text = sgqlc . types . Field ( String , graphql_name = \"text\" ) Bot Bases: sgqlc . types . Type , Node , Actor , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21907 21908 21909 21910 21911 21912 21913 21914 21915 21916 21917 21918 21919 21920 class Bot ( sgqlc . types . Type , Node , Actor , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"updated_at\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) BranchActorAllowanceActor Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32385 32386 32387 32388 32389 32390 32391 class BranchActorAllowanceActor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Team , User ) BranchProtectionRule Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass BranchProtectionRule ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"allows_deletions\" , \"allows_force_pushes\" , \"blocks_creations\" , \"branch_protection_rule_conflicts\" , \"bypass_force_push_allowances\" , \"bypass_pull_request_allowances\" , \"creator\" , \"database_id\" , \"dismisses_stale_reviews\" , \"is_admin_enforced\" , \"matching_refs\" , \"pattern\" , \"push_allowances\" , \"repository\" , \"required_approving_review_count\" , \"required_status_check_contexts\" , \"required_status_checks\" , \"requires_approving_reviews\" , \"requires_code_owner_reviews\" , \"requires_commit_signatures\" , \"requires_conversation_resolution\" , \"requires_linear_history\" , \"requires_status_checks\" , \"requires_strict_status_checks\" , \"restricts_pushes\" , \"restricts_review_dismissals\" , \"review_dismissal_allowances\" , ) allows_deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowsDeletions\" ) allows_force_pushes = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowsForcePushes\" ) blocks_creations = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"blocksCreations\" ) branch_protection_rule_conflicts = sgqlc . types . Field ( sgqlc . types . non_null ( BranchProtectionRuleConflictConnection ), graphql_name = \"branchProtectionRuleConflicts\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) bypass_force_push_allowances = sgqlc . types . Field ( sgqlc . types . non_null ( BypassForcePushAllowanceConnection ), graphql_name = \"bypassForcePushAllowances\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) bypass_pull_request_allowances = sgqlc . types . Field ( sgqlc . types . non_null ( BypassPullRequestAllowanceConnection ), graphql_name = \"bypassPullRequestAllowances\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) dismisses_stale_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"dismissesStaleReviews\" ) is_admin_enforced = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isAdminEnforced\" ) matching_refs = sgqlc . types . Field ( sgqlc . types . non_null ( RefConnection ), graphql_name = \"matchingRefs\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pattern = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"pattern\" ) push_allowances = sgqlc . types . Field ( sgqlc . types . non_null ( PushAllowanceConnection ), graphql_name = \"pushAllowances\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) required_approving_review_count = sgqlc . types . Field ( Int , graphql_name = \"requiredApprovingReviewCount\" ) required_status_check_contexts = sgqlc . types . Field ( sgqlc . types . list_of ( String ), graphql_name = \"requiredStatusCheckContexts\" ) required_status_checks = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( RequiredStatusCheckDescription )), graphql_name = \"requiredStatusChecks\" , ) requires_approving_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresApprovingReviews\" ) requires_code_owner_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresCodeOwnerReviews\" ) requires_commit_signatures = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresCommitSignatures\" ) requires_conversation_resolution = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresConversationResolution\" ) requires_linear_history = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresLinearHistory\" ) requires_status_checks = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresStatusChecks\" ) requires_strict_status_checks = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresStrictStatusChecks\" ) restricts_pushes = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"restrictsPushes\" ) restricts_review_dismissals = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"restrictsReviewDismissals\" ) review_dismissal_allowances = sgqlc . types . Field ( sgqlc . types . non_null ( ReviewDismissalAllowanceConnection ), graphql_name = \"reviewDismissalAllowances\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) BranchProtectionRuleConflict Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7216 7217 7218 7219 7220 7221 7222 7223 7224 7225 7226 7227 7228 7229 7230 7231 7232 7233 class BranchProtectionRuleConflict ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule\" , \"conflicting_branch_protection_rule\" , \"ref\" , ) branch_protection_rule = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"branchProtectionRule\" ) conflicting_branch_protection_rule = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"conflictingBranchProtectionRule\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) BranchProtectionRuleConflictConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7236 7237 7238 7239 7240 7241 7242 7243 7244 7245 7246 7247 7248 7249 7250 7251 7252 7253 7254 class BranchProtectionRuleConflictConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"BranchProtectionRuleConflictEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( BranchProtectionRuleConflict ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) BranchProtectionRuleConflictEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7257 7258 7259 7260 7261 7262 7263 7264 7265 class BranchProtectionRuleConflictEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( BranchProtectionRuleConflict , graphql_name = \"node\" ) BranchProtectionRuleConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7268 7269 7270 7271 7272 7273 7274 7275 7276 7277 7278 7279 7280 7281 7282 7283 7284 7285 7286 class BranchProtectionRuleConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"BranchProtectionRuleEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"BranchProtectionRule\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) BranchProtectionRuleEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7289 7290 7291 7292 7293 7294 7295 7296 7297 class BranchProtectionRuleEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"node\" ) BypassForcePushAllowance Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22107 22108 22109 22110 22111 22112 22113 22114 22115 22116 22117 class BypassForcePushAllowance ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"branch_protection_rule\" ) actor = sgqlc . types . Field ( \"BranchActorAllowanceActor\" , graphql_name = \"actor\" ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" ) BypassForcePushAllowanceConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7300 7301 7302 7303 7304 7305 7306 7307 7308 7309 7310 7311 7312 7313 7314 7315 7316 7317 7318 class BypassForcePushAllowanceConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"BypassForcePushAllowanceEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"BypassForcePushAllowance\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) BypassForcePushAllowanceEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7321 7322 7323 7324 7325 7326 7327 7328 7329 class BypassForcePushAllowanceEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"BypassForcePushAllowance\" , graphql_name = \"node\" ) BypassPullRequestAllowance Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22120 22121 22122 22123 22124 22125 22126 22127 22128 22129 22130 class BypassPullRequestAllowance ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"branch_protection_rule\" ) actor = sgqlc . types . Field ( \"BranchActorAllowanceActor\" , graphql_name = \"actor\" ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" ) BypassPullRequestAllowanceConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7332 7333 7334 7335 7336 7337 7338 7339 7340 7341 7342 7343 7344 7345 7346 7347 7348 7349 7350 class BypassPullRequestAllowanceConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"BypassPullRequestAllowanceEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"BypassPullRequestAllowance\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) BypassPullRequestAllowanceEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7353 7354 7355 7356 7357 7358 7359 7360 7361 class BypassPullRequestAllowanceEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"BypassPullRequestAllowance\" , graphql_name = \"node\" ) CVSS Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7364 7365 7366 7367 7368 7369 7370 7371 7372 class CVSS ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"score\" , \"vector_string\" ) score = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"score\" ) vector_string = sgqlc . types . Field ( String , graphql_name = \"vectorString\" ) CWE Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22133 22134 22135 22136 22137 22138 22139 22140 22141 22142 22143 22144 class CWE ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cwe_id\" , \"description\" , \"name\" ) cwe_id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cweId\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) CWEConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7375 7376 7377 7378 7379 7380 7381 7382 7383 7384 7385 7386 7387 7388 7389 class CWEConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CWEEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CWE\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CWEEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7392 7393 7394 7395 7396 7397 7398 7399 7400 class CWEEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CWE\" , graphql_name = \"node\" ) CancelEnterpriseAdminInvitationInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 class CancelEnterpriseAdminInvitationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"invitation_id\" , \"client_mutation_id\" ) invitation_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"invitationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CancelEnterpriseAdminInvitationPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7403 7404 7405 7406 7407 7408 7409 7410 7411 7412 7413 7414 class CancelEnterpriseAdminInvitationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"invitation\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) invitation = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"invitation\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) CancelSponsorshipInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 class CancelSponsorshipInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsor_id\" , \"sponsor_login\" , \"sponsorable_id\" , \"sponsorable_login\" , \"client_mutation_id\" , ) sponsor_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorId\" ) sponsor_login = sgqlc . types . Field ( String , graphql_name = \"sponsorLogin\" ) sponsorable_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorableId\" ) sponsorable_login = sgqlc . types . Field ( String , graphql_name = \"sponsorableLogin\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CancelSponsorshipPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7417 7418 7419 7420 7421 7422 7423 7424 7425 class CancelSponsorshipPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"sponsors_tier\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) sponsors_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"sponsorsTier\" ) ChangeUserStatusInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 class ChangeUserStatusInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"emoji\" , \"message\" , \"organization_id\" , \"limited_availability\" , \"expires_at\" , \"client_mutation_id\" , ) emoji = sgqlc . types . Field ( String , graphql_name = \"emoji\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) organization_id = sgqlc . types . Field ( ID , graphql_name = \"organizationId\" ) limited_availability = sgqlc . types . Field ( Boolean , graphql_name = \"limitedAvailability\" ) expires_at = sgqlc . types . Field ( DateTime , graphql_name = \"expiresAt\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ChangeUserStatusPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7428 7429 7430 7431 7432 7433 7434 7435 7436 class ChangeUserStatusPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"status\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) status = sgqlc . types . Field ( \"UserStatus\" , graphql_name = \"status\" ) CheckAnnotation Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7439 7440 7441 7442 7443 7444 7445 7446 7447 7448 7449 7450 7451 7452 7453 7454 7455 7456 7457 7458 7459 7460 7461 7462 7463 7464 7465 7466 class CheckAnnotation ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"annotation_level\" , \"blob_url\" , \"database_id\" , \"location\" , \"message\" , \"path\" , \"raw_details\" , \"title\" , ) annotation_level = sgqlc . types . Field ( CheckAnnotationLevel , graphql_name = \"annotationLevel\" ) blob_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"blobUrl\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) location = sgqlc . types . Field ( sgqlc . types . non_null ( \"CheckAnnotationSpan\" ), graphql_name = \"location\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) raw_details = sgqlc . types . Field ( String , graphql_name = \"rawDetails\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) CheckAnnotationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7469 7470 7471 7472 7473 7474 7475 7476 7477 7478 7479 7480 7481 7482 7483 7484 7485 7486 7487 class CheckAnnotationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckAnnotationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( CheckAnnotation ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CheckAnnotationData Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 class CheckAnnotationData ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"location\" , \"annotation_level\" , \"message\" , \"title\" , \"raw_details\" , ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) location = sgqlc . types . Field ( sgqlc . types . non_null ( \"CheckAnnotationRange\" ), graphql_name = \"location\" ) annotation_level = sgqlc . types . Field ( sgqlc . types . non_null ( CheckAnnotationLevel ), graphql_name = \"annotationLevel\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) raw_details = sgqlc . types . Field ( String , graphql_name = \"rawDetails\" ) CheckAnnotationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7490 7491 7492 7493 7494 7495 7496 7497 7498 class CheckAnnotationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( CheckAnnotation , graphql_name = \"node\" ) CheckAnnotationLevel Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 45 46 47 48 49 50 51 class CheckAnnotationLevel ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FAILURE\" , \"NOTICE\" , \"WARNING\" ) CheckAnnotationPosition Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7501 7502 7503 7504 7505 7506 7507 7508 7509 class CheckAnnotationPosition ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column\" , \"line\" ) column = sgqlc . types . Field ( Int , graphql_name = \"column\" ) line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"line\" ) CheckAnnotationRange Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 class CheckAnnotationRange ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"start_line\" , \"start_column\" , \"end_line\" , \"end_column\" ) start_line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"startLine\" ) start_column = sgqlc . types . Field ( Int , graphql_name = \"startColumn\" ) end_line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"endLine\" ) end_column = sgqlc . types . Field ( Int , graphql_name = \"endColumn\" ) CheckAnnotationSpan Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7512 7513 7514 7515 7516 7517 7518 7519 7520 7521 7522 7523 7524 class CheckAnnotationSpan ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"end\" , \"start\" ) end = sgqlc . types . Field ( sgqlc . types . non_null ( CheckAnnotationPosition ), graphql_name = \"end\" ) start = sgqlc . types . Field ( sgqlc . types . non_null ( CheckAnnotationPosition ), graphql_name = \"start\" ) CheckConclusionState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class CheckConclusionState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTION_REQUIRED\" , \"CANCELLED\" , \"FAILURE\" , \"NEUTRAL\" , \"SKIPPED\" , \"STALE\" , \"STARTUP_FAILURE\" , \"SUCCESS\" , \"TIMED_OUT\" , ) CheckRun Bases: sgqlc . types . Type , Node , UniformResourceLocatable , RequirableByPullRequest See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22147 22148 22149 22150 22151 22152 22153 22154 22155 22156 22157 22158 22159 22160 22161 22162 22163 22164 22165 22166 22167 22168 22169 22170 22171 22172 22173 22174 22175 22176 22177 22178 22179 22180 22181 22182 22183 22184 22185 22186 22187 22188 22189 22190 22191 22192 22193 22194 22195 22196 22197 22198 22199 22200 22201 22202 22203 22204 22205 22206 22207 22208 22209 22210 22211 22212 22213 22214 22215 22216 22217 22218 22219 22220 22221 22222 22223 22224 22225 22226 22227 22228 22229 class CheckRun ( sgqlc . types . Type , Node , UniformResourceLocatable , RequirableByPullRequest ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"annotations\" , \"check_suite\" , \"completed_at\" , \"conclusion\" , \"database_id\" , \"deployment\" , \"details_url\" , \"external_id\" , \"name\" , \"pending_deployment_request\" , \"permalink\" , \"repository\" , \"started_at\" , \"status\" , \"steps\" , \"summary\" , \"text\" , \"title\" , ) annotations = sgqlc . types . Field ( CheckAnnotationConnection , graphql_name = \"annotations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) check_suite = sgqlc . types . Field ( sgqlc . types . non_null ( \"CheckSuite\" ), graphql_name = \"checkSuite\" ) completed_at = sgqlc . types . Field ( DateTime , graphql_name = \"completedAt\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) deployment = sgqlc . types . Field ( \"Deployment\" , graphql_name = \"deployment\" ) details_url = sgqlc . types . Field ( URI , graphql_name = \"detailsUrl\" ) external_id = sgqlc . types . Field ( String , graphql_name = \"externalId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) pending_deployment_request = sgqlc . types . Field ( DeploymentRequest , graphql_name = \"pendingDeploymentRequest\" ) permalink = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"permalink\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) started_at = sgqlc . types . Field ( DateTime , graphql_name = \"startedAt\" ) status = sgqlc . types . Field ( sgqlc . types . non_null ( CheckStatusState ), graphql_name = \"status\" ) steps = sgqlc . types . Field ( CheckStepConnection , graphql_name = \"steps\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"number\" , sgqlc . types . Arg ( Int , graphql_name = \"number\" , default = None )), ) ), ) summary = sgqlc . types . Field ( String , graphql_name = \"summary\" ) text = sgqlc . types . Field ( String , graphql_name = \"text\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) CheckRunAction Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 class CheckRunAction ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"label\" , \"description\" , \"identifier\" ) label = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"label\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) identifier = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"identifier\" ) CheckRunConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7527 7528 7529 7530 7531 7532 7533 7534 7535 7536 7537 7538 7539 7540 7541 class CheckRunConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckRunEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckRun\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CheckRunEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7544 7545 7546 7547 7548 7549 7550 7551 7552 class CheckRunEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CheckRun\" , graphql_name = \"node\" ) CheckRunFilter Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 class CheckRunFilter ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_type\" , \"app_id\" , \"check_name\" , \"status\" , \"statuses\" , \"conclusions\" , ) check_type = sgqlc . types . Field ( CheckRunType , graphql_name = \"checkType\" ) app_id = sgqlc . types . Field ( Int , graphql_name = \"appId\" ) check_name = sgqlc . types . Field ( String , graphql_name = \"checkName\" ) status = sgqlc . types . Field ( CheckStatusState , graphql_name = \"status\" ) statuses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckStatusState )), graphql_name = \"statuses\" , ) conclusions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckConclusionState )), graphql_name = \"conclusions\" , ) CheckRunOutput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 class CheckRunOutput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"title\" , \"summary\" , \"text\" , \"annotations\" , \"images\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) summary = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"summary\" ) text = sgqlc . types . Field ( String , graphql_name = \"text\" ) annotations = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckAnnotationData )), graphql_name = \"annotations\" , ) images = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"CheckRunOutputImage\" )), graphql_name = \"images\" , ) CheckRunOutputImage Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 class CheckRunOutputImage ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"alt\" , \"image_url\" , \"caption\" ) alt = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"alt\" ) image_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"imageUrl\" ) caption = sgqlc . types . Field ( String , graphql_name = \"caption\" ) CheckRunState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class CheckRunState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTION_REQUIRED\" , \"CANCELLED\" , \"COMPLETED\" , \"FAILURE\" , \"IN_PROGRESS\" , \"NEUTRAL\" , \"PENDING\" , \"QUEUED\" , \"SKIPPED\" , \"STALE\" , \"STARTUP_FAILURE\" , \"SUCCESS\" , \"TIMED_OUT\" , \"WAITING\" , ) CheckRunStateCount Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7555 7556 7557 7558 7559 7560 7561 7562 7563 class CheckRunStateCount ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"count\" , \"state\" ) count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"count\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( CheckRunState ), graphql_name = \"state\" ) CheckRunType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 97 98 99 100 101 102 103 class CheckRunType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"LATEST\" ) CheckStatusState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class CheckStatusState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMPLETED\" , \"IN_PROGRESS\" , \"PENDING\" , \"QUEUED\" , \"REQUESTED\" , \"WAITING\" , ) CheckStep Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7566 7567 7568 7569 7570 7571 7572 7573 7574 7575 7576 7577 7578 7579 7580 7581 7582 7583 7584 7585 7586 7587 7588 7589 7590 7591 class CheckStep ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"completed_at\" , \"conclusion\" , \"external_id\" , \"name\" , \"number\" , \"seconds_to_completion\" , \"started_at\" , \"status\" , ) completed_at = sgqlc . types . Field ( DateTime , graphql_name = \"completedAt\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) external_id = sgqlc . types . Field ( String , graphql_name = \"externalId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) seconds_to_completion = sgqlc . types . Field ( Int , graphql_name = \"secondsToCompletion\" ) started_at = sgqlc . types . Field ( DateTime , graphql_name = \"startedAt\" ) status = sgqlc . types . Field ( sgqlc . types . non_null ( CheckStatusState ), graphql_name = \"status\" ) CheckStepConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7594 7595 7596 7597 7598 7599 7600 7601 7602 7603 7604 7605 7606 7607 7608 7609 7610 class CheckStepConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckStepEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( CheckStep ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CheckStepEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7613 7614 7615 7616 7617 7618 7619 7620 7621 class CheckStepEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( CheckStep , graphql_name = \"node\" ) CheckSuite Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22232 22233 22234 22235 22236 22237 22238 22239 22240 22241 22242 22243 22244 22245 22246 22247 22248 22249 22250 22251 22252 22253 22254 22255 22256 22257 22258 22259 22260 22261 22262 22263 22264 22265 22266 22267 22268 22269 22270 22271 22272 22273 22274 22275 22276 22277 22278 22279 22280 22281 22282 22283 22284 22285 22286 22287 22288 22289 22290 22291 22292 22293 22294 22295 22296 22297 22298 22299 22300 22301 22302 22303 22304 22305 22306 22307 22308 22309 22310 22311 22312 22313 22314 22315 22316 22317 22318 22319 22320 22321 22322 22323 22324 22325 22326 22327 22328 22329 22330 22331 22332 22333 22334 22335 22336 22337 22338 22339 22340 22341 22342 22343 class CheckSuite ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app\" , \"branch\" , \"check_runs\" , \"commit\" , \"conclusion\" , \"created_at\" , \"creator\" , \"database_id\" , \"matching_pull_requests\" , \"push\" , \"repository\" , \"resource_path\" , \"status\" , \"updated_at\" , \"url\" , \"workflow_run\" , ) app = sgqlc . types . Field ( App , graphql_name = \"app\" ) branch = sgqlc . types . Field ( \"Ref\" , graphql_name = \"branch\" ) check_runs = sgqlc . types . Field ( CheckRunConnection , graphql_name = \"checkRuns\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"filter_by\" , sgqlc . types . Arg ( CheckRunFilter , graphql_name = \"filterBy\" , default = None ), ), ) ), ) commit = sgqlc . types . Field ( sgqlc . types . non_null ( \"Commit\" ), graphql_name = \"commit\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( \"User\" , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) matching_pull_requests = sgqlc . types . Field ( PullRequestConnection , graphql_name = \"matchingPullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) push = sgqlc . types . Field ( \"Push\" , graphql_name = \"push\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) status = sgqlc . types . Field ( sgqlc . types . non_null ( CheckStatusState ), graphql_name = \"status\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) workflow_run = sgqlc . types . Field ( \"WorkflowRun\" , graphql_name = \"workflowRun\" ) CheckSuiteAutoTriggerPreference Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2746 2747 2748 2749 2750 2751 2752 2753 2754 class CheckSuiteAutoTriggerPreference ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app_id\" , \"setting\" ) app_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"appId\" ) setting = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"setting\" ) CheckSuiteConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7624 7625 7626 7627 7628 7629 7630 7631 7632 7633 7634 7635 7636 7637 7638 7639 7640 class CheckSuiteConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckSuiteEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckSuite\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CheckSuiteEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7643 7644 7645 7646 7647 7648 7649 7650 7651 class CheckSuiteEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CheckSuite\" , graphql_name = \"node\" ) CheckSuiteFilter Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2757 2758 2759 2760 2761 2762 2763 2764 2765 class CheckSuiteFilter ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app_id\" , \"check_name\" ) app_id = sgqlc . types . Field ( Int , graphql_name = \"appId\" ) check_name = sgqlc . types . Field ( String , graphql_name = \"checkName\" ) ClearLabelsFromLabelableInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 class ClearLabelsFromLabelableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"labelable_id\" , \"client_mutation_id\" ) labelable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"labelableId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ClearLabelsFromLabelablePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7654 7655 7656 7657 7658 7659 7660 7661 7662 class ClearLabelsFromLabelablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"labelable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) labelable = sgqlc . types . Field ( \"Labelable\" , graphql_name = \"labelable\" ) ClearProjectV2ItemFieldValueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 class ClearProjectV2ItemFieldValueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"field_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"itemId\" ) field_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"fieldId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ClearProjectV2ItemFieldValuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7665 7666 7667 7668 7669 7670 7671 7672 7673 class ClearProjectV2ItemFieldValuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_v2_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_v2_item = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"projectV2Item\" ) CloneProjectInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 class CloneProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"target_owner_id\" , \"source_id\" , \"include_workflows\" , \"name\" , \"body\" , \"public\" , \"client_mutation_id\" , ) target_owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"targetOwnerId\" ) source_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"sourceId\" ) include_workflows = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"includeWorkflows\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) public = sgqlc . types . Field ( Boolean , graphql_name = \"public\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CloneProjectPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7676 7677 7678 7679 7680 7681 7682 7683 7684 7685 class CloneProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"job_status_id\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) job_status_id = sgqlc . types . Field ( String , graphql_name = \"jobStatusId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) CloneTemplateRepositoryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 class CloneTemplateRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"owner_id\" , \"description\" , \"visibility\" , \"include_all_branches\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) visibility = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryVisibility ), graphql_name = \"visibility\" ) include_all_branches = sgqlc . types . Field ( Boolean , graphql_name = \"includeAllBranches\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CloneTemplateRepositoryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7688 7689 7690 7691 7692 7693 7694 7695 7696 class CloneTemplateRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) Closable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7699 7700 7701 7702 7703 7704 7705 7706 7707 class Closable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"closed\" , \"closed_at\" ) closed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"closed\" ) closed_at = sgqlc . types . Field ( DateTime , graphql_name = \"closedAt\" ) CloseIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 class CloseIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"state_reason\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) state_reason = sgqlc . types . Field ( IssueClosedStateReason , graphql_name = \"stateReason\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CloseIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7710 7711 7712 7713 7714 7715 7716 7717 7718 class CloseIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" ) ClosePullRequestInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 class ClosePullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ClosePullRequestPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7721 7722 7723 7724 7725 7726 7727 7728 7729 class ClosePullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) ClosedEvent Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22346 22347 22348 22349 22350 22351 22352 22353 22354 22355 22356 22357 22358 22359 22360 22361 class ClosedEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"closable\" , \"closer\" , \"created_at\" , \"state_reason\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) closable = sgqlc . types . Field ( sgqlc . types . non_null ( Closable ), graphql_name = \"closable\" ) closer = sgqlc . types . Field ( \"Closer\" , graphql_name = \"closer\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) state_reason = sgqlc . types . Field ( IssueStateReason , graphql_name = \"stateReason\" ) Closer Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32394 32395 32396 32397 32398 32399 32400 class Closer ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Commit , PullRequest ) CodeOfConduct Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22364 22365 22366 22367 22368 22369 22370 22371 22372 22373 22374 22375 class CodeOfConduct ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"key\" , \"name\" , \"resource_path\" , \"url\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) resource_path = sgqlc . types . Field ( URI , graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( URI , graphql_name = \"url\" ) CollaboratorAffiliation Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 122 123 124 125 126 127 128 class CollaboratorAffiliation ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"DIRECT\" , \"OUTSIDE\" ) Comment Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7732 7733 7734 7735 7736 7737 7738 7739 7740 7741 7742 7743 7744 7745 7746 7747 7748 7749 7750 7751 7752 7753 7754 7755 7756 7757 7758 7759 7760 7761 7762 7763 7764 7765 7766 7767 7768 7769 7770 7771 7772 7773 7774 7775 7776 7777 7778 7779 7780 7781 7782 7783 7784 7785 7786 7787 7788 7789 7790 7791 7792 7793 7794 7795 class Comment ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"author\" , \"author_association\" , \"body\" , \"body_html\" , \"body_text\" , \"created_at\" , \"created_via_email\" , \"editor\" , \"id\" , \"includes_created_edit\" , \"last_edited_at\" , \"published_at\" , \"updated_at\" , \"user_content_edits\" , \"viewer_did_author\" , ) author = sgqlc . types . Field ( Actor , graphql_name = \"author\" ) author_association = sgqlc . types . Field ( sgqlc . types . non_null ( CommentAuthorAssociation ), graphql_name = \"authorAssociation\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bodyHTML\" ) body_text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"bodyText\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) created_via_email = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"createdViaEmail\" ) editor = sgqlc . types . Field ( Actor , graphql_name = \"editor\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) includes_created_edit = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"includesCreatedEdit\" ) last_edited_at = sgqlc . types . Field ( DateTime , graphql_name = \"lastEditedAt\" ) published_at = sgqlc . types . Field ( DateTime , graphql_name = \"publishedAt\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user_content_edits = sgqlc . types . Field ( \"UserContentEditConnection\" , graphql_name = \"userContentEdits\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) viewer_did_author = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerDidAuthor\" ) CommentAuthorAssociation Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 class CommentAuthorAssociation ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COLLABORATOR\" , \"CONTRIBUTOR\" , \"FIRST_TIMER\" , \"FIRST_TIME_CONTRIBUTOR\" , \"MANNEQUIN\" , \"MEMBER\" , \"NONE\" , \"OWNER\" , ) CommentCannotUpdateReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 class CommentCannotUpdateReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ARCHIVED\" , \"DENIED\" , \"INSUFFICIENT_ACCESS\" , \"LOCKED\" , \"LOGIN_REQUIRED\" , \"MAINTENANCE\" , \"VERIFIED_EMAIL_REQUIRED\" , ) CommentDeletedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22378 22379 22380 22381 22382 22383 22384 22385 22386 22387 22388 22389 22390 22391 22392 class CommentDeletedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" , \"deleted_comment_author\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) deleted_comment_author = sgqlc . types . Field ( Actor , graphql_name = \"deletedCommentAuthor\" ) Commit Bases: sgqlc . types . Type , Node , GitObject , Subscribable , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Commit ( sgqlc . types . Type , Node , GitObject , Subscribable , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"additions\" , \"associated_pull_requests\" , \"author\" , \"authored_by_committer\" , \"authored_date\" , \"authors\" , \"blame\" , \"changed_files\" , \"changed_files_if_available\" , \"check_suites\" , \"comments\" , \"committed_date\" , \"committed_via_web\" , \"committer\" , \"deletions\" , \"deployments\" , \"file\" , \"history\" , \"message\" , \"message_body\" , \"message_body_html\" , \"message_headline\" , \"message_headline_html\" , \"on_behalf_of\" , \"parents\" , \"pushed_date\" , \"signature\" , \"status\" , \"status_check_rollup\" , \"submodules\" , \"tarball_url\" , \"tree\" , \"tree_resource_path\" , \"tree_url\" , \"zipball_url\" , ) additions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"additions\" ) associated_pull_requests = sgqlc . types . Field ( PullRequestConnection , graphql_name = \"associatedPullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( PullRequestOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ) ), ) author = sgqlc . types . Field ( GitActor , graphql_name = \"author\" ) authored_by_committer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"authoredByCommitter\" ) authored_date = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"authoredDate\" ) authors = sgqlc . types . Field ( sgqlc . types . non_null ( GitActorConnection ), graphql_name = \"authors\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) blame = sgqlc . types . Field ( sgqlc . types . non_null ( Blame ), graphql_name = \"blame\" , args = sgqlc . types . ArgDict ( ( ( \"path\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"path\" , default = None ), ), ) ), ) changed_files = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"changedFiles\" ) changed_files_if_available = sgqlc . types . Field ( Int , graphql_name = \"changedFilesIfAvailable\" ) check_suites = sgqlc . types . Field ( CheckSuiteConnection , graphql_name = \"checkSuites\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"filter_by\" , sgqlc . types . Arg ( CheckSuiteFilter , graphql_name = \"filterBy\" , default = None ), ), ) ), ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) committed_date = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"committedDate\" ) committed_via_web = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"committedViaWeb\" ) committer = sgqlc . types . Field ( GitActor , graphql_name = \"committer\" ) deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"deletions\" ) deployments = sgqlc . types . Field ( DeploymentConnection , graphql_name = \"deployments\" , args = sgqlc . types . ArgDict ( ( ( \"environments\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"environments\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( DeploymentOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) file = sgqlc . types . Field ( TreeEntry , graphql_name = \"file\" , args = sgqlc . types . ArgDict ( ( ( \"path\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"path\" , default = None ), ), ) ), ) history = sgqlc . types . Field ( sgqlc . types . non_null ( CommitHistoryConnection ), graphql_name = \"history\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"path\" , sgqlc . types . Arg ( String , graphql_name = \"path\" , default = None )), ( \"author\" , sgqlc . types . Arg ( CommitAuthor , graphql_name = \"author\" , default = None ), ), ( \"since\" , sgqlc . types . Arg ( GitTimestamp , graphql_name = \"since\" , default = None ), ), ( \"until\" , sgqlc . types . Arg ( GitTimestamp , graphql_name = \"until\" , default = None ), ), ) ), ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) message_body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"messageBody\" ) message_body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"messageBodyHTML\" ) message_headline = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"messageHeadline\" ) message_headline_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"messageHeadlineHTML\" ) on_behalf_of = sgqlc . types . Field ( \"Organization\" , graphql_name = \"onBehalfOf\" ) parents = sgqlc . types . Field ( sgqlc . types . non_null ( CommitConnection ), graphql_name = \"parents\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pushed_date = sgqlc . types . Field ( DateTime , graphql_name = \"pushedDate\" ) signature = sgqlc . types . Field ( GitSignature , graphql_name = \"signature\" ) status = sgqlc . types . Field ( \"Status\" , graphql_name = \"status\" ) status_check_rollup = sgqlc . types . Field ( \"StatusCheckRollup\" , graphql_name = \"statusCheckRollup\" ) submodules = sgqlc . types . Field ( sgqlc . types . non_null ( SubmoduleConnection ), graphql_name = \"submodules\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) tarball_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"tarballUrl\" ) tree = sgqlc . types . Field ( sgqlc . types . non_null ( \"Tree\" ), graphql_name = \"tree\" ) tree_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"treeResourcePath\" ) tree_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"treeUrl\" ) zipball_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"zipballUrl\" ) CommitAuthor Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 class CommitAuthor ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"emails\" ) id = sgqlc . types . Field ( ID , graphql_name = \"id\" ) emails = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"emails\" ) CommitComment Bases: sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22684 22685 22686 22687 22688 22689 22690 22691 22692 22693 22694 22695 22696 22697 22698 22699 22700 22701 22702 22703 22704 22705 22706 22707 class CommitComment ( sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"path\" , \"position\" , \"resource_path\" , \"url\" ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) CommitCommentConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7798 7799 7800 7801 7802 7803 7804 7805 7806 7807 7808 7809 7810 7811 7812 7813 7814 7815 7816 class CommitCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CommitCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CommitComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CommitCommentEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7819 7820 7821 7822 7823 7824 7825 7826 7827 class CommitCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CommitComment\" , graphql_name = \"node\" ) CommitCommentThread Bases: sgqlc . types . Type , Node , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22710 22711 22712 22713 22714 22715 22716 22717 22718 22719 22720 22721 22722 22723 22724 22725 22726 22727 22728 22729 22730 22731 22732 22733 22734 class CommitCommentThread ( sgqlc . types . Type , Node , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"commit\" , \"path\" , \"position\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) CommitConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7830 7831 7832 7833 7834 7835 7836 7837 7838 7839 7840 7841 7842 7843 7844 class CommitConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CommitEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Commit\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CommitContributionOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 class CommitContributionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( CommitContributionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) CommitContributionOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 166 167 168 169 170 171 172 class CommitContributionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMIT_COUNT\" , \"OCCURRED_AT\" ) CommitContributionsByRepository Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7847 7848 7849 7850 7851 7852 7853 7854 7855 7856 7857 7858 7859 7860 7861 7862 7863 7864 7865 7866 7867 7868 7869 7870 7871 7872 7873 7874 7875 7876 7877 7878 7879 7880 7881 7882 7883 class CommitContributionsByRepository ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contributions\" , \"repository\" , \"resource_path\" , \"url\" ) contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedCommitContributionConnection\" ), graphql_name = \"contributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( CommitContributionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"OCCURRED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) CommitEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7886 7887 7888 7889 7890 7891 7892 7893 7894 class CommitEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Commit\" , graphql_name = \"node\" ) CommitHistoryConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7897 7898 7899 7900 7901 7902 7903 7904 7905 7906 7907 7908 7909 7910 7911 class CommitHistoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( CommitEdge ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Commit\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CommitMessage Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2903 2904 2905 2906 2907 2908 2909 2910 2911 class CommitMessage ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"headline\" , \"body\" ) headline = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"headline\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) CommittableBranch Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 class CommittableBranch ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"repository_name_with_owner\" , \"branch_name\" ) id = sgqlc . types . Field ( ID , graphql_name = \"id\" ) repository_name_with_owner = sgqlc . types . Field ( String , graphql_name = \"repositoryNameWithOwner\" ) branch_name = sgqlc . types . Field ( String , graphql_name = \"branchName\" ) ConnectedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22737 22738 22739 22740 22741 22742 22743 22744 22745 22746 22747 22748 22749 22750 22751 22752 22753 22754 22755 22756 22757 22758 22759 22760 22761 22762 class ConnectedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"is_cross_repository\" , \"source\" , \"subject\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) source = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"source\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"subject\" ) Contribution Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7914 7915 7916 7917 7918 7919 7920 7921 7922 7923 7924 7925 7926 7927 7928 7929 7930 7931 class Contribution ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_restricted\" , \"occurred_at\" , \"resource_path\" , \"url\" , \"user\" ) is_restricted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isRestricted\" ) occurred_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"occurredAt\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) user = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"user\" ) ContributionCalendar Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7934 7935 7936 7937 7938 7939 7940 7941 7942 7943 7944 7945 7946 7947 7948 7949 7950 7951 7952 7953 7954 7955 7956 7957 7958 7959 7960 7961 7962 7963 7964 7965 7966 7967 7968 class ContributionCalendar ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"colors\" , \"is_halloween\" , \"months\" , \"total_contributions\" , \"weeks\" , ) colors = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"colors\" , ) is_halloween = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isHalloween\" ) months = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ContributionCalendarMonth\" )) ), graphql_name = \"months\" , ) total_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalContributions\" ) weeks = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ContributionCalendarWeek\" )) ), graphql_name = \"weeks\" , ) ContributionCalendarDay Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7971 7972 7973 7974 7975 7976 7977 7978 7979 7980 7981 7982 7983 7984 7985 7986 7987 7988 7989 7990 7991 7992 class ContributionCalendarDay ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"color\" , \"contribution_count\" , \"contribution_level\" , \"date\" , \"weekday\" , ) color = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"color\" ) contribution_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"contributionCount\" ) contribution_level = sgqlc . types . Field ( sgqlc . types . non_null ( ContributionLevel ), graphql_name = \"contributionLevel\" ) date = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"date\" ) weekday = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"weekday\" ) ContributionCalendarMonth Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7995 7996 7997 7998 7999 8000 8001 8002 8003 8004 8005 8006 8007 class ContributionCalendarMonth ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"first_day\" , \"name\" , \"total_weeks\" , \"year\" ) first_day = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"firstDay\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) total_weeks = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalWeeks\" ) year = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"year\" ) ContributionCalendarWeek Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8010 8011 8012 8013 8014 8015 8016 8017 8018 8019 8020 8021 8022 8023 class ContributionCalendarWeek ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contribution_days\" , \"first_day\" ) contribution_days = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ContributionCalendarDay )) ), graphql_name = \"contributionDays\" , ) first_day = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"firstDay\" ) ContributionLevel Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 175 176 177 178 179 180 181 182 183 184 185 186 187 class ContributionLevel ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FIRST_QUARTILE\" , \"FOURTH_QUARTILE\" , \"NONE\" , \"SECOND_QUARTILE\" , \"THIRD_QUARTILE\" , ) ContributionOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 class ContributionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"direction\" ,) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ContributionsCollection Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ContributionsCollection ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit_contributions_by_repository\" , \"contribution_calendar\" , \"contribution_years\" , \"does_end_in_current_month\" , \"earliest_restricted_contribution_date\" , \"ended_at\" , \"first_issue_contribution\" , \"first_pull_request_contribution\" , \"first_repository_contribution\" , \"has_activity_in_the_past\" , \"has_any_contributions\" , \"has_any_restricted_contributions\" , \"is_single_day\" , \"issue_contributions\" , \"issue_contributions_by_repository\" , \"joined_git_hub_contribution\" , \"latest_restricted_contribution_date\" , \"most_recent_collection_with_activity\" , \"most_recent_collection_without_activity\" , \"popular_issue_contribution\" , \"popular_pull_request_contribution\" , \"pull_request_contributions\" , \"pull_request_contributions_by_repository\" , \"pull_request_review_contributions\" , \"pull_request_review_contributions_by_repository\" , \"repository_contributions\" , \"restricted_contributions_count\" , \"started_at\" , \"total_commit_contributions\" , \"total_issue_contributions\" , \"total_pull_request_contributions\" , \"total_pull_request_review_contributions\" , \"total_repositories_with_contributed_commits\" , \"total_repositories_with_contributed_issues\" , \"total_repositories_with_contributed_pull_request_reviews\" , \"total_repositories_with_contributed_pull_requests\" , \"total_repository_contributions\" , \"user\" , ) commit_contributions_by_repository = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( CommitContributionsByRepository )) ), graphql_name = \"commitContributionsByRepository\" , args = sgqlc . types . ArgDict ( ( ( \"max_repositories\" , sgqlc . types . Arg ( Int , graphql_name = \"maxRepositories\" , default = 25 ), ), ) ), ) contribution_calendar = sgqlc . types . Field ( sgqlc . types . non_null ( ContributionCalendar ), graphql_name = \"contributionCalendar\" ) contribution_years = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( Int ))), graphql_name = \"contributionYears\" , ) does_end_in_current_month = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"doesEndInCurrentMonth\" ) earliest_restricted_contribution_date = sgqlc . types . Field ( Date , graphql_name = \"earliestRestrictedContributionDate\" ) ended_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"endedAt\" ) first_issue_contribution = sgqlc . types . Field ( \"CreatedIssueOrRestrictedContribution\" , graphql_name = \"firstIssueContribution\" ) first_pull_request_contribution = sgqlc . types . Field ( \"CreatedPullRequestOrRestrictedContribution\" , graphql_name = \"firstPullRequestContribution\" , ) first_repository_contribution = sgqlc . types . Field ( \"CreatedRepositoryOrRestrictedContribution\" , graphql_name = \"firstRepositoryContribution\" , ) has_activity_in_the_past = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasActivityInThePast\" ) has_any_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasAnyContributions\" ) has_any_restricted_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasAnyRestrictedContributions\" ) is_single_day = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSingleDay\" ) issue_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedIssueContributionConnection\" ), graphql_name = \"issueContributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) issue_contributions_by_repository = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"IssueContributionsByRepository\" )) ), graphql_name = \"issueContributionsByRepository\" , args = sgqlc . types . ArgDict ( ( ( \"max_repositories\" , sgqlc . types . Arg ( Int , graphql_name = \"maxRepositories\" , default = 25 ), ), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) joined_git_hub_contribution = sgqlc . types . Field ( \"JoinedGitHubContribution\" , graphql_name = \"joinedGitHubContribution\" ) latest_restricted_contribution_date = sgqlc . types . Field ( Date , graphql_name = \"latestRestrictedContributionDate\" ) most_recent_collection_with_activity = sgqlc . types . Field ( \"ContributionsCollection\" , graphql_name = \"mostRecentCollectionWithActivity\" ) most_recent_collection_without_activity = sgqlc . types . Field ( \"ContributionsCollection\" , graphql_name = \"mostRecentCollectionWithoutActivity\" ) popular_issue_contribution = sgqlc . types . Field ( \"CreatedIssueContribution\" , graphql_name = \"popularIssueContribution\" ) popular_pull_request_contribution = sgqlc . types . Field ( \"CreatedPullRequestContribution\" , graphql_name = \"popularPullRequestContribution\" ) pull_request_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedPullRequestContributionConnection\" ), graphql_name = \"pullRequestContributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) pull_request_contributions_by_repository = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"PullRequestContributionsByRepository\" ) ) ), graphql_name = \"pullRequestContributionsByRepository\" , args = sgqlc . types . ArgDict ( ( ( \"max_repositories\" , sgqlc . types . Arg ( Int , graphql_name = \"maxRepositories\" , default = 25 ), ), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) pull_request_review_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedPullRequestReviewContributionConnection\" ), graphql_name = \"pullRequestReviewContributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) pull_request_review_contributions_by_repository = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"PullRequestReviewContributionsByRepository\" ) ) ), graphql_name = \"pullRequestReviewContributionsByRepository\" , args = sgqlc . types . ArgDict ( ( ( \"max_repositories\" , sgqlc . types . Arg ( Int , graphql_name = \"maxRepositories\" , default = 25 ), ), ) ), ) repository_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedRepositoryContributionConnection\" ), graphql_name = \"repositoryContributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) restricted_contributions_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"restrictedContributionsCount\" ) started_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"startedAt\" ) total_commit_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCommitContributions\" ) total_issue_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalIssueContributions\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) total_pull_request_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalPullRequestContributions\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) total_pull_request_review_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalPullRequestReviewContributions\" ) total_repositories_with_contributed_commits = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoriesWithContributedCommits\" , ) total_repositories_with_contributed_issues = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoriesWithContributedIssues\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) total_repositories_with_contributed_pull_request_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoriesWithContributedPullRequestReviews\" , ) total_repositories_with_contributed_pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoriesWithContributedPullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) total_repository_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoryContributions\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ) ), ) user = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"user\" ) ConvertProjectCardNoteToIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 class ConvertProjectCardNoteToIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_card_id\" , \"repository_id\" , \"title\" , \"body\" , \"client_mutation_id\" , ) project_card_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectCardId\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ConvertProjectCardNoteToIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8450 8451 8452 8453 8454 8455 8456 8457 8458 class ConvertProjectCardNoteToIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_card\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_card = sgqlc . types . Field ( \"ProjectCard\" , graphql_name = \"projectCard\" ) ConvertPullRequestToDraftInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 class ConvertPullRequestToDraftInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ConvertPullRequestToDraftPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8461 8462 8463 8464 8465 8466 8467 8468 8469 class ConvertPullRequestToDraftPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) ConvertToDraftEvent Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22765 22766 22767 22768 22769 22770 22771 22772 22773 22774 22775 22776 22777 22778 class ConvertToDraftEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) ConvertedNoteToIssueEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22781 22782 22783 22784 22785 22786 22787 22788 22789 22790 22791 22792 class ConvertedNoteToIssueEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) ConvertedToDiscussionEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22795 22796 22797 22798 22799 22800 22801 22802 22803 22804 22805 22806 class ConvertedToDiscussionEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"discussion\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" ) CreateBranchProtectionRuleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 class CreateBranchProtectionRuleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"pattern\" , \"requires_approving_reviews\" , \"required_approving_review_count\" , \"requires_commit_signatures\" , \"requires_linear_history\" , \"blocks_creations\" , \"allows_force_pushes\" , \"allows_deletions\" , \"is_admin_enforced\" , \"requires_status_checks\" , \"requires_strict_status_checks\" , \"requires_code_owner_reviews\" , \"dismisses_stale_reviews\" , \"restricts_review_dismissals\" , \"review_dismissal_actor_ids\" , \"bypass_pull_request_actor_ids\" , \"bypass_force_push_actor_ids\" , \"restricts_pushes\" , \"push_actor_ids\" , \"required_status_check_contexts\" , \"required_status_checks\" , \"requires_conversation_resolution\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) pattern = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"pattern\" ) requires_approving_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"requiresApprovingReviews\" ) required_approving_review_count = sgqlc . types . Field ( Int , graphql_name = \"requiredApprovingReviewCount\" ) requires_commit_signatures = sgqlc . types . Field ( Boolean , graphql_name = \"requiresCommitSignatures\" ) requires_linear_history = sgqlc . types . Field ( Boolean , graphql_name = \"requiresLinearHistory\" ) blocks_creations = sgqlc . types . Field ( Boolean , graphql_name = \"blocksCreations\" ) allows_force_pushes = sgqlc . types . Field ( Boolean , graphql_name = \"allowsForcePushes\" ) allows_deletions = sgqlc . types . Field ( Boolean , graphql_name = \"allowsDeletions\" ) is_admin_enforced = sgqlc . types . Field ( Boolean , graphql_name = \"isAdminEnforced\" ) requires_status_checks = sgqlc . types . Field ( Boolean , graphql_name = \"requiresStatusChecks\" ) requires_strict_status_checks = sgqlc . types . Field ( Boolean , graphql_name = \"requiresStrictStatusChecks\" ) requires_code_owner_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"requiresCodeOwnerReviews\" ) dismisses_stale_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"dismissesStaleReviews\" ) restricts_review_dismissals = sgqlc . types . Field ( Boolean , graphql_name = \"restrictsReviewDismissals\" ) review_dismissal_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"reviewDismissalActorIds\" , ) bypass_pull_request_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"bypassPullRequestActorIds\" , ) bypass_force_push_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"bypassForcePushActorIds\" , ) restricts_pushes = sgqlc . types . Field ( Boolean , graphql_name = \"restrictsPushes\" ) push_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"pushActorIds\" ) required_status_check_contexts = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"requiredStatusCheckContexts\" , ) required_status_checks = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"RequiredStatusCheckInput\" )), graphql_name = \"requiredStatusChecks\" , ) requires_conversation_resolution = sgqlc . types . Field ( Boolean , graphql_name = \"requiresConversationResolution\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateBranchProtectionRulePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8472 8473 8474 8475 8476 8477 8478 8479 8480 8481 8482 class CreateBranchProtectionRulePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule\" , \"client_mutation_id\" ) branch_protection_rule = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"branchProtectionRule\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateCheckRunInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 class CreateCheckRunInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"head_sha\" , \"details_url\" , \"external_id\" , \"status\" , \"started_at\" , \"conclusion\" , \"completed_at\" , \"output\" , \"actions\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) head_sha = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"headSha\" ) details_url = sgqlc . types . Field ( URI , graphql_name = \"detailsUrl\" ) external_id = sgqlc . types . Field ( String , graphql_name = \"externalId\" ) status = sgqlc . types . Field ( RequestableCheckStatusState , graphql_name = \"status\" ) started_at = sgqlc . types . Field ( DateTime , graphql_name = \"startedAt\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) completed_at = sgqlc . types . Field ( DateTime , graphql_name = \"completedAt\" ) output = sgqlc . types . Field ( CheckRunOutput , graphql_name = \"output\" ) actions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckRunAction )), graphql_name = \"actions\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateCheckRunPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8485 8486 8487 8488 8489 8490 8491 8492 8493 class CreateCheckRunPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_run\" , \"client_mutation_id\" ) check_run = sgqlc . types . Field ( \"CheckRun\" , graphql_name = \"checkRun\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateCheckSuiteInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 class CreateCheckSuiteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"head_sha\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) head_sha = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"headSha\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateCheckSuitePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8496 8497 8498 8499 8500 8501 8502 8503 8504 class CreateCheckSuitePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_suite\" , \"client_mutation_id\" ) check_suite = sgqlc . types . Field ( \"CheckSuite\" , graphql_name = \"checkSuite\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateCommitOnBranchInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 class CreateCommitOnBranchInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch\" , \"file_changes\" , \"message\" , \"expected_head_oid\" , \"client_mutation_id\" , ) branch = sgqlc . types . Field ( sgqlc . types . non_null ( CommittableBranch ), graphql_name = \"branch\" ) file_changes = sgqlc . types . Field ( \"FileChanges\" , graphql_name = \"fileChanges\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( CommitMessage ), graphql_name = \"message\" ) expected_head_oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"expectedHeadOid\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateCommitOnBranchPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8507 8508 8509 8510 8511 8512 8513 8514 8515 8516 class CreateCommitOnBranchPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"commit\" , \"ref\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) commit = sgqlc . types . Field ( \"Commit\" , graphql_name = \"commit\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) CreateDiscussionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 class CreateDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"title\" , \"body\" , \"category_id\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) category_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"categoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateDiscussionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8519 8520 8521 8522 8523 8524 8525 8526 8527 class CreateDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" ) CreateEnterpriseOrganizationInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 class CreateEnterpriseOrganizationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"profile_name\" , \"billing_email\" , \"admin_logins\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) profile_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"profileName\" ) billing_email = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"billingEmail\" ) admin_logins = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"adminLogins\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateEnterpriseOrganizationPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8530 8531 8532 8533 8534 8535 8536 8537 8538 8539 class CreateEnterpriseOrganizationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) CreateEnvironmentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 class CreateEnvironmentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateEnvironmentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8542 8543 8544 8545 8546 8547 8548 8549 8550 class CreateEnvironmentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"environment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) environment = sgqlc . types . Field ( \"Environment\" , graphql_name = \"environment\" ) CreateIpAllowListEntryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 class CreateIpAllowListEntryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"allow_list_value\" , \"name\" , \"is_active\" , \"client_mutation_id\" , ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) allow_list_value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"allowListValue\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) is_active = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isActive\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateIpAllowListEntryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8553 8554 8555 8556 8557 8558 8559 8560 8561 8562 8563 class CreateIpAllowListEntryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ip_allow_list_entry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ip_allow_list_entry = sgqlc . types . Field ( \"IpAllowListEntry\" , graphql_name = \"ipAllowListEntry\" ) CreateIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 class CreateIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"milestone_id\" , \"label_ids\" , \"project_ids\" , \"issue_template\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) milestone_id = sgqlc . types . Field ( ID , graphql_name = \"milestoneId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"labelIds\" ) project_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"projectIds\" ) issue_template = sgqlc . types . Field ( String , graphql_name = \"issueTemplate\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8566 8567 8568 8569 8570 8571 8572 8573 8574 class CreateIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" ) CreateMigrationSourceInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 class CreateMigrationSourceInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"url\" , \"access_token\" , \"type\" , \"owner_id\" , \"github_pat\" , \"client_mutation_id\" , ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"url\" ) access_token = sgqlc . types . Field ( String , graphql_name = \"accessToken\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( MigrationSourceType ), graphql_name = \"type\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) github_pat = sgqlc . types . Field ( String , graphql_name = \"githubPat\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateMigrationSourcePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8577 8578 8579 8580 8581 8582 8583 8584 8585 8586 8587 class CreateMigrationSourcePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"migration_source\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) migration_source = sgqlc . types . Field ( \"MigrationSource\" , graphql_name = \"migrationSource\" ) CreateProjectInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 class CreateProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"name\" , \"body\" , \"template\" , \"repository_ids\" , \"client_mutation_id\" , ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) template = sgqlc . types . Field ( ProjectTemplate , graphql_name = \"template\" ) repository_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"repositoryIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateProjectPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8590 8591 8592 8593 8594 8595 8596 8597 8598 class CreateProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) CreateProjectV2Input Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 class CreateProjectV2Input ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"title\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateProjectV2Payload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8601 8602 8603 8604 8605 8606 8607 8608 8609 class CreateProjectV2Payload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_v2\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_v2 = sgqlc . types . Field ( \"ProjectV2\" , graphql_name = \"projectV2\" ) CreatePullRequestInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 class CreatePullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"base_ref_name\" , \"head_ref_name\" , \"title\" , \"body\" , \"maintainer_can_modify\" , \"draft\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) base_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"baseRefName\" ) head_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"headRefName\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) maintainer_can_modify = sgqlc . types . Field ( Boolean , graphql_name = \"maintainerCanModify\" ) draft = sgqlc . types . Field ( Boolean , graphql_name = \"draft\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreatePullRequestPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8612 8613 8614 8615 8616 8617 8618 8619 8620 class CreatePullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) CreateRefInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 class CreateRefInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"oid\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"oid\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateRefPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8623 8624 8625 8626 8627 8628 8629 8630 8631 class CreateRefPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ref\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) CreateRepositoryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 class CreateRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"owner_id\" , \"description\" , \"visibility\" , \"template\" , \"homepage_url\" , \"has_wiki_enabled\" , \"has_issues_enabled\" , \"team_id\" , \"client_mutation_id\" , ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) owner_id = sgqlc . types . Field ( ID , graphql_name = \"ownerId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) visibility = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryVisibility ), graphql_name = \"visibility\" ) template = sgqlc . types . Field ( Boolean , graphql_name = \"template\" ) homepage_url = sgqlc . types . Field ( URI , graphql_name = \"homepageUrl\" ) has_wiki_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasWikiEnabled\" ) has_issues_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasIssuesEnabled\" ) team_id = sgqlc . types . Field ( ID , graphql_name = \"teamId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateRepositoryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8634 8635 8636 8637 8638 8639 8640 8641 8642 class CreateRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) CreateSponsorsTierInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 class CreateSponsorsTierInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsorable_id\" , \"sponsorable_login\" , \"amount\" , \"is_recurring\" , \"repository_id\" , \"repository_owner_login\" , \"repository_name\" , \"welcome_message\" , \"description\" , \"publish\" , \"client_mutation_id\" , ) sponsorable_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorableId\" ) sponsorable_login = sgqlc . types . Field ( String , graphql_name = \"sponsorableLogin\" ) amount = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"amount\" ) is_recurring = sgqlc . types . Field ( Boolean , graphql_name = \"isRecurring\" ) repository_id = sgqlc . types . Field ( ID , graphql_name = \"repositoryId\" ) repository_owner_login = sgqlc . types . Field ( String , graphql_name = \"repositoryOwnerLogin\" ) repository_name = sgqlc . types . Field ( String , graphql_name = \"repositoryName\" ) welcome_message = sgqlc . types . Field ( String , graphql_name = \"welcomeMessage\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) publish = sgqlc . types . Field ( Boolean , graphql_name = \"publish\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateSponsorsTierPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8645 8646 8647 8648 8649 8650 8651 8652 8653 class CreateSponsorsTierPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"sponsors_tier\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) sponsors_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"sponsorsTier\" ) CreateSponsorshipInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 class CreateSponsorshipInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsor_id\" , \"sponsor_login\" , \"sponsorable_id\" , \"sponsorable_login\" , \"tier_id\" , \"amount\" , \"is_recurring\" , \"receive_emails\" , \"privacy_level\" , \"client_mutation_id\" , ) sponsor_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorId\" ) sponsor_login = sgqlc . types . Field ( String , graphql_name = \"sponsorLogin\" ) sponsorable_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorableId\" ) sponsorable_login = sgqlc . types . Field ( String , graphql_name = \"sponsorableLogin\" ) tier_id = sgqlc . types . Field ( ID , graphql_name = \"tierId\" ) amount = sgqlc . types . Field ( Int , graphql_name = \"amount\" ) is_recurring = sgqlc . types . Field ( Boolean , graphql_name = \"isRecurring\" ) receive_emails = sgqlc . types . Field ( Boolean , graphql_name = \"receiveEmails\" ) privacy_level = sgqlc . types . Field ( SponsorshipPrivacy , graphql_name = \"privacyLevel\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateSponsorshipPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8656 8657 8658 8659 8660 8661 8662 8663 8664 class CreateSponsorshipPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"sponsorship\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) sponsorship = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"sponsorship\" ) CreateTeamDiscussionCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 class CreateTeamDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"discussion_id\" , \"body\" , \"client_mutation_id\" ) discussion_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"discussionId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateTeamDiscussionCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8667 8668 8669 8670 8671 8672 8673 8674 8675 8676 8677 class CreateTeamDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"team_discussion_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) team_discussion_comment = sgqlc . types . Field ( \"TeamDiscussionComment\" , graphql_name = \"teamDiscussionComment\" ) CreateTeamDiscussionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 class CreateTeamDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"team_id\" , \"title\" , \"body\" , \"private\" , \"client_mutation_id\" ) team_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"teamId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) private = sgqlc . types . Field ( Boolean , graphql_name = \"private\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) CreateTeamDiscussionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8680 8681 8682 8683 8684 8685 8686 8687 8688 class CreateTeamDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"team_discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) team_discussion = sgqlc . types . Field ( \"TeamDiscussion\" , graphql_name = \"teamDiscussion\" ) CreatedCommitContribution Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22809 22810 22811 22812 22813 22814 22815 22816 22817 22818 22819 22820 22821 class CreatedCommitContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit_count\" , \"repository\" ) commit_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"commitCount\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) CreatedCommitContributionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8691 8692 8693 8694 8695 8696 8697 8698 8699 8700 8701 8702 8703 8704 8705 8706 8707 8708 8709 class CreatedCommitContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedCommitContributionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedCommitContribution\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CreatedCommitContributionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8712 8713 8714 8715 8716 8717 8718 8719 8720 class CreatedCommitContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedCommitContribution\" , graphql_name = \"node\" ) CreatedIssueContribution Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22824 22825 22826 22827 22828 22829 22830 22831 class CreatedIssueContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue\" ,) issue = sgqlc . types . Field ( sgqlc . types . non_null ( \"Issue\" ), graphql_name = \"issue\" ) CreatedIssueContributionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8723 8724 8725 8726 8727 8728 8729 8730 8731 8732 8733 8734 8735 8736 8737 8738 8739 8740 8741 class CreatedIssueContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedIssueContributionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedIssueContribution\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CreatedIssueContributionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8744 8745 8746 8747 8748 8749 8750 8751 8752 class CreatedIssueContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedIssueContribution\" , graphql_name = \"node\" ) CreatedIssueOrRestrictedContribution Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32403 32404 32405 32406 32407 32408 32409 class CreatedIssueOrRestrictedContribution ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( CreatedIssueContribution , RestrictedContribution ) CreatedPullRequestContribution Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22834 22835 22836 22837 22838 22839 22840 22841 22842 22843 class CreatedPullRequestContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request\" ,) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) CreatedPullRequestContributionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8755 8756 8757 8758 8759 8760 8761 8762 8763 8764 8765 8766 8767 8768 8769 8770 8771 8772 8773 class CreatedPullRequestContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedPullRequestContributionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedPullRequestContribution\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CreatedPullRequestContributionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8776 8777 8778 8779 8780 8781 8782 8783 8784 class CreatedPullRequestContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedPullRequestContribution\" , graphql_name = \"node\" ) CreatedPullRequestOrRestrictedContribution Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32412 32413 32414 32415 32416 32417 32418 class CreatedPullRequestOrRestrictedContribution ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( CreatedPullRequestContribution , RestrictedContribution ) CreatedPullRequestReviewContribution Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22846 22847 22848 22849 22850 22851 22852 22853 22854 22855 22856 22857 22858 22859 22860 22861 class CreatedPullRequestReviewContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request\" , \"pull_request_review\" , \"repository\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) pull_request_review = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequestReview\" ), graphql_name = \"pullRequestReview\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) CreatedPullRequestReviewContributionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8787 8788 8789 8790 8791 8792 8793 8794 8795 8796 8797 8798 8799 8800 8801 8802 8803 8804 8805 8806 8807 class CreatedPullRequestReviewContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedPullRequestReviewContributionEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedPullRequestReviewContribution\" ), graphql_name = \"nodes\" , ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CreatedPullRequestReviewContributionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8810 8811 8812 8813 8814 8815 8816 8817 8818 8819 8820 class CreatedPullRequestReviewContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedPullRequestReviewContribution\" , graphql_name = \"node\" ) CreatedRepositoryContribution Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22864 22865 22866 22867 22868 22869 22870 22871 22872 22873 class CreatedRepositoryContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository\" ,) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) CreatedRepositoryContributionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8823 8824 8825 8826 8827 8828 8829 8830 8831 8832 8833 8834 8835 8836 8837 8838 8839 8840 8841 class CreatedRepositoryContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedRepositoryContributionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedRepositoryContribution\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) CreatedRepositoryContributionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8844 8845 8846 8847 8848 8849 8850 8851 8852 class CreatedRepositoryContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedRepositoryContribution\" , graphql_name = \"node\" ) CreatedRepositoryOrRestrictedContribution Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32421 32422 32423 32424 32425 32426 32427 class CreatedRepositoryOrRestrictedContribution ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( CreatedRepositoryContribution , RestrictedContribution ) CrossReferencedEvent Bases: sgqlc . types . Type , UniformResourceLocatable , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22876 22877 22878 22879 22880 22881 22882 22883 22884 22885 22886 22887 22888 22889 22890 22891 22892 22893 22894 22895 22896 22897 22898 22899 22900 22901 22902 22903 22904 22905 22906 22907 22908 22909 class CrossReferencedEvent ( sgqlc . types . Type , UniformResourceLocatable , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"is_cross_repository\" , \"referenced_at\" , \"source\" , \"target\" , \"will_close_target\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) referenced_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"referencedAt\" ) source = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"source\" ) target = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"target\" ) will_close_target = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"willCloseTarget\" ) DeclineTopicSuggestionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 class DeclineTopicSuggestionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"reason\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) reason = sgqlc . types . Field ( sgqlc . types . non_null ( TopicSuggestionDeclineReason ), graphql_name = \"reason\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeclineTopicSuggestionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8855 8856 8857 8858 8859 8860 8861 8862 8863 class DeclineTopicSuggestionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"topic\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) topic = sgqlc . types . Field ( \"Topic\" , graphql_name = \"topic\" ) DefaultRepositoryPermissionField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 195 196 197 198 199 200 201 class DefaultRepositoryPermissionField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"NONE\" , \"READ\" , \"WRITE\" ) Deletable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8866 8867 8868 8869 8870 8871 8872 8873 8874 8875 class Deletable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"viewer_can_delete\" ,) viewer_can_delete = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanDelete\" ) DeleteBranchProtectionRuleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 class DeleteBranchProtectionRuleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule_id\" , \"client_mutation_id\" ) branch_protection_rule_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"branchProtectionRuleId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteBranchProtectionRulePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8878 8879 8880 8881 8882 8883 8884 8885 class DeleteBranchProtectionRulePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteDeploymentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3551 3552 3553 3554 3555 3556 3557 3558 3559 class DeleteDeploymentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteDeploymentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8888 8889 8890 8891 8892 8893 8894 8895 class DeleteDeploymentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteDiscussionCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3562 3563 3564 3565 3566 3567 3568 3569 3570 class DeleteDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteDiscussionCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8898 8899 8900 8901 8902 8903 8904 8905 8906 class DeleteDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"comment\" ) DeleteDiscussionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3573 3574 3575 3576 3577 3578 3579 3580 3581 class DeleteDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteDiscussionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8909 8910 8911 8912 8913 8914 8915 8916 8917 class DeleteDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" ) DeleteEnvironmentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3584 3585 3586 3587 3588 3589 3590 3591 3592 class DeleteEnvironmentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteEnvironmentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8920 8921 8922 8923 8924 8925 8926 8927 class DeleteEnvironmentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteIpAllowListEntryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3595 3596 3597 3598 3599 3600 3601 3602 3603 3604 3605 class DeleteIpAllowListEntryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ip_allow_list_entry_id\" , \"client_mutation_id\" ) ip_allow_list_entry_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ipAllowListEntryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteIpAllowListEntryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8930 8931 8932 8933 8934 8935 8936 8937 8938 8939 8940 class DeleteIpAllowListEntryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ip_allow_list_entry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ip_allow_list_entry = sgqlc . types . Field ( \"IpAllowListEntry\" , graphql_name = \"ipAllowListEntry\" ) DeleteIssueCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3608 3609 3610 3611 3612 3613 3614 3615 3616 class DeleteIssueCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteIssueCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8943 8944 8945 8946 8947 8948 8949 8950 class DeleteIssueCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3619 3620 3621 3622 3623 3624 3625 3626 3627 class DeleteIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8953 8954 8955 8956 8957 8958 8959 8960 8961 class DeleteIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) DeleteProjectCardInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3630 3631 3632 3633 3634 3635 3636 3637 3638 class DeleteProjectCardInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"card_id\" , \"client_mutation_id\" ) card_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"cardId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteProjectCardPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8964 8965 8966 8967 8968 8969 8970 8971 8972 8973 class DeleteProjectCardPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"column\" , \"deleted_card_id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) column = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"column\" ) deleted_card_id = sgqlc . types . Field ( ID , graphql_name = \"deletedCardId\" ) DeleteProjectColumnInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3641 3642 3643 3644 3645 3646 3647 3648 3649 class DeleteProjectColumnInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column_id\" , \"client_mutation_id\" ) column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"columnId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteProjectColumnPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8976 8977 8978 8979 8980 8981 8982 8983 8984 8985 class DeleteProjectColumnPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deleted_column_id\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deleted_column_id = sgqlc . types . Field ( ID , graphql_name = \"deletedColumnId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) DeleteProjectInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3652 3653 3654 3655 3656 3657 3658 3659 3660 class DeleteProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteProjectNextItemInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 class DeleteProjectNextItemInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( ID , graphql_name = \"itemId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteProjectNextItemPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8988 8989 8990 8991 8992 8993 8994 8995 8996 class DeleteProjectNextItemPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deleted_item_id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deleted_item_id = sgqlc . types . Field ( ID , graphql_name = \"deletedItemId\" ) DeleteProjectPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8999 9000 9001 9002 9003 9004 9005 9006 9007 class DeleteProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"ProjectOwner\" , graphql_name = \"owner\" ) DeleteProjectV2ItemInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 class DeleteProjectV2ItemInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"itemId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteProjectV2ItemPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9010 9011 9012 9013 9014 9015 9016 9017 9018 class DeleteProjectV2ItemPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deleted_item_id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deleted_item_id = sgqlc . types . Field ( ID , graphql_name = \"deletedItemId\" ) DeletePullRequestReviewCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3687 3688 3689 3690 3691 3692 3693 3694 3695 class DeletePullRequestReviewCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeletePullRequestReviewCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9021 9022 9023 9024 9025 9026 9027 9028 9029 9030 9031 9032 9033 9034 9035 9036 9037 9038 class DeletePullRequestReviewCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" , \"pull_request_review_comment\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" ) pull_request_review_comment = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"pullRequestReviewComment\" ) DeletePullRequestReviewInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3698 3699 3700 3701 3702 3703 3704 3705 3706 3707 3708 class DeletePullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_review_id\" , \"client_mutation_id\" ) pull_request_review_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestReviewId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeletePullRequestReviewPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9041 9042 9043 9044 9045 9046 9047 9048 9049 9050 9051 class DeletePullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" ) DeleteRefInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3711 3712 3713 3714 3715 3716 3717 3718 3719 class DeleteRefInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ref_id\" , \"client_mutation_id\" ) ref_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"refId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteRefPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9054 9055 9056 9057 9058 9059 9060 9061 class DeleteRefPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteTeamDiscussionCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3722 3723 3724 3725 3726 3727 3728 3729 3730 class DeleteTeamDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteTeamDiscussionCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9064 9065 9066 9067 9068 9069 9070 9071 class DeleteTeamDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteTeamDiscussionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3733 3734 3735 3736 3737 3738 3739 3740 3741 class DeleteTeamDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteTeamDiscussionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9074 9075 9076 9077 9078 9079 9080 9081 class DeleteTeamDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteVerifiableDomainInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3744 3745 3746 3747 3748 3749 3750 3751 3752 class DeleteVerifiableDomainInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DeleteVerifiableDomainPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9084 9085 9086 9087 9088 9089 9090 9091 9092 class DeleteVerifiableDomainPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"VerifiableDomainOwner\" , graphql_name = \"owner\" ) DemilestonedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22912 22913 22914 22915 22916 22917 22918 22919 22920 22921 22922 22923 22924 22925 22926 22927 22928 class DemilestonedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"milestone_title\" , \"subject\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) milestone_title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"milestoneTitle\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"MilestoneItem\" ), graphql_name = \"subject\" ) DependabotUpdate Bases: sgqlc . types . Type , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22931 22932 22933 22934 22935 22936 22937 22938 22939 class DependabotUpdate ( sgqlc . types . Type , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"error\" , \"pull_request\" ) error = sgqlc . types . Field ( DependabotUpdateError , graphql_name = \"error\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) DependabotUpdateError Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9095 9096 9097 9098 9099 9100 9101 9102 9103 9104 9105 9106 class DependabotUpdateError ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"error_type\" , \"title\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) error_type = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"errorType\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) DependencyGraphEcosystem Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 class DependencyGraphEcosystem ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTIONS\" , \"COMPOSER\" , \"GO\" , \"MAVEN\" , \"NPM\" , \"NUGET\" , \"PIP\" , \"RUBYGEMS\" , \"RUST\" , ) DeployKey Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22942 22943 22944 22945 22946 22947 22948 22949 22950 22951 22952 22953 22954 22955 22956 22957 class DeployKey ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"key\" , \"read_only\" , \"title\" , \"verified\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) read_only = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"readOnly\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) verified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"verified\" ) DeployKeyConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9109 9110 9111 9112 9113 9114 9115 9116 9117 9118 9119 9120 9121 9122 9123 9124 9125 class DeployKeyConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeployKeyEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeployKey\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DeployKeyEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9128 9129 9130 9131 9132 9133 9134 9135 9136 class DeployKeyEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DeployKey\" , graphql_name = \"node\" ) DeployedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22960 22961 22962 22963 22964 22965 22966 22967 22968 22969 22970 22971 22972 22973 22974 22975 22976 22977 22978 22979 22980 22981 22982 22983 22984 22985 class DeployedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" , \"deployment\" , \"pull_request\" , \"ref\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) deployment = sgqlc . types . Field ( sgqlc . types . non_null ( \"Deployment\" ), graphql_name = \"deployment\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) Deployment Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22988 22989 22990 22991 22992 22993 22994 22995 22996 22997 22998 22999 23000 23001 23002 23003 23004 23005 23006 23007 23008 23009 23010 23011 23012 23013 23014 23015 23016 23017 23018 23019 23020 23021 23022 23023 23024 23025 23026 23027 23028 23029 23030 23031 23032 23033 23034 23035 23036 23037 23038 23039 23040 23041 23042 23043 23044 23045 23046 23047 23048 23049 23050 23051 class Deployment ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"commit_oid\" , \"created_at\" , \"creator\" , \"database_id\" , \"description\" , \"environment\" , \"latest_environment\" , \"latest_status\" , \"original_environment\" , \"payload\" , \"ref\" , \"repository\" , \"state\" , \"statuses\" , \"task\" , \"updated_at\" , ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) commit_oid = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"commitOid\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) environment = sgqlc . types . Field ( String , graphql_name = \"environment\" ) latest_environment = sgqlc . types . Field ( String , graphql_name = \"latestEnvironment\" ) latest_status = sgqlc . types . Field ( \"DeploymentStatus\" , graphql_name = \"latestStatus\" ) original_environment = sgqlc . types . Field ( String , graphql_name = \"originalEnvironment\" ) payload = sgqlc . types . Field ( String , graphql_name = \"payload\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) state = sgqlc . types . Field ( DeploymentState , graphql_name = \"state\" ) statuses = sgqlc . types . Field ( DeploymentStatusConnection , graphql_name = \"statuses\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) task = sgqlc . types . Field ( String , graphql_name = \"task\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) DeploymentConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9139 9140 9141 9142 9143 9144 9145 9146 9147 9148 9149 9150 9151 9152 9153 9154 9155 class DeploymentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Deployment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DeploymentEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9158 9159 9160 9161 9162 9163 9164 9165 9166 class DeploymentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Deployment\" , graphql_name = \"node\" ) DeploymentEnvironmentChangedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23054 23055 23056 23057 23058 23059 23060 23061 23062 23063 23064 23065 23066 23067 23068 23069 23070 class DeploymentEnvironmentChangedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"deployment_status\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) deployment_status = sgqlc . types . Field ( sgqlc . types . non_null ( \"DeploymentStatus\" ), graphql_name = \"deploymentStatus\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) DeploymentOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3755 3756 3757 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 class DeploymentOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) DeploymentOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 223 224 225 226 227 228 229 class DeploymentOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) DeploymentProtectionRule Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9169 9170 9171 9172 9173 9174 9175 9176 9177 9178 9179 9180 9181 9182 9183 9184 9185 9186 9187 9188 9189 9190 9191 9192 9193 9194 9195 class DeploymentProtectionRule ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"reviewers\" , \"timeout\" , \"type\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) reviewers = sgqlc . types . Field ( sgqlc . types . non_null ( \"DeploymentReviewerConnection\" ), graphql_name = \"reviewers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) timeout = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"timeout\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentProtectionRuleType ), graphql_name = \"type\" ) DeploymentProtectionRuleConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9198 9199 9200 9201 9202 9203 9204 9205 9206 9207 9208 9209 9210 9211 9212 9213 9214 9215 9216 class DeploymentProtectionRuleConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentProtectionRuleEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( DeploymentProtectionRule ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DeploymentProtectionRuleEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9219 9220 9221 9222 9223 9224 9225 9226 9227 class DeploymentProtectionRuleEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( DeploymentProtectionRule , graphql_name = \"node\" ) DeploymentProtectionRuleType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 232 233 234 235 236 237 238 class DeploymentProtectionRuleType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"REQUIRED_REVIEWERS\" , \"WAIT_TIMER\" ) DeploymentRequest Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9230 9231 9232 9233 9234 9235 9236 9237 9238 9239 9240 9241 9242 9243 9244 9245 9246 9247 9248 9249 9250 9251 9252 9253 9254 9255 9256 9257 9258 9259 9260 9261 9262 9263 9264 9265 9266 9267 class DeploymentRequest ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"current_user_can_approve\" , \"environment\" , \"reviewers\" , \"wait_timer\" , \"wait_timer_started_at\" , ) current_user_can_approve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"currentUserCanApprove\" ) environment = sgqlc . types . Field ( sgqlc . types . non_null ( \"Environment\" ), graphql_name = \"environment\" ) reviewers = sgqlc . types . Field ( sgqlc . types . non_null ( \"DeploymentReviewerConnection\" ), graphql_name = \"reviewers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) wait_timer = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"waitTimer\" ) wait_timer_started_at = sgqlc . types . Field ( DateTime , graphql_name = \"waitTimerStartedAt\" ) DeploymentRequestConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9270 9271 9272 9273 9274 9275 9276 9277 9278 9279 9280 9281 9282 9283 9284 9285 9286 9287 9288 class DeploymentRequestConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentRequestEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( DeploymentRequest ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DeploymentRequestEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9291 9292 9293 9294 9295 9296 9297 9298 9299 class DeploymentRequestEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( DeploymentRequest , graphql_name = \"node\" ) DeploymentReview Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23073 23074 23075 23076 23077 23078 23079 23080 23081 23082 23083 23084 23085 23086 23087 23088 23089 23090 23091 23092 23093 23094 23095 23096 23097 23098 23099 23100 class DeploymentReview ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comment\" , \"database_id\" , \"environments\" , \"state\" , \"user\" ) comment = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"comment\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) environments = sgqlc . types . Field ( sgqlc . types . non_null ( EnvironmentConnection ), graphql_name = \"environments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) state = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentReviewState ), graphql_name = \"state\" ) user = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"user\" ) DeploymentReviewConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9302 9303 9304 9305 9306 9307 9308 9309 9310 9311 9312 9313 9314 9315 9316 9317 9318 9319 9320 class DeploymentReviewConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentReviewEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentReview\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DeploymentReviewEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9323 9324 9325 9326 9327 9328 9329 9330 9331 class DeploymentReviewEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DeploymentReview\" , graphql_name = \"node\" ) DeploymentReviewState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 241 242 243 244 245 246 247 class DeploymentReviewState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"APPROVED\" , \"REJECTED\" ) DeploymentReviewer Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32430 32431 32432 32433 32434 32435 32436 class DeploymentReviewer ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Team , User ) DeploymentReviewerConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9334 9335 9336 9337 9338 9339 9340 9341 9342 9343 9344 9345 9346 9347 9348 9349 9350 9351 9352 class DeploymentReviewerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentReviewerEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentReviewer\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DeploymentReviewerEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9355 9356 9357 9358 9359 9360 9361 9362 9363 class DeploymentReviewerEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DeploymentReviewer\" , graphql_name = \"node\" ) DeploymentState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 class DeploymentState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ABANDONED\" , \"ACTIVE\" , \"DESTROYED\" , \"ERROR\" , \"FAILURE\" , \"INACTIVE\" , \"IN_PROGRESS\" , \"PENDING\" , \"QUEUED\" , \"WAITING\" , ) DeploymentStatus Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23103 23104 23105 23106 23107 23108 23109 23110 23111 23112 23113 23114 23115 23116 23117 23118 23119 23120 23121 23122 23123 23124 23125 23126 23127 23128 23129 23130 23131 23132 23133 23134 class DeploymentStatus ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"deployment\" , \"description\" , \"environment_url\" , \"log_url\" , \"state\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"creator\" ) deployment = sgqlc . types . Field ( sgqlc . types . non_null ( Deployment ), graphql_name = \"deployment\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) environment_url = sgqlc . types . Field ( URI , graphql_name = \"environmentUrl\" ) log_url = sgqlc . types . Field ( URI , graphql_name = \"logUrl\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentStatusState ), graphql_name = \"state\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) DeploymentStatusConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9366 9367 9368 9369 9370 9371 9372 9373 9374 9375 9376 9377 9378 9379 9380 9381 9382 9383 9384 class DeploymentStatusConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentStatusEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentStatus\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DeploymentStatusEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9387 9388 9389 9390 9391 9392 9393 9394 9395 class DeploymentStatusEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DeploymentStatus\" , graphql_name = \"node\" ) DeploymentStatusState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 class DeploymentStatusState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ERROR\" , \"FAILURE\" , \"INACTIVE\" , \"IN_PROGRESS\" , \"PENDING\" , \"QUEUED\" , \"SUCCESS\" , \"WAITING\" , ) DiffSide Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 288 289 290 291 292 293 294 class DiffSide ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LEFT\" , \"RIGHT\" ) DisablePullRequestAutoMergeInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 class DisablePullRequestAutoMergeInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DisablePullRequestAutoMergePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9398 9399 9400 9401 9402 9403 9404 9405 9406 9407 class DisablePullRequestAutoMergePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) DisconnectedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23137 23138 23139 23140 23141 23142 23143 23144 23145 23146 23147 23148 23149 23150 23151 23152 23153 23154 23155 23156 23157 23158 23159 23160 23161 23162 class DisconnectedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"is_cross_repository\" , \"source\" , \"subject\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) source = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"source\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"subject\" ) Discussion Bases: sgqlc . types . Type , Comment , Updatable , Deletable , Labelable , Lockable , RepositoryNode , Subscribable , Reactable , Votable , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23165 23166 23167 23168 23169 23170 23171 23172 23173 23174 23175 23176 23177 23178 23179 23180 23181 23182 23183 23184 23185 23186 23187 23188 23189 23190 23191 23192 23193 23194 23195 23196 23197 23198 23199 23200 23201 23202 23203 23204 23205 23206 23207 23208 23209 23210 23211 23212 23213 23214 23215 23216 23217 23218 23219 23220 23221 23222 class Discussion ( sgqlc . types . Type , Comment , Updatable , Deletable , Labelable , Lockable , RepositoryNode , Subscribable , Reactable , Votable , Node , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"answer\" , \"answer_chosen_at\" , \"answer_chosen_by\" , \"category\" , \"comments\" , \"number\" , \"poll\" , \"resource_path\" , \"title\" , \"url\" , ) answer = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"answer\" ) answer_chosen_at = sgqlc . types . Field ( DateTime , graphql_name = \"answerChosenAt\" ) answer_chosen_by = sgqlc . types . Field ( Actor , graphql_name = \"answerChosenBy\" ) category = sgqlc . types . Field ( sgqlc . types . non_null ( \"DiscussionCategory\" ), graphql_name = \"category\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) poll = sgqlc . types . Field ( \"DiscussionPoll\" , graphql_name = \"poll\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) DiscussionCategory Bases: sgqlc . types . Type , Node , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23225 23226 23227 23228 23229 23230 23231 23232 23233 23234 23235 23236 23237 23238 23239 23240 23241 23242 23243 23244 23245 23246 23247 23248 23249 23250 23251 23252 23253 23254 class DiscussionCategory ( sgqlc . types . Type , Node , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"description\" , \"emoji\" , \"emoji_html\" , \"is_answerable\" , \"name\" , \"slug\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) emoji = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"emoji\" ) emoji_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"emojiHTML\" ) is_answerable = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isAnswerable\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) DiscussionCategoryConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9410 9411 9412 9413 9414 9415 9416 9417 9418 9419 9420 9421 9422 9423 9424 9425 9426 9427 9428 class DiscussionCategoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionCategoryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionCategory\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DiscussionCategoryEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9431 9432 9433 9434 9435 9436 9437 9438 9439 class DiscussionCategoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DiscussionCategory\" , graphql_name = \"node\" ) DiscussionComment Bases: sgqlc . types . Type , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , Votable , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23257 23258 23259 23260 23261 23262 23263 23264 23265 23266 23267 23268 23269 23270 23271 23272 23273 23274 23275 23276 23277 23278 23279 23280 23281 23282 23283 23284 23285 23286 23287 23288 23289 23290 23291 23292 23293 23294 23295 23296 23297 23298 23299 23300 23301 23302 23303 23304 23305 23306 23307 23308 23309 23310 23311 23312 23313 23314 class DiscussionComment ( sgqlc . types . Type , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , Votable , Node , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"deleted_at\" , \"discussion\" , \"is_answer\" , \"replies\" , \"reply_to\" , \"resource_path\" , \"url\" , \"viewer_can_mark_as_answer\" , \"viewer_can_unmark_as_answer\" , ) deleted_at = sgqlc . types . Field ( DateTime , graphql_name = \"deletedAt\" ) discussion = sgqlc . types . Field ( Discussion , graphql_name = \"discussion\" ) is_answer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isAnswer\" ) replies = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionCommentConnection ), graphql_name = \"replies\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) reply_to = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"replyTo\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) viewer_can_mark_as_answer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanMarkAsAnswer\" ) viewer_can_unmark_as_answer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUnmarkAsAnswer\" ) DiscussionCommentConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9442 9443 9444 9445 9446 9447 9448 9449 9450 9451 9452 9453 9454 9455 9456 9457 9458 9459 9460 class DiscussionCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DiscussionCommentEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9463 9464 9465 9466 9467 9468 9469 9470 9471 class DiscussionCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"node\" ) DiscussionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9474 9475 9476 9477 9478 9479 9480 9481 9482 9483 9484 9485 9486 9487 9488 9489 9490 class DiscussionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Discussion\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DiscussionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9493 9494 9495 9496 9497 9498 9499 9500 9501 class DiscussionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"node\" ) DiscussionOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795 class DiscussionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) DiscussionOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 297 298 299 300 301 302 303 class DiscussionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"UPDATED_AT\" ) DiscussionPoll Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23317 23318 23319 23320 23321 23322 23323 23324 23325 23326 23327 23328 23329 23330 23331 23332 23333 23334 23335 23336 23337 23338 23339 23340 23341 23342 23343 23344 23345 23346 23347 23348 23349 23350 23351 23352 23353 23354 23355 23356 23357 23358 23359 23360 23361 23362 23363 23364 class DiscussionPoll ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"discussion\" , \"options\" , \"question\" , \"total_vote_count\" , \"viewer_can_vote\" , \"viewer_has_voted\" , ) discussion = sgqlc . types . Field ( Discussion , graphql_name = \"discussion\" ) options = sgqlc . types . Field ( DiscussionPollOptionConnection , graphql_name = \"options\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( DiscussionPollOptionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"AUTHORED_ORDER\" , \"direction\" : \"ASC\" }, ), ), ) ), ) question = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"question\" ) total_vote_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalVoteCount\" ) viewer_can_vote = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanVote\" ) viewer_has_voted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasVoted\" ) DiscussionPollOption Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23367 23368 23369 23370 23371 23372 23373 23374 23375 23376 23377 23378 23379 23380 23381 class DiscussionPollOption ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"option\" , \"poll\" , \"total_vote_count\" , \"viewer_has_voted\" ) option = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"option\" ) poll = sgqlc . types . Field ( DiscussionPoll , graphql_name = \"poll\" ) total_vote_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalVoteCount\" ) viewer_has_voted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasVoted\" ) DiscussionPollOptionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9504 9505 9506 9507 9508 9509 9510 9511 9512 9513 9514 9515 9516 9517 9518 9519 9520 9521 9522 class DiscussionPollOptionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionPollOptionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionPollOption\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) DiscussionPollOptionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9525 9526 9527 9528 9529 9530 9531 9532 9533 class DiscussionPollOptionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DiscussionPollOption\" , graphql_name = \"node\" ) DiscussionPollOptionOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3798 3799 3800 3801 3802 3803 3804 3805 3806 3807 3808 3809 3810 class DiscussionPollOptionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionPollOptionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) DiscussionPollOptionOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 306 307 308 309 310 311 312 class DiscussionPollOptionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"AUTHORED_ORDER\" , \"VOTE_COUNT\" ) DismissPullRequestReviewInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 class DismissPullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_review_id\" , \"message\" , \"client_mutation_id\" ) pull_request_review_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestReviewId\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DismissPullRequestReviewPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9536 9537 9538 9539 9540 9541 9542 9543 9544 9545 9546 class DismissPullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" ) DismissReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 315 316 317 318 319 320 321 322 323 324 325 326 327 class DismissReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FIX_STARTED\" , \"INACCURATE\" , \"NOT_USED\" , \"NO_BANDWIDTH\" , \"TOLERABLE_RISK\" , ) DismissRepositoryVulnerabilityAlertInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 class DismissRepositoryVulnerabilityAlertInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_vulnerability_alert_id\" , \"dismiss_reason\" , \"client_mutation_id\" , ) repository_vulnerability_alert_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryVulnerabilityAlertId\" ) dismiss_reason = sgqlc . types . Field ( sgqlc . types . non_null ( DismissReason ), graphql_name = \"dismissReason\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) DismissRepositoryVulnerabilityAlertPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9549 9550 9551 9552 9553 9554 9555 9556 9557 9558 9559 class DismissRepositoryVulnerabilityAlertPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository_vulnerability_alert\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository_vulnerability_alert = sgqlc . types . Field ( \"RepositoryVulnerabilityAlert\" , graphql_name = \"repositoryVulnerabilityAlert\" ) DraftIssue Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23384 23385 23386 23387 23388 23389 23390 23391 23392 23393 23394 23395 23396 23397 23398 23399 23400 23401 23402 23403 23404 23405 23406 23407 23408 23409 23410 23411 23412 23413 23414 23415 23416 23417 23418 23419 23420 23421 23422 23423 23424 23425 23426 23427 23428 23429 23430 23431 23432 23433 23434 23435 23436 23437 23438 23439 23440 23441 23442 23443 23444 23445 23446 23447 23448 23449 23450 23451 23452 23453 23454 23455 23456 23457 23458 23459 23460 23461 23462 23463 23464 23465 class DraftIssue ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignees\" , \"body\" , \"body_html\" , \"body_text\" , \"created_at\" , \"creator\" , \"project\" , \"project_item\" , \"project_v2_items\" , \"projects_v2\" , \"title\" , \"updated_at\" , ) assignees = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"assignees\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bodyHTML\" ) body_text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"bodyText\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectNext\" ), graphql_name = \"project\" ) project_item = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectNextItem\" ), graphql_name = \"projectItem\" ) project_v2_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemConnection ), graphql_name = \"projectV2Items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) projects_v2 = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Connection ), graphql_name = \"projectsV2\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) DraftPullRequestReviewComment Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 class DraftPullRequestReviewComment ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"position\" , \"body\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) position = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"position\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) DraftPullRequestReviewThread Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 class DraftPullRequestReviewThread ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"line\" , \"side\" , \"start_line\" , \"start_side\" , \"body\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"line\" ) side = sgqlc . types . Field ( DiffSide , graphql_name = \"side\" ) start_line = sgqlc . types . Field ( Int , graphql_name = \"startLine\" ) start_side = sgqlc . types . Field ( DiffSide , graphql_name = \"startSide\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) EnablePullRequestAutoMergeInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 class EnablePullRequestAutoMergeInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"commit_headline\" , \"commit_body\" , \"merge_method\" , \"author_email\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) commit_headline = sgqlc . types . Field ( String , graphql_name = \"commitHeadline\" ) commit_body = sgqlc . types . Field ( String , graphql_name = \"commitBody\" ) merge_method = sgqlc . types . Field ( PullRequestMergeMethod , graphql_name = \"mergeMethod\" ) author_email = sgqlc . types . Field ( String , graphql_name = \"authorEmail\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) EnablePullRequestAutoMergePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9562 9563 9564 9565 9566 9567 9568 9569 9570 9571 class EnablePullRequestAutoMergePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) Enterprise Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Enterprise ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"billing_info\" , \"created_at\" , \"database_id\" , \"description\" , \"description_html\" , \"location\" , \"members\" , \"name\" , \"organizations\" , \"owner_info\" , \"resource_path\" , \"slug\" , \"url\" , \"viewer_is_admin\" , \"website_url\" , ) avatar_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) billing_info = sgqlc . types . Field ( EnterpriseBillingInfo , graphql_name = \"billingInfo\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"descriptionHTML\" ) location = sgqlc . types . Field ( String , graphql_name = \"location\" ) members = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMemberConnection ), graphql_name = \"members\" , args = sgqlc . types . ArgDict ( ( ( \"organization_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"organizationLogins\" , default = None , ), ), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseMemberOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"role\" , sgqlc . types . Arg ( EnterpriseUserAccountMembershipRole , graphql_name = \"role\" , default = None , ), ), ( \"deployment\" , sgqlc . types . Arg ( EnterpriseUserDeployment , graphql_name = \"deployment\" , default = None , ), ), ( \"has_two_factor_enabled\" , sgqlc . types . Arg ( Boolean , graphql_name = \"hasTwoFactorEnabled\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) organizations = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationConnection ), graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"viewer_organization_role\" , sgqlc . types . Arg ( RoleInOrganization , graphql_name = \"viewerOrganizationRole\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) owner_info = sgqlc . types . Field ( EnterpriseOwnerInfo , graphql_name = \"ownerInfo\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) viewer_is_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsAdmin\" ) website_url = sgqlc . types . Field ( URI , graphql_name = \"websiteUrl\" ) EnterpriseAdministratorConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9574 9575 9576 9577 9578 9579 9580 9581 9582 9583 9584 9585 9586 9587 9588 9589 9590 class EnterpriseAdministratorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseAdministratorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseAdministratorEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9593 9594 9595 9596 9597 9598 9599 9600 9601 9602 9603 9604 class EnterpriseAdministratorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"role\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorRole ), graphql_name = \"role\" ) EnterpriseAdministratorInvitation Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23608 23609 23610 23611 23612 23613 23614 23615 23616 23617 23618 23619 23620 23621 23622 23623 23624 23625 23626 23627 23628 23629 23630 23631 23632 23633 class EnterpriseAdministratorInvitation ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"email\" , \"enterprise\" , \"invitee\" , \"inviter\" , \"role\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) enterprise = sgqlc . types . Field ( sgqlc . types . non_null ( Enterprise ), graphql_name = \"enterprise\" ) invitee = sgqlc . types . Field ( \"User\" , graphql_name = \"invitee\" ) inviter = sgqlc . types . Field ( \"User\" , graphql_name = \"inviter\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorRole ), graphql_name = \"role\" ) EnterpriseAdministratorInvitationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9607 9608 9609 9610 9611 9612 9613 9614 9615 9616 9617 9618 9619 9620 9621 9622 9623 9624 9625 9626 class EnterpriseAdministratorInvitationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseAdministratorInvitationEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseAdministratorInvitation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseAdministratorInvitationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9629 9630 9631 9632 9633 9634 9635 9636 9637 class EnterpriseAdministratorInvitationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"node\" ) EnterpriseAdministratorInvitationOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3898 3899 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 class EnterpriseAdministratorInvitationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorInvitationOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) EnterpriseAdministratorInvitationOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 330 331 332 333 334 335 336 class EnterpriseAdministratorInvitationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) EnterpriseAdministratorRole Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 339 340 341 342 343 344 345 class EnterpriseAdministratorRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BILLING_MANAGER\" , \"OWNER\" ) EnterpriseAllowPrivateRepositoryForkingPolicyValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 348 349 350 351 352 353 354 355 356 357 358 359 360 361 class EnterpriseAllowPrivateRepositoryForkingPolicyValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ENTERPRISE_ORGANIZATIONS\" , \"ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS\" , \"EVERYWHERE\" , \"SAME_ORGANIZATION\" , \"SAME_ORGANIZATION_USER_ACCOUNTS\" , \"USER_ACCOUNTS\" , ) EnterpriseAuditEntryData Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9640 9641 9642 9643 9644 9645 9646 9647 9648 9649 9650 9651 class EnterpriseAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_resource_path\" , \"enterprise_slug\" , \"enterprise_url\" ) enterprise_resource_path = sgqlc . types . Field ( URI , graphql_name = \"enterpriseResourcePath\" ) enterprise_slug = sgqlc . types . Field ( String , graphql_name = \"enterpriseSlug\" ) enterprise_url = sgqlc . types . Field ( URI , graphql_name = \"enterpriseUrl\" ) EnterpriseBillingInfo Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9654 9655 9656 9657 9658 9659 9660 9661 9662 9663 9664 9665 9666 9667 9668 9669 9670 9671 9672 9673 9674 9675 9676 9677 9678 9679 9680 9681 9682 9683 9684 9685 9686 9687 9688 9689 9690 9691 9692 9693 9694 9695 9696 9697 9698 9699 9700 9701 class EnterpriseBillingInfo ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"all_licensable_users_count\" , \"asset_packs\" , \"bandwidth_quota\" , \"bandwidth_usage\" , \"bandwidth_usage_percentage\" , \"storage_quota\" , \"storage_usage\" , \"storage_usage_percentage\" , \"total_available_licenses\" , \"total_licenses\" , ) all_licensable_users_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"allLicensableUsersCount\" ) asset_packs = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"assetPacks\" ) bandwidth_quota = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"bandwidthQuota\" ) bandwidth_usage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"bandwidthUsage\" ) bandwidth_usage_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"bandwidthUsagePercentage\" ) storage_quota = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"storageQuota\" ) storage_usage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"storageUsage\" ) storage_usage_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"storageUsagePercentage\" ) total_available_licenses = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalAvailableLicenses\" ) total_licenses = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalLicenses\" ) EnterpriseDefaultRepositoryPermissionSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 364 365 366 367 368 369 370 class EnterpriseDefaultRepositoryPermissionSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"NONE\" , \"NO_POLICY\" , \"READ\" , \"WRITE\" ) EnterpriseEnabledDisabledSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 373 374 375 376 377 378 379 class EnterpriseEnabledDisabledSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" , \"NO_POLICY\" ) EnterpriseEnabledSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 382 383 384 385 386 387 388 class EnterpriseEnabledSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ENABLED\" , \"NO_POLICY\" ) EnterpriseIdentityProvider Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23636 23637 23638 23639 23640 23641 23642 23643 23644 23645 23646 23647 23648 23649 23650 23651 23652 23653 23654 23655 23656 23657 23658 23659 23660 23661 23662 23663 23664 23665 23666 23667 23668 23669 23670 23671 23672 23673 23674 23675 23676 23677 23678 23679 23680 23681 23682 23683 23684 23685 23686 class EnterpriseIdentityProvider ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"digest_method\" , \"enterprise\" , \"external_identities\" , \"idp_certificate\" , \"issuer\" , \"recovery_codes\" , \"signature_method\" , \"sso_url\" , ) digest_method = sgqlc . types . Field ( SamlDigestAlgorithm , graphql_name = \"digestMethod\" ) enterprise = sgqlc . types . Field ( Enterprise , graphql_name = \"enterprise\" ) external_identities = sgqlc . types . Field ( sgqlc . types . non_null ( ExternalIdentityConnection ), graphql_name = \"externalIdentities\" , args = sgqlc . types . ArgDict ( ( ( \"members_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"membersOnly\" , default = None ), ), ( \"login\" , sgqlc . types . Arg ( String , graphql_name = \"login\" , default = None )), ( \"user_name\" , sgqlc . types . Arg ( String , graphql_name = \"userName\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) idp_certificate = sgqlc . types . Field ( X509Certificate , graphql_name = \"idpCertificate\" ) issuer = sgqlc . types . Field ( String , graphql_name = \"issuer\" ) recovery_codes = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"recoveryCodes\" ) signature_method = sgqlc . types . Field ( SamlSignatureAlgorithm , graphql_name = \"signatureMethod\" ) sso_url = sgqlc . types . Field ( URI , graphql_name = \"ssoUrl\" ) EnterpriseMember Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32439 32440 32441 32442 32443 32444 32445 class EnterpriseMember ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( EnterpriseUserAccount , User ) EnterpriseMemberConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9704 9705 9706 9707 9708 9709 9710 9711 9712 9713 9714 9715 9716 9717 9718 9719 9720 9721 9722 class EnterpriseMemberConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseMemberEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseMember\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseMemberEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9725 9726 9727 9728 9729 9730 9731 9732 9733 class EnterpriseMemberEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseMember\" , graphql_name = \"node\" ) EnterpriseMemberOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 class EnterpriseMemberOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMemberOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) EnterpriseMemberOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 391 392 393 394 395 396 397 class EnterpriseMemberOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"LOGIN\" ) EnterpriseMembersCanCreateRepositoriesSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 400 401 402 403 404 405 406 class EnterpriseMembersCanCreateRepositoriesSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"DISABLED\" , \"NO_POLICY\" , \"PRIVATE\" , \"PUBLIC\" ) EnterpriseMembersCanMakePurchasesSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 409 410 411 412 413 414 415 class EnterpriseMembersCanMakePurchasesSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" ) EnterpriseOrganizationMembershipConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9736 9737 9738 9739 9740 9741 9742 9743 9744 9745 9746 9747 9748 9749 9750 9751 9752 9753 class EnterpriseOrganizationMembershipConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseOrganizationMembershipEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Organization\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseOrganizationMembershipEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9756 9757 9758 9759 9760 9761 9762 9763 9764 9765 9766 9767 class EnterpriseOrganizationMembershipEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"role\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Organization\" , graphql_name = \"node\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseUserAccountMembershipRole ), graphql_name = \"role\" ) EnterpriseOutsideCollaboratorConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9770 9771 9772 9773 9774 9775 9776 9777 9778 9779 9780 9781 9782 9783 9784 9785 9786 class EnterpriseOutsideCollaboratorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseOutsideCollaboratorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseOutsideCollaboratorEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9789 9790 9791 9792 9793 9794 9795 9796 9797 9798 9799 9800 9801 9802 9803 9804 9805 9806 9807 9808 9809 9810 9811 9812 9813 9814 9815 9816 9817 9818 9819 9820 class EnterpriseOutsideCollaboratorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"repositories\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( \"EnterpriseRepositoryInfoConnection\" ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"NAME\" , \"direction\" : \"ASC\" }, ), ), ) ), ) EnterpriseOwnerInfo Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9823 9824 9825 9826 9827 9828 9829 9830 9831 9832 9833 9834 9835 9836 9837 9838 9839 9840 9841 9842 9843 9844 9845 9846 9847 9848 9849 9850 9851 9852 9853 9854 9855 9856 9857 9858 9859 9860 9861 9862 9863 9864 9865 9866 9867 9868 9869 9870 9871 9872 9873 9874 9875 9876 9877 9878 9879 9880 9881 9882 9883 9884 9885 9886 9887 9888 9889 9890 9891 9892 9893 9894 9895 9896 9897 9898 9899 9900 9901 9902 9903 9904 9905 9906 9907 9908 9909 9910 9911 9912 9913 9914 9915 9916 9917 9918 9919 9920 9921 9922 9923 9924 9925 9926 9927 9928 9929 9930 9931 9932 9933 9934 9935 9936 9937 9938 9939 9940 9941 9942 9943 9944 9945 9946 9947 9948 9949 9950 9951 9952 9953 9954 9955 9956 9957 9958 9959 9960 9961 9962 9963 9964 9965 9966 9967 9968 9969 9970 9971 9972 9973 9974 9975 9976 9977 9978 9979 9980 9981 9982 9983 9984 9985 9986 9987 9988 9989 9990 9991 9992 9993 9994 9995 9996 9997 9998 9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 10700 class EnterpriseOwnerInfo ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"admins\" , \"affiliated_users_with_two_factor_disabled\" , \"affiliated_users_with_two_factor_disabled_exist\" , \"allow_private_repository_forking_setting\" , \"allow_private_repository_forking_setting_organizations\" , \"allow_private_repository_forking_setting_policy_value\" , \"default_repository_permission_setting\" , \"default_repository_permission_setting_organizations\" , \"domains\" , \"enterprise_server_installations\" , \"ip_allow_list_enabled_setting\" , \"ip_allow_list_entries\" , \"ip_allow_list_for_installed_apps_enabled_setting\" , \"is_updating_default_repository_permission\" , \"is_updating_two_factor_requirement\" , \"members_can_change_repository_visibility_setting\" , \"members_can_change_repository_visibility_setting_organizations\" , \"members_can_create_internal_repositories_setting\" , \"members_can_create_private_repositories_setting\" , \"members_can_create_public_repositories_setting\" , \"members_can_create_repositories_setting\" , \"members_can_create_repositories_setting_organizations\" , \"members_can_delete_issues_setting\" , \"members_can_delete_issues_setting_organizations\" , \"members_can_delete_repositories_setting\" , \"members_can_delete_repositories_setting_organizations\" , \"members_can_invite_collaborators_setting\" , \"members_can_invite_collaborators_setting_organizations\" , \"members_can_make_purchases_setting\" , \"members_can_update_protected_branches_setting\" , \"members_can_update_protected_branches_setting_organizations\" , \"members_can_view_dependency_insights_setting\" , \"members_can_view_dependency_insights_setting_organizations\" , \"notification_delivery_restriction_enabled_setting\" , \"oidc_provider\" , \"organization_projects_setting\" , \"organization_projects_setting_organizations\" , \"outside_collaborators\" , \"pending_admin_invitations\" , \"pending_collaborator_invitations\" , \"pending_member_invitations\" , \"repository_projects_setting\" , \"repository_projects_setting_organizations\" , \"saml_identity_provider\" , \"saml_identity_provider_setting_organizations\" , \"support_entitlements\" , \"team_discussions_setting\" , \"team_discussions_setting_organizations\" , \"two_factor_required_setting\" , \"two_factor_required_setting_organizations\" , ) admins = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorConnection ), graphql_name = \"admins\" , args = sgqlc . types . ArgDict ( ( ( \"organization_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"organizationLogins\" , default = None , ), ), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"role\" , sgqlc . types . Arg ( EnterpriseAdministratorRole , graphql_name = \"role\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseMemberOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"has_two_factor_enabled\" , sgqlc . types . Arg ( Boolean , graphql_name = \"hasTwoFactorEnabled\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) affiliated_users_with_two_factor_disabled = sgqlc . types . Field ( sgqlc . types . non_null ( \"UserConnection\" ), graphql_name = \"affiliatedUsersWithTwoFactorDisabled\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) affiliated_users_with_two_factor_disabled_exist = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"affiliatedUsersWithTwoFactorDisabledExist\" , ) allow_private_repository_forking_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"allowPrivateRepositoryForkingSetting\" , ) allow_private_repository_forking_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"allowPrivateRepositoryForkingSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) allow_private_repository_forking_setting_policy_value = sgqlc . types . Field ( EnterpriseAllowPrivateRepositoryForkingPolicyValue , graphql_name = \"allowPrivateRepositoryForkingSettingPolicyValue\" , ) default_repository_permission_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseDefaultRepositoryPermissionSettingValue ), graphql_name = \"defaultRepositoryPermissionSetting\" , ) default_repository_permission_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"defaultRepositoryPermissionSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DefaultRepositoryPermissionField ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) domains = sgqlc . types . Field ( sgqlc . types . non_null ( \"VerifiableDomainConnection\" ), graphql_name = \"domains\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"is_verified\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isVerified\" , default = None ), ), ( \"is_approved\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isApproved\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( VerifiableDomainOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) enterprise_server_installations = sgqlc . types . Field ( sgqlc . types . non_null ( \"EnterpriseServerInstallationConnection\" ), graphql_name = \"enterpriseServerInstallations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"connected_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"connectedOnly\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseServerInstallationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"HOST_NAME\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ip_allow_list_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEnabledSettingValue ), graphql_name = \"ipAllowListEnabledSetting\" , ) ip_allow_list_entries = sgqlc . types . Field ( sgqlc . types . non_null ( \"IpAllowListEntryConnection\" ), graphql_name = \"ipAllowListEntries\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( IpAllowListEntryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ip_allow_list_for_installed_apps_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListForInstalledAppsEnabledSettingValue ), graphql_name = \"ipAllowListForInstalledAppsEnabledSetting\" , ) is_updating_default_repository_permission = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUpdatingDefaultRepositoryPermission\" , ) is_updating_two_factor_requirement = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUpdatingTwoFactorRequirement\" ) members_can_change_repository_visibility_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanChangeRepositoryVisibilitySetting\" , ) members_can_change_repository_visibility_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanChangeRepositoryVisibilitySettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_create_internal_repositories_setting = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreateInternalRepositoriesSetting\" ) members_can_create_private_repositories_setting = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreatePrivateRepositoriesSetting\" ) members_can_create_public_repositories_setting = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreatePublicRepositoriesSetting\" ) members_can_create_repositories_setting = sgqlc . types . Field ( EnterpriseMembersCanCreateRepositoriesSettingValue , graphql_name = \"membersCanCreateRepositoriesSetting\" , ) members_can_create_repositories_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanCreateRepositoriesSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( OrganizationMembersCanCreateRepositoriesSettingValue ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_delete_issues_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanDeleteIssuesSetting\" , ) members_can_delete_issues_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanDeleteIssuesSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_delete_repositories_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanDeleteRepositoriesSetting\" , ) members_can_delete_repositories_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanDeleteRepositoriesSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_invite_collaborators_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanInviteCollaboratorsSetting\" , ) members_can_invite_collaborators_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanInviteCollaboratorsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_make_purchases_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMembersCanMakePurchasesSettingValue ), graphql_name = \"membersCanMakePurchasesSetting\" , ) members_can_update_protected_branches_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanUpdateProtectedBranchesSetting\" , ) members_can_update_protected_branches_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanUpdateProtectedBranchesSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_view_dependency_insights_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanViewDependencyInsightsSetting\" , ) members_can_view_dependency_insights_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanViewDependencyInsightsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) notification_delivery_restriction_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( NotificationRestrictionSettingValue ), graphql_name = \"notificationDeliveryRestrictionEnabledSetting\" , ) oidc_provider = sgqlc . types . Field ( \"OIDCProvider\" , graphql_name = \"oidcProvider\" ) organization_projects_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"organizationProjectsSetting\" , ) organization_projects_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"organizationProjectsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) outside_collaborators = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseOutsideCollaboratorConnection ), graphql_name = \"outsideCollaborators\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( String , graphql_name = \"login\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseMemberOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"visibility\" , sgqlc . types . Arg ( RepositoryVisibility , graphql_name = \"visibility\" , default = None ), ), ( \"has_two_factor_enabled\" , sgqlc . types . Arg ( Boolean , graphql_name = \"hasTwoFactorEnabled\" , default = None ), ), ( \"organization_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"organizationLogins\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pending_admin_invitations = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorInvitationConnection ), graphql_name = \"pendingAdminInvitations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseAdministratorInvitationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"role\" , sgqlc . types . Arg ( EnterpriseAdministratorRole , graphql_name = \"role\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pending_collaborator_invitations = sgqlc . types . Field ( sgqlc . types . non_null ( \"RepositoryInvitationConnection\" ), graphql_name = \"pendingCollaboratorInvitations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( RepositoryInvitationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pending_member_invitations = sgqlc . types . Field ( sgqlc . types . non_null ( \"EnterprisePendingMemberInvitationConnection\" ), graphql_name = \"pendingMemberInvitations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"organization_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"organizationLogins\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository_projects_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"repositoryProjectsSetting\" , ) repository_projects_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"repositoryProjectsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) saml_identity_provider = sgqlc . types . Field ( \"EnterpriseIdentityProvider\" , graphql_name = \"samlIdentityProvider\" ) saml_identity_provider_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"samlIdentityProviderSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( IdentityProviderConfigurationState ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) support_entitlements = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMemberConnection ), graphql_name = \"supportEntitlements\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( EnterpriseMemberOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) team_discussions_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"teamDiscussionsSetting\" , ) team_discussions_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"teamDiscussionsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) two_factor_required_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledSettingValue ), graphql_name = \"twoFactorRequiredSetting\" , ) two_factor_required_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"twoFactorRequiredSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) EnterprisePendingMemberInvitationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 10726 10727 10728 10729 10730 10731 class EnterprisePendingMemberInvitationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"total_unique_user_count\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterprisePendingMemberInvitationEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationInvitation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) total_unique_user_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalUniqueUserCount\" ) EnterprisePendingMemberInvitationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10734 10735 10736 10737 10738 10739 10740 10741 10742 class EnterprisePendingMemberInvitationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"OrganizationInvitation\" , graphql_name = \"node\" ) EnterpriseRepositoryInfo Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23689 23690 23691 23692 23693 23694 23695 23696 23697 23698 23699 23700 23701 23702 class EnterpriseRepositoryInfo ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_private\" , \"name\" , \"name_with_owner\" ) is_private = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrivate\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) name_with_owner = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"nameWithOwner\" ) EnterpriseRepositoryInfoConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10745 10746 10747 10748 10749 10750 10751 10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 class EnterpriseRepositoryInfoConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseRepositoryInfoEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseRepositoryInfo\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseRepositoryInfoEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10766 10767 10768 10769 10770 10771 10772 10773 10774 class EnterpriseRepositoryInfoEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseRepositoryInfo\" , graphql_name = \"node\" ) EnterpriseServerInstallation Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23705 23706 23707 23708 23709 23710 23711 23712 23713 23714 23715 23716 23717 23718 23719 23720 23721 23722 23723 23724 23725 23726 23727 23728 23729 23730 23731 23732 23733 23734 23735 23736 23737 23738 23739 23740 23741 23742 23743 23744 23745 23746 23747 23748 23749 23750 23751 23752 23753 23754 23755 23756 23757 23758 23759 23760 23761 23762 23763 23764 23765 23766 23767 23768 23769 23770 23771 23772 23773 23774 23775 23776 23777 23778 class EnterpriseServerInstallation ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"customer_name\" , \"host_name\" , \"is_connected\" , \"updated_at\" , \"user_accounts\" , \"user_accounts_uploads\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) customer_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"customerName\" ) host_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"hostName\" ) is_connected = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isConnected\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user_accounts = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountConnection ), graphql_name = \"userAccounts\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( EnterpriseServerUserAccountOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) user_accounts_uploads = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountsUploadConnection ), graphql_name = \"userAccountsUploads\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( EnterpriseServerUserAccountsUploadOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) EnterpriseServerInstallationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10777 10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 10791 10792 10793 10794 10795 class EnterpriseServerInstallationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerInstallationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerInstallation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseServerInstallationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10798 10799 10800 10801 10802 10803 10804 10805 10806 class EnterpriseServerInstallationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseServerInstallation\" , graphql_name = \"node\" ) EnterpriseServerInstallationOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 class EnterpriseServerInstallationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerInstallationOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) EnterpriseServerInstallationOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 418 419 420 421 422 423 424 class EnterpriseServerInstallationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"CUSTOMER_NAME\" , \"HOST_NAME\" ) EnterpriseServerUserAccount Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23781 23782 23783 23784 23785 23786 23787 23788 23789 23790 23791 23792 23793 23794 23795 23796 23797 23798 23799 23800 23801 23802 23803 23804 23805 23806 23807 23808 23809 23810 23811 23812 23813 23814 23815 23816 23817 23818 23819 23820 23821 23822 23823 23824 23825 23826 23827 23828 23829 23830 23831 23832 23833 23834 23835 23836 23837 23838 23839 23840 23841 class EnterpriseServerUserAccount ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"emails\" , \"enterprise_server_installation\" , \"is_site_admin\" , \"login\" , \"profile_name\" , \"remote_created_at\" , \"remote_user_id\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) emails = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountEmailConnection ), graphql_name = \"emails\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( EnterpriseServerUserAccountEmailOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"EMAIL\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) enterprise_server_installation = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerInstallation ), graphql_name = \"enterpriseServerInstallation\" , ) is_site_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSiteAdmin\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) profile_name = sgqlc . types . Field ( String , graphql_name = \"profileName\" ) remote_created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"remoteCreatedAt\" ) remote_user_id = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"remoteUserId\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) EnterpriseServerUserAccountConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10809 10810 10811 10812 10813 10814 10815 10816 10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 class EnterpriseServerUserAccountConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccount\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseServerUserAccountEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10830 10831 10832 10833 10834 10835 10836 10837 10838 class EnterpriseServerUserAccountEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseServerUserAccount\" , graphql_name = \"node\" ) EnterpriseServerUserAccountEmail Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23844 23845 23846 23847 23848 23849 23850 23851 23852 23853 23854 23855 23856 23857 23858 23859 23860 23861 23862 23863 23864 23865 23866 23867 23868 23869 class EnterpriseServerUserAccountEmail ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"email\" , \"is_primary\" , \"updated_at\" , \"user_account\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) email = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"email\" ) is_primary = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrimary\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user_account = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccount ), graphql_name = \"userAccount\" ) EnterpriseServerUserAccountEmailConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10841 10842 10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 10856 10857 10858 10859 10860 class EnterpriseServerUserAccountEmailConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountEmailEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountEmail\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseServerUserAccountEmailEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10863 10864 10865 10866 10867 10868 10869 10870 10871 class EnterpriseServerUserAccountEmailEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseServerUserAccountEmail\" , graphql_name = \"node\" ) EnterpriseServerUserAccountEmailOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 3957 3958 class EnterpriseServerUserAccountEmailOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountEmailOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) EnterpriseServerUserAccountEmailOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 427 428 429 430 431 432 433 class EnterpriseServerUserAccountEmailOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"EMAIL\" ,) EnterpriseServerUserAccountOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 class EnterpriseServerUserAccountOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) EnterpriseServerUserAccountOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 436 437 438 439 440 441 442 class EnterpriseServerUserAccountOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LOGIN\" , \"REMOTE_CREATED_AT\" ) EnterpriseServerUserAccountsUpload Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23872 23873 23874 23875 23876 23877 23878 23879 23880 23881 23882 23883 23884 23885 23886 23887 23888 23889 23890 23891 23892 23893 23894 23895 23896 23897 23898 23899 23900 23901 23902 23903 class EnterpriseServerUserAccountsUpload ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"enterprise\" , \"enterprise_server_installation\" , \"name\" , \"sync_state\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enterprise = sgqlc . types . Field ( sgqlc . types . non_null ( Enterprise ), graphql_name = \"enterprise\" ) enterprise_server_installation = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerInstallation ), graphql_name = \"enterpriseServerInstallation\" , ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) sync_state = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountsUploadSyncState ), graphql_name = \"syncState\" , ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) EnterpriseServerUserAccountsUploadConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10874 10875 10876 10877 10878 10879 10880 10881 10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 class EnterpriseServerUserAccountsUploadConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountsUploadEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountsUpload\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnterpriseServerUserAccountsUploadEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10896 10897 10898 10899 10900 10901 10902 10903 10904 class EnterpriseServerUserAccountsUploadEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseServerUserAccountsUpload\" , graphql_name = \"node\" ) EnterpriseServerUserAccountsUploadOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 class EnterpriseServerUserAccountsUploadOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountsUploadOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) EnterpriseServerUserAccountsUploadOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 445 446 447 448 449 450 451 class EnterpriseServerUserAccountsUploadOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) EnterpriseServerUserAccountsUploadSyncState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 454 455 456 457 458 459 460 class EnterpriseServerUserAccountsUploadSyncState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FAILURE\" , \"PENDING\" , \"SUCCESS\" ) EnterpriseUserAccount Bases: sgqlc . types . Type , Actor , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23906 23907 23908 23909 23910 23911 23912 23913 23914 23915 23916 23917 23918 23919 23920 23921 23922 23923 23924 23925 23926 23927 23928 23929 23930 23931 23932 23933 23934 23935 23936 23937 23938 23939 23940 23941 23942 23943 23944 23945 23946 23947 23948 23949 23950 23951 23952 23953 23954 23955 23956 23957 23958 23959 23960 23961 23962 class EnterpriseUserAccount ( sgqlc . types . Type , Actor , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"enterprise\" , \"name\" , \"organizations\" , \"updated_at\" , \"user\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enterprise = sgqlc . types . Field ( sgqlc . types . non_null ( Enterprise ), graphql_name = \"enterprise\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) organizations = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseOrganizationMembershipConnection ), graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"role\" , sgqlc . types . Arg ( EnterpriseUserAccountMembershipRole , graphql_name = \"role\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) EnterpriseUserAccountMembershipRole Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 463 464 465 466 467 468 469 class EnterpriseUserAccountMembershipRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MEMBER\" , \"OWNER\" , \"UNAFFILIATED\" ) EnterpriseUserDeployment Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 472 473 474 475 476 477 478 class EnterpriseUserDeployment ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOUD\" , \"SERVER\" ) Environment Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23965 23966 23967 23968 23969 23970 23971 23972 23973 23974 23975 23976 23977 23978 23979 23980 23981 23982 23983 23984 23985 23986 23987 23988 class Environment ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"name\" , \"protection_rules\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) protection_rules = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentProtectionRuleConnection ), graphql_name = \"protectionRules\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) EnvironmentConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10907 10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 10921 10922 10923 class EnvironmentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnvironmentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Environment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) EnvironmentEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10926 10927 10928 10929 10930 10931 10932 10933 10934 class EnvironmentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Environment\" , graphql_name = \"node\" ) ExternalIdentity Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23991 23992 23993 23994 23995 23996 23997 23998 23999 24000 24001 24002 24003 24004 24005 24006 24007 24008 24009 24010 24011 24012 24013 24014 class ExternalIdentity ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"guid\" , \"organization_invitation\" , \"saml_identity\" , \"scim_identity\" , \"user\" , ) guid = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"guid\" ) organization_invitation = sgqlc . types . Field ( \"OrganizationInvitation\" , graphql_name = \"organizationInvitation\" ) saml_identity = sgqlc . types . Field ( ExternalIdentitySamlAttributes , graphql_name = \"samlIdentity\" ) scim_identity = sgqlc . types . Field ( ExternalIdentityScimAttributes , graphql_name = \"scimIdentity\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) ExternalIdentityAttribute Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 class ExternalIdentityAttribute ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"metadata\" , \"name\" , \"value\" ) metadata = sgqlc . types . Field ( String , graphql_name = \"metadata\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"value\" ) ExternalIdentityConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 10960 10961 10962 10963 10964 10965 10966 10967 class ExternalIdentityConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ExternalIdentityEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ExternalIdentity\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ExternalIdentityEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10970 10971 10972 10973 10974 10975 10976 10977 10978 class ExternalIdentityEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ExternalIdentity\" , graphql_name = \"node\" ) ExternalIdentitySamlAttributes Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10981 10982 10983 10984 10985 10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 11012 class ExternalIdentitySamlAttributes ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"attributes\" , \"emails\" , \"family_name\" , \"given_name\" , \"groups\" , \"name_id\" , \"username\" , ) attributes = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ExternalIdentityAttribute )) ), graphql_name = \"attributes\" , ) emails = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"UserEmailMetadata\" )), graphql_name = \"emails\" , ) family_name = sgqlc . types . Field ( String , graphql_name = \"familyName\" ) given_name = sgqlc . types . Field ( String , graphql_name = \"givenName\" ) groups = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"groups\" ) name_id = sgqlc . types . Field ( String , graphql_name = \"nameId\" ) username = sgqlc . types . Field ( String , graphql_name = \"username\" ) ExternalIdentityScimAttributes Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 11025 11026 11027 11028 11029 11030 11031 class ExternalIdentityScimAttributes ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"emails\" , \"family_name\" , \"given_name\" , \"groups\" , \"username\" ) emails = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"UserEmailMetadata\" )), graphql_name = \"emails\" , ) family_name = sgqlc . types . Field ( String , graphql_name = \"familyName\" ) given_name = sgqlc . types . Field ( String , graphql_name = \"givenName\" ) groups = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"groups\" ) username = sgqlc . types . Field ( String , graphql_name = \"username\" ) FileAddition Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3993 3994 3995 3996 3997 3998 3999 4000 4001 4002 4003 class FileAddition ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"contents\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) contents = sgqlc . types . Field ( sgqlc . types . non_null ( Base64String ), graphql_name = \"contents\" ) FileChanges Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 4020 class FileChanges ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"deletions\" , \"additions\" ) deletions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"FileDeletion\" )), graphql_name = \"deletions\" , ) additions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( FileAddition )), graphql_name = \"additions\" , ) FileDeletion Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4023 4024 4025 4026 4027 4028 4029 4030 class FileDeletion ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" ,) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) FileViewedState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 481 482 483 484 485 486 487 class FileViewedState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISMISSED\" , \"UNVIEWED\" , \"VIEWED\" ) FollowOrganizationInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4033 4034 4035 4036 4037 4038 4039 4040 4041 4042 4043 class FollowOrganizationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) FollowOrganizationPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11034 11035 11036 11037 11038 11039 11040 11041 11042 class FollowOrganizationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) FollowUserInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4046 4047 4048 4049 4050 4051 4052 4053 4054 class FollowUserInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"user_id\" , \"client_mutation_id\" ) user_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"userId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) FollowUserPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11045 11046 11047 11048 11049 11050 11051 11052 11053 class FollowUserPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"user\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) FollowerConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11056 11057 11058 11059 11060 11061 11062 11063 11064 11065 11066 11067 11068 11069 11070 class FollowerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) FollowingConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11073 11074 11075 11076 11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 class FollowingConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) FundingLink Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 class FundingLink ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"platform\" , \"url\" ) platform = sgqlc . types . Field ( sgqlc . types . non_null ( FundingPlatform ), graphql_name = \"platform\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) FundingPlatform Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 class FundingPlatform ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMUNITY_BRIDGE\" , \"CUSTOM\" , \"GITHUB\" , \"ISSUEHUNT\" , \"KO_FI\" , \"LFX_CROWDFUNDING\" , \"LIBERAPAY\" , \"OPEN_COLLECTIVE\" , \"OTECHIE\" , \"PATREON\" , \"TIDELIFT\" , ) GenericHovercardContext Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24017 24018 24019 24020 24021 24022 24023 class GenericHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () Gist Bases: sgqlc . types . Type , Node , Starrable , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24026 24027 24028 24029 24030 24031 24032 24033 24034 24035 24036 24037 24038 24039 24040 24041 24042 24043 24044 24045 24046 24047 24048 24049 24050 24051 24052 24053 24054 24055 24056 24057 24058 24059 24060 24061 24062 24063 24064 24065 24066 24067 24068 24069 24070 24071 24072 24073 24074 24075 24076 24077 24078 24079 24080 24081 24082 24083 24084 24085 24086 24087 24088 24089 24090 24091 24092 24093 24094 24095 24096 24097 24098 24099 24100 24101 24102 class Gist ( sgqlc . types . Type , Node , Starrable , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"created_at\" , \"description\" , \"files\" , \"forks\" , \"is_fork\" , \"is_public\" , \"name\" , \"owner\" , \"pushed_at\" , \"updated_at\" , ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( GistCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) files = sgqlc . types . Field ( sgqlc . types . list_of ( GistFile ), graphql_name = \"files\" , args = sgqlc . types . ArgDict ( ( ( \"limit\" , sgqlc . types . Arg ( Int , graphql_name = \"limit\" , default = 10 )), ( \"oid\" , sgqlc . types . Arg ( GitObjectID , graphql_name = \"oid\" , default = None )), ) ), ) forks = sgqlc . types . Field ( sgqlc . types . non_null ( GistConnection ), graphql_name = \"forks\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( GistOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) is_fork = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isFork\" ) is_public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPublic\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) owner = sgqlc . types . Field ( RepositoryOwner , graphql_name = \"owner\" ) pushed_at = sgqlc . types . Field ( DateTime , graphql_name = \"pushedAt\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) GistComment Bases: sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24105 24106 24107 24108 24109 24110 24111 24112 24113 24114 24115 class GistComment ( sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"gist\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) gist = sgqlc . types . Field ( sgqlc . types . non_null ( Gist ), graphql_name = \"gist\" ) GistCommentConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 11116 11117 11118 11119 class GistCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"GistCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"GistComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) GistCommentEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11122 11123 11124 11125 11126 11127 11128 11129 11130 class GistCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"GistComment\" , graphql_name = \"node\" ) GistConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11133 11134 11135 11136 11137 11138 11139 11140 11141 11142 11143 11144 11145 11146 11147 class GistConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"GistEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Gist\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) GistEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11150 11151 11152 11153 11154 11155 11156 11157 11158 class GistEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Gist\" , graphql_name = \"node\" ) GistFile Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11161 11162 11163 11164 11165 11166 11167 11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 11194 class GistFile ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"encoded_name\" , \"encoding\" , \"extension\" , \"is_image\" , \"is_truncated\" , \"language\" , \"name\" , \"size\" , \"text\" , ) encoded_name = sgqlc . types . Field ( String , graphql_name = \"encodedName\" ) encoding = sgqlc . types . Field ( String , graphql_name = \"encoding\" ) extension = sgqlc . types . Field ( String , graphql_name = \"extension\" ) is_image = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isImage\" ) is_truncated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isTruncated\" ) language = sgqlc . types . Field ( \"Language\" , graphql_name = \"language\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) size = sgqlc . types . Field ( Int , graphql_name = \"size\" ) text = sgqlc . types . Field ( String , graphql_name = \"text\" , args = sgqlc . types . ArgDict ( (( \"truncate\" , sgqlc . types . Arg ( Int , graphql_name = \"truncate\" , default = None )),) ), ) GistOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 class GistOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( GistOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) GistOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 514 515 516 517 518 519 520 class GistOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"PUSHED_AT\" , \"UPDATED_AT\" ) GistPrivacy Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 523 524 525 526 527 528 529 class GistPrivacy ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"PUBLIC\" , \"SECRET\" ) GitActor Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 11207 11208 11209 11210 11211 11212 11213 11214 class GitActor ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"date\" , \"email\" , \"name\" , \"user\" ) avatar_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) date = sgqlc . types . Field ( GitTimestamp , graphql_name = \"date\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) GitActorConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11217 11218 11219 11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 class GitActorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"GitActorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( GitActor ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) GitActorEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11234 11235 11236 11237 11238 11239 11240 11241 11242 class GitActorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( GitActor , graphql_name = \"node\" ) GitHubMetadata Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11245 11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 11272 11273 11274 11275 11276 11277 11278 11279 class GitHubMetadata ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"git_hub_services_sha\" , \"git_ip_addresses\" , \"hook_ip_addresses\" , \"importer_ip_addresses\" , \"is_password_authentication_verifiable\" , \"pages_ip_addresses\" , ) git_hub_services_sha = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"gitHubServicesSha\" ) git_ip_addresses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"gitIpAddresses\" ) hook_ip_addresses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"hookIpAddresses\" , ) importer_ip_addresses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"importerIpAddresses\" , ) is_password_authentication_verifiable = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPasswordAuthenticationVerifiable\" ) pages_ip_addresses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"pagesIpAddresses\" , ) GitObject Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11282 11283 11284 11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 class GitObject ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"abbreviated_oid\" , \"commit_resource_path\" , \"commit_url\" , \"id\" , \"oid\" , \"repository\" , ) abbreviated_oid = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"abbreviatedOid\" ) commit_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"commitResourcePath\" ) commit_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"commitUrl\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"oid\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) GitObjectID Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 532 533 534 535 536 537 class GitObjectID ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema GitSSHRemote Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 540 541 542 543 544 545 class GitSSHRemote ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema GitSignature Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11310 11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 11337 class GitSignature ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"email\" , \"is_valid\" , \"payload\" , \"signature\" , \"signer\" , \"state\" , \"was_signed_by_git_hub\" , ) email = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"email\" ) is_valid = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isValid\" ) payload = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"payload\" ) signature = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"signature\" ) signer = sgqlc . types . Field ( \"User\" , graphql_name = \"signer\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( GitSignatureState ), graphql_name = \"state\" ) was_signed_by_git_hub = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"wasSignedByGitHub\" ) GitSignatureState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 class GitSignatureState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BAD_CERT\" , \"BAD_EMAIL\" , \"EXPIRED_KEY\" , \"GPGVERIFY_ERROR\" , \"GPGVERIFY_UNAVAILABLE\" , \"INVALID\" , \"MALFORMED_SIG\" , \"NOT_SIGNING_KEY\" , \"NO_USER\" , \"OCSP_ERROR\" , \"OCSP_PENDING\" , \"OCSP_REVOKED\" , \"UNKNOWN_KEY\" , \"UNKNOWN_SIG_TYPE\" , \"UNSIGNED\" , \"UNVERIFIED_EMAIL\" , \"VALID\" , ) GitTimestamp Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 575 576 577 578 579 580 class GitTimestamp ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema GpgSignature Bases: sgqlc . types . Type , GitSignature See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24118 24119 24120 24121 24122 24123 24124 24125 class GpgSignature ( sgqlc . types . Type , GitSignature ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"key_id\" ,) key_id = sgqlc . types . Field ( String , graphql_name = \"keyId\" ) GrantEnterpriseOrganizationsMigratorRoleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083 class GrantEnterpriseOrganizationsMigratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) GrantEnterpriseOrganizationsMigratorRolePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 class GrantEnterpriseOrganizationsMigratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organizations\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organizations = sgqlc . types . Field ( \"OrganizationConnection\" , graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) GrantMigratorRoleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097 4098 4099 4100 class GrantMigratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"actor\" , \"actor_type\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) actor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"actor\" ) actor_type = sgqlc . types . Field ( sgqlc . types . non_null ( ActorType ), graphql_name = \"actorType\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) GrantMigratorRolePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11365 11366 11367 11368 11369 11370 11371 11372 11373 class GrantMigratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"success\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) success = sgqlc . types . Field ( Boolean , graphql_name = \"success\" ) HTML Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 583 584 585 586 587 588 class HTML ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema HeadRefDeletedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24128 24129 24130 24131 24132 24133 24134 24135 24136 24137 24138 24139 24140 24141 24142 24143 24144 24145 24146 24147 24148 24149 24150 24151 class HeadRefDeletedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"head_ref\" , \"head_ref_name\" , \"pull_request\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) head_ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"headRef\" ) head_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"headRefName\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) HeadRefForcePushedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24154 24155 24156 24157 24158 24159 24160 24161 24162 24163 24164 24165 24166 24167 24168 24169 24170 24171 24172 24173 24174 24175 24176 24177 class HeadRefForcePushedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"after_commit\" , \"before_commit\" , \"created_at\" , \"pull_request\" , \"ref\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) after_commit = sgqlc . types . Field ( Commit , graphql_name = \"afterCommit\" ) before_commit = sgqlc . types . Field ( Commit , graphql_name = \"beforeCommit\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) HeadRefRestoredEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24180 24181 24182 24183 24184 24185 24186 24187 24188 24189 24190 24191 24192 24193 class HeadRefRestoredEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) Hovercard Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 class Hovercard ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contexts\" ,) contexts = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"HovercardContext\" )) ), graphql_name = \"contexts\" , ) HovercardContext Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11391 11392 11393 11394 11395 11396 11397 11398 11399 class HovercardContext ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"message\" , \"octicon\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) octicon = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"octicon\" ) IdentityProviderConfigurationState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 594 595 596 597 598 599 600 class IdentityProviderConfigurationState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CONFIGURED\" , \"ENFORCED\" , \"UNCONFIGURED\" ) InviteEnterpriseAdminInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 class InviteEnterpriseAdminInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"invitee\" , \"email\" , \"role\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) invitee = sgqlc . types . Field ( String , graphql_name = \"invitee\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) role = sgqlc . types . Field ( EnterpriseAdministratorRole , graphql_name = \"role\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) InviteEnterpriseAdminPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 class InviteEnterpriseAdminPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"invitation\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) invitation = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"invitation\" ) IpAllowListEnabledSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 606 607 608 609 610 611 612 class IpAllowListEnabledSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" ) IpAllowListEntry Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24196 24197 24198 24199 24200 24201 24202 24203 24204 24205 24206 24207 24208 24209 24210 24211 24212 24213 24214 24215 24216 24217 24218 24219 24220 24221 24222 24223 24224 24225 class IpAllowListEntry ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"allow_list_value\" , \"created_at\" , \"is_active\" , \"name\" , \"owner\" , \"updated_at\" , ) allow_list_value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"allowListValue\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_active = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isActive\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( \"IpAllowListOwner\" ), graphql_name = \"owner\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) IpAllowListEntryConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 11428 11429 11430 11431 11432 11433 class IpAllowListEntryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IpAllowListEntryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"IpAllowListEntry\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) IpAllowListEntryEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11436 11437 11438 11439 11440 11441 11442 11443 11444 class IpAllowListEntryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"IpAllowListEntry\" , graphql_name = \"node\" ) IpAllowListEntryOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 class IpAllowListEntryOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEntryOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) IpAllowListEntryOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 615 616 617 618 619 620 621 class IpAllowListEntryOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALLOW_LIST_VALUE\" , \"CREATED_AT\" ) IpAllowListForInstalledAppsEnabledSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 624 625 626 627 628 629 630 class IpAllowListForInstalledAppsEnabledSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" ) IpAllowListOwner Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32448 32449 32450 32451 32452 32453 32454 class IpAllowListOwner ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Enterprise , Organization ) Issue Bases: sgqlc . types . Type , Node , Assignable , Closable , Comment , Updatable , UpdatableComment , Labelable , Lockable , Reactable , RepositoryNode , Subscribable , UniformResourceLocatable , ProjectNextOwner , ProjectV2Owner See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Issue ( sgqlc . types . Type , Node , Assignable , Closable , Comment , Updatable , UpdatableComment , Labelable , Lockable , Reactable , RepositoryNode , Subscribable , UniformResourceLocatable , ProjectNextOwner , ProjectV2Owner , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body_resource_path\" , \"body_url\" , \"comments\" , \"hovercard\" , \"is_pinned\" , \"is_read_by_viewer\" , \"milestone\" , \"number\" , \"participants\" , \"project_cards\" , \"project_items\" , \"project_next_items\" , \"state\" , \"state_reason\" , \"timeline\" , \"timeline_items\" , \"title\" , \"title_html\" , \"tracked_in_issues\" , \"tracked_issues\" , \"tracked_issues_count\" , ) body_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"bodyResourcePath\" ) body_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"bodyUrl\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( IssueCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueCommentOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) hovercard = sgqlc . types . Field ( sgqlc . types . non_null ( Hovercard ), graphql_name = \"hovercard\" , args = sgqlc . types . ArgDict ( ( ( \"include_notification_contexts\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeNotificationContexts\" , default = True , ), ), ) ), ) is_pinned = sgqlc . types . Field ( Boolean , graphql_name = \"isPinned\" ) is_read_by_viewer = sgqlc . types . Field ( Boolean , graphql_name = \"isReadByViewer\" ) milestone = sgqlc . types . Field ( \"Milestone\" , graphql_name = \"milestone\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) participants = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"participants\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) project_cards = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectCardConnection ), graphql_name = \"projectCards\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"archived_states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( ProjectCardArchivedState ), graphql_name = \"archivedStates\" , default = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ), ), ), ) ), ) project_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemConnection ), graphql_name = \"projectItems\" , args = sgqlc . types . ArgDict ( ( ( \"include_archived\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeArchived\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) project_next_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItemConnection ), graphql_name = \"projectNextItems\" , args = sgqlc . types . ArgDict ( ( ( \"include_archived\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeArchived\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) state = sgqlc . types . Field ( sgqlc . types . non_null ( IssueState ), graphql_name = \"state\" ) state_reason = sgqlc . types . Field ( IssueStateReason , graphql_name = \"stateReason\" ) timeline = sgqlc . types . Field ( sgqlc . types . non_null ( IssueTimelineConnection ), graphql_name = \"timeline\" , args = sgqlc . types . ArgDict ( ( ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) timeline_items = sgqlc . types . Field ( sgqlc . types . non_null ( IssueTimelineItemsConnection ), graphql_name = \"timelineItems\" , args = sgqlc . types . ArgDict ( ( ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ( \"skip\" , sgqlc . types . Arg ( Int , graphql_name = \"skip\" , default = None )), ( \"item_types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueTimelineItemsItemType ) ), graphql_name = \"itemTypes\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) title_html = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"titleHTML\" ) tracked_in_issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"trackedInIssues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) tracked_issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"trackedIssues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) tracked_issues_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"trackedIssuesCount\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( TrackedIssueStates ), graphql_name = \"states\" , default = None , ), ), ) ), ) IssueClosedStateReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 633 634 635 636 637 638 639 class IssueClosedStateReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMPLETED\" , \"NOT_PLANNED\" ) IssueComment Bases: sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24501 24502 24503 24504 24505 24506 24507 24508 24509 24510 24511 24512 24513 24514 24515 24516 24517 24518 24519 24520 24521 24522 24523 class IssueComment ( sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue\" , \"pull_request\" , \"resource_path\" , \"url\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) IssueCommentConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11447 11448 11449 11450 11451 11452 11453 11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 class IssueCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) IssueCommentEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11466 11467 11468 11469 11470 11471 11472 11473 11474 class IssueCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"IssueComment\" , graphql_name = \"node\" ) IssueCommentOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 class IssueCommentOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( IssueCommentOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) IssueCommentOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 642 643 644 645 646 647 648 class IssueCommentOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"UPDATED_AT\" ,) IssueConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11477 11478 11479 11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 class IssueConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Issue\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) IssueContributionsByRepository Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 11519 11520 11521 11522 11523 11524 11525 11526 class IssueContributionsByRepository ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contributions\" , \"repository\" ) contributions = sgqlc . types . Field ( sgqlc . types . non_null ( CreatedIssueContributionConnection ), graphql_name = \"contributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) IssueEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11529 11530 11531 11532 11533 11534 11535 11536 11537 class IssueEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Issue\" , graphql_name = \"node\" ) IssueFilters Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 class IssueFilters ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignee\" , \"created_by\" , \"labels\" , \"mentioned\" , \"milestone\" , \"milestone_number\" , \"since\" , \"states\" , \"viewer_subscribed\" , ) assignee = sgqlc . types . Field ( String , graphql_name = \"assignee\" ) created_by = sgqlc . types . Field ( String , graphql_name = \"createdBy\" ) labels = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" ) mentioned = sgqlc . types . Field ( String , graphql_name = \"mentioned\" ) milestone = sgqlc . types . Field ( String , graphql_name = \"milestone\" ) milestone_number = sgqlc . types . Field ( String , graphql_name = \"milestoneNumber\" ) since = sgqlc . types . Field ( DateTime , graphql_name = \"since\" ) states = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" ) viewer_subscribed = sgqlc . types . Field ( Boolean , graphql_name = \"viewerSubscribed\" ) IssueOrPullRequest Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32457 32458 32459 32460 32461 32462 32463 class IssueOrPullRequest ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest ) IssueOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199 class IssueOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( IssueOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) IssueOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 651 652 653 654 655 656 657 class IssueOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMENTS\" , \"CREATED_AT\" , \"UPDATED_AT\" ) IssueState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 660 661 662 663 664 665 666 class IssueState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" ) IssueStateReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 669 670 671 672 673 674 675 class IssueStateReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMPLETED\" , \"NOT_PLANNED\" , \"REOPENED\" ) IssueTemplate Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11540 11541 11542 11543 11544 11545 11546 11547 11548 11549 11550 class IssueTemplate ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"about\" , \"body\" , \"name\" , \"title\" ) about = sgqlc . types . Field ( String , graphql_name = \"about\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) IssueTimelineConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11553 11554 11555 11556 11557 11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 11571 class IssueTimelineConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueTimelineItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueTimelineItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) IssueTimelineItem Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32466 32467 32468 32469 32470 32471 32472 32473 32474 32475 32476 32477 32478 32479 32480 32481 32482 32483 32484 32485 32486 32487 32488 32489 32490 32491 32492 class IssueTimelineItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( AssignedEvent , ClosedEvent , Commit , CrossReferencedEvent , DemilestonedEvent , IssueComment , LabeledEvent , LockedEvent , MilestonedEvent , ReferencedEvent , RenamedTitleEvent , ReopenedEvent , SubscribedEvent , TransferredEvent , UnassignedEvent , UnlabeledEvent , UnlockedEvent , UnsubscribedEvent , UserBlockedEvent , ) IssueTimelineItemEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11574 11575 11576 11577 11578 11579 11580 11581 11582 class IssueTimelineItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"IssueTimelineItem\" , graphql_name = \"node\" ) IssueTimelineItems Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32495 32496 32497 32498 32499 32500 32501 32502 32503 32504 32505 32506 32507 32508 32509 32510 32511 32512 32513 32514 32515 32516 32517 32518 32519 32520 32521 32522 32523 32524 32525 32526 32527 32528 32529 32530 32531 32532 32533 class IssueTimelineItems ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( AddedToProjectEvent , AssignedEvent , ClosedEvent , CommentDeletedEvent , ConnectedEvent , ConvertedNoteToIssueEvent , ConvertedToDiscussionEvent , CrossReferencedEvent , DemilestonedEvent , DisconnectedEvent , IssueComment , LabeledEvent , LockedEvent , MarkedAsDuplicateEvent , MentionedEvent , MilestonedEvent , MovedColumnsInProjectEvent , PinnedEvent , ReferencedEvent , RemovedFromProjectEvent , RenamedTitleEvent , ReopenedEvent , SubscribedEvent , TransferredEvent , UnassignedEvent , UnlabeledEvent , UnlockedEvent , UnmarkedAsDuplicateEvent , UnpinnedEvent , UnsubscribedEvent , UserBlockedEvent , ) IssueTimelineItemsConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 11610 11611 11612 11613 11614 11615 11616 11617 11618 class IssueTimelineItemsConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"filtered_count\" , \"nodes\" , \"page_count\" , \"page_info\" , \"total_count\" , \"updated_at\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueTimelineItemsEdge\" ), graphql_name = \"edges\" ) filtered_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"filteredCount\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueTimelineItems\" ), graphql_name = \"nodes\" ) page_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"pageCount\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) IssueTimelineItemsEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11621 11622 11623 11624 11625 11626 11627 11628 11629 class IssueTimelineItemsEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"IssueTimelineItems\" , graphql_name = \"node\" ) IssueTimelineItemsItemType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 class IssueTimelineItemsItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADDED_TO_PROJECT_EVENT\" , \"ASSIGNED_EVENT\" , \"CLOSED_EVENT\" , \"COMMENT_DELETED_EVENT\" , \"CONNECTED_EVENT\" , \"CONVERTED_NOTE_TO_ISSUE_EVENT\" , \"CONVERTED_TO_DISCUSSION_EVENT\" , \"CROSS_REFERENCED_EVENT\" , \"DEMILESTONED_EVENT\" , \"DISCONNECTED_EVENT\" , \"ISSUE_COMMENT\" , \"LABELED_EVENT\" , \"LOCKED_EVENT\" , \"MARKED_AS_DUPLICATE_EVENT\" , \"MENTIONED_EVENT\" , \"MILESTONED_EVENT\" , \"MOVED_COLUMNS_IN_PROJECT_EVENT\" , \"PINNED_EVENT\" , \"REFERENCED_EVENT\" , \"REMOVED_FROM_PROJECT_EVENT\" , \"RENAMED_TITLE_EVENT\" , \"REOPENED_EVENT\" , \"SUBSCRIBED_EVENT\" , \"TRANSFERRED_EVENT\" , \"UNASSIGNED_EVENT\" , \"UNLABELED_EVENT\" , \"UNLOCKED_EVENT\" , \"UNMARKED_AS_DUPLICATE_EVENT\" , \"UNPINNED_EVENT\" , \"UNSUBSCRIBED_EVENT\" , \"USER_BLOCKED_EVENT\" , ) JoinedGitHubContribution Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24526 24527 24528 24529 24530 24531 24532 class JoinedGitHubContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () Label Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Label ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"color\" , \"created_at\" , \"description\" , \"is_default\" , \"issues\" , \"name\" , \"pull_requests\" , \"repository\" , \"resource_path\" , \"updated_at\" , \"url\" , ) color = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"color\" ) created_at = sgqlc . types . Field ( DateTime , graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) is_default = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDefault\" ) issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"issues\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" , default = None , ), ), ( \"filter_by\" , sgqlc . types . Arg ( IssueFilters , graphql_name = \"filterBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) updated_at = sgqlc . types . Field ( DateTime , graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) LabelConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11632 11633 11634 11635 11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 class LabelConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"LabelEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Label\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) LabelEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11649 11650 11651 11652 11653 11654 11655 11656 11657 class LabelEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Label\" , graphql_name = \"node\" ) LabelOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 class LabelOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( LabelOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) LabelOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 719 720 721 722 723 724 725 class LabelOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" ) Labelable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11660 11661 11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 11688 11689 class Labelable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"labels\" ,) labels = sgqlc . types . Field ( LabelConnection , graphql_name = \"labels\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( LabelOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) LabeledEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24655 24656 24657 24658 24659 24660 24661 24662 24663 24664 24665 24666 24667 24668 24669 class LabeledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"label\" , \"labelable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) label = sgqlc . types . Field ( sgqlc . types . non_null ( Label ), graphql_name = \"label\" ) labelable = sgqlc . types . Field ( sgqlc . types . non_null ( Labelable ), graphql_name = \"labelable\" ) Language Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24672 24673 24674 24675 24676 24677 24678 24679 24680 class Language ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"color\" , \"name\" ) color = sgqlc . types . Field ( String , graphql_name = \"color\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) LanguageConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11692 11693 11694 11695 11696 11697 11698 11699 11700 11701 11702 11703 11704 11705 11706 11707 class LanguageConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"total_size\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"LanguageEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Language\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) total_size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalSize\" ) LanguageEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11710 11711 11712 11713 11714 11715 11716 11717 11718 11719 class LanguageEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"size\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"Language\" ), graphql_name = \"node\" ) size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"size\" ) LanguageOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 class LanguageOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( LanguageOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) LanguageOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 728 729 730 731 732 733 734 class LanguageOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SIZE\" ,) License Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24683 24684 24685 24686 24687 24688 24689 24690 24691 24692 24693 24694 24695 24696 24697 24698 24699 24700 24701 24702 24703 24704 24705 24706 24707 24708 24709 24710 24711 24712 24713 24714 24715 24716 24717 24718 24719 24720 24721 24722 24723 24724 24725 24726 24727 24728 24729 class License ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"conditions\" , \"description\" , \"featured\" , \"hidden\" , \"implementation\" , \"key\" , \"limitations\" , \"name\" , \"nickname\" , \"permissions\" , \"pseudo_license\" , \"spdx_id\" , \"url\" , ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) conditions = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( LicenseRule )), graphql_name = \"conditions\" , ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) featured = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"featured\" ) hidden = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hidden\" ) implementation = sgqlc . types . Field ( String , graphql_name = \"implementation\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) limitations = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( LicenseRule )), graphql_name = \"limitations\" , ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) nickname = sgqlc . types . Field ( String , graphql_name = \"nickname\" ) permissions = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( LicenseRule )), graphql_name = \"permissions\" , ) pseudo_license = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"pseudoLicense\" ) spdx_id = sgqlc . types . Field ( String , graphql_name = \"spdxId\" ) url = sgqlc . types . Field ( URI , graphql_name = \"url\" ) LicenseRule Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11722 11723 11724 11725 11726 11727 11728 11729 11730 11731 11732 11733 class LicenseRule ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"description\" , \"key\" , \"label\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) label = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"label\" ) LinkRepositoryToProjectInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 class LinkRepositoryToProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"repository_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) LinkRepositoryToProjectPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11736 11737 11738 11739 11740 11741 11742 11743 11744 11745 class LinkRepositoryToProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) LockLockableInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 class LockLockableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"lockable_id\" , \"lock_reason\" , \"client_mutation_id\" ) lockable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"lockableId\" ) lock_reason = sgqlc . types . Field ( LockReason , graphql_name = \"lockReason\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) LockLockablePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 class LockLockablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"locked_record\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) locked_record = sgqlc . types . Field ( \"Lockable\" , graphql_name = \"lockedRecord\" ) LockReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 737 738 739 740 741 742 743 class LockReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"OFF_TOPIC\" , \"RESOLVED\" , \"SPAM\" , \"TOO_HEATED\" ) Lockable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11760 11761 11762 11763 11764 11765 11766 11767 11768 class Lockable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"active_lock_reason\" , \"locked\" ) active_lock_reason = sgqlc . types . Field ( LockReason , graphql_name = \"activeLockReason\" ) locked = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"locked\" ) LockedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24732 24733 24734 24735 24736 24737 24738 24739 24740 24741 24742 24743 24744 24745 24746 class LockedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"lock_reason\" , \"lockable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) lock_reason = sgqlc . types . Field ( LockReason , graphql_name = \"lockReason\" ) lockable = sgqlc . types . Field ( sgqlc . types . non_null ( Lockable ), graphql_name = \"lockable\" ) Mannequin Bases: sgqlc . types . Type , Node , Actor , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24749 24750 24751 24752 24753 24754 24755 24756 24757 24758 24759 24760 24761 24762 24763 24764 class Mannequin ( sgqlc . types . Type , Node , Actor , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"claimant\" , \"created_at\" , \"database_id\" , \"email\" , \"updated_at\" ) claimant = sgqlc . types . Field ( \"User\" , graphql_name = \"claimant\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) MarkDiscussionCommentAsAnswerInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4258 4259 4260 4261 4262 4263 4264 4265 4266 class MarkDiscussionCommentAsAnswerInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MarkDiscussionCommentAsAnswerPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11771 11772 11773 11774 11775 11776 11777 11778 11779 class MarkDiscussionCommentAsAnswerPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" ) MarkFileAsViewedInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 class MarkFileAsViewedInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"path\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MarkFileAsViewedPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11782 11783 11784 11785 11786 11787 11788 11789 11790 class MarkFileAsViewedPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) MarkPullRequestReadyForReviewInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 class MarkPullRequestReadyForReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MarkPullRequestReadyForReviewPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11793 11794 11795 11796 11797 11798 11799 11800 11801 class MarkPullRequestReadyForReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) MarkedAsDuplicateEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24767 24768 24769 24770 24771 24772 24773 24774 24775 24776 24777 24778 24779 24780 24781 24782 24783 24784 24785 24786 24787 24788 class MarkedAsDuplicateEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"canonical\" , \"created_at\" , \"duplicate\" , \"is_cross_repository\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) canonical = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"canonical\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) duplicate = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"duplicate\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) MarketplaceCategory Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24791 24792 24793 24794 24795 24796 24797 24798 24799 24800 24801 24802 24803 24804 24805 24806 24807 24808 24809 24810 24811 24812 24813 24814 24815 24816 24817 24818 24819 24820 class MarketplaceCategory ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"description\" , \"how_it_works\" , \"name\" , \"primary_listing_count\" , \"resource_path\" , \"secondary_listing_count\" , \"slug\" , \"url\" , ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) how_it_works = sgqlc . types . Field ( String , graphql_name = \"howItWorks\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) primary_listing_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"primaryListingCount\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) secondary_listing_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"secondaryListingCount\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) MarketplaceListing Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass MarketplaceListing ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app\" , \"company_url\" , \"configuration_resource_path\" , \"configuration_url\" , \"documentation_url\" , \"extended_description\" , \"extended_description_html\" , \"full_description\" , \"full_description_html\" , \"has_published_free_trial_plans\" , \"has_terms_of_service\" , \"has_verified_owner\" , \"how_it_works\" , \"how_it_works_html\" , \"installation_url\" , \"installed_for_viewer\" , \"is_archived\" , \"is_draft\" , \"is_paid\" , \"is_public\" , \"is_rejected\" , \"is_unverified\" , \"is_unverified_pending\" , \"is_verification_pending_from_draft\" , \"is_verification_pending_from_unverified\" , \"is_verified\" , \"logo_background_color\" , \"logo_url\" , \"name\" , \"normalized_short_description\" , \"pricing_url\" , \"primary_category\" , \"privacy_policy_url\" , \"resource_path\" , \"screenshot_urls\" , \"secondary_category\" , \"short_description\" , \"slug\" , \"status_url\" , \"support_email\" , \"support_url\" , \"terms_of_service_url\" , \"url\" , \"viewer_can_add_plans\" , \"viewer_can_approve\" , \"viewer_can_delist\" , \"viewer_can_edit\" , \"viewer_can_edit_categories\" , \"viewer_can_edit_plans\" , \"viewer_can_redraft\" , \"viewer_can_reject\" , \"viewer_can_request_approval\" , \"viewer_has_purchased\" , \"viewer_has_purchased_for_all_organizations\" , \"viewer_is_listing_admin\" , ) app = sgqlc . types . Field ( App , graphql_name = \"app\" ) company_url = sgqlc . types . Field ( URI , graphql_name = \"companyUrl\" ) configuration_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"configurationResourcePath\" ) configuration_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"configurationUrl\" ) documentation_url = sgqlc . types . Field ( URI , graphql_name = \"documentationUrl\" ) extended_description = sgqlc . types . Field ( String , graphql_name = \"extendedDescription\" ) extended_description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"extendedDescriptionHTML\" ) full_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"fullDescription\" ) full_description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"fullDescriptionHTML\" ) has_published_free_trial_plans = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasPublishedFreeTrialPlans\" ) has_terms_of_service = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasTermsOfService\" ) has_verified_owner = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasVerifiedOwner\" ) how_it_works = sgqlc . types . Field ( String , graphql_name = \"howItWorks\" ) how_it_works_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"howItWorksHTML\" ) installation_url = sgqlc . types . Field ( URI , graphql_name = \"installationUrl\" ) installed_for_viewer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"installedForViewer\" ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) is_draft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDraft\" ) is_paid = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPaid\" ) is_public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPublic\" ) is_rejected = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isRejected\" ) is_unverified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUnverified\" ) is_unverified_pending = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUnverifiedPending\" ) is_verification_pending_from_draft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerificationPendingFromDraft\" ) is_verification_pending_from_unverified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerificationPendingFromUnverified\" , ) is_verified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerified\" ) logo_background_color = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"logoBackgroundColor\" ) logo_url = sgqlc . types . Field ( URI , graphql_name = \"logoUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = 400 )),) ), ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) normalized_short_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"normalizedShortDescription\" ) pricing_url = sgqlc . types . Field ( URI , graphql_name = \"pricingUrl\" ) primary_category = sgqlc . types . Field ( sgqlc . types . non_null ( MarketplaceCategory ), graphql_name = \"primaryCategory\" ) privacy_policy_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"privacyPolicyUrl\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) screenshot_urls = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( String )), graphql_name = \"screenshotUrls\" ) secondary_category = sgqlc . types . Field ( MarketplaceCategory , graphql_name = \"secondaryCategory\" ) short_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"shortDescription\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) status_url = sgqlc . types . Field ( URI , graphql_name = \"statusUrl\" ) support_email = sgqlc . types . Field ( String , graphql_name = \"supportEmail\" ) support_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"supportUrl\" ) terms_of_service_url = sgqlc . types . Field ( URI , graphql_name = \"termsOfServiceUrl\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) viewer_can_add_plans = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanAddPlans\" ) viewer_can_approve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanApprove\" ) viewer_can_delist = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanDelist\" ) viewer_can_edit = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEdit\" ) viewer_can_edit_categories = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEditCategories\" ) viewer_can_edit_plans = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEditPlans\" ) viewer_can_redraft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanRedraft\" ) viewer_can_reject = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanReject\" ) viewer_can_request_approval = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanRequestApproval\" ) viewer_has_purchased = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasPurchased\" ) viewer_has_purchased_for_all_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasPurchasedForAllOrganizations\" , ) viewer_is_listing_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsListingAdmin\" ) MarketplaceListingConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11804 11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 11818 11819 11820 11821 11822 class MarketplaceListingConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"MarketplaceListingEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"MarketplaceListing\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) MarketplaceListingEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11825 11826 11827 11828 11829 11830 11831 11832 11833 class MarketplaceListingEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"MarketplaceListing\" , graphql_name = \"node\" ) MemberStatusable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11836 11837 11838 11839 11840 11841 11842 11843 11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 11857 11858 11859 11860 11861 11862 11863 11864 11865 class MemberStatusable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"member_statuses\" ,) member_statuses = sgqlc . types . Field ( sgqlc . types . non_null ( \"UserStatusConnection\" ), graphql_name = \"memberStatuses\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( UserStatusOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) MembersCanDeleteReposClearAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25029 25030 25031 25032 25033 25034 25035 25036 25037 25038 25039 25040 25041 class MembersCanDeleteReposClearAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () MembersCanDeleteReposDisableAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25044 25045 25046 25047 25048 25049 25050 25051 25052 25053 25054 25055 25056 class MembersCanDeleteReposDisableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () MembersCanDeleteReposEnableAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25059 25060 25061 25062 25063 25064 25065 25066 25067 25068 25069 25070 25071 class MembersCanDeleteReposEnableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () MentionedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25074 25075 25076 25077 25078 25079 25080 25081 25082 25083 25084 25085 class MentionedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) MergeBranchInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4296 4297 4298 4299 4300 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 class MergeBranchInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"base\" , \"head\" , \"commit_message\" , \"author_email\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"base\" ) head = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"head\" ) commit_message = sgqlc . types . Field ( String , graphql_name = \"commitMessage\" ) author_email = sgqlc . types . Field ( String , graphql_name = \"authorEmail\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MergeBranchPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11868 11869 11870 11871 11872 11873 11874 11875 11876 class MergeBranchPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"merge_commit\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) merge_commit = sgqlc . types . Field ( \"Commit\" , graphql_name = \"mergeCommit\" ) MergeCommitMessage Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 746 747 748 749 750 751 752 class MergeCommitMessage ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BLANK\" , \"PR_BODY\" , \"PR_TITLE\" ) MergeCommitTitle Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 755 756 757 758 759 760 761 class MergeCommitTitle ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MERGE_MESSAGE\" , \"PR_TITLE\" ) MergePullRequestInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4320 4321 4322 4323 4324 4325 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 class MergePullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"commit_headline\" , \"commit_body\" , \"expected_head_oid\" , \"merge_method\" , \"author_email\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) commit_headline = sgqlc . types . Field ( String , graphql_name = \"commitHeadline\" ) commit_body = sgqlc . types . Field ( String , graphql_name = \"commitBody\" ) expected_head_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"expectedHeadOid\" ) merge_method = sgqlc . types . Field ( PullRequestMergeMethod , graphql_name = \"mergeMethod\" ) author_email = sgqlc . types . Field ( String , graphql_name = \"authorEmail\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MergePullRequestPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11879 11880 11881 11882 11883 11884 11885 11886 11887 11888 class MergePullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) MergeableState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 764 765 766 767 768 769 770 class MergeableState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CONFLICTING\" , \"MERGEABLE\" , \"UNKNOWN\" ) MergedEvent Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25088 25089 25090 25091 25092 25093 25094 25095 25096 25097 25098 25099 25100 25101 25102 25103 25104 25105 25106 25107 25108 25109 25110 25111 25112 25113 class MergedEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"commit\" , \"created_at\" , \"merge_ref\" , \"merge_ref_name\" , \"pull_request\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) merge_ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"mergeRef\" ) merge_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"mergeRefName\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) Migration Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11891 11892 11893 11894 11895 11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 11922 11923 11924 11925 11926 11927 11928 class Migration ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"continue_on_error\" , \"created_at\" , \"database_id\" , \"failure_reason\" , \"id\" , \"migration_log_url\" , \"migration_source\" , \"repository_name\" , \"source_url\" , \"state\" , ) continue_on_error = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"continueOnError\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( String , graphql_name = \"databaseId\" ) failure_reason = sgqlc . types . Field ( String , graphql_name = \"failureReason\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) migration_log_url = sgqlc . types . Field ( URI , graphql_name = \"migrationLogUrl\" ) migration_source = sgqlc . types . Field ( sgqlc . types . non_null ( \"MigrationSource\" ), graphql_name = \"migrationSource\" ) repository_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"repositoryName\" ) source_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"sourceUrl\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( MigrationState ), graphql_name = \"state\" ) MigrationSource Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25116 25117 25118 25119 25120 25121 25122 25123 25124 25125 25126 25127 class MigrationSource ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"type\" , \"url\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( MigrationSourceType ), graphql_name = \"type\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) MigrationSourceType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 773 774 775 776 777 778 779 class MigrationSourceType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"AZURE_DEVOPS\" , \"BITBUCKET_SERVER\" , \"GITHUB_ARCHIVE\" ) MigrationState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 class MigrationState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FAILED\" , \"FAILED_VALIDATION\" , \"IN_PROGRESS\" , \"NOT_STARTED\" , \"PENDING_VALIDATION\" , \"QUEUED\" , \"SUCCEEDED\" , ) Milestone Bases: sgqlc . types . Type , Node , Closable , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Milestone ( sgqlc . types . Type , Node , Closable , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"description\" , \"due_on\" , \"issues\" , \"number\" , \"progress_percentage\" , \"pull_requests\" , \"repository\" , \"state\" , \"title\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) due_on = sgqlc . types . Field ( DateTime , graphql_name = \"dueOn\" ) issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"issues\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" , default = None , ), ), ( \"filter_by\" , sgqlc . types . Arg ( IssueFilters , graphql_name = \"filterBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) progress_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"progressPercentage\" ) pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( MilestoneState ), graphql_name = \"state\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) MilestoneConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11931 11932 11933 11934 11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 class MilestoneConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"MilestoneEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Milestone\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) MilestoneEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11950 11951 11952 11953 11954 11955 11956 11957 11958 class MilestoneEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Milestone\" , graphql_name = \"node\" ) MilestoneItem Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32536 32537 32538 32539 32540 32541 32542 class MilestoneItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest ) MilestoneOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4346 4347 4348 4349 4350 4351 4352 4353 4354 4355 4356 4357 4358 class MilestoneOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( MilestoneOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) MilestoneOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 799 800 801 802 803 804 805 class MilestoneOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"DUE_DATE\" , \"NUMBER\" , \"UPDATED_AT\" ) MilestoneState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 808 809 810 811 812 813 814 class MilestoneState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" ) MilestonedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25256 25257 25258 25259 25260 25261 25262 25263 25264 25265 25266 25267 25268 25269 25270 25271 25272 class MilestonedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"milestone_title\" , \"subject\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) milestone_title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"milestoneTitle\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"MilestoneItem\" ), graphql_name = \"subject\" ) Minimizable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 11974 class Minimizable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_minimized\" , \"minimized_reason\" , \"viewer_can_minimize\" ) is_minimized = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isMinimized\" ) minimized_reason = sgqlc . types . Field ( String , graphql_name = \"minimizedReason\" ) viewer_can_minimize = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanMinimize\" ) MinimizeCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 class MinimizeCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"classifier\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) classifier = sgqlc . types . Field ( sgqlc . types . non_null ( ReportedContentClassifiers ), graphql_name = \"classifier\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MinimizeCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11977 11978 11979 11980 11981 11982 11983 11984 11985 class MinimizeCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"minimized_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) minimized_comment = sgqlc . types . Field ( Minimizable , graphql_name = \"minimizedComment\" ) MoveProjectCardInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 class MoveProjectCardInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"card_id\" , \"column_id\" , \"after_card_id\" , \"client_mutation_id\" ) card_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"cardId\" ) column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"columnId\" ) after_card_id = sgqlc . types . Field ( ID , graphql_name = \"afterCardId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MoveProjectCardPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11988 11989 11990 11991 11992 11993 11994 11995 11996 class MoveProjectCardPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"card_edge\" , \"client_mutation_id\" ) card_edge = sgqlc . types . Field ( \"ProjectCardEdge\" , graphql_name = \"cardEdge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MoveProjectColumnInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 class MoveProjectColumnInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column_id\" , \"after_column_id\" , \"client_mutation_id\" ) column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"columnId\" ) after_column_id = sgqlc . types . Field ( ID , graphql_name = \"afterColumnId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) MoveProjectColumnPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11999 12000 12001 12002 12003 12004 12005 12006 12007 class MoveProjectColumnPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"column_edge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) column_edge = sgqlc . types . Field ( \"ProjectColumnEdge\" , graphql_name = \"columnEdge\" ) MovedColumnsInProjectEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25275 25276 25277 25278 25279 25280 25281 25282 25283 25284 25285 25286 class MovedColumnsInProjectEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) Mutation Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Mutation ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"abort_queued_migrations\" , \"accept_enterprise_administrator_invitation\" , \"accept_topic_suggestion\" , \"add_assignees_to_assignable\" , \"add_comment\" , \"add_discussion_comment\" , \"add_discussion_poll_vote\" , \"add_enterprise_support_entitlement\" , \"add_labels_to_labelable\" , \"add_project_card\" , \"add_project_column\" , \"add_project_draft_issue\" , \"add_project_next_item\" , \"add_project_v2_draft_issue\" , \"add_project_v2_item_by_id\" , \"add_pull_request_review\" , \"add_pull_request_review_comment\" , \"add_pull_request_review_thread\" , \"add_reaction\" , \"add_star\" , \"add_upvote\" , \"add_verifiable_domain\" , \"approve_deployments\" , \"approve_verifiable_domain\" , \"archive_repository\" , \"cancel_enterprise_admin_invitation\" , \"cancel_sponsorship\" , \"change_user_status\" , \"clear_labels_from_labelable\" , \"clear_project_v2_item_field_value\" , \"clone_project\" , \"clone_template_repository\" , \"close_issue\" , \"close_pull_request\" , \"convert_project_card_note_to_issue\" , \"convert_pull_request_to_draft\" , \"create_branch_protection_rule\" , \"create_check_run\" , \"create_check_suite\" , \"create_commit_on_branch\" , \"create_discussion\" , \"create_enterprise_organization\" , \"create_environment\" , \"create_ip_allow_list_entry\" , \"create_issue\" , \"create_migration_source\" , \"create_project\" , \"create_project_v2\" , \"create_pull_request\" , \"create_ref\" , \"create_repository\" , \"create_sponsors_tier\" , \"create_sponsorship\" , \"create_team_discussion\" , \"create_team_discussion_comment\" , \"decline_topic_suggestion\" , \"delete_branch_protection_rule\" , \"delete_deployment\" , \"delete_discussion\" , \"delete_discussion_comment\" , \"delete_environment\" , \"delete_ip_allow_list_entry\" , \"delete_issue\" , \"delete_issue_comment\" , \"delete_project\" , \"delete_project_card\" , \"delete_project_column\" , \"delete_project_next_item\" , \"delete_project_v2_item\" , \"delete_pull_request_review\" , \"delete_pull_request_review_comment\" , \"delete_ref\" , \"delete_team_discussion\" , \"delete_team_discussion_comment\" , \"delete_verifiable_domain\" , \"disable_pull_request_auto_merge\" , \"dismiss_pull_request_review\" , \"dismiss_repository_vulnerability_alert\" , \"enable_pull_request_auto_merge\" , \"follow_organization\" , \"follow_user\" , \"grant_enterprise_organizations_migrator_role\" , \"grant_migrator_role\" , \"invite_enterprise_admin\" , \"link_repository_to_project\" , \"lock_lockable\" , \"mark_discussion_comment_as_answer\" , \"mark_file_as_viewed\" , \"mark_pull_request_ready_for_review\" , \"merge_branch\" , \"merge_pull_request\" , \"minimize_comment\" , \"move_project_card\" , \"move_project_column\" , \"pin_issue\" , \"regenerate_enterprise_identity_provider_recovery_codes\" , \"regenerate_verifiable_domain_token\" , \"reject_deployments\" , \"remove_assignees_from_assignable\" , \"remove_enterprise_admin\" , \"remove_enterprise_identity_provider\" , \"remove_enterprise_organization\" , \"remove_enterprise_support_entitlement\" , \"remove_labels_from_labelable\" , \"remove_outside_collaborator\" , \"remove_reaction\" , \"remove_star\" , \"remove_upvote\" , \"reopen_issue\" , \"reopen_pull_request\" , \"request_reviews\" , \"rerequest_check_suite\" , \"resolve_review_thread\" , \"revoke_enterprise_organizations_migrator_role\" , \"revoke_migrator_role\" , \"set_enterprise_identity_provider\" , \"set_organization_interaction_limit\" , \"set_repository_interaction_limit\" , \"set_user_interaction_limit\" , \"start_repository_migration\" , \"submit_pull_request_review\" , \"transfer_issue\" , \"unarchive_repository\" , \"unfollow_organization\" , \"unfollow_user\" , \"unlink_repository_from_project\" , \"unlock_lockable\" , \"unmark_discussion_comment_as_answer\" , \"unmark_file_as_viewed\" , \"unmark_issue_as_duplicate\" , \"unminimize_comment\" , \"unpin_issue\" , \"unresolve_review_thread\" , \"update_branch_protection_rule\" , \"update_check_run\" , \"update_check_suite_preferences\" , \"update_discussion\" , \"update_discussion_comment\" , \"update_enterprise_administrator_role\" , \"update_enterprise_allow_private_repository_forking_setting\" , \"update_enterprise_default_repository_permission_setting\" , \"update_enterprise_members_can_change_repository_visibility_setting\" , \"update_enterprise_members_can_create_repositories_setting\" , \"update_enterprise_members_can_delete_issues_setting\" , \"update_enterprise_members_can_delete_repositories_setting\" , \"update_enterprise_members_can_invite_collaborators_setting\" , \"update_enterprise_members_can_make_purchases_setting\" , \"update_enterprise_members_can_update_protected_branches_setting\" , \"update_enterprise_members_can_view_dependency_insights_setting\" , \"update_enterprise_organization_projects_setting\" , \"update_enterprise_owner_organization_role\" , \"update_enterprise_profile\" , \"update_enterprise_repository_projects_setting\" , \"update_enterprise_team_discussions_setting\" , \"update_enterprise_two_factor_authentication_required_setting\" , \"update_environment\" , \"update_ip_allow_list_enabled_setting\" , \"update_ip_allow_list_entry\" , \"update_ip_allow_list_for_installed_apps_enabled_setting\" , \"update_issue\" , \"update_issue_comment\" , \"update_notification_restriction_setting\" , \"update_organization_allow_private_repository_forking_setting\" , \"update_organization_web_commit_signoff_setting\" , \"update_project\" , \"update_project_card\" , \"update_project_column\" , \"update_project_draft_issue\" , \"update_project_next\" , \"update_project_next_item_field\" , \"update_project_v2\" , \"update_project_v2_draft_issue\" , \"update_project_v2_item_field_value\" , \"update_project_v2_item_position\" , \"update_pull_request\" , \"update_pull_request_branch\" , \"update_pull_request_review\" , \"update_pull_request_review_comment\" , \"update_ref\" , \"update_repository\" , \"update_repository_web_commit_signoff_setting\" , \"update_sponsorship_preferences\" , \"update_subscription\" , \"update_team_discussion\" , \"update_team_discussion_comment\" , \"update_teams_repository\" , \"update_topics\" , \"verify_verifiable_domain\" , ) abort_queued_migrations = sgqlc . types . Field ( AbortQueuedMigrationsPayload , graphql_name = \"abortQueuedMigrations\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AbortQueuedMigrationsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) accept_enterprise_administrator_invitation = sgqlc . types . Field ( AcceptEnterpriseAdministratorInvitationPayload , graphql_name = \"acceptEnterpriseAdministratorInvitation\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AcceptEnterpriseAdministratorInvitationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) accept_topic_suggestion = sgqlc . types . Field ( AcceptTopicSuggestionPayload , graphql_name = \"acceptTopicSuggestion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AcceptTopicSuggestionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_assignees_to_assignable = sgqlc . types . Field ( AddAssigneesToAssignablePayload , graphql_name = \"addAssigneesToAssignable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddAssigneesToAssignableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_comment = sgqlc . types . Field ( AddCommentPayload , graphql_name = \"addComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_discussion_comment = sgqlc . types . Field ( AddDiscussionCommentPayload , graphql_name = \"addDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_discussion_poll_vote = sgqlc . types . Field ( AddDiscussionPollVotePayload , graphql_name = \"addDiscussionPollVote\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddDiscussionPollVoteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_enterprise_support_entitlement = sgqlc . types . Field ( AddEnterpriseSupportEntitlementPayload , graphql_name = \"addEnterpriseSupportEntitlement\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddEnterpriseSupportEntitlementInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_labels_to_labelable = sgqlc . types . Field ( AddLabelsToLabelablePayload , graphql_name = \"addLabelsToLabelable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddLabelsToLabelableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_card = sgqlc . types . Field ( AddProjectCardPayload , graphql_name = \"addProjectCard\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectCardInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_column = sgqlc . types . Field ( AddProjectColumnPayload , graphql_name = \"addProjectColumn\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectColumnInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_draft_issue = sgqlc . types . Field ( AddProjectDraftIssuePayload , graphql_name = \"addProjectDraftIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectDraftIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_next_item = sgqlc . types . Field ( AddProjectNextItemPayload , graphql_name = \"addProjectNextItem\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectNextItemInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_v2_draft_issue = sgqlc . types . Field ( AddProjectV2DraftIssuePayload , graphql_name = \"addProjectV2DraftIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectV2DraftIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_v2_item_by_id = sgqlc . types . Field ( AddProjectV2ItemByIdPayload , graphql_name = \"addProjectV2ItemById\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectV2ItemByIdInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_pull_request_review = sgqlc . types . Field ( AddPullRequestReviewPayload , graphql_name = \"addPullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddPullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_pull_request_review_comment = sgqlc . types . Field ( AddPullRequestReviewCommentPayload , graphql_name = \"addPullRequestReviewComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddPullRequestReviewCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_pull_request_review_thread = sgqlc . types . Field ( AddPullRequestReviewThreadPayload , graphql_name = \"addPullRequestReviewThread\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddPullRequestReviewThreadInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_reaction = sgqlc . types . Field ( AddReactionPayload , graphql_name = \"addReaction\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddReactionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_star = sgqlc . types . Field ( AddStarPayload , graphql_name = \"addStar\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddStarInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_upvote = sgqlc . types . Field ( AddUpvotePayload , graphql_name = \"addUpvote\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddUpvoteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_verifiable_domain = sgqlc . types . Field ( AddVerifiableDomainPayload , graphql_name = \"addVerifiableDomain\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddVerifiableDomainInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) approve_deployments = sgqlc . types . Field ( ApproveDeploymentsPayload , graphql_name = \"approveDeployments\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ApproveDeploymentsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) approve_verifiable_domain = sgqlc . types . Field ( ApproveVerifiableDomainPayload , graphql_name = \"approveVerifiableDomain\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ApproveVerifiableDomainInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) archive_repository = sgqlc . types . Field ( ArchiveRepositoryPayload , graphql_name = \"archiveRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ArchiveRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) cancel_enterprise_admin_invitation = sgqlc . types . Field ( CancelEnterpriseAdminInvitationPayload , graphql_name = \"cancelEnterpriseAdminInvitation\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CancelEnterpriseAdminInvitationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) cancel_sponsorship = sgqlc . types . Field ( CancelSponsorshipPayload , graphql_name = \"cancelSponsorship\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CancelSponsorshipInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) change_user_status = sgqlc . types . Field ( ChangeUserStatusPayload , graphql_name = \"changeUserStatus\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ChangeUserStatusInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) clear_labels_from_labelable = sgqlc . types . Field ( ClearLabelsFromLabelablePayload , graphql_name = \"clearLabelsFromLabelable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ClearLabelsFromLabelableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) clear_project_v2_item_field_value = sgqlc . types . Field ( ClearProjectV2ItemFieldValuePayload , graphql_name = \"clearProjectV2ItemFieldValue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ClearProjectV2ItemFieldValueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) clone_project = sgqlc . types . Field ( CloneProjectPayload , graphql_name = \"cloneProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CloneProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) clone_template_repository = sgqlc . types . Field ( CloneTemplateRepositoryPayload , graphql_name = \"cloneTemplateRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CloneTemplateRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) close_issue = sgqlc . types . Field ( CloseIssuePayload , graphql_name = \"closeIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CloseIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) close_pull_request = sgqlc . types . Field ( ClosePullRequestPayload , graphql_name = \"closePullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ClosePullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) convert_project_card_note_to_issue = sgqlc . types . Field ( ConvertProjectCardNoteToIssuePayload , graphql_name = \"convertProjectCardNoteToIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ConvertProjectCardNoteToIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) convert_pull_request_to_draft = sgqlc . types . Field ( ConvertPullRequestToDraftPayload , graphql_name = \"convertPullRequestToDraft\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ConvertPullRequestToDraftInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_branch_protection_rule = sgqlc . types . Field ( CreateBranchProtectionRulePayload , graphql_name = \"createBranchProtectionRule\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateBranchProtectionRuleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_check_run = sgqlc . types . Field ( CreateCheckRunPayload , graphql_name = \"createCheckRun\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateCheckRunInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_check_suite = sgqlc . types . Field ( CreateCheckSuitePayload , graphql_name = \"createCheckSuite\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateCheckSuiteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_commit_on_branch = sgqlc . types . Field ( CreateCommitOnBranchPayload , graphql_name = \"createCommitOnBranch\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateCommitOnBranchInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_discussion = sgqlc . types . Field ( CreateDiscussionPayload , graphql_name = \"createDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_enterprise_organization = sgqlc . types . Field ( CreateEnterpriseOrganizationPayload , graphql_name = \"createEnterpriseOrganization\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateEnterpriseOrganizationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_environment = sgqlc . types . Field ( CreateEnvironmentPayload , graphql_name = \"createEnvironment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateEnvironmentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_ip_allow_list_entry = sgqlc . types . Field ( CreateIpAllowListEntryPayload , graphql_name = \"createIpAllowListEntry\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateIpAllowListEntryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_issue = sgqlc . types . Field ( CreateIssuePayload , graphql_name = \"createIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_migration_source = sgqlc . types . Field ( CreateMigrationSourcePayload , graphql_name = \"createMigrationSource\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateMigrationSourceInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_project = sgqlc . types . Field ( CreateProjectPayload , graphql_name = \"createProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_project_v2 = sgqlc . types . Field ( CreateProjectV2Payload , graphql_name = \"createProjectV2\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateProjectV2Input ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_pull_request = sgqlc . types . Field ( CreatePullRequestPayload , graphql_name = \"createPullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreatePullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_ref = sgqlc . types . Field ( CreateRefPayload , graphql_name = \"createRef\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateRefInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_repository = sgqlc . types . Field ( CreateRepositoryPayload , graphql_name = \"createRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_sponsors_tier = sgqlc . types . Field ( CreateSponsorsTierPayload , graphql_name = \"createSponsorsTier\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateSponsorsTierInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_sponsorship = sgqlc . types . Field ( CreateSponsorshipPayload , graphql_name = \"createSponsorship\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateSponsorshipInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_team_discussion = sgqlc . types . Field ( CreateTeamDiscussionPayload , graphql_name = \"createTeamDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateTeamDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_team_discussion_comment = sgqlc . types . Field ( CreateTeamDiscussionCommentPayload , graphql_name = \"createTeamDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateTeamDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) decline_topic_suggestion = sgqlc . types . Field ( DeclineTopicSuggestionPayload , graphql_name = \"declineTopicSuggestion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeclineTopicSuggestionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_branch_protection_rule = sgqlc . types . Field ( DeleteBranchProtectionRulePayload , graphql_name = \"deleteBranchProtectionRule\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteBranchProtectionRuleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_deployment = sgqlc . types . Field ( DeleteDeploymentPayload , graphql_name = \"deleteDeployment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteDeploymentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_discussion = sgqlc . types . Field ( DeleteDiscussionPayload , graphql_name = \"deleteDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_discussion_comment = sgqlc . types . Field ( DeleteDiscussionCommentPayload , graphql_name = \"deleteDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_environment = sgqlc . types . Field ( DeleteEnvironmentPayload , graphql_name = \"deleteEnvironment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteEnvironmentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_ip_allow_list_entry = sgqlc . types . Field ( DeleteIpAllowListEntryPayload , graphql_name = \"deleteIpAllowListEntry\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteIpAllowListEntryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_issue = sgqlc . types . Field ( DeleteIssuePayload , graphql_name = \"deleteIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_issue_comment = sgqlc . types . Field ( DeleteIssueCommentPayload , graphql_name = \"deleteIssueComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteIssueCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project = sgqlc . types . Field ( DeleteProjectPayload , graphql_name = \"deleteProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project_card = sgqlc . types . Field ( DeleteProjectCardPayload , graphql_name = \"deleteProjectCard\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectCardInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project_column = sgqlc . types . Field ( DeleteProjectColumnPayload , graphql_name = \"deleteProjectColumn\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectColumnInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project_next_item = sgqlc . types . Field ( DeleteProjectNextItemPayload , graphql_name = \"deleteProjectNextItem\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectNextItemInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project_v2_item = sgqlc . types . Field ( DeleteProjectV2ItemPayload , graphql_name = \"deleteProjectV2Item\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectV2ItemInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_pull_request_review = sgqlc . types . Field ( DeletePullRequestReviewPayload , graphql_name = \"deletePullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeletePullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_pull_request_review_comment = sgqlc . types . Field ( DeletePullRequestReviewCommentPayload , graphql_name = \"deletePullRequestReviewComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeletePullRequestReviewCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_ref = sgqlc . types . Field ( DeleteRefPayload , graphql_name = \"deleteRef\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteRefInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_team_discussion = sgqlc . types . Field ( DeleteTeamDiscussionPayload , graphql_name = \"deleteTeamDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteTeamDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_team_discussion_comment = sgqlc . types . Field ( DeleteTeamDiscussionCommentPayload , graphql_name = \"deleteTeamDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteTeamDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_verifiable_domain = sgqlc . types . Field ( DeleteVerifiableDomainPayload , graphql_name = \"deleteVerifiableDomain\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteVerifiableDomainInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) disable_pull_request_auto_merge = sgqlc . types . Field ( DisablePullRequestAutoMergePayload , graphql_name = \"disablePullRequestAutoMerge\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DisablePullRequestAutoMergeInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) dismiss_pull_request_review = sgqlc . types . Field ( DismissPullRequestReviewPayload , graphql_name = \"dismissPullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DismissPullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) dismiss_repository_vulnerability_alert = sgqlc . types . Field ( DismissRepositoryVulnerabilityAlertPayload , graphql_name = \"dismissRepositoryVulnerabilityAlert\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DismissRepositoryVulnerabilityAlertInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) enable_pull_request_auto_merge = sgqlc . types . Field ( EnablePullRequestAutoMergePayload , graphql_name = \"enablePullRequestAutoMerge\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( EnablePullRequestAutoMergeInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) follow_organization = sgqlc . types . Field ( FollowOrganizationPayload , graphql_name = \"followOrganization\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( FollowOrganizationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) follow_user = sgqlc . types . Field ( FollowUserPayload , graphql_name = \"followUser\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( FollowUserInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) grant_enterprise_organizations_migrator_role = sgqlc . types . Field ( GrantEnterpriseOrganizationsMigratorRolePayload , graphql_name = \"grantEnterpriseOrganizationsMigratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( GrantEnterpriseOrganizationsMigratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) grant_migrator_role = sgqlc . types . Field ( GrantMigratorRolePayload , graphql_name = \"grantMigratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( GrantMigratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) invite_enterprise_admin = sgqlc . types . Field ( InviteEnterpriseAdminPayload , graphql_name = \"inviteEnterpriseAdmin\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( InviteEnterpriseAdminInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) link_repository_to_project = sgqlc . types . Field ( LinkRepositoryToProjectPayload , graphql_name = \"linkRepositoryToProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( LinkRepositoryToProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) lock_lockable = sgqlc . types . Field ( LockLockablePayload , graphql_name = \"lockLockable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( LockLockableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) mark_discussion_comment_as_answer = sgqlc . types . Field ( MarkDiscussionCommentAsAnswerPayload , graphql_name = \"markDiscussionCommentAsAnswer\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MarkDiscussionCommentAsAnswerInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) mark_file_as_viewed = sgqlc . types . Field ( MarkFileAsViewedPayload , graphql_name = \"markFileAsViewed\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MarkFileAsViewedInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) mark_pull_request_ready_for_review = sgqlc . types . Field ( MarkPullRequestReadyForReviewPayload , graphql_name = \"markPullRequestReadyForReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MarkPullRequestReadyForReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) merge_branch = sgqlc . types . Field ( MergeBranchPayload , graphql_name = \"mergeBranch\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MergeBranchInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) merge_pull_request = sgqlc . types . Field ( MergePullRequestPayload , graphql_name = \"mergePullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MergePullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) minimize_comment = sgqlc . types . Field ( MinimizeCommentPayload , graphql_name = \"minimizeComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MinimizeCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) move_project_card = sgqlc . types . Field ( MoveProjectCardPayload , graphql_name = \"moveProjectCard\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MoveProjectCardInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) move_project_column = sgqlc . types . Field ( MoveProjectColumnPayload , graphql_name = \"moveProjectColumn\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MoveProjectColumnInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) pin_issue = sgqlc . types . Field ( \"PinIssuePayload\" , graphql_name = \"pinIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( PinIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) regenerate_enterprise_identity_provider_recovery_codes = sgqlc . types . Field ( \"RegenerateEnterpriseIdentityProviderRecoveryCodesPayload\" , graphql_name = \"regenerateEnterpriseIdentityProviderRecoveryCodes\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RegenerateEnterpriseIdentityProviderRecoveryCodesInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) regenerate_verifiable_domain_token = sgqlc . types . Field ( \"RegenerateVerifiableDomainTokenPayload\" , graphql_name = \"regenerateVerifiableDomainToken\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RegenerateVerifiableDomainTokenInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) reject_deployments = sgqlc . types . Field ( \"RejectDeploymentsPayload\" , graphql_name = \"rejectDeployments\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RejectDeploymentsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_assignees_from_assignable = sgqlc . types . Field ( \"RemoveAssigneesFromAssignablePayload\" , graphql_name = \"removeAssigneesFromAssignable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveAssigneesFromAssignableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_enterprise_admin = sgqlc . types . Field ( \"RemoveEnterpriseAdminPayload\" , graphql_name = \"removeEnterpriseAdmin\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveEnterpriseAdminInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_enterprise_identity_provider = sgqlc . types . Field ( \"RemoveEnterpriseIdentityProviderPayload\" , graphql_name = \"removeEnterpriseIdentityProvider\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveEnterpriseIdentityProviderInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_enterprise_organization = sgqlc . types . Field ( \"RemoveEnterpriseOrganizationPayload\" , graphql_name = \"removeEnterpriseOrganization\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveEnterpriseOrganizationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_enterprise_support_entitlement = sgqlc . types . Field ( \"RemoveEnterpriseSupportEntitlementPayload\" , graphql_name = \"removeEnterpriseSupportEntitlement\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveEnterpriseSupportEntitlementInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_labels_from_labelable = sgqlc . types . Field ( \"RemoveLabelsFromLabelablePayload\" , graphql_name = \"removeLabelsFromLabelable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveLabelsFromLabelableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_outside_collaborator = sgqlc . types . Field ( \"RemoveOutsideCollaboratorPayload\" , graphql_name = \"removeOutsideCollaborator\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveOutsideCollaboratorInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_reaction = sgqlc . types . Field ( \"RemoveReactionPayload\" , graphql_name = \"removeReaction\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveReactionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_star = sgqlc . types . Field ( \"RemoveStarPayload\" , graphql_name = \"removeStar\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveStarInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_upvote = sgqlc . types . Field ( \"RemoveUpvotePayload\" , graphql_name = \"removeUpvote\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveUpvoteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) reopen_issue = sgqlc . types . Field ( \"ReopenIssuePayload\" , graphql_name = \"reopenIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ReopenIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) reopen_pull_request = sgqlc . types . Field ( \"ReopenPullRequestPayload\" , graphql_name = \"reopenPullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ReopenPullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) request_reviews = sgqlc . types . Field ( \"RequestReviewsPayload\" , graphql_name = \"requestReviews\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RequestReviewsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) rerequest_check_suite = sgqlc . types . Field ( \"RerequestCheckSuitePayload\" , graphql_name = \"rerequestCheckSuite\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RerequestCheckSuiteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) resolve_review_thread = sgqlc . types . Field ( \"ResolveReviewThreadPayload\" , graphql_name = \"resolveReviewThread\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ResolveReviewThreadInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) revoke_enterprise_organizations_migrator_role = sgqlc . types . Field ( \"RevokeEnterpriseOrganizationsMigratorRolePayload\" , graphql_name = \"revokeEnterpriseOrganizationsMigratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RevokeEnterpriseOrganizationsMigratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) revoke_migrator_role = sgqlc . types . Field ( \"RevokeMigratorRolePayload\" , graphql_name = \"revokeMigratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RevokeMigratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) set_enterprise_identity_provider = sgqlc . types . Field ( \"SetEnterpriseIdentityProviderPayload\" , graphql_name = \"setEnterpriseIdentityProvider\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SetEnterpriseIdentityProviderInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) set_organization_interaction_limit = sgqlc . types . Field ( \"SetOrganizationInteractionLimitPayload\" , graphql_name = \"setOrganizationInteractionLimit\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SetOrganizationInteractionLimitInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) set_repository_interaction_limit = sgqlc . types . Field ( \"SetRepositoryInteractionLimitPayload\" , graphql_name = \"setRepositoryInteractionLimit\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SetRepositoryInteractionLimitInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) set_user_interaction_limit = sgqlc . types . Field ( \"SetUserInteractionLimitPayload\" , graphql_name = \"setUserInteractionLimit\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SetUserInteractionLimitInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) start_repository_migration = sgqlc . types . Field ( \"StartRepositoryMigrationPayload\" , graphql_name = \"startRepositoryMigration\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( StartRepositoryMigrationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) submit_pull_request_review = sgqlc . types . Field ( \"SubmitPullRequestReviewPayload\" , graphql_name = \"submitPullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SubmitPullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) transfer_issue = sgqlc . types . Field ( \"TransferIssuePayload\" , graphql_name = \"transferIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( TransferIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unarchive_repository = sgqlc . types . Field ( \"UnarchiveRepositoryPayload\" , graphql_name = \"unarchiveRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnarchiveRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unfollow_organization = sgqlc . types . Field ( \"UnfollowOrganizationPayload\" , graphql_name = \"unfollowOrganization\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnfollowOrganizationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unfollow_user = sgqlc . types . Field ( \"UnfollowUserPayload\" , graphql_name = \"unfollowUser\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnfollowUserInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unlink_repository_from_project = sgqlc . types . Field ( \"UnlinkRepositoryFromProjectPayload\" , graphql_name = \"unlinkRepositoryFromProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnlinkRepositoryFromProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unlock_lockable = sgqlc . types . Field ( \"UnlockLockablePayload\" , graphql_name = \"unlockLockable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnlockLockableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unmark_discussion_comment_as_answer = sgqlc . types . Field ( \"UnmarkDiscussionCommentAsAnswerPayload\" , graphql_name = \"unmarkDiscussionCommentAsAnswer\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnmarkDiscussionCommentAsAnswerInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unmark_file_as_viewed = sgqlc . types . Field ( \"UnmarkFileAsViewedPayload\" , graphql_name = \"unmarkFileAsViewed\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnmarkFileAsViewedInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unmark_issue_as_duplicate = sgqlc . types . Field ( \"UnmarkIssueAsDuplicatePayload\" , graphql_name = \"unmarkIssueAsDuplicate\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnmarkIssueAsDuplicateInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unminimize_comment = sgqlc . types . Field ( \"UnminimizeCommentPayload\" , graphql_name = \"unminimizeComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnminimizeCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unpin_issue = sgqlc . types . Field ( \"UnpinIssuePayload\" , graphql_name = \"unpinIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnpinIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unresolve_review_thread = sgqlc . types . Field ( \"UnresolveReviewThreadPayload\" , graphql_name = \"unresolveReviewThread\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnresolveReviewThreadInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_branch_protection_rule = sgqlc . types . Field ( \"UpdateBranchProtectionRulePayload\" , graphql_name = \"updateBranchProtectionRule\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateBranchProtectionRuleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_check_run = sgqlc . types . Field ( \"UpdateCheckRunPayload\" , graphql_name = \"updateCheckRun\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateCheckRunInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_check_suite_preferences = sgqlc . types . Field ( \"UpdateCheckSuitePreferencesPayload\" , graphql_name = \"updateCheckSuitePreferences\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateCheckSuitePreferencesInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_discussion = sgqlc . types . Field ( \"UpdateDiscussionPayload\" , graphql_name = \"updateDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_discussion_comment = sgqlc . types . Field ( \"UpdateDiscussionCommentPayload\" , graphql_name = \"updateDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_administrator_role = sgqlc . types . Field ( \"UpdateEnterpriseAdministratorRolePayload\" , graphql_name = \"updateEnterpriseAdministratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseAdministratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_allow_private_repository_forking_setting = sgqlc . types . Field ( \"UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload\" , graphql_name = \"updateEnterpriseAllowPrivateRepositoryForkingSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_default_repository_permission_setting = sgqlc . types . Field ( \"UpdateEnterpriseDefaultRepositoryPermissionSettingPayload\" , graphql_name = \"updateEnterpriseDefaultRepositoryPermissionSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseDefaultRepositoryPermissionSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_change_repository_visibility_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload\" , graphql_name = \"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_create_repositories_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanCreateRepositoriesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanCreateRepositoriesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_delete_issues_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanDeleteIssuesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanDeleteIssuesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanDeleteIssuesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_delete_repositories_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanDeleteRepositoriesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_invite_collaborators_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanInviteCollaboratorsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_make_purchases_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanMakePurchasesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanMakePurchasesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanMakePurchasesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_update_protected_branches_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanUpdateProtectedBranchesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_view_dependency_insights_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanViewDependencyInsightsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_organization_projects_setting = sgqlc . types . Field ( \"UpdateEnterpriseOrganizationProjectsSettingPayload\" , graphql_name = \"updateEnterpriseOrganizationProjectsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseOrganizationProjectsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_owner_organization_role = sgqlc . types . Field ( \"UpdateEnterpriseOwnerOrganizationRolePayload\" , graphql_name = \"updateEnterpriseOwnerOrganizationRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseOwnerOrganizationRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_profile = sgqlc . types . Field ( \"UpdateEnterpriseProfilePayload\" , graphql_name = \"updateEnterpriseProfile\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseProfileInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_repository_projects_setting = sgqlc . types . Field ( \"UpdateEnterpriseRepositoryProjectsSettingPayload\" , graphql_name = \"updateEnterpriseRepositoryProjectsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseRepositoryProjectsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_team_discussions_setting = sgqlc . types . Field ( \"UpdateEnterpriseTeamDiscussionsSettingPayload\" , graphql_name = \"updateEnterpriseTeamDiscussionsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseTeamDiscussionsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_two_factor_authentication_required_setting = sgqlc . types . Field ( \"UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload\" , graphql_name = \"updateEnterpriseTwoFactorAuthenticationRequiredSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_environment = sgqlc . types . Field ( \"UpdateEnvironmentPayload\" , graphql_name = \"updateEnvironment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnvironmentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_ip_allow_list_enabled_setting = sgqlc . types . Field ( \"UpdateIpAllowListEnabledSettingPayload\" , graphql_name = \"updateIpAllowListEnabledSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIpAllowListEnabledSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_ip_allow_list_entry = sgqlc . types . Field ( \"UpdateIpAllowListEntryPayload\" , graphql_name = \"updateIpAllowListEntry\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIpAllowListEntryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_ip_allow_list_for_installed_apps_enabled_setting = sgqlc . types . Field ( \"UpdateIpAllowListForInstalledAppsEnabledSettingPayload\" , graphql_name = \"updateIpAllowListForInstalledAppsEnabledSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIpAllowListForInstalledAppsEnabledSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_issue = sgqlc . types . Field ( \"UpdateIssuePayload\" , graphql_name = \"updateIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_issue_comment = sgqlc . types . Field ( \"UpdateIssueCommentPayload\" , graphql_name = \"updateIssueComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIssueCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_notification_restriction_setting = sgqlc . types . Field ( \"UpdateNotificationRestrictionSettingPayload\" , graphql_name = \"updateNotificationRestrictionSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateNotificationRestrictionSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_organization_allow_private_repository_forking_setting = sgqlc . types . Field ( \"UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload\" , graphql_name = \"updateOrganizationAllowPrivateRepositoryForkingSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateOrganizationAllowPrivateRepositoryForkingSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_organization_web_commit_signoff_setting = sgqlc . types . Field ( \"UpdateOrganizationWebCommitSignoffSettingPayload\" , graphql_name = \"updateOrganizationWebCommitSignoffSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateOrganizationWebCommitSignoffSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project = sgqlc . types . Field ( \"UpdateProjectPayload\" , graphql_name = \"updateProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_card = sgqlc . types . Field ( \"UpdateProjectCardPayload\" , graphql_name = \"updateProjectCard\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectCardInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_column = sgqlc . types . Field ( \"UpdateProjectColumnPayload\" , graphql_name = \"updateProjectColumn\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectColumnInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_draft_issue = sgqlc . types . Field ( \"UpdateProjectDraftIssuePayload\" , graphql_name = \"updateProjectDraftIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectDraftIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_next = sgqlc . types . Field ( \"UpdateProjectNextPayload\" , graphql_name = \"updateProjectNext\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectNextInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_next_item_field = sgqlc . types . Field ( \"UpdateProjectNextItemFieldPayload\" , graphql_name = \"updateProjectNextItemField\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectNextItemFieldInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_v2 = sgqlc . types . Field ( \"UpdateProjectV2Payload\" , graphql_name = \"updateProjectV2\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectV2Input ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_v2_draft_issue = sgqlc . types . Field ( \"UpdateProjectV2DraftIssuePayload\" , graphql_name = \"updateProjectV2DraftIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectV2DraftIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_v2_item_field_value = sgqlc . types . Field ( \"UpdateProjectV2ItemFieldValuePayload\" , graphql_name = \"updateProjectV2ItemFieldValue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectV2ItemFieldValueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_v2_item_position = sgqlc . types . Field ( \"UpdateProjectV2ItemPositionPayload\" , graphql_name = \"updateProjectV2ItemPosition\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectV2ItemPositionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_pull_request = sgqlc . types . Field ( \"UpdatePullRequestPayload\" , graphql_name = \"updatePullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdatePullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_pull_request_branch = sgqlc . types . Field ( \"UpdatePullRequestBranchPayload\" , graphql_name = \"updatePullRequestBranch\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdatePullRequestBranchInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_pull_request_review = sgqlc . types . Field ( \"UpdatePullRequestReviewPayload\" , graphql_name = \"updatePullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdatePullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_pull_request_review_comment = sgqlc . types . Field ( \"UpdatePullRequestReviewCommentPayload\" , graphql_name = \"updatePullRequestReviewComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdatePullRequestReviewCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_ref = sgqlc . types . Field ( \"UpdateRefPayload\" , graphql_name = \"updateRef\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateRefInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_repository = sgqlc . types . Field ( \"UpdateRepositoryPayload\" , graphql_name = \"updateRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_repository_web_commit_signoff_setting = sgqlc . types . Field ( \"UpdateRepositoryWebCommitSignoffSettingPayload\" , graphql_name = \"updateRepositoryWebCommitSignoffSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateRepositoryWebCommitSignoffSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_sponsorship_preferences = sgqlc . types . Field ( \"UpdateSponsorshipPreferencesPayload\" , graphql_name = \"updateSponsorshipPreferences\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateSponsorshipPreferencesInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_subscription = sgqlc . types . Field ( \"UpdateSubscriptionPayload\" , graphql_name = \"updateSubscription\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateSubscriptionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_team_discussion = sgqlc . types . Field ( \"UpdateTeamDiscussionPayload\" , graphql_name = \"updateTeamDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateTeamDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_team_discussion_comment = sgqlc . types . Field ( \"UpdateTeamDiscussionCommentPayload\" , graphql_name = \"updateTeamDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateTeamDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_teams_repository = sgqlc . types . Field ( \"UpdateTeamsRepositoryPayload\" , graphql_name = \"updateTeamsRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateTeamsRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_topics = sgqlc . types . Field ( \"UpdateTopicsPayload\" , graphql_name = \"updateTopics\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateTopicsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) verify_verifiable_domain = sgqlc . types . Field ( \"VerifyVerifiableDomainPayload\" , graphql_name = \"verifyVerifiableDomain\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( VerifyVerifiableDomainInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) Node Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15262 15263 15264 15265 15266 15267 15268 15269 class Node ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" ,) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) NotificationRestrictionSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 817 818 819 820 821 822 823 class NotificationRestrictionSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" ) OIDCProvider Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25289 25290 25291 25292 25293 25294 25295 25296 25297 25298 25299 25300 25301 25302 25303 25304 25305 25306 25307 25308 25309 25310 25311 25312 25313 25314 25315 25316 25317 25318 25319 25320 25321 25322 25323 25324 25325 25326 25327 25328 25329 class OIDCProvider ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise\" , \"external_identities\" , \"provider_type\" , \"tenant_id\" , ) enterprise = sgqlc . types . Field ( Enterprise , graphql_name = \"enterprise\" ) external_identities = sgqlc . types . Field ( sgqlc . types . non_null ( ExternalIdentityConnection ), graphql_name = \"externalIdentities\" , args = sgqlc . types . ArgDict ( ( ( \"members_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"membersOnly\" , default = None ), ), ( \"login\" , sgqlc . types . Arg ( String , graphql_name = \"login\" , default = None )), ( \"user_name\" , sgqlc . types . Arg ( String , graphql_name = \"userName\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) provider_type = sgqlc . types . Field ( sgqlc . types . non_null ( OIDCProviderType ), graphql_name = \"providerType\" ) tenant_id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"tenantId\" ) OIDCProviderType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 826 827 828 829 830 831 832 class OIDCProviderType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"AAD\" ,) OauthApplicationAuditEntryData Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15272 15273 15274 15275 15276 15277 15278 15279 15280 15281 15282 15283 15284 15285 15286 15287 15288 15289 class OauthApplicationAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"oauth_application_name\" , \"oauth_application_resource_path\" , \"oauth_application_url\" , ) oauth_application_name = sgqlc . types . Field ( String , graphql_name = \"oauthApplicationName\" ) oauth_application_resource_path = sgqlc . types . Field ( URI , graphql_name = \"oauthApplicationResourcePath\" ) oauth_application_url = sgqlc . types . Field ( URI , graphql_name = \"oauthApplicationUrl\" ) OauthApplicationCreateAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25332 25333 25334 25335 25336 25337 25338 25339 25340 25341 25342 25343 25344 25345 25346 25347 25348 25349 25350 class OauthApplicationCreateAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"application_url\" , \"callback_url\" , \"rate_limit\" , \"state\" ) application_url = sgqlc . types . Field ( URI , graphql_name = \"applicationUrl\" ) callback_url = sgqlc . types . Field ( URI , graphql_name = \"callbackUrl\" ) rate_limit = sgqlc . types . Field ( Int , graphql_name = \"rateLimit\" ) state = sgqlc . types . Field ( OauthApplicationCreateAuditEntryState , graphql_name = \"state\" ) OauthApplicationCreateAuditEntryState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 835 836 837 838 839 840 841 class OauthApplicationCreateAuditEntryState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTIVE\" , \"PENDING_DELETION\" , \"SUSPENDED\" ) OperationType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 class OperationType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACCESS\" , \"AUTHENTICATION\" , \"CREATE\" , \"MODIFY\" , \"REMOVE\" , \"RESTORE\" , \"TRANSFER\" , ) OrderDirection Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 861 862 863 864 865 866 867 class OrderDirection ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ASC\" , \"DESC\" ) OrgAddBillingManagerAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25353 25354 25355 25356 25357 25358 25359 25360 25361 25362 class OrgAddBillingManagerAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"invitation_email\" ,) invitation_email = sgqlc . types . Field ( String , graphql_name = \"invitationEmail\" ) OrgAddMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25365 25366 25367 25368 25369 25370 25371 25372 25373 25374 25375 25376 class OrgAddMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"permission\" ,) permission = sgqlc . types . Field ( OrgAddMemberAuditEntryPermission , graphql_name = \"permission\" ) OrgAddMemberAuditEntryPermission Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 870 871 872 873 874 875 876 class OrgAddMemberAuditEntryPermission ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"READ\" ) OrgBlockUserAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25379 25380 25381 25382 25383 25384 25385 25386 25387 25388 25389 25390 25391 25392 25393 25394 25395 25396 25397 25398 class OrgBlockUserAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"blocked_user\" , \"blocked_user_name\" , \"blocked_user_resource_path\" , \"blocked_user_url\" , ) blocked_user = sgqlc . types . Field ( \"User\" , graphql_name = \"blockedUser\" ) blocked_user_name = sgqlc . types . Field ( String , graphql_name = \"blockedUserName\" ) blocked_user_resource_path = sgqlc . types . Field ( URI , graphql_name = \"blockedUserResourcePath\" ) blocked_user_url = sgqlc . types . Field ( URI , graphql_name = \"blockedUserUrl\" ) OrgConfigDisableCollaboratorsOnlyAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25401 25402 25403 25404 25405 25406 25407 25408 25409 class OrgConfigDisableCollaboratorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgConfigEnableCollaboratorsOnlyAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25412 25413 25414 25415 25416 25417 25418 25419 25420 class OrgConfigEnableCollaboratorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgCreateAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25423 25424 25425 25426 25427 25428 25429 25430 25431 25432 25433 25434 class OrgCreateAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"billing_plan\" ,) billing_plan = sgqlc . types . Field ( OrgCreateAuditEntryBillingPlan , graphql_name = \"billingPlan\" ) OrgCreateAuditEntryBillingPlan Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 879 880 881 882 883 884 885 class OrgCreateAuditEntryBillingPlan ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BUSINESS\" , \"BUSINESS_PLUS\" , \"FREE\" , \"TIERED_PER_SEAT\" , \"UNLIMITED\" ) OrgDisableOauthAppRestrictionsAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25437 25438 25439 25440 25441 25442 25443 25444 25445 class OrgDisableOauthAppRestrictionsAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgDisableSamlAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25448 25449 25450 25451 25452 25453 25454 25455 25456 25457 25458 25459 25460 25461 25462 25463 25464 25465 class OrgDisableSamlAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"digest_method_url\" , \"issuer_url\" , \"signature_method_url\" , \"single_sign_on_url\" , ) digest_method_url = sgqlc . types . Field ( URI , graphql_name = \"digestMethodUrl\" ) issuer_url = sgqlc . types . Field ( URI , graphql_name = \"issuerUrl\" ) signature_method_url = sgqlc . types . Field ( URI , graphql_name = \"signatureMethodUrl\" ) single_sign_on_url = sgqlc . types . Field ( URI , graphql_name = \"singleSignOnUrl\" ) OrgDisableTwoFactorRequirementAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25468 25469 25470 25471 25472 25473 25474 25475 25476 class OrgDisableTwoFactorRequirementAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgEnableOauthAppRestrictionsAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25479 25480 25481 25482 25483 25484 25485 25486 25487 class OrgEnableOauthAppRestrictionsAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgEnableSamlAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25490 25491 25492 25493 25494 25495 25496 25497 25498 25499 25500 25501 25502 25503 25504 25505 25506 25507 class OrgEnableSamlAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"digest_method_url\" , \"issuer_url\" , \"signature_method_url\" , \"single_sign_on_url\" , ) digest_method_url = sgqlc . types . Field ( URI , graphql_name = \"digestMethodUrl\" ) issuer_url = sgqlc . types . Field ( URI , graphql_name = \"issuerUrl\" ) signature_method_url = sgqlc . types . Field ( URI , graphql_name = \"signatureMethodUrl\" ) single_sign_on_url = sgqlc . types . Field ( URI , graphql_name = \"singleSignOnUrl\" ) OrgEnableTwoFactorRequirementAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25510 25511 25512 25513 25514 25515 25516 25517 25518 class OrgEnableTwoFactorRequirementAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgEnterpriseOwnerOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 class OrgEnterpriseOwnerOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( OrgEnterpriseOwnerOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) OrgEnterpriseOwnerOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 888 889 890 891 892 893 894 class OrgEnterpriseOwnerOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LOGIN\" ,) OrgInviteMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25521 25522 25523 25524 25525 25526 25527 25528 25529 25530 25531 25532 25533 class OrgInviteMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"email\" , \"organization_invitation\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) organization_invitation = sgqlc . types . Field ( \"OrganizationInvitation\" , graphql_name = \"organizationInvitation\" ) OrgInviteToBusinessAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25536 25537 25538 25539 25540 25541 25542 25543 25544 25545 25546 25547 25548 class OrgInviteToBusinessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgOauthAppAccessApprovedAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25551 25552 25553 25554 25555 25556 25557 25558 25559 25560 25561 25562 25563 class OrgOauthAppAccessApprovedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgOauthAppAccessDeniedAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25566 25567 25568 25569 25570 25571 25572 25573 25574 25575 25576 25577 25578 class OrgOauthAppAccessDeniedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgOauthAppAccessRequestedAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25581 25582 25583 25584 25585 25586 25587 25588 25589 25590 25591 25592 25593 class OrgOauthAppAccessRequestedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgRemoveBillingManagerAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25596 25597 25598 25599 25600 25601 25602 25603 25604 25605 25606 25607 class OrgRemoveBillingManagerAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"reason\" ,) reason = sgqlc . types . Field ( OrgRemoveBillingManagerAuditEntryReason , graphql_name = \"reason\" ) OrgRemoveBillingManagerAuditEntryReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 897 898 899 900 901 902 903 904 905 906 907 class OrgRemoveBillingManagerAuditEntryReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SAML_EXTERNAL_IDENTITY_MISSING\" , \"SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY\" , \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\" , ) OrgRemoveMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25610 25611 25612 25613 25614 25615 25616 25617 25618 25619 25620 25621 25622 25623 25624 25625 class OrgRemoveMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"membership_types\" , \"reason\" ) membership_types = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( OrgRemoveMemberAuditEntryMembershipType ) ), graphql_name = \"membershipTypes\" , ) reason = sgqlc . types . Field ( OrgRemoveMemberAuditEntryReason , graphql_name = \"reason\" ) OrgRemoveMemberAuditEntryMembershipType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 910 911 912 913 914 915 916 917 918 919 920 921 922 923 class OrgRemoveMemberAuditEntryMembershipType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"BILLING_MANAGER\" , \"DIRECT_MEMBER\" , \"OUTSIDE_COLLABORATOR\" , \"SUSPENDED\" , \"UNAFFILIATED\" , ) OrgRemoveMemberAuditEntryReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 926 927 928 929 930 931 932 933 934 935 936 937 938 class OrgRemoveMemberAuditEntryReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SAML_EXTERNAL_IDENTITY_MISSING\" , \"SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY\" , \"TWO_FACTOR_ACCOUNT_RECOVERY\" , \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\" , \"USER_ACCOUNT_DELETED\" , ) OrgRemoveOutsideCollaboratorAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25628 25629 25630 25631 25632 25633 25634 25635 25636 25637 25638 25639 25640 25641 25642 25643 25644 25645 class OrgRemoveOutsideCollaboratorAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"membership_types\" , \"reason\" ) membership_types = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( OrgRemoveOutsideCollaboratorAuditEntryMembershipType ) ), graphql_name = \"membershipTypes\" , ) reason = sgqlc . types . Field ( OrgRemoveOutsideCollaboratorAuditEntryReason , graphql_name = \"reason\" ) OrgRemoveOutsideCollaboratorAuditEntryMembershipType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 941 942 943 944 945 946 947 class OrgRemoveOutsideCollaboratorAuditEntryMembershipType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BILLING_MANAGER\" , \"OUTSIDE_COLLABORATOR\" , \"UNAFFILIATED\" ) OrgRemoveOutsideCollaboratorAuditEntryReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 950 951 952 953 954 955 956 957 958 959 class OrgRemoveOutsideCollaboratorAuditEntryReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SAML_EXTERNAL_IDENTITY_MISSING\" , \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\" , ) OrgRestoreMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25648 25649 25650 25651 25652 25653 25654 25655 25656 25657 25658 25659 25660 25661 25662 25663 25664 25665 25666 25667 25668 25669 25670 25671 25672 25673 25674 25675 25676 25677 25678 25679 25680 25681 25682 25683 25684 25685 25686 25687 25688 class OrgRestoreMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"restored_custom_email_routings_count\" , \"restored_issue_assignments_count\" , \"restored_memberships\" , \"restored_memberships_count\" , \"restored_repositories_count\" , \"restored_repository_stars_count\" , \"restored_repository_watches_count\" , ) restored_custom_email_routings_count = sgqlc . types . Field ( Int , graphql_name = \"restoredCustomEmailRoutingsCount\" ) restored_issue_assignments_count = sgqlc . types . Field ( Int , graphql_name = \"restoredIssueAssignmentsCount\" ) restored_memberships = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"OrgRestoreMemberAuditEntryMembership\" ) ), graphql_name = \"restoredMemberships\" , ) restored_memberships_count = sgqlc . types . Field ( Int , graphql_name = \"restoredMembershipsCount\" ) restored_repositories_count = sgqlc . types . Field ( Int , graphql_name = \"restoredRepositoriesCount\" ) restored_repository_stars_count = sgqlc . types . Field ( Int , graphql_name = \"restoredRepositoryStarsCount\" ) restored_repository_watches_count = sgqlc . types . Field ( Int , graphql_name = \"restoredRepositoryWatchesCount\" ) OrgRestoreMemberAuditEntryMembership Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32545 32546 32547 32548 32549 32550 32551 32552 32553 32554 32555 class OrgRestoreMemberAuditEntryMembership ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( OrgRestoreMemberMembershipOrganizationAuditEntryData , OrgRestoreMemberMembershipRepositoryAuditEntryData , OrgRestoreMemberMembershipTeamAuditEntryData , ) OrgRestoreMemberMembershipOrganizationAuditEntryData Bases: sgqlc . types . Type , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25691 25692 25693 25694 25695 25696 25697 25698 25699 class OrgRestoreMemberMembershipOrganizationAuditEntryData ( sgqlc . types . Type , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgRestoreMemberMembershipRepositoryAuditEntryData Bases: sgqlc . types . Type , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25702 25703 25704 25705 25706 25707 25708 25709 25710 class OrgRestoreMemberMembershipRepositoryAuditEntryData ( sgqlc . types . Type , RepositoryAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgRestoreMemberMembershipTeamAuditEntryData Bases: sgqlc . types . Type , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25713 25714 25715 25716 25717 25718 25719 25720 25721 class OrgRestoreMemberMembershipTeamAuditEntryData ( sgqlc . types . Type , TeamAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () OrgUnblockUserAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25724 25725 25726 25727 25728 25729 25730 25731 25732 25733 25734 25735 25736 25737 25738 25739 25740 25741 25742 25743 class OrgUnblockUserAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"blocked_user\" , \"blocked_user_name\" , \"blocked_user_resource_path\" , \"blocked_user_url\" , ) blocked_user = sgqlc . types . Field ( \"User\" , graphql_name = \"blockedUser\" ) blocked_user_name = sgqlc . types . Field ( String , graphql_name = \"blockedUserName\" ) blocked_user_resource_path = sgqlc . types . Field ( URI , graphql_name = \"blockedUserResourcePath\" ) blocked_user_url = sgqlc . types . Field ( URI , graphql_name = \"blockedUserUrl\" ) OrgUpdateDefaultRepositoryPermissionAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25746 25747 25748 25749 25750 25751 25752 25753 25754 25755 25756 25757 25758 25759 25760 25761 25762 class OrgUpdateDefaultRepositoryPermissionAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"permission\" , \"permission_was\" ) permission = sgqlc . types . Field ( OrgUpdateDefaultRepositoryPermissionAuditEntryPermission , graphql_name = \"permission\" , ) permission_was = sgqlc . types . Field ( OrgUpdateDefaultRepositoryPermissionAuditEntryPermission , graphql_name = \"permissionWas\" , ) OrgUpdateDefaultRepositoryPermissionAuditEntryPermission Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 962 963 964 965 966 967 968 class OrgUpdateDefaultRepositoryPermissionAuditEntryPermission ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"NONE\" , \"READ\" , \"WRITE\" ) OrgUpdateMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25765 25766 25767 25768 25769 25770 25771 25772 25773 25774 25775 25776 25777 25778 25779 class OrgUpdateMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"permission\" , \"permission_was\" ) permission = sgqlc . types . Field ( OrgUpdateMemberAuditEntryPermission , graphql_name = \"permission\" ) permission_was = sgqlc . types . Field ( OrgUpdateMemberAuditEntryPermission , graphql_name = \"permissionWas\" ) OrgUpdateMemberAuditEntryPermission Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 971 972 973 974 975 976 977 class OrgUpdateMemberAuditEntryPermission ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"READ\" ) OrgUpdateMemberRepositoryCreationPermissionAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25782 25783 25784 25785 25786 25787 25788 25789 25790 25791 25792 25793 25794 25795 25796 25797 class OrgUpdateMemberRepositoryCreationPermissionAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"can_create_repositories\" , \"visibility\" ) can_create_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"canCreateRepositories\" ) visibility = sgqlc . types . Field ( OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility , graphql_name = \"visibility\" , ) OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 class OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"INTERNAL\" , \"NONE\" , \"PRIVATE\" , \"PRIVATE_INTERNAL\" , \"PUBLIC\" , \"PUBLIC_INTERNAL\" , \"PUBLIC_PRIVATE\" , ) OrgUpdateMemberRepositoryInvitationPermissionAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25800 25801 25802 25803 25804 25805 25806 25807 25808 25809 25810 25811 class OrgUpdateMemberRepositoryInvitationPermissionAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"can_invite_outside_collaborators_to_repositories\" ,) can_invite_outside_collaborators_to_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"canInviteOutsideCollaboratorsToRepositories\" ) Organization Bases: sgqlc . types . Type , Node , Actor , PackageOwner , ProjectOwner , ProjectNextOwner , ProjectV2Owner , ProjectV2Recent , RepositoryDiscussionAuthor , RepositoryDiscussionCommentAuthor , RepositoryOwner , UniformResourceLocatable , MemberStatusable , ProfileOwner , Sponsorable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25814 25815 25816 25817 25818 25819 25820 25821 25822 25823 25824 25825 25826 25827 25828 25829 25830 25831 25832 25833 25834 25835 25836 25837 25838 25839 25840 25841 25842 25843 25844 25845 25846 25847 25848 25849 25850 25851 25852 25853 25854 25855 25856 25857 25858 25859 25860 25861 25862 25863 25864 25865 25866 25867 25868 25869 25870 25871 25872 25873 25874 25875 25876 25877 25878 25879 25880 25881 25882 25883 25884 25885 25886 25887 25888 25889 25890 25891 25892 25893 25894 25895 25896 25897 25898 25899 25900 25901 25902 25903 25904 25905 25906 25907 25908 25909 25910 25911 25912 25913 25914 25915 25916 25917 25918 25919 25920 25921 25922 25923 25924 25925 25926 25927 25928 25929 25930 25931 25932 25933 25934 25935 25936 25937 25938 25939 25940 25941 25942 25943 25944 25945 25946 25947 25948 25949 25950 25951 25952 25953 25954 25955 25956 25957 25958 25959 25960 25961 25962 25963 25964 25965 25966 25967 25968 25969 25970 25971 25972 25973 25974 25975 25976 25977 25978 25979 25980 25981 25982 25983 25984 25985 25986 25987 25988 25989 25990 25991 25992 25993 25994 25995 25996 25997 25998 25999 26000 26001 26002 26003 26004 26005 26006 26007 26008 26009 26010 26011 26012 26013 26014 26015 26016 26017 26018 26019 26020 26021 26022 26023 26024 26025 26026 26027 26028 26029 26030 26031 26032 26033 26034 26035 26036 26037 26038 26039 26040 26041 26042 26043 26044 26045 26046 26047 26048 26049 26050 26051 26052 26053 26054 26055 26056 26057 26058 26059 26060 26061 26062 26063 26064 26065 26066 26067 26068 26069 26070 26071 26072 26073 26074 26075 26076 26077 26078 26079 26080 26081 26082 26083 26084 26085 26086 26087 26088 26089 26090 26091 26092 26093 26094 26095 26096 26097 26098 26099 26100 26101 26102 26103 26104 26105 26106 26107 26108 26109 26110 26111 26112 26113 26114 26115 26116 26117 26118 26119 26120 26121 26122 26123 26124 26125 26126 26127 26128 26129 26130 26131 26132 26133 26134 26135 26136 26137 26138 26139 26140 26141 26142 26143 26144 26145 26146 26147 26148 26149 26150 26151 26152 26153 26154 26155 26156 26157 26158 26159 26160 26161 26162 26163 26164 26165 26166 26167 26168 26169 class Organization ( sgqlc . types . Type , Node , Actor , PackageOwner , ProjectOwner , ProjectNextOwner , ProjectV2Owner , ProjectV2Recent , RepositoryDiscussionAuthor , RepositoryDiscussionCommentAuthor , RepositoryOwner , UniformResourceLocatable , MemberStatusable , ProfileOwner , Sponsorable , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"audit_log\" , \"created_at\" , \"database_id\" , \"description\" , \"description_html\" , \"domains\" , \"enterprise_owners\" , \"interaction_ability\" , \"ip_allow_list_enabled_setting\" , \"ip_allow_list_entries\" , \"ip_allow_list_for_installed_apps_enabled_setting\" , \"is_verified\" , \"members_can_fork_private_repositories\" , \"members_with_role\" , \"new_team_resource_path\" , \"new_team_url\" , \"notification_delivery_restriction_enabled_setting\" , \"organization_billing_email\" , \"pending_members\" , \"repository_migrations\" , \"requires_two_factor_authentication\" , \"saml_identity_provider\" , \"team\" , \"teams\" , \"teams_resource_path\" , \"teams_url\" , \"twitter_username\" , \"updated_at\" , \"viewer_can_administer\" , \"viewer_can_create_repositories\" , \"viewer_can_create_teams\" , \"viewer_is_amember\" , \"viewer_is_following\" , \"web_commit_signoff_required\" , ) audit_log = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationAuditEntryConnection ), graphql_name = \"auditLog\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( AuditLogOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) description_html = sgqlc . types . Field ( String , graphql_name = \"descriptionHTML\" ) domains = sgqlc . types . Field ( VerifiableDomainConnection , graphql_name = \"domains\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"is_verified\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isVerified\" , default = None ), ), ( \"is_approved\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isApproved\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( VerifiableDomainOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) enterprise_owners = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationEnterpriseOwnerConnection ), graphql_name = \"enterpriseOwners\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"organization_role\" , sgqlc . types . Arg ( RoleInOrganization , graphql_name = \"organizationRole\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrgEnterpriseOwnerOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) interaction_ability = sgqlc . types . Field ( RepositoryInteractionAbility , graphql_name = \"interactionAbility\" ) ip_allow_list_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEnabledSettingValue ), graphql_name = \"ipAllowListEnabledSetting\" , ) ip_allow_list_entries = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEntryConnection ), graphql_name = \"ipAllowListEntries\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( IpAllowListEntryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ip_allow_list_for_installed_apps_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListForInstalledAppsEnabledSettingValue ), graphql_name = \"ipAllowListForInstalledAppsEnabledSetting\" , ) is_verified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerified\" ) members_can_fork_private_repositories = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"membersCanForkPrivateRepositories\" ) members_with_role = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationMemberConnection ), graphql_name = \"membersWithRole\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) new_team_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"newTeamResourcePath\" ) new_team_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"newTeamUrl\" ) notification_delivery_restriction_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( NotificationRestrictionSettingValue ), graphql_name = \"notificationDeliveryRestrictionEnabledSetting\" , ) organization_billing_email = sgqlc . types . Field ( String , graphql_name = \"organizationBillingEmail\" ) pending_members = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"pendingMembers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository_migrations = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryMigrationConnection ), graphql_name = \"repositoryMigrations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"state\" , sgqlc . types . Arg ( MigrationState , graphql_name = \"state\" , default = None ), ), ( \"repository_name\" , sgqlc . types . Arg ( String , graphql_name = \"repositoryName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryMigrationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ) ), ) requires_two_factor_authentication = sgqlc . types . Field ( Boolean , graphql_name = \"requiresTwoFactorAuthentication\" ) saml_identity_provider = sgqlc . types . Field ( \"OrganizationIdentityProvider\" , graphql_name = \"samlIdentityProvider\" ) team = sgqlc . types . Field ( \"Team\" , graphql_name = \"team\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ) ), ) teams = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"teams\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( TeamPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"role\" , sgqlc . types . Arg ( TeamRole , graphql_name = \"role\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"user_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"userLogins\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( TeamOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"ldap_mapped\" , sgqlc . types . Arg ( Boolean , graphql_name = \"ldapMapped\" , default = None ), ), ( \"root_teams_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"rootTeamsOnly\" , default = False ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) teams_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsResourcePath\" ) teams_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsUrl\" ) twitter_username = sgqlc . types . Field ( String , graphql_name = \"twitterUsername\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) viewer_can_administer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanAdminister\" ) viewer_can_create_repositories = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanCreateRepositories\" ) viewer_can_create_teams = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanCreateTeams\" ) viewer_is_amember = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsAMember\" ) viewer_is_following = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsFollowing\" ) web_commit_signoff_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"webCommitSignoffRequired\" ) OrganizationAuditEntry Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32558 32559 32560 32561 32562 32563 32564 32565 32566 32567 32568 32569 32570 32571 32572 32573 32574 32575 32576 32577 32578 32579 32580 32581 32582 32583 32584 32585 32586 32587 32588 32589 32590 32591 32592 32593 32594 32595 32596 32597 32598 32599 32600 32601 32602 32603 32604 32605 32606 32607 32608 32609 32610 32611 32612 32613 32614 32615 32616 32617 32618 32619 32620 32621 32622 32623 class OrganizationAuditEntry ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( MembersCanDeleteReposClearAuditEntry , MembersCanDeleteReposDisableAuditEntry , MembersCanDeleteReposEnableAuditEntry , OauthApplicationCreateAuditEntry , OrgAddBillingManagerAuditEntry , OrgAddMemberAuditEntry , OrgBlockUserAuditEntry , OrgConfigDisableCollaboratorsOnlyAuditEntry , OrgConfigEnableCollaboratorsOnlyAuditEntry , OrgCreateAuditEntry , OrgDisableOauthAppRestrictionsAuditEntry , OrgDisableSamlAuditEntry , OrgDisableTwoFactorRequirementAuditEntry , OrgEnableOauthAppRestrictionsAuditEntry , OrgEnableSamlAuditEntry , OrgEnableTwoFactorRequirementAuditEntry , OrgInviteMemberAuditEntry , OrgInviteToBusinessAuditEntry , OrgOauthAppAccessApprovedAuditEntry , OrgOauthAppAccessDeniedAuditEntry , OrgOauthAppAccessRequestedAuditEntry , OrgRemoveBillingManagerAuditEntry , OrgRemoveMemberAuditEntry , OrgRemoveOutsideCollaboratorAuditEntry , OrgRestoreMemberAuditEntry , OrgUnblockUserAuditEntry , OrgUpdateDefaultRepositoryPermissionAuditEntry , OrgUpdateMemberAuditEntry , OrgUpdateMemberRepositoryCreationPermissionAuditEntry , OrgUpdateMemberRepositoryInvitationPermissionAuditEntry , PrivateRepositoryForkingDisableAuditEntry , PrivateRepositoryForkingEnableAuditEntry , RepoAccessAuditEntry , RepoAddMemberAuditEntry , RepoAddTopicAuditEntry , RepoArchivedAuditEntry , RepoChangeMergeSettingAuditEntry , RepoConfigDisableAnonymousGitAccessAuditEntry , RepoConfigDisableCollaboratorsOnlyAuditEntry , RepoConfigDisableContributorsOnlyAuditEntry , RepoConfigDisableSockpuppetDisallowedAuditEntry , RepoConfigEnableAnonymousGitAccessAuditEntry , RepoConfigEnableCollaboratorsOnlyAuditEntry , RepoConfigEnableContributorsOnlyAuditEntry , RepoConfigEnableSockpuppetDisallowedAuditEntry , RepoConfigLockAnonymousGitAccessAuditEntry , RepoConfigUnlockAnonymousGitAccessAuditEntry , RepoCreateAuditEntry , RepoDestroyAuditEntry , RepoRemoveMemberAuditEntry , RepoRemoveTopicAuditEntry , RepositoryVisibilityChangeDisableAuditEntry , RepositoryVisibilityChangeEnableAuditEntry , TeamAddMemberAuditEntry , TeamAddRepositoryAuditEntry , TeamChangeParentTeamAuditEntry , TeamRemoveMemberAuditEntry , TeamRemoveRepositoryAuditEntry , ) OrganizationAuditEntryConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15292 15293 15294 15295 15296 15297 15298 15299 15300 15301 15302 15303 15304 15305 15306 15307 15308 15309 15310 class OrganizationAuditEntryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationAuditEntryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationAuditEntry\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) OrganizationAuditEntryData Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15313 15314 15315 15316 15317 15318 15319 15320 15321 15322 15323 15324 15325 15326 15327 15328 15329 15330 class OrganizationAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization\" , \"organization_name\" , \"organization_resource_path\" , \"organization_url\" , ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) organization_name = sgqlc . types . Field ( String , graphql_name = \"organizationName\" ) organization_resource_path = sgqlc . types . Field ( URI , graphql_name = \"organizationResourcePath\" ) organization_url = sgqlc . types . Field ( URI , graphql_name = \"organizationUrl\" ) OrganizationAuditEntryEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15333 15334 15335 15336 15337 15338 15339 15340 15341 class OrganizationAuditEntryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"OrganizationAuditEntry\" , graphql_name = \"node\" ) OrganizationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15344 15345 15346 15347 15348 15349 15350 15351 15352 15353 15354 15355 15356 15357 15358 15359 15360 class OrganizationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Organization\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) OrganizationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15363 15364 15365 15366 15367 15368 15369 15370 15371 class OrganizationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Organization\" , graphql_name = \"node\" ) OrganizationEnterpriseOwnerConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15374 15375 15376 15377 15378 15379 15380 15381 15382 15383 15384 15385 15386 15387 15388 15389 15390 class OrganizationEnterpriseOwnerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationEnterpriseOwnerEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) OrganizationEnterpriseOwnerEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15393 15394 15395 15396 15397 15398 15399 15400 15401 15402 15403 15404 class OrganizationEnterpriseOwnerEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"organization_role\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) organization_role = sgqlc . types . Field ( sgqlc . types . non_null ( RoleInOrganization ), graphql_name = \"organizationRole\" ) OrganizationIdentityProvider Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26172 26173 26174 26175 26176 26177 26178 26179 26180 26181 26182 26183 26184 26185 26186 26187 26188 26189 26190 26191 26192 26193 26194 26195 26196 26197 26198 26199 26200 26201 26202 26203 26204 26205 26206 26207 26208 26209 26210 26211 26212 26213 26214 26215 26216 class OrganizationIdentityProvider ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"digest_method\" , \"external_identities\" , \"idp_certificate\" , \"issuer\" , \"organization\" , \"signature_method\" , \"sso_url\" , ) digest_method = sgqlc . types . Field ( URI , graphql_name = \"digestMethod\" ) external_identities = sgqlc . types . Field ( sgqlc . types . non_null ( ExternalIdentityConnection ), graphql_name = \"externalIdentities\" , args = sgqlc . types . ArgDict ( ( ( \"members_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"membersOnly\" , default = None ), ), ( \"login\" , sgqlc . types . Arg ( String , graphql_name = \"login\" , default = None )), ( \"user_name\" , sgqlc . types . Arg ( String , graphql_name = \"userName\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) idp_certificate = sgqlc . types . Field ( X509Certificate , graphql_name = \"idpCertificate\" ) issuer = sgqlc . types . Field ( String , graphql_name = \"issuer\" ) organization = sgqlc . types . Field ( Organization , graphql_name = \"organization\" ) signature_method = sgqlc . types . Field ( URI , graphql_name = \"signatureMethod\" ) sso_url = sgqlc . types . Field ( URI , graphql_name = \"ssoUrl\" ) OrganizationInvitation Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26219 26220 26221 26222 26223 26224 26225 26226 26227 26228 26229 26230 26231 26232 26233 26234 26235 26236 26237 26238 26239 26240 26241 26242 26243 26244 26245 26246 26247 26248 class OrganizationInvitation ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"email\" , \"invitation_type\" , \"invitee\" , \"inviter\" , \"organization\" , \"role\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) invitation_type = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationInvitationType ), graphql_name = \"invitationType\" ) invitee = sgqlc . types . Field ( \"User\" , graphql_name = \"invitee\" ) inviter = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"inviter\" ) organization = sgqlc . types . Field ( sgqlc . types . non_null ( Organization ), graphql_name = \"organization\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationInvitationRole ), graphql_name = \"role\" ) OrganizationInvitationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15407 15408 15409 15410 15411 15412 15413 15414 15415 15416 15417 15418 15419 15420 15421 15422 15423 15424 15425 class OrganizationInvitationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationInvitationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationInvitation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) OrganizationInvitationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15428 15429 15430 15431 15432 15433 15434 15435 15436 class OrganizationInvitationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"OrganizationInvitation\" , graphql_name = \"node\" ) OrganizationInvitationRole Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 998 999 1000 1001 1002 1003 1004 class OrganizationInvitationRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"BILLING_MANAGER\" , \"DIRECT_MEMBER\" , \"REINSTATE\" ) OrganizationInvitationType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1007 1008 1009 1010 1011 1012 1013 class OrganizationInvitationType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"EMAIL\" , \"USER\" ) OrganizationMemberConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15439 15440 15441 15442 15443 15444 15445 15446 15447 15448 15449 15450 15451 15452 15453 15454 15455 class OrganizationMemberConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationMemberEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) OrganizationMemberEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15458 15459 15460 15461 15462 15463 15464 15465 15466 15467 15468 15469 15470 class OrganizationMemberEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"has_two_factor_enabled\" , \"node\" , \"role\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) has_two_factor_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasTwoFactorEnabled\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) role = sgqlc . types . Field ( OrganizationMemberRole , graphql_name = \"role\" ) OrganizationMemberRole Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1016 1017 1018 1019 1020 1021 1022 class OrganizationMemberRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"MEMBER\" ) OrganizationMembersCanCreateRepositoriesSettingValue Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1025 1026 1027 1028 1029 1030 1031 class OrganizationMembersCanCreateRepositoriesSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"DISABLED\" , \"INTERNAL\" , \"PRIVATE\" ) OrganizationOrUser Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32626 32627 32628 32629 32630 32631 32632 class OrganizationOrUser ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Organization , User ) OrganizationOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 class OrganizationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) OrganizationOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1034 1035 1036 1037 1038 1039 1040 class OrganizationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"LOGIN\" ) OrganizationTeamsHovercardContext Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26251 26252 26253 26254 26255 26256 26257 26258 26259 26260 26261 26262 26263 26264 26265 26266 26267 26268 26269 26270 26271 26272 26273 26274 26275 26276 26277 26278 26279 26280 26281 26282 26283 26284 class OrganizationTeamsHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"relevant_teams\" , \"teams_resource_path\" , \"teams_url\" , \"total_team_count\" , ) relevant_teams = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"relevantTeams\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) teams_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsResourcePath\" ) teams_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsUrl\" ) total_team_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalTeamCount\" ) OrganizationsHovercardContext Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26287 26288 26289 26290 26291 26292 26293 26294 26295 26296 26297 26298 26299 26300 26301 26302 26303 26304 26305 26306 26307 26308 26309 26310 26311 class OrganizationsHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"relevant_organizations\" , \"total_organization_count\" ) relevant_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationConnection ), graphql_name = \"relevantOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) total_organization_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalOrganizationCount\" ) Package Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26314 26315 26316 26317 26318 26319 26320 26321 26322 26323 26324 26325 26326 26327 26328 26329 26330 26331 26332 26333 26334 26335 26336 26337 26338 26339 26340 26341 26342 26343 26344 26345 26346 26347 26348 26349 26350 26351 26352 26353 26354 26355 26356 26357 26358 26359 26360 26361 26362 26363 26364 26365 26366 26367 26368 26369 26370 26371 26372 26373 26374 class Package ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"latest_version\" , \"name\" , \"package_type\" , \"repository\" , \"statistics\" , \"version\" , \"versions\" , ) latest_version = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"latestVersion\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) package_type = sgqlc . types . Field ( sgqlc . types . non_null ( PackageType ), graphql_name = \"packageType\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) statistics = sgqlc . types . Field ( PackageStatistics , graphql_name = \"statistics\" ) version = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"version\" , args = sgqlc . types . ArgDict ( ( ( \"version\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"version\" , default = None , ), ), ) ), ) versions = sgqlc . types . Field ( sgqlc . types . non_null ( PackageVersionConnection ), graphql_name = \"versions\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( PackageVersionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) PackageConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15473 15474 15475 15476 15477 15478 15479 15480 15481 15482 15483 15484 15485 15486 15487 class PackageConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Package\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PackageEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15490 15491 15492 15493 15494 15495 15496 15497 15498 class PackageEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Package\" , graphql_name = \"node\" ) PackageFile Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26377 26378 26379 26380 26381 26382 26383 26384 26385 26386 26387 26388 26389 26390 26391 26392 26393 26394 26395 26396 26397 26398 26399 26400 26401 26402 class PackageFile ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"md5\" , \"name\" , \"package_version\" , \"sha1\" , \"sha256\" , \"size\" , \"updated_at\" , \"url\" , ) md5 = sgqlc . types . Field ( String , graphql_name = \"md5\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) package_version = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"packageVersion\" ) sha1 = sgqlc . types . Field ( String , graphql_name = \"sha1\" ) sha256 = sgqlc . types . Field ( String , graphql_name = \"sha256\" ) size = sgqlc . types . Field ( Int , graphql_name = \"size\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( URI , graphql_name = \"url\" ) PackageFileConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15501 15502 15503 15504 15505 15506 15507 15508 15509 15510 15511 15512 15513 15514 15515 15516 15517 class PackageFileConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageFileEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageFile\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PackageFileEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15520 15521 15522 15523 15524 15525 15526 15527 15528 class PackageFileEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PackageFile\" , graphql_name = \"node\" ) PackageFileOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4430 4431 4432 4433 4434 4435 4436 4437 4438 class PackageFileOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( PackageFileOrderField , graphql_name = \"field\" ) direction = sgqlc . types . Field ( OrderDirection , graphql_name = \"direction\" ) PackageFileOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1043 1044 1045 1046 1047 1048 1049 class PackageFileOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) PackageOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4441 4442 4443 4444 4445 4446 4447 4448 4449 class PackageOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( PackageOrderField , graphql_name = \"field\" ) direction = sgqlc . types . Field ( OrderDirection , graphql_name = \"direction\" ) PackageOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1052 1053 1054 1055 1056 1057 1058 class PackageOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) PackageOwner Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15531 15532 15533 15534 15535 15536 15537 15538 15539 15540 15541 15542 15543 15544 15545 15546 15547 15548 15549 15550 15551 15552 15553 15554 15555 15556 15557 15558 15559 15560 15561 15562 15563 15564 15565 15566 15567 15568 15569 15570 15571 15572 15573 15574 15575 15576 15577 class PackageOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"packages\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) packages = sgqlc . types . Field ( sgqlc . types . non_null ( PackageConnection ), graphql_name = \"packages\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"names\" , sgqlc . types . Arg ( sgqlc . types . list_of ( String ), graphql_name = \"names\" , default = None ), ), ( \"repository_id\" , sgqlc . types . Arg ( ID , graphql_name = \"repositoryId\" , default = None ), ), ( \"package_type\" , sgqlc . types . Arg ( PackageType , graphql_name = \"packageType\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( PackageOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) PackageStatistics Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15580 15581 15582 15583 15584 15585 15586 15587 15588 15589 class PackageStatistics ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"downloads_total_count\" ,) downloads_total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"downloadsTotalCount\" ) PackageTag Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26405 26406 26407 26408 26409 26410 26411 26412 26413 class PackageTag ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"version\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) version = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"version\" ) PackageType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1061 1062 1063 1064 1065 1066 1067 class PackageType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DEBIAN\" , \"DOCKER\" , \"MAVEN\" , \"NPM\" , \"NUGET\" , \"PYPI\" , \"RUBYGEMS\" ) PackageVersion Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26416 26417 26418 26419 26420 26421 26422 26423 26424 26425 26426 26427 26428 26429 26430 26431 26432 26433 26434 26435 26436 26437 26438 26439 26440 26441 26442 26443 26444 26445 26446 26447 26448 26449 26450 26451 26452 26453 26454 26455 26456 26457 26458 26459 26460 26461 26462 26463 26464 26465 class PackageVersion ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"files\" , \"package\" , \"platform\" , \"pre_release\" , \"readme\" , \"release\" , \"statistics\" , \"summary\" , \"version\" , ) files = sgqlc . types . Field ( sgqlc . types . non_null ( PackageFileConnection ), graphql_name = \"files\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( PackageFileOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) package = sgqlc . types . Field ( Package , graphql_name = \"package\" ) platform = sgqlc . types . Field ( String , graphql_name = \"platform\" ) pre_release = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"preRelease\" ) readme = sgqlc . types . Field ( String , graphql_name = \"readme\" ) release = sgqlc . types . Field ( \"Release\" , graphql_name = \"release\" ) statistics = sgqlc . types . Field ( PackageVersionStatistics , graphql_name = \"statistics\" ) summary = sgqlc . types . Field ( String , graphql_name = \"summary\" ) version = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"version\" ) PackageVersionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15592 15593 15594 15595 15596 15597 15598 15599 15600 15601 15602 15603 15604 15605 15606 15607 15608 15609 15610 class PackageVersionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageVersionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageVersion\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PackageVersionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15613 15614 15615 15616 15617 15618 15619 15620 15621 class PackageVersionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"node\" ) PackageVersionOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4452 4453 4454 4455 4456 4457 4458 4459 4460 class PackageVersionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( PackageVersionOrderField , graphql_name = \"field\" ) direction = sgqlc . types . Field ( OrderDirection , graphql_name = \"direction\" ) PackageVersionOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1070 1071 1072 1073 1074 1075 1076 class PackageVersionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) PackageVersionStatistics Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15624 15625 15626 15627 15628 15629 15630 15631 15632 15633 class PackageVersionStatistics ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"downloads_total_count\" ,) downloads_total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"downloadsTotalCount\" ) PageInfo Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15636 15637 15638 15639 15640 15641 15642 15643 15644 15645 15646 15647 15648 15649 15650 15651 15652 15653 15654 15655 class PageInfo ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"end_cursor\" , \"has_next_page\" , \"has_previous_page\" , \"start_cursor\" , ) end_cursor = sgqlc . types . Field ( String , graphql_name = \"endCursor\" ) has_next_page = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasNextPage\" ) has_previous_page = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasPreviousPage\" ) start_cursor = sgqlc . types . Field ( String , graphql_name = \"startCursor\" ) PatchStatus Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1079 1080 1081 1082 1083 1084 1085 class PatchStatus ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADDED\" , \"CHANGED\" , \"COPIED\" , \"DELETED\" , \"MODIFIED\" , \"RENAMED\" ) PermissionGranter Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32635 32636 32637 32638 32639 32640 32641 class PermissionGranter ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Organization , Repository , Team ) PermissionSource Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15658 15659 15660 15661 15662 15663 15664 15665 15666 15667 15668 15669 15670 15671 15672 15673 15674 class PermissionSource ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization\" , \"permission\" , \"source\" ) organization = sgqlc . types . Field ( sgqlc . types . non_null ( \"Organization\" ), graphql_name = \"organization\" ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( DefaultRepositoryPermissionField ), graphql_name = \"permission\" , ) source = sgqlc . types . Field ( sgqlc . types . non_null ( \"PermissionGranter\" ), graphql_name = \"source\" ) PinIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4463 4464 4465 4466 4467 4468 4469 4470 4471 class PinIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) PinIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15677 15678 15679 15680 15681 15682 15683 15684 15685 class PinIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" ) PinnableItem Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32644 32645 32646 32647 32648 32649 32650 class PinnableItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Gist , Repository ) PinnableItemConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15688 15689 15690 15691 15692 15693 15694 15695 15696 15697 15698 15699 15700 15701 15702 15703 15704 class PinnableItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnableItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnableItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PinnableItemEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15707 15708 15709 15710 15711 15712 15713 15714 15715 class PinnableItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PinnableItem\" , graphql_name = \"node\" ) PinnableItemType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 class PinnableItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"GIST\" , \"ISSUE\" , \"ORGANIZATION\" , \"PROJECT\" , \"PULL_REQUEST\" , \"REPOSITORY\" , \"TEAM\" , \"USER\" , ) PinnedDiscussion Bases: sgqlc . types . Type , Node , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26468 26469 26470 26471 26472 26473 26474 26475 26476 26477 26478 26479 26480 26481 26482 26483 26484 26485 26486 26487 26488 26489 26490 26491 26492 26493 26494 26495 26496 26497 26498 26499 26500 26501 26502 26503 26504 class PinnedDiscussion ( sgqlc . types . Type , Node , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"discussion\" , \"gradient_stop_colors\" , \"pattern\" , \"pinned_by\" , \"preconfigured_gradient\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) discussion = sgqlc . types . Field ( sgqlc . types . non_null ( Discussion ), graphql_name = \"discussion\" ) gradient_stop_colors = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"gradientStopColors\" , ) pattern = sgqlc . types . Field ( sgqlc . types . non_null ( PinnedDiscussionPattern ), graphql_name = \"pattern\" ) pinned_by = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"pinnedBy\" ) preconfigured_gradient = sgqlc . types . Field ( PinnedDiscussionGradient , graphql_name = \"preconfiguredGradient\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) PinnedDiscussionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15718 15719 15720 15721 15722 15723 15724 15725 15726 15727 15728 15729 15730 15731 15732 15733 15734 15735 15736 class PinnedDiscussionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnedDiscussionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnedDiscussion\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PinnedDiscussionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15739 15740 15741 15742 15743 15744 15745 15746 15747 class PinnedDiscussionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PinnedDiscussion\" , graphql_name = \"node\" ) PinnedDiscussionGradient Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 class PinnedDiscussionGradient ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BLUE_MINT\" , \"BLUE_PURPLE\" , \"PINK_BLUE\" , \"PURPLE_CORAL\" , \"RED_ORANGE\" , ) PinnedDiscussionPattern Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1121 1122 1123 1124 1125 1126 1127 class PinnedDiscussionPattern ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CHEVRON_UP\" , \"DOT\" , \"DOT_FILL\" , \"HEART_FILL\" , \"PLUS\" , \"ZAP\" ) PinnedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26507 26508 26509 26510 26511 26512 26513 26514 26515 26516 26517 26518 class PinnedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"issue\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" ) PinnedIssue Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26521 26522 26523 26524 26525 26526 26527 26528 26529 26530 26531 26532 26533 class PinnedIssue ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"issue\" , \"pinned_by\" , \"repository\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" ) pinned_by = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"pinnedBy\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) PinnedIssueConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15750 15751 15752 15753 15754 15755 15756 15757 15758 15759 15760 15761 15762 15763 15764 15765 15766 class PinnedIssueConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnedIssueEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnedIssue\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PinnedIssueEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15769 15770 15771 15772 15773 15774 15775 15776 15777 class PinnedIssueEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PinnedIssue\" , graphql_name = \"node\" ) PreciseDateTime Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1130 1131 1132 1133 1134 1135 class PreciseDateTime ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema PrivateRepositoryForkingDisableAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26536 26537 26538 26539 26540 26541 26542 26543 26544 26545 26546 26547 26548 26549 class PrivateRepositoryForkingDisableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () PrivateRepositoryForkingEnableAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26552 26553 26554 26555 26556 26557 26558 26559 26560 26561 26562 26563 26564 26565 class PrivateRepositoryForkingEnableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () ProfileItemShowcase Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15780 15781 15782 15783 15784 15785 15786 15787 15788 15789 15790 15791 15792 15793 15794 15795 15796 15797 15798 15799 15800 15801 15802 15803 15804 class ProfileItemShowcase ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"has_pinned_items\" , \"items\" ) has_pinned_items = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasPinnedItems\" ) items = sgqlc . types . Field ( sgqlc . types . non_null ( PinnableItemConnection ), graphql_name = \"items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) ProfileOwner Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ProfileOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"any_pinnable_items\" , \"email\" , \"id\" , \"item_showcase\" , \"location\" , \"login\" , \"name\" , \"pinnable_items\" , \"pinned_items\" , \"pinned_items_remaining\" , \"viewer_can_change_pinned_items\" , \"website_url\" , ) any_pinnable_items = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"anyPinnableItems\" , args = sgqlc . types . ArgDict ( ( ( \"type\" , sgqlc . types . Arg ( PinnableItemType , graphql_name = \"type\" , default = None ), ), ) ), ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) item_showcase = sgqlc . types . Field ( sgqlc . types . non_null ( ProfileItemShowcase ), graphql_name = \"itemShowcase\" ) location = sgqlc . types . Field ( String , graphql_name = \"location\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) pinnable_items = sgqlc . types . Field ( sgqlc . types . non_null ( PinnableItemConnection ), graphql_name = \"pinnableItems\" , args = sgqlc . types . ArgDict ( ( ( \"types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PinnableItemType )), graphql_name = \"types\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pinned_items = sgqlc . types . Field ( sgqlc . types . non_null ( PinnableItemConnection ), graphql_name = \"pinnedItems\" , args = sgqlc . types . ArgDict ( ( ( \"types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PinnableItemType )), graphql_name = \"types\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pinned_items_remaining = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"pinnedItemsRemaining\" ) viewer_can_change_pinned_items = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanChangePinnedItems\" ) website_url = sgqlc . types . Field ( URI , graphql_name = \"websiteUrl\" ) Project Bases: sgqlc . types . Type , Node , Closable , Updatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26568 26569 26570 26571 26572 26573 26574 26575 26576 26577 26578 26579 26580 26581 26582 26583 26584 26585 26586 26587 26588 26589 26590 26591 26592 26593 26594 26595 26596 26597 26598 26599 26600 26601 26602 26603 26604 26605 26606 26607 26608 26609 26610 26611 26612 26613 26614 26615 26616 26617 26618 26619 26620 26621 26622 26623 26624 26625 26626 26627 26628 26629 26630 26631 26632 26633 26634 26635 26636 26637 26638 26639 26640 26641 26642 26643 26644 26645 26646 26647 26648 26649 class Project ( sgqlc . types . Type , Node , Closable , Updatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"body_html\" , \"columns\" , \"created_at\" , \"creator\" , \"database_id\" , \"name\" , \"number\" , \"owner\" , \"pending_cards\" , \"progress\" , \"resource_path\" , \"state\" , \"updated_at\" , \"url\" , ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bodyHTML\" ) columns = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectColumnConnection ), graphql_name = \"columns\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectOwner ), graphql_name = \"owner\" ) pending_cards = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectCardConnection ), graphql_name = \"pendingCards\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"archived_states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( ProjectCardArchivedState ), graphql_name = \"archivedStates\" , default = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ), ), ), ) ), ) progress = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectProgress ), graphql_name = \"progress\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectState ), graphql_name = \"state\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) ProjectCard Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26652 26653 26654 26655 26656 26657 26658 26659 26660 26661 26662 26663 26664 26665 26666 26667 26668 26669 26670 26671 26672 26673 26674 26675 26676 26677 26678 26679 26680 26681 26682 26683 26684 26685 26686 26687 26688 26689 26690 26691 class ProjectCard ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column\" , \"content\" , \"created_at\" , \"creator\" , \"database_id\" , \"is_archived\" , \"note\" , \"project\" , \"resource_path\" , \"state\" , \"updated_at\" , \"url\" , ) column = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"column\" ) content = sgqlc . types . Field ( \"ProjectCardItem\" , graphql_name = \"content\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) note = sgqlc . types . Field ( String , graphql_name = \"note\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( Project ), graphql_name = \"project\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) state = sgqlc . types . Field ( ProjectCardState , graphql_name = \"state\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) ProjectCardArchivedState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1138 1139 1140 1141 1142 1143 1144 class ProjectCardArchivedState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ) ProjectCardConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15904 15905 15906 15907 15908 15909 15910 15911 15912 15913 15914 15915 15916 15917 15918 15919 15920 class ProjectCardConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectCardEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectCard\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectCardEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15923 15924 15925 15926 15927 15928 15929 15930 15931 class ProjectCardEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectCard\" , graphql_name = \"node\" ) ProjectCardItem Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32653 32654 32655 32656 32657 32658 32659 class ProjectCardItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest ) ProjectCardState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1147 1148 1149 1150 1151 1152 1153 class ProjectCardState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CONTENT_ONLY\" , \"NOTE_ONLY\" , \"REDACTED\" ) ProjectColumn Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26694 26695 26696 26697 26698 26699 26700 26701 26702 26703 26704 26705 26706 26707 26708 26709 26710 26711 26712 26713 26714 26715 26716 26717 26718 26719 26720 26721 26722 26723 26724 26725 26726 26727 26728 26729 26730 26731 26732 26733 26734 26735 26736 26737 26738 26739 26740 26741 26742 26743 26744 26745 26746 26747 class ProjectColumn ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cards\" , \"created_at\" , \"database_id\" , \"name\" , \"project\" , \"purpose\" , \"resource_path\" , \"updated_at\" , \"url\" , ) cards = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectCardConnection ), graphql_name = \"cards\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"archived_states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( ProjectCardArchivedState ), graphql_name = \"archivedStates\" , default = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ), ), ), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( Project ), graphql_name = \"project\" ) purpose = sgqlc . types . Field ( ProjectColumnPurpose , graphql_name = \"purpose\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) ProjectColumnConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15934 15935 15936 15937 15938 15939 15940 15941 15942 15943 15944 15945 15946 15947 15948 15949 15950 15951 15952 class ProjectColumnConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectColumnEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectColumn\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectColumnEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15955 15956 15957 15958 15959 15960 15961 15962 15963 class ProjectColumnEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"node\" ) ProjectColumnPurpose Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1156 1157 1158 1159 1160 1161 1162 class ProjectColumnPurpose ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DONE\" , \"IN_PROGRESS\" , \"TODO\" ) ProjectConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15966 15967 15968 15969 15970 15971 15972 15973 15974 15975 15976 15977 15978 15979 15980 class ProjectConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Project\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15983 15984 15985 15986 15987 15988 15989 15990 15991 class ProjectEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Project\" , graphql_name = \"node\" ) ProjectItemType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1165 1166 1167 1168 1169 1170 1171 class ProjectItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DRAFT_ISSUE\" , \"ISSUE\" , \"PULL_REQUEST\" , \"REDACTED\" ) ProjectNext Bases: sgqlc . types . Type , Node , Closable , Updatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ProjectNext ( sgqlc . types . Type , Node , Closable , Updatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"database_id\" , \"description\" , \"fields\" , \"items\" , \"number\" , \"owner\" , \"public\" , \"repositories\" , \"resource_path\" , \"short_description\" , \"title\" , \"updated_at\" , \"url\" , \"views\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) fields = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextFieldConnection ), graphql_name = \"fields\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItemConnection ), graphql_name = \"items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextOwner ), graphql_name = \"owner\" ) public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"public\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) short_description = sgqlc . types . Field ( String , graphql_name = \"shortDescription\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) views = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectViewConnection ), graphql_name = \"views\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) ProjectNextConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15994 15995 15996 15997 15998 15999 16000 16001 16002 16003 16004 16005 16006 16007 16008 16009 16010 class ProjectNextConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNext\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectNextEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16013 16014 16015 16016 16017 16018 16019 16020 16021 class ProjectNextEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectNext\" , graphql_name = \"node\" ) ProjectNextField Bases: sgqlc . types . Type , ProjectNextFieldCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26856 26857 26858 26859 26860 26861 26862 class ProjectNextField ( sgqlc . types . Type , ProjectNextFieldCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () ProjectNextFieldCommon Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16024 16025 16026 16027 16028 16029 16030 16031 16032 16033 16034 16035 16036 16037 16038 16039 16040 16041 16042 16043 16044 16045 16046 16047 16048 16049 16050 16051 16052 16053 16054 16055 class ProjectNextFieldCommon ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"data_type\" , \"database_id\" , \"id\" , \"name\" , \"project\" , \"settings\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) data_type = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextFieldType ), graphql_name = \"dataType\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectNext\" ), graphql_name = \"project\" ) settings = sgqlc . types . Field ( String , graphql_name = \"settings\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) ProjectNextFieldConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16058 16059 16060 16061 16062 16063 16064 16065 16066 16067 16068 16069 16070 16071 16072 16073 16074 16075 16076 class ProjectNextFieldConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextFieldEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextField\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectNextFieldEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16079 16080 16081 16082 16083 16084 16085 16086 16087 class ProjectNextFieldEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectNextField\" , graphql_name = \"node\" ) ProjectNextFieldType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 class ProjectNextFieldType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ASSIGNEES\" , \"DATE\" , \"ITERATION\" , \"LABELS\" , \"LINKED_PULL_REQUESTS\" , \"MILESTONE\" , \"NUMBER\" , \"REPOSITORY\" , \"REVIEWERS\" , \"SINGLE_SELECT\" , \"TEXT\" , \"TITLE\" , \"TRACKS\" , ) ProjectNextItem Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26865 26866 26867 26868 26869 26870 26871 26872 26873 26874 26875 26876 26877 26878 26879 26880 26881 26882 26883 26884 26885 26886 26887 26888 26889 26890 26891 26892 26893 26894 26895 26896 26897 26898 26899 26900 26901 26902 26903 26904 26905 26906 26907 26908 26909 26910 26911 26912 26913 26914 class ProjectNextItem ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content\" , \"created_at\" , \"creator\" , \"database_id\" , \"field_values\" , \"is_archived\" , \"project\" , \"title\" , \"type\" , \"updated_at\" , ) content = sgqlc . types . Field ( \"ProjectNextItemContent\" , graphql_name = \"content\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) field_values = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItemFieldValueConnection ), graphql_name = \"fieldValues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNext ), graphql_name = \"project\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectItemType ), graphql_name = \"type\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) ProjectNextItemConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16090 16091 16092 16093 16094 16095 16096 16097 16098 16099 16100 16101 16102 16103 16104 16105 16106 16107 16108 class ProjectNextItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectNextItemContent Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32662 32663 32664 32665 32666 32667 32668 class ProjectNextItemContent ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( DraftIssue , Issue , PullRequest ) ProjectNextItemEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16111 16112 16113 16114 16115 16116 16117 16118 16119 class ProjectNextItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectNextItem\" , graphql_name = \"node\" ) ProjectNextItemFieldValue Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26917 26918 26919 26920 26921 26922 26923 26924 26925 26926 26927 26928 26929 26930 26931 26932 26933 26934 26935 26936 26937 26938 26939 26940 26941 26942 26943 26944 26945 26946 class ProjectNextItemFieldValue ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"database_id\" , \"project_field\" , \"project_item\" , \"updated_at\" , \"value\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) project_field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextField ), graphql_name = \"projectField\" ) project_item = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItem ), graphql_name = \"projectItem\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) value = sgqlc . types . Field ( String , graphql_name = \"value\" ) ProjectNextItemFieldValueConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16122 16123 16124 16125 16126 16127 16128 16129 16130 16131 16132 16133 16134 16135 16136 16137 16138 16139 16140 class ProjectNextItemFieldValueConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextItemFieldValueEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextItemFieldValue\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectNextItemFieldValueEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16143 16144 16145 16146 16147 16148 16149 16150 16151 class ProjectNextItemFieldValueEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectNextItemFieldValue\" , graphql_name = \"node\" ) ProjectNextOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1197 1198 1199 1200 1201 1202 1203 class ProjectNextOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NUMBER\" , \"TITLE\" , \"UPDATED_AT\" ) ProjectNextOwner Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16154 16155 16156 16157 16158 16159 16160 16161 16162 16163 16164 16165 16166 16167 16168 16169 16170 16171 16172 16173 16174 16175 16176 16177 16178 16179 16180 16181 16182 16183 16184 16185 16186 16187 16188 16189 16190 16191 16192 16193 16194 16195 16196 16197 class ProjectNextOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"project_next\" , \"projects_next\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) project_next = sgqlc . types . Field ( \"ProjectNext\" , graphql_name = \"projectNext\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) projects_next = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextConnection ), graphql_name = \"projectsNext\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"sort_by\" , sgqlc . types . Arg ( ProjectNextOrderField , graphql_name = \"sortBy\" , default = \"TITLE\" ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) ProjectOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 class ProjectOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ProjectOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1206 1207 1208 1209 1210 1211 1212 class ProjectOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"UPDATED_AT\" ) ProjectOwner Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16200 16201 16202 16203 16204 16205 16206 16207 16208 16209 16210 16211 16212 16213 16214 16215 16216 16217 16218 16219 16220 16221 16222 16223 16224 16225 16226 16227 16228 16229 16230 16231 16232 16233 16234 16235 16236 16237 16238 16239 16240 16241 16242 16243 16244 16245 16246 16247 16248 16249 16250 16251 16252 16253 16254 16255 16256 16257 16258 16259 16260 16261 16262 16263 16264 16265 16266 16267 16268 class ProjectOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"project\" , \"projects\" , \"projects_resource_path\" , \"projects_url\" , \"viewer_can_create_projects\" , ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) projects = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectConnection ), graphql_name = \"projects\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( ProjectOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"search\" , sgqlc . types . Arg ( String , graphql_name = \"search\" , default = None ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( ProjectState )), graphql_name = \"states\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) projects_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"projectsResourcePath\" ) projects_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"projectsUrl\" ) viewer_can_create_projects = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanCreateProjects\" ) ProjectProgress Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16271 16272 16273 16274 16275 16276 16277 16278 16279 16280 16281 16282 16283 16284 16285 16286 16287 16288 16289 16290 16291 16292 16293 16294 16295 16296 16297 16298 16299 16300 class ProjectProgress ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"done_count\" , \"done_percentage\" , \"enabled\" , \"in_progress_count\" , \"in_progress_percentage\" , \"todo_count\" , \"todo_percentage\" , ) done_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"doneCount\" ) done_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"donePercentage\" ) enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"enabled\" ) in_progress_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"inProgressCount\" ) in_progress_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"inProgressPercentage\" ) todo_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"todoCount\" ) todo_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"todoPercentage\" ) ProjectState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1215 1216 1217 1218 1219 1220 1221 class ProjectState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" ) ProjectTemplate Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 class ProjectTemplate ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"AUTOMATED_KANBAN_V2\" , \"AUTOMATED_REVIEWS_KANBAN\" , \"BASIC_KANBAN\" , \"BUG_TRIAGE\" , ) ProjectV2 Bases: sgqlc . types . Type , Closable , Updatable , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ProjectV2 ( sgqlc . types . Type , Closable , Updatable , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"database_id\" , \"field\" , \"fields\" , \"items\" , \"number\" , \"owner\" , \"public\" , \"readme\" , \"repositories\" , \"resource_path\" , \"short_description\" , \"title\" , \"updated_at\" , \"url\" , \"view\" , \"views\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) field = sgqlc . types . Field ( \"ProjectV2FieldConfiguration\" , graphql_name = \"field\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) fields = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2FieldConfigurationConnection ), graphql_name = \"fields\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemConnection ), graphql_name = \"items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2ItemOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Owner ), graphql_name = \"owner\" ) public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"public\" ) readme = sgqlc . types . Field ( String , graphql_name = \"readme\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) short_description = sgqlc . types . Field ( String , graphql_name = \"shortDescription\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) view = sgqlc . types . Field ( \"ProjectV2View\" , graphql_name = \"view\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) views = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ViewConnection ), graphql_name = \"views\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2ViewOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ProjectV2Connection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16303 16304 16305 16306 16307 16308 16309 16310 16311 16312 16313 16314 16315 16316 16317 16318 16319 class ProjectV2Connection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2Edge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectV2Edge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16322 16323 16324 16325 16326 16327 16328 16329 16330 class ProjectV2Edge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2\" , graphql_name = \"node\" ) ProjectV2Field Bases: sgqlc . types . Type , ProjectV2FieldCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27117 27118 27119 27120 27121 27122 27123 class ProjectV2Field ( sgqlc . types . Type , ProjectV2FieldCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () ProjectV2FieldCommon Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16333 16334 16335 16336 16337 16338 16339 16340 16341 16342 16343 16344 16345 16346 16347 16348 16349 16350 16351 16352 16353 16354 16355 16356 16357 16358 16359 16360 16361 16362 class ProjectV2FieldCommon ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"data_type\" , \"database_id\" , \"id\" , \"name\" , \"project\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) data_type = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2FieldType ), graphql_name = \"dataType\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2\" ), graphql_name = \"project\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) ProjectV2FieldConfiguration Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32671 32672 32673 32674 32675 32676 32677 class ProjectV2FieldConfiguration ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( ProjectV2Field , ProjectV2IterationField , ProjectV2SingleSelectField ) ProjectV2FieldConfigurationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16365 16366 16367 16368 16369 16370 16371 16372 16373 16374 16375 16376 16377 16378 16379 16380 16381 16382 16383 class ProjectV2FieldConfigurationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2FieldConfigurationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectV2FieldConfigurationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16386 16387 16388 16389 16390 16391 16392 16393 16394 class ProjectV2FieldConfigurationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2FieldConfiguration\" , graphql_name = \"node\" ) ProjectV2FieldConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16397 16398 16399 16400 16401 16402 16403 16404 16405 16406 16407 16408 16409 16410 16411 16412 16413 16414 16415 class ProjectV2FieldConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2FieldEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2Field\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectV2FieldEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16418 16419 16420 16421 16422 16423 16424 16425 16426 class ProjectV2FieldEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2Field\" , graphql_name = \"node\" ) ProjectV2FieldOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 4500 4501 class ProjectV2FieldOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2FieldOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ProjectV2FieldOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1238 1239 1240 1241 1242 1243 1244 class ProjectV2FieldOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"POSITION\" ) ProjectV2FieldType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 class ProjectV2FieldType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ASSIGNEES\" , \"DATE\" , \"ITERATION\" , \"LABELS\" , \"LINKED_PULL_REQUESTS\" , \"MILESTONE\" , \"NUMBER\" , \"REPOSITORY\" , \"REVIEWERS\" , \"SINGLE_SELECT\" , \"TEXT\" , \"TITLE\" , \"TRACKS\" , ) ProjectV2FieldValue Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 class ProjectV2FieldValue ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"text\" , \"number\" , \"date\" , \"single_select_option_id\" , \"iteration_id\" , ) text = sgqlc . types . Field ( String , graphql_name = \"text\" ) number = sgqlc . types . Field ( Float , graphql_name = \"number\" ) date = sgqlc . types . Field ( Date , graphql_name = \"date\" ) single_select_option_id = sgqlc . types . Field ( String , graphql_name = \"singleSelectOptionId\" ) iteration_id = sgqlc . types . Field ( String , graphql_name = \"iterationId\" ) ProjectV2Item Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27126 27127 27128 27129 27130 27131 27132 27133 27134 27135 27136 27137 27138 27139 27140 27141 27142 27143 27144 27145 27146 27147 27148 27149 27150 27151 27152 27153 27154 27155 27156 27157 27158 27159 27160 27161 27162 27163 27164 27165 27166 27167 27168 27169 27170 27171 27172 27173 27174 27175 27176 27177 27178 27179 27180 27181 27182 27183 27184 27185 27186 27187 27188 27189 27190 27191 27192 27193 27194 27195 27196 class ProjectV2Item ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content\" , \"created_at\" , \"creator\" , \"database_id\" , \"field_value_by_name\" , \"field_values\" , \"is_archived\" , \"project\" , \"type\" , \"updated_at\" , ) content = sgqlc . types . Field ( \"ProjectV2ItemContent\" , graphql_name = \"content\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) field_value_by_name = sgqlc . types . Field ( \"ProjectV2ItemFieldValue\" , graphql_name = \"fieldValueByName\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) field_values = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemFieldValueConnection ), graphql_name = \"fieldValues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2ItemFieldValueOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2 ), graphql_name = \"project\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemType ), graphql_name = \"type\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) ProjectV2ItemConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16429 16430 16431 16432 16433 16434 16435 16436 16437 16438 16439 16440 16441 16442 16443 16444 16445 16446 16447 class ProjectV2ItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2ItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2Item\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectV2ItemContent Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32680 32681 32682 32683 32684 32685 32686 class ProjectV2ItemContent ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( DraftIssue , Issue , PullRequest ) ProjectV2ItemEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16450 16451 16452 16453 16454 16455 16456 16457 16458 class ProjectV2ItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"node\" ) ProjectV2ItemFieldDateValue Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27199 27200 27201 27202 27203 27204 27205 27206 27207 27208 class ProjectV2ItemFieldDateValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"date\" ,) date = sgqlc . types . Field ( Date , graphql_name = \"date\" ) ProjectV2ItemFieldIterationValue Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27211 27212 27213 27214 27215 27216 27217 27218 27219 27220 27221 27222 27223 27224 27225 27226 27227 27228 class ProjectV2ItemFieldIterationValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"duration\" , \"iteration_id\" , \"start_date\" , \"title\" , \"title_html\" ) duration = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"duration\" ) iteration_id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"iterationId\" ) start_date = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"startDate\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) title_html = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"titleHTML\" ) ProjectV2ItemFieldLabelValue Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16461 16462 16463 16464 16465 16466 16467 16468 16469 16470 16471 16472 16473 16474 16475 16476 16477 16478 16479 16480 16481 16482 16483 16484 16485 class ProjectV2ItemFieldLabelValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"labels\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) labels = sgqlc . types . Field ( LabelConnection , graphql_name = \"labels\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) ProjectV2ItemFieldMilestoneValue Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16488 16489 16490 16491 16492 16493 16494 16495 16496 16497 16498 class ProjectV2ItemFieldMilestoneValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"milestone\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) milestone = sgqlc . types . Field ( \"Milestone\" , graphql_name = \"milestone\" ) ProjectV2ItemFieldNumberValue Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27231 27232 27233 27234 27235 27236 27237 27238 27239 27240 class ProjectV2ItemFieldNumberValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"number\" ,) number = sgqlc . types . Field ( Float , graphql_name = \"number\" ) ProjectV2ItemFieldPullRequestValue Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16501 16502 16503 16504 16505 16506 16507 16508 16509 16510 16511 16512 16513 16514 16515 16516 16517 16518 16519 16520 16521 16522 16523 16524 16525 16526 16527 16528 16529 16530 16531 16532 16533 class ProjectV2ItemFieldPullRequestValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"pull_requests\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) pull_requests = sgqlc . types . Field ( \"PullRequestConnection\" , graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( PullRequestOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ProjectV2ItemFieldRepositoryValue Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16536 16537 16538 16539 16540 16541 16542 16543 16544 16545 16546 class ProjectV2ItemFieldRepositoryValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"repository\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) ProjectV2ItemFieldReviewerValue Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16549 16550 16551 16552 16553 16554 16555 16556 16557 16558 16559 16560 16561 16562 16563 16564 16565 16566 16567 16568 16569 16570 16571 16572 16573 class ProjectV2ItemFieldReviewerValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"reviewers\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) reviewers = sgqlc . types . Field ( \"RequestedReviewerConnection\" , graphql_name = \"reviewers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) ProjectV2ItemFieldSingleSelectValue Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27243 27244 27245 27246 27247 27248 27249 27250 27251 27252 27253 27254 class ProjectV2ItemFieldSingleSelectValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"name_html\" , \"option_id\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) name_html = sgqlc . types . Field ( String , graphql_name = \"nameHTML\" ) option_id = sgqlc . types . Field ( String , graphql_name = \"optionId\" ) ProjectV2ItemFieldTextValue Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27257 27258 27259 27260 27261 27262 27263 27264 27265 27266 class ProjectV2ItemFieldTextValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"text\" ,) text = sgqlc . types . Field ( String , graphql_name = \"text\" ) ProjectV2ItemFieldUserValue Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16576 16577 16578 16579 16580 16581 16582 16583 16584 16585 16586 16587 16588 16589 16590 16591 16592 16593 16594 16595 16596 16597 16598 16599 16600 class ProjectV2ItemFieldUserValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"users\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) users = sgqlc . types . Field ( \"UserConnection\" , graphql_name = \"users\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) ProjectV2ItemFieldValue Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32689 32690 32691 32692 32693 32694 32695 32696 32697 32698 32699 32700 32701 32702 32703 32704 32705 32706 32707 class ProjectV2ItemFieldValue ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( ProjectV2ItemFieldDateValue , ProjectV2ItemFieldIterationValue , ProjectV2ItemFieldLabelValue , ProjectV2ItemFieldMilestoneValue , ProjectV2ItemFieldNumberValue , ProjectV2ItemFieldPullRequestValue , ProjectV2ItemFieldRepositoryValue , ProjectV2ItemFieldReviewerValue , ProjectV2ItemFieldSingleSelectValue , ProjectV2ItemFieldTextValue , ProjectV2ItemFieldUserValue , ) ProjectV2ItemFieldValueCommon Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16603 16604 16605 16606 16607 16608 16609 16610 16611 16612 16613 16614 16615 16616 16617 16618 16619 16620 16621 16622 16623 16624 16625 16626 16627 16628 16629 16630 class ProjectV2ItemFieldValueCommon ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"database_id\" , \"field\" , \"id\" , \"item\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) item = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2Item\" ), graphql_name = \"item\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) ProjectV2ItemFieldValueConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16633 16634 16635 16636 16637 16638 16639 16640 16641 16642 16643 16644 16645 16646 16647 16648 16649 16650 16651 class ProjectV2ItemFieldValueConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2ItemFieldValueEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2ItemFieldValue\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectV2ItemFieldValueEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16654 16655 16656 16657 16658 16659 16660 16661 16662 class ProjectV2ItemFieldValueEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2ItemFieldValue\" , graphql_name = \"node\" ) ProjectV2ItemFieldValueOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 class ProjectV2ItemFieldValueOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemFieldValueOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ProjectV2ItemFieldValueOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1270 1271 1272 1273 1274 1275 1276 class ProjectV2ItemFieldValueOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"POSITION\" ,) ProjectV2ItemOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 class ProjectV2ItemOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ProjectV2ItemOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1279 1280 1281 1282 1283 1284 1285 class ProjectV2ItemOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"POSITION\" ,) ProjectV2ItemType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1288 1289 1290 1291 1292 1293 1294 class ProjectV2ItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DRAFT_ISSUE\" , \"ISSUE\" , \"PULL_REQUEST\" , \"REDACTED\" ) ProjectV2IterationField Bases: sgqlc . types . Type , ProjectV2FieldCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27269 27270 27271 27272 27273 27274 27275 27276 27277 27278 27279 class ProjectV2IterationField ( sgqlc . types . Type , ProjectV2FieldCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"configuration\" ,) configuration = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2IterationFieldConfiguration ), graphql_name = \"configuration\" , ) ProjectV2IterationFieldConfiguration Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16665 16666 16667 16668 16669 16670 16671 16672 16673 16674 16675 16676 16677 16678 16679 16680 16681 16682 16683 16684 16685 16686 16687 16688 16689 class ProjectV2IterationFieldConfiguration ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"completed_iterations\" , \"duration\" , \"iterations\" , \"start_day\" ) completed_iterations = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ProjectV2IterationFieldIteration\" ) ) ), graphql_name = \"completedIterations\" , ) duration = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"duration\" ) iterations = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ProjectV2IterationFieldIteration\" ) ) ), graphql_name = \"iterations\" , ) start_day = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"startDay\" ) ProjectV2IterationFieldIteration Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16692 16693 16694 16695 16696 16697 16698 16699 16700 16701 16702 16703 16704 16705 class ProjectV2IterationFieldIteration ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"duration\" , \"id\" , \"start_date\" , \"title\" , \"title_html\" ) duration = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"duration\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"id\" ) start_date = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"startDate\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) title_html = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"titleHTML\" ) ProjectV2Order Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 class ProjectV2Order ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2OrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ProjectV2OrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1297 1298 1299 1300 1301 1302 1303 class ProjectV2OrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NUMBER\" , \"TITLE\" , \"UPDATED_AT\" ) ProjectV2Owner Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16708 16709 16710 16711 16712 16713 16714 16715 16716 16717 16718 16719 16720 16721 16722 16723 16724 16725 16726 16727 16728 16729 16730 16731 16732 16733 16734 16735 16736 16737 16738 16739 16740 16741 16742 16743 16744 16745 16746 16747 16748 16749 16750 16751 16752 16753 class ProjectV2Owner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"project_v2\" , \"projects_v2\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) project_v2 = sgqlc . types . Field ( \"ProjectV2\" , graphql_name = \"projectV2\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) projects_v2 = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Connection ), graphql_name = \"projectsV2\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2Order , graphql_name = \"orderBy\" , default = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) ProjectV2Recent Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16756 16757 16758 16759 16760 16761 16762 16763 16764 16765 16766 16767 16768 16769 16770 16771 16772 16773 16774 16775 16776 16777 class ProjectV2Recent ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"recent_projects\" ,) recent_projects = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Connection ), graphql_name = \"recentProjects\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) ProjectV2SingleSelectField Bases: sgqlc . types . Type , ProjectV2FieldCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27282 27283 27284 27285 27286 27287 27288 27289 27290 27291 27292 27293 27294 class ProjectV2SingleSelectField ( sgqlc . types . Type , ProjectV2FieldCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"options\" ,) options = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ProjectV2SingleSelectFieldOption )) ), graphql_name = \"options\" , ) ProjectV2SingleSelectFieldOption Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16780 16781 16782 16783 16784 16785 16786 16787 16788 16789 class ProjectV2SingleSelectFieldOption ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"name\" , \"name_html\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"id\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) name_html = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"nameHTML\" ) ProjectV2SortBy Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16792 16793 16794 16795 16796 16797 16798 16799 16800 16801 16802 16803 16804 class ProjectV2SortBy ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"direction\" , \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2Field\" ), graphql_name = \"field\" ) ProjectV2SortByConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16807 16808 16809 16810 16811 16812 16813 16814 16815 16816 16817 16818 16819 16820 16821 16822 16823 16824 16825 class ProjectV2SortByConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2SortByEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( ProjectV2SortBy ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectV2SortByEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16828 16829 16830 16831 16832 16833 16834 16835 16836 class ProjectV2SortByEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( ProjectV2SortBy , graphql_name = \"node\" ) ProjectV2View Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ProjectV2View ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"fields\" , \"filter\" , \"group_by\" , \"layout\" , \"name\" , \"number\" , \"project\" , \"sort_by\" , \"updated_at\" , \"vertical_group_by\" , \"visible_fields\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) fields = sgqlc . types . Field ( ProjectV2FieldConfigurationConnection , graphql_name = \"fields\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) filter = sgqlc . types . Field ( String , graphql_name = \"filter\" ) group_by = sgqlc . types . Field ( ProjectV2FieldConnection , graphql_name = \"groupBy\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) layout = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ViewLayout ), graphql_name = \"layout\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2 ), graphql_name = \"project\" ) sort_by = sgqlc . types . Field ( ProjectV2SortByConnection , graphql_name = \"sortBy\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) vertical_group_by = sgqlc . types . Field ( ProjectV2FieldConnection , graphql_name = \"verticalGroupBy\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) visible_fields = sgqlc . types . Field ( ProjectV2FieldConnection , graphql_name = \"visibleFields\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ProjectV2ViewConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16839 16840 16841 16842 16843 16844 16845 16846 16847 16848 16849 16850 16851 16852 16853 16854 16855 16856 16857 class ProjectV2ViewConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2ViewEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2View\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectV2ViewEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16860 16861 16862 16863 16864 16865 16866 16867 16868 class ProjectV2ViewEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2View\" , graphql_name = \"node\" ) ProjectV2ViewLayout Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1306 1307 1308 1309 1310 1311 1312 class ProjectV2ViewLayout ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BOARD_LAYOUT\" , \"TABLE_LAYOUT\" ) ProjectV2ViewOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 class ProjectV2ViewOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ViewOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ProjectV2ViewOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1315 1316 1317 1318 1319 1320 1321 class ProjectV2ViewOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"POSITION\" ) ProjectView Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27441 27442 27443 27444 27445 27446 27447 27448 27449 27450 27451 27452 27453 27454 27455 27456 27457 27458 27459 27460 27461 27462 27463 27464 27465 27466 27467 27468 27469 27470 27471 27472 27473 27474 27475 27476 27477 27478 27479 27480 27481 27482 27483 27484 27485 27486 27487 27488 class ProjectView ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"filter\" , \"group_by\" , \"layout\" , \"name\" , \"number\" , \"project\" , \"sort_by\" , \"updated_at\" , \"vertical_group_by\" , \"visible_fields\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) filter = sgqlc . types . Field ( String , graphql_name = \"filter\" ) group_by = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( Int )), graphql_name = \"groupBy\" ) layout = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectViewLayout ), graphql_name = \"layout\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNext ), graphql_name = \"project\" ) sort_by = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( SortBy )), graphql_name = \"sortBy\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) vertical_group_by = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( Int )), graphql_name = \"verticalGroupBy\" ) visible_fields = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( Int )), graphql_name = \"visibleFields\" ) ProjectViewConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16871 16872 16873 16874 16875 16876 16877 16878 16879 16880 16881 16882 16883 16884 16885 16886 16887 class ProjectViewConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectViewEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectView\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ProjectViewEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16890 16891 16892 16893 16894 16895 16896 16897 16898 class ProjectViewEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectView\" , graphql_name = \"node\" ) ProjectViewLayout Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1324 1325 1326 1327 1328 1329 1330 class ProjectViewLayout ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BOARD_LAYOUT\" , \"TABLE_LAYOUT\" ) PublicKey Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27491 27492 27493 27494 27495 27496 27497 27498 27499 27500 27501 27502 27503 27504 27505 27506 27507 27508 27509 27510 27511 27512 class PublicKey ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"accessed_at\" , \"created_at\" , \"fingerprint\" , \"is_read_only\" , \"key\" , \"updated_at\" , ) accessed_at = sgqlc . types . Field ( DateTime , graphql_name = \"accessedAt\" ) created_at = sgqlc . types . Field ( DateTime , graphql_name = \"createdAt\" ) fingerprint = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"fingerprint\" ) is_read_only = sgqlc . types . Field ( Boolean , graphql_name = \"isReadOnly\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) updated_at = sgqlc . types . Field ( DateTime , graphql_name = \"updatedAt\" ) PublicKeyConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16901 16902 16903 16904 16905 16906 16907 16908 16909 16910 16911 16912 16913 16914 16915 16916 16917 class PublicKeyConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PublicKeyEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PublicKey\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PublicKeyEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16920 16921 16922 16923 16924 16925 16926 16927 16928 class PublicKeyEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PublicKey\" , graphql_name = \"node\" ) PullRequest Bases: sgqlc . types . Type , Node , Assignable , Closable , Comment , Updatable , UpdatableComment , Labelable , Lockable , Reactable , RepositoryNode , Subscribable , UniformResourceLocatable , ProjectNextOwner , ProjectV2Owner See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass PullRequest ( sgqlc . types . Type , Node , Assignable , Closable , Comment , Updatable , UpdatableComment , Labelable , Lockable , Reactable , RepositoryNode , Subscribable , UniformResourceLocatable , ProjectNextOwner , ProjectV2Owner , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"additions\" , \"auto_merge_request\" , \"base_ref\" , \"base_ref_name\" , \"base_ref_oid\" , \"base_repository\" , \"changed_files\" , \"checks_resource_path\" , \"checks_url\" , \"closing_issues_references\" , \"comments\" , \"commits\" , \"deletions\" , \"files\" , \"head_ref\" , \"head_ref_name\" , \"head_ref_oid\" , \"head_repository\" , \"head_repository_owner\" , \"hovercard\" , \"is_cross_repository\" , \"is_draft\" , \"is_read_by_viewer\" , \"latest_opinionated_reviews\" , \"latest_reviews\" , \"maintainer_can_modify\" , \"merge_commit\" , \"mergeable\" , \"merged\" , \"merged_at\" , \"merged_by\" , \"milestone\" , \"number\" , \"participants\" , \"permalink\" , \"potential_merge_commit\" , \"project_cards\" , \"project_items\" , \"project_next_items\" , \"revert_resource_path\" , \"revert_url\" , \"review_decision\" , \"review_requests\" , \"review_threads\" , \"reviews\" , \"state\" , \"suggested_reviewers\" , \"timeline\" , \"timeline_items\" , \"title\" , \"title_html\" , \"viewer_can_apply_suggestion\" , \"viewer_can_delete_head_ref\" , \"viewer_can_disable_auto_merge\" , \"viewer_can_edit_files\" , \"viewer_can_enable_auto_merge\" , \"viewer_can_merge_as_admin\" , \"viewer_latest_review\" , \"viewer_latest_review_request\" , \"viewer_merge_body_text\" , \"viewer_merge_headline_text\" , ) additions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"additions\" ) auto_merge_request = sgqlc . types . Field ( AutoMergeRequest , graphql_name = \"autoMergeRequest\" ) base_ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"baseRef\" ) base_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"baseRefName\" ) base_ref_oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"baseRefOid\" ) base_repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"baseRepository\" ) changed_files = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"changedFiles\" ) checks_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"checksResourcePath\" ) checks_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"checksUrl\" ) closing_issues_references = sgqlc . types . Field ( IssueConnection , graphql_name = \"closingIssuesReferences\" , args = sgqlc . types . ArgDict ( ( ( \"user_linked_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"userLinkedOnly\" , default = False ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( IssueCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueCommentOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commits = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestCommitConnection ), graphql_name = \"commits\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"deletions\" ) files = sgqlc . types . Field ( PullRequestChangedFileConnection , graphql_name = \"files\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) head_ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"headRef\" ) head_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"headRefName\" ) head_ref_oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"headRefOid\" ) head_repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"headRepository\" ) head_repository_owner = sgqlc . types . Field ( RepositoryOwner , graphql_name = \"headRepositoryOwner\" ) hovercard = sgqlc . types . Field ( sgqlc . types . non_null ( Hovercard ), graphql_name = \"hovercard\" , args = sgqlc . types . ArgDict ( ( ( \"include_notification_contexts\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeNotificationContexts\" , default = True , ), ), ) ), ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) is_draft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDraft\" ) is_read_by_viewer = sgqlc . types . Field ( Boolean , graphql_name = \"isReadByViewer\" ) latest_opinionated_reviews = sgqlc . types . Field ( PullRequestReviewConnection , graphql_name = \"latestOpinionatedReviews\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"writers_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"writersOnly\" , default = False ), ), ) ), ) latest_reviews = sgqlc . types . Field ( PullRequestReviewConnection , graphql_name = \"latestReviews\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) maintainer_can_modify = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"maintainerCanModify\" ) merge_commit = sgqlc . types . Field ( Commit , graphql_name = \"mergeCommit\" ) mergeable = sgqlc . types . Field ( sgqlc . types . non_null ( MergeableState ), graphql_name = \"mergeable\" ) merged = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"merged\" ) merged_at = sgqlc . types . Field ( DateTime , graphql_name = \"mergedAt\" ) merged_by = sgqlc . types . Field ( Actor , graphql_name = \"mergedBy\" ) milestone = sgqlc . types . Field ( Milestone , graphql_name = \"milestone\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) participants = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"participants\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) permalink = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"permalink\" ) potential_merge_commit = sgqlc . types . Field ( Commit , graphql_name = \"potentialMergeCommit\" ) project_cards = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectCardConnection ), graphql_name = \"projectCards\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"archived_states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( ProjectCardArchivedState ), graphql_name = \"archivedStates\" , default = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ), ), ), ) ), ) project_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemConnection ), graphql_name = \"projectItems\" , args = sgqlc . types . ArgDict ( ( ( \"include_archived\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeArchived\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) project_next_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItemConnection ), graphql_name = \"projectNextItems\" , args = sgqlc . types . ArgDict ( ( ( \"include_archived\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeArchived\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) revert_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"revertResourcePath\" ) revert_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"revertUrl\" ) review_decision = sgqlc . types . Field ( PullRequestReviewDecision , graphql_name = \"reviewDecision\" ) review_requests = sgqlc . types . Field ( ReviewRequestConnection , graphql_name = \"reviewRequests\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) review_threads = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewThreadConnection ), graphql_name = \"reviewThreads\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) reviews = sgqlc . types . Field ( PullRequestReviewConnection , graphql_name = \"reviews\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestReviewState ) ), graphql_name = \"states\" , default = None , ), ), ( \"author\" , sgqlc . types . Arg ( String , graphql_name = \"author\" , default = None ), ), ) ), ) state = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestState ), graphql_name = \"state\" ) suggested_reviewers = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( SuggestedReviewer )), graphql_name = \"suggestedReviewers\" , ) timeline = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestTimelineConnection ), graphql_name = \"timeline\" , args = sgqlc . types . ArgDict ( ( ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) timeline_items = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestTimelineItemsConnection ), graphql_name = \"timelineItems\" , args = sgqlc . types . ArgDict ( ( ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ( \"skip\" , sgqlc . types . Arg ( Int , graphql_name = \"skip\" , default = None )), ( \"item_types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestTimelineItemsItemType ) ), graphql_name = \"itemTypes\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) title_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"titleHTML\" ) viewer_can_apply_suggestion = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanApplySuggestion\" ) viewer_can_delete_head_ref = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanDeleteHeadRef\" ) viewer_can_disable_auto_merge = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanDisableAutoMerge\" ) viewer_can_edit_files = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEditFiles\" ) viewer_can_enable_auto_merge = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEnableAutoMerge\" ) viewer_can_merge_as_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanMergeAsAdmin\" ) viewer_latest_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"viewerLatestReview\" ) viewer_latest_review_request = sgqlc . types . Field ( \"ReviewRequest\" , graphql_name = \"viewerLatestReviewRequest\" ) viewer_merge_body_text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"viewerMergeBodyText\" , args = sgqlc . types . ArgDict ( ( ( \"merge_type\" , sgqlc . types . Arg ( PullRequestMergeMethod , graphql_name = \"mergeType\" , default = None ), ), ) ), ) viewer_merge_headline_text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"viewerMergeHeadlineText\" , args = sgqlc . types . ArgDict ( ( ( \"merge_type\" , sgqlc . types . Arg ( PullRequestMergeMethod , graphql_name = \"mergeType\" , default = None ), ), ) ), ) PullRequestChangedFile Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16931 16932 16933 16934 16935 16936 16937 16938 16939 16940 16941 16942 16943 16944 16945 16946 16947 16948 16949 16950 16951 16952 class PullRequestChangedFile ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"additions\" , \"change_type\" , \"deletions\" , \"path\" , \"viewer_viewed_state\" , ) additions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"additions\" ) change_type = sgqlc . types . Field ( sgqlc . types . non_null ( PatchStatus ), graphql_name = \"changeType\" ) deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"deletions\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) viewer_viewed_state = sgqlc . types . Field ( sgqlc . types . non_null ( FileViewedState ), graphql_name = \"viewerViewedState\" ) PullRequestChangedFileConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16955 16956 16957 16958 16959 16960 16961 16962 16963 16964 16965 16966 16967 16968 16969 16970 16971 16972 16973 class PullRequestChangedFileConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestChangedFileEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( PullRequestChangedFile ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PullRequestChangedFileEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16976 16977 16978 16979 16980 16981 16982 16983 16984 class PullRequestChangedFileEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( PullRequestChangedFile , graphql_name = \"node\" ) PullRequestCommit Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28036 28037 28038 28039 28040 28041 28042 28043 28044 28045 28046 class PullRequestCommit ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"pull_request\" ) commit = sgqlc . types . Field ( sgqlc . types . non_null ( Commit ), graphql_name = \"commit\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) PullRequestCommitCommentThread Bases: sgqlc . types . Type , RepositoryNode , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28049 28050 28051 28052 28053 28054 28055 28056 28057 28058 28059 28060 28061 28062 28063 28064 28065 28066 28067 28068 28069 28070 28071 28072 28073 28074 28075 28076 class PullRequestCommitCommentThread ( sgqlc . types . Type , RepositoryNode , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"commit\" , \"path\" , \"position\" , \"pull_request\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit = sgqlc . types . Field ( sgqlc . types . non_null ( Commit ), graphql_name = \"commit\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) PullRequestCommitConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16987 16988 16989 16990 16991 16992 16993 16994 16995 16996 16997 16998 16999 17000 17001 17002 17003 17004 17005 class PullRequestCommitConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestCommitEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestCommit\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PullRequestCommitEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17008 17009 17010 17011 17012 17013 17014 17015 17016 class PullRequestCommitEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestCommit\" , graphql_name = \"node\" ) PullRequestConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17019 17020 17021 17022 17023 17024 17025 17026 17027 17028 17029 17030 17031 17032 17033 17034 17035 class PullRequestConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequest\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PullRequestContributionsByRepository Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17038 17039 17040 17041 17042 17043 17044 17045 17046 17047 17048 17049 17050 17051 17052 17053 17054 17055 17056 17057 17058 17059 17060 17061 17062 17063 17064 17065 17066 17067 17068 17069 17070 class PullRequestContributionsByRepository ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contributions\" , \"repository\" ) contributions = sgqlc . types . Field ( sgqlc . types . non_null ( CreatedPullRequestContributionConnection ), graphql_name = \"contributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) PullRequestEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17073 17074 17075 17076 17077 17078 17079 17080 17081 class PullRequestEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"node\" ) PullRequestMergeMethod Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1333 1334 1335 1336 1337 1338 1339 class PullRequestMergeMethod ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MERGE\" , \"REBASE\" , \"SQUASH\" ) PullRequestOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 class PullRequestOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) PullRequestOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1342 1343 1344 1345 1346 1347 1348 class PullRequestOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"UPDATED_AT\" ) PullRequestReview Bases: sgqlc . types . Type , Node , Comment , Deletable , Updatable , UpdatableComment , Reactable , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28079 28080 28081 28082 28083 28084 28085 28086 28087 28088 28089 28090 28091 28092 28093 28094 28095 28096 28097 28098 28099 28100 28101 28102 28103 28104 28105 28106 28107 28108 28109 28110 28111 28112 28113 28114 28115 28116 28117 28118 28119 28120 28121 28122 28123 28124 28125 28126 28127 28128 28129 28130 28131 28132 28133 28134 28135 28136 28137 28138 28139 28140 28141 28142 28143 28144 28145 28146 28147 28148 28149 class PullRequestReview ( sgqlc . types . Type , Node , Comment , Deletable , Updatable , UpdatableComment , Reactable , RepositoryNode , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"author_can_push_to_repository\" , \"comments\" , \"commit\" , \"on_behalf_of\" , \"pull_request\" , \"resource_path\" , \"state\" , \"submitted_at\" , \"url\" , ) author_can_push_to_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"authorCanPushToRepository\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) on_behalf_of = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"onBehalfOf\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewState ), graphql_name = \"state\" ) submitted_at = sgqlc . types . Field ( DateTime , graphql_name = \"submittedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) PullRequestReviewComment Bases: sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28152 28153 28154 28155 28156 28157 28158 28159 28160 28161 28162 28163 28164 28165 28166 28167 28168 28169 28170 28171 28172 28173 28174 28175 28176 28177 28178 28179 28180 28181 28182 28183 28184 28185 28186 28187 28188 28189 28190 28191 28192 28193 28194 28195 28196 28197 28198 28199 28200 28201 28202 28203 28204 28205 28206 28207 28208 28209 class PullRequestReviewComment ( sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"diff_hunk\" , \"drafted_at\" , \"original_commit\" , \"original_position\" , \"outdated\" , \"path\" , \"position\" , \"pull_request\" , \"pull_request_review\" , \"reply_to\" , \"resource_path\" , \"state\" , \"url\" , ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) diff_hunk = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"diffHunk\" ) drafted_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"draftedAt\" ) original_commit = sgqlc . types . Field ( Commit , graphql_name = \"originalCommit\" ) original_position = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"originalPosition\" ) outdated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"outdated\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) pull_request_review = sgqlc . types . Field ( PullRequestReview , graphql_name = \"pullRequestReview\" ) reply_to = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"replyTo\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewCommentState ), graphql_name = \"state\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) PullRequestReviewCommentConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17084 17085 17086 17087 17088 17089 17090 17091 17092 17093 17094 17095 17096 17097 17098 17099 17100 17101 17102 class PullRequestReviewCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PullRequestReviewCommentEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17105 17106 17107 17108 17109 17110 17111 17112 17113 class PullRequestReviewCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"node\" ) PullRequestReviewCommentState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1351 1352 1353 1354 1355 1356 1357 class PullRequestReviewCommentState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"PENDING\" , \"SUBMITTED\" ) PullRequestReviewConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17116 17117 17118 17119 17120 17121 17122 17123 17124 17125 17126 17127 17128 17129 17130 17131 17132 17133 17134 class PullRequestReviewConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReview\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PullRequestReviewContributionsByRepository Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17137 17138 17139 17140 17141 17142 17143 17144 17145 17146 17147 17148 17149 17150 17151 17152 17153 17154 17155 17156 17157 17158 17159 17160 17161 17162 17163 17164 17165 17166 17167 17168 17169 class PullRequestReviewContributionsByRepository ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contributions\" , \"repository\" ) contributions = sgqlc . types . Field ( sgqlc . types . non_null ( CreatedPullRequestReviewContributionConnection ), graphql_name = \"contributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) PullRequestReviewDecision Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1360 1361 1362 1363 1364 1365 1366 class PullRequestReviewDecision ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"APPROVED\" , \"CHANGES_REQUESTED\" , \"REVIEW_REQUIRED\" ) PullRequestReviewEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17172 17173 17174 17175 17176 17177 17178 17179 17180 class PullRequestReviewEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"node\" ) PullRequestReviewEvent Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1369 1370 1371 1372 1373 1374 1375 class PullRequestReviewEvent ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"APPROVE\" , \"COMMENT\" , \"DISMISS\" , \"REQUEST_CHANGES\" ) PullRequestReviewState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1378 1379 1380 1381 1382 1383 1384 class PullRequestReviewState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"APPROVED\" , \"CHANGES_REQUESTED\" , \"COMMENTED\" , \"DISMISSED\" , \"PENDING\" ) PullRequestReviewThread Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28212 28213 28214 28215 28216 28217 28218 28219 28220 28221 28222 28223 28224 28225 28226 28227 28228 28229 28230 28231 28232 28233 28234 28235 28236 28237 28238 28239 28240 28241 28242 28243 28244 28245 28246 28247 28248 28249 28250 28251 28252 28253 28254 28255 28256 28257 28258 28259 28260 28261 28262 28263 28264 28265 28266 28267 28268 28269 28270 28271 28272 28273 28274 28275 28276 28277 28278 28279 28280 28281 28282 28283 28284 28285 28286 class PullRequestReviewThread ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"diff_side\" , \"is_collapsed\" , \"is_outdated\" , \"is_resolved\" , \"line\" , \"original_line\" , \"original_start_line\" , \"path\" , \"pull_request\" , \"repository\" , \"resolved_by\" , \"start_diff_side\" , \"start_line\" , \"viewer_can_reply\" , \"viewer_can_resolve\" , \"viewer_can_unresolve\" , ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"skip\" , sgqlc . types . Arg ( Int , graphql_name = \"skip\" , default = None )), ) ), ) diff_side = sgqlc . types . Field ( sgqlc . types . non_null ( DiffSide ), graphql_name = \"diffSide\" ) is_collapsed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCollapsed\" ) is_outdated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOutdated\" ) is_resolved = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isResolved\" ) line = sgqlc . types . Field ( Int , graphql_name = \"line\" ) original_line = sgqlc . types . Field ( Int , graphql_name = \"originalLine\" ) original_start_line = sgqlc . types . Field ( Int , graphql_name = \"originalStartLine\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resolved_by = sgqlc . types . Field ( \"User\" , graphql_name = \"resolvedBy\" ) start_diff_side = sgqlc . types . Field ( DiffSide , graphql_name = \"startDiffSide\" ) start_line = sgqlc . types . Field ( Int , graphql_name = \"startLine\" ) viewer_can_reply = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanReply\" ) viewer_can_resolve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanResolve\" ) viewer_can_unresolve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUnresolve\" ) PullRequestReviewThreadConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17183 17184 17185 17186 17187 17188 17189 17190 17191 17192 17193 17194 17195 17196 17197 17198 17199 17200 17201 class PullRequestReviewThreadConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewThreadEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewThread\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PullRequestReviewThreadEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17204 17205 17206 17207 17208 17209 17210 17211 17212 class PullRequestReviewThreadEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestReviewThread\" , graphql_name = \"node\" ) PullRequestRevisionMarker Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17215 17216 17217 17218 17219 17220 17221 17222 17223 17224 17225 17226 17227 17228 17229 17230 class PullRequestRevisionMarker ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"last_seen_commit\" , \"pull_request\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) last_seen_commit = sgqlc . types . Field ( sgqlc . types . non_null ( \"Commit\" ), graphql_name = \"lastSeenCommit\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) PullRequestState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1387 1388 1389 1390 1391 1392 1393 class PullRequestState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"MERGED\" , \"OPEN\" ) PullRequestTemplate Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17233 17234 17235 17236 17237 17238 17239 17240 17241 17242 17243 17244 class PullRequestTemplate ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"filename\" , \"repository\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) filename = sgqlc . types . Field ( String , graphql_name = \"filename\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) PullRequestThread Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28289 28290 28291 28292 28293 28294 28295 28296 28297 28298 28299 28300 28301 28302 28303 28304 28305 28306 28307 28308 28309 28310 28311 28312 28313 28314 28315 28316 28317 28318 28319 28320 28321 28322 28323 28324 28325 28326 28327 28328 28329 28330 28331 28332 28333 28334 28335 28336 28337 28338 28339 28340 28341 28342 28343 28344 28345 28346 28347 28348 28349 28350 28351 28352 28353 28354 28355 28356 28357 class PullRequestThread ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"diff_side\" , \"is_collapsed\" , \"is_outdated\" , \"is_resolved\" , \"line\" , \"pull_request\" , \"repository\" , \"resolved_by\" , \"start_diff_side\" , \"start_line\" , \"viewer_can_reply\" , \"viewer_can_resolve\" , \"viewer_can_unresolve\" , ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"skip\" , sgqlc . types . Arg ( Int , graphql_name = \"skip\" , default = None )), ) ), ) diff_side = sgqlc . types . Field ( sgqlc . types . non_null ( DiffSide ), graphql_name = \"diffSide\" ) is_collapsed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCollapsed\" ) is_outdated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOutdated\" ) is_resolved = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isResolved\" ) line = sgqlc . types . Field ( Int , graphql_name = \"line\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resolved_by = sgqlc . types . Field ( \"User\" , graphql_name = \"resolvedBy\" ) start_diff_side = sgqlc . types . Field ( DiffSide , graphql_name = \"startDiffSide\" ) start_line = sgqlc . types . Field ( Int , graphql_name = \"startLine\" ) viewer_can_reply = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanReply\" ) viewer_can_resolve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanResolve\" ) viewer_can_unresolve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUnresolve\" ) PullRequestTimelineConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17247 17248 17249 17250 17251 17252 17253 17254 17255 17256 17257 17258 17259 17260 17261 17262 17263 17264 17265 class PullRequestTimelineConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestTimelineItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestTimelineItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PullRequestTimelineItem Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32710 32711 32712 32713 32714 32715 32716 32717 32718 32719 32720 32721 32722 32723 32724 32725 32726 32727 32728 32729 32730 32731 32732 32733 32734 32735 32736 32737 32738 32739 32740 32741 32742 32743 32744 32745 32746 32747 32748 32749 32750 class PullRequestTimelineItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( AssignedEvent , BaseRefDeletedEvent , BaseRefForcePushedEvent , ClosedEvent , Commit , CommitCommentThread , CrossReferencedEvent , DemilestonedEvent , DeployedEvent , DeploymentEnvironmentChangedEvent , HeadRefDeletedEvent , HeadRefForcePushedEvent , HeadRefRestoredEvent , IssueComment , LabeledEvent , LockedEvent , MergedEvent , MilestonedEvent , PullRequestReview , PullRequestReviewComment , PullRequestReviewThread , ReferencedEvent , RenamedTitleEvent , ReopenedEvent , ReviewDismissedEvent , ReviewRequestRemovedEvent , ReviewRequestedEvent , SubscribedEvent , UnassignedEvent , UnlabeledEvent , UnlockedEvent , UnsubscribedEvent , UserBlockedEvent , ) PullRequestTimelineItemEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17268 17269 17270 17271 17272 17273 17274 17275 17276 class PullRequestTimelineItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestTimelineItem\" , graphql_name = \"node\" ) PullRequestTimelineItems Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32753 32754 32755 32756 32757 32758 32759 32760 32761 32762 32763 32764 32765 32766 32767 32768 32769 32770 32771 32772 32773 32774 32775 32776 32777 32778 32779 32780 32781 32782 32783 32784 32785 32786 32787 32788 32789 32790 32791 32792 32793 32794 32795 32796 32797 32798 32799 32800 32801 32802 32803 32804 32805 32806 32807 32808 32809 32810 32811 32812 32813 32814 32815 32816 class PullRequestTimelineItems ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( AddedToProjectEvent , AssignedEvent , AutoMergeDisabledEvent , AutoMergeEnabledEvent , AutoRebaseEnabledEvent , AutoSquashEnabledEvent , AutomaticBaseChangeFailedEvent , AutomaticBaseChangeSucceededEvent , BaseRefChangedEvent , BaseRefDeletedEvent , BaseRefForcePushedEvent , ClosedEvent , CommentDeletedEvent , ConnectedEvent , ConvertToDraftEvent , ConvertedNoteToIssueEvent , ConvertedToDiscussionEvent , CrossReferencedEvent , DemilestonedEvent , DeployedEvent , DeploymentEnvironmentChangedEvent , DisconnectedEvent , HeadRefDeletedEvent , HeadRefForcePushedEvent , HeadRefRestoredEvent , IssueComment , LabeledEvent , LockedEvent , MarkedAsDuplicateEvent , MentionedEvent , MergedEvent , MilestonedEvent , MovedColumnsInProjectEvent , PinnedEvent , PullRequestCommit , PullRequestCommitCommentThread , PullRequestReview , PullRequestReviewThread , PullRequestRevisionMarker , ReadyForReviewEvent , ReferencedEvent , RemovedFromProjectEvent , RenamedTitleEvent , ReopenedEvent , ReviewDismissedEvent , ReviewRequestRemovedEvent , ReviewRequestedEvent , SubscribedEvent , TransferredEvent , UnassignedEvent , UnlabeledEvent , UnlockedEvent , UnmarkedAsDuplicateEvent , UnpinnedEvent , UnsubscribedEvent , UserBlockedEvent , ) PullRequestTimelineItemsConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17279 17280 17281 17282 17283 17284 17285 17286 17287 17288 17289 17290 17291 17292 17293 17294 17295 17296 17297 17298 17299 17300 17301 17302 17303 17304 17305 17306 17307 17308 17309 17310 17311 17312 class PullRequestTimelineItemsConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"filtered_count\" , \"nodes\" , \"page_count\" , \"page_info\" , \"total_count\" , \"updated_at\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestTimelineItemsEdge\" ), graphql_name = \"edges\" ) filtered_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"filteredCount\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestTimelineItems\" ), graphql_name = \"nodes\" ) page_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"pageCount\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) PullRequestTimelineItemsEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17315 17316 17317 17318 17319 17320 17321 17322 17323 class PullRequestTimelineItemsEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestTimelineItems\" , graphql_name = \"node\" ) PullRequestTimelineItemsItemType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 class PullRequestTimelineItemsItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADDED_TO_MERGE_QUEUE_EVENT\" , \"ADDED_TO_PROJECT_EVENT\" , \"ASSIGNED_EVENT\" , \"AUTOMATIC_BASE_CHANGE_FAILED_EVENT\" , \"AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT\" , \"AUTO_MERGE_DISABLED_EVENT\" , \"AUTO_MERGE_ENABLED_EVENT\" , \"AUTO_REBASE_ENABLED_EVENT\" , \"AUTO_SQUASH_ENABLED_EVENT\" , \"BASE_REF_CHANGED_EVENT\" , \"BASE_REF_DELETED_EVENT\" , \"BASE_REF_FORCE_PUSHED_EVENT\" , \"CLOSED_EVENT\" , \"COMMENT_DELETED_EVENT\" , \"CONNECTED_EVENT\" , \"CONVERTED_NOTE_TO_ISSUE_EVENT\" , \"CONVERTED_TO_DISCUSSION_EVENT\" , \"CONVERT_TO_DRAFT_EVENT\" , \"CROSS_REFERENCED_EVENT\" , \"DEMILESTONED_EVENT\" , \"DEPLOYED_EVENT\" , \"DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT\" , \"DISCONNECTED_EVENT\" , \"HEAD_REF_DELETED_EVENT\" , \"HEAD_REF_FORCE_PUSHED_EVENT\" , \"HEAD_REF_RESTORED_EVENT\" , \"ISSUE_COMMENT\" , \"LABELED_EVENT\" , \"LOCKED_EVENT\" , \"MARKED_AS_DUPLICATE_EVENT\" , \"MENTIONED_EVENT\" , \"MERGED_EVENT\" , \"MILESTONED_EVENT\" , \"MOVED_COLUMNS_IN_PROJECT_EVENT\" , \"PINNED_EVENT\" , \"PULL_REQUEST_COMMIT\" , \"PULL_REQUEST_COMMIT_COMMENT_THREAD\" , \"PULL_REQUEST_REVIEW\" , \"PULL_REQUEST_REVIEW_THREAD\" , \"PULL_REQUEST_REVISION_MARKER\" , \"READY_FOR_REVIEW_EVENT\" , \"REFERENCED_EVENT\" , \"REMOVED_FROM_MERGE_QUEUE_EVENT\" , \"REMOVED_FROM_PROJECT_EVENT\" , \"RENAMED_TITLE_EVENT\" , \"REOPENED_EVENT\" , \"REVIEW_DISMISSED_EVENT\" , \"REVIEW_REQUESTED_EVENT\" , \"REVIEW_REQUEST_REMOVED_EVENT\" , \"SUBSCRIBED_EVENT\" , \"TRANSFERRED_EVENT\" , \"UNASSIGNED_EVENT\" , \"UNLABELED_EVENT\" , \"UNLOCKED_EVENT\" , \"UNMARKED_AS_DUPLICATE_EVENT\" , \"UNPINNED_EVENT\" , \"UNSUBSCRIBED_EVENT\" , \"USER_BLOCKED_EVENT\" , ) PullRequestUpdateState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1464 1465 1466 1467 1468 1469 1470 class PullRequestUpdateState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" ) Push Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28360 28361 28362 28363 28364 28365 28366 28367 28368 28369 28370 28371 28372 28373 class Push ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"next_sha\" , \"permalink\" , \"previous_sha\" , \"pusher\" , \"repository\" ) next_sha = sgqlc . types . Field ( GitObjectID , graphql_name = \"nextSha\" ) permalink = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"permalink\" ) previous_sha = sgqlc . types . Field ( GitObjectID , graphql_name = \"previousSha\" ) pusher = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"pusher\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) PushAllowance Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28376 28377 28378 28379 28380 28381 28382 28383 28384 28385 28386 class PushAllowance ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"branch_protection_rule\" ) actor = sgqlc . types . Field ( \"PushAllowanceActor\" , graphql_name = \"actor\" ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" ) PushAllowanceActor Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32819 32820 32821 32822 32823 32824 32825 class PushAllowanceActor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Team , User ) PushAllowanceConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17326 17327 17328 17329 17330 17331 17332 17333 17334 17335 17336 17337 17338 17339 17340 17341 17342 17343 17344 class PushAllowanceConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PushAllowanceEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PushAllowance\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) PushAllowanceEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17347 17348 17349 17350 17351 17352 17353 17354 17355 class PushAllowanceEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PushAllowance\" , graphql_name = \"node\" ) Query Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Query ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"code_of_conduct\" , \"codes_of_conduct\" , \"enterprise\" , \"enterprise_administrator_invitation\" , \"enterprise_administrator_invitation_by_token\" , \"license\" , \"licenses\" , \"marketplace_categories\" , \"marketplace_category\" , \"marketplace_listing\" , \"marketplace_listings\" , \"meta\" , \"node\" , \"nodes\" , \"organization\" , \"rate_limit\" , \"relay\" , \"repository\" , \"repository_owner\" , \"resource\" , \"search\" , \"security_advisories\" , \"security_advisory\" , \"security_vulnerabilities\" , \"sponsorables\" , \"topic\" , \"user\" , \"viewer\" , ) code_of_conduct = sgqlc . types . Field ( \"CodeOfConduct\" , graphql_name = \"codeOfConduct\" , args = sgqlc . types . ArgDict ( ( ( \"key\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"key\" , default = None ), ), ) ), ) codes_of_conduct = sgqlc . types . Field ( sgqlc . types . list_of ( \"CodeOfConduct\" ), graphql_name = \"codesOfConduct\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ( \"invitation_token\" , sgqlc . types . Arg ( String , graphql_name = \"invitationToken\" , default = None ), ), ) ), ) enterprise_administrator_invitation = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"enterpriseAdministratorInvitation\" , args = sgqlc . types . ArgDict ( ( ( \"user_login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"userLogin\" , default = None , ), ), ( \"enterprise_slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"enterpriseSlug\" , default = None , ), ), ( \"role\" , sgqlc . types . Arg ( sgqlc . types . non_null ( EnterpriseAdministratorRole ), graphql_name = \"role\" , default = None , ), ), ) ), ) enterprise_administrator_invitation_by_token = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"enterpriseAdministratorInvitationByToken\" , args = sgqlc . types . ArgDict ( ( ( \"invitation_token\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"invitationToken\" , default = None , ), ), ) ), ) license = sgqlc . types . Field ( \"License\" , graphql_name = \"license\" , args = sgqlc . types . ArgDict ( ( ( \"key\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"key\" , default = None ), ), ) ), ) licenses = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( \"License\" )), graphql_name = \"licenses\" ) marketplace_categories = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"MarketplaceCategory\" )) ), graphql_name = \"marketplaceCategories\" , args = sgqlc . types . ArgDict ( ( ( \"include_categories\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"includeCategories\" , default = None , ), ), ( \"exclude_empty\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeEmpty\" , default = None ), ), ( \"exclude_subcategories\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeSubcategories\" , default = None ), ), ) ), ) marketplace_category = sgqlc . types . Field ( \"MarketplaceCategory\" , graphql_name = \"marketplaceCategory\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ( \"use_topic_aliases\" , sgqlc . types . Arg ( Boolean , graphql_name = \"useTopicAliases\" , default = None ), ), ) ), ) marketplace_listing = sgqlc . types . Field ( \"MarketplaceListing\" , graphql_name = \"marketplaceListing\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ) ), ) marketplace_listings = sgqlc . types . Field ( sgqlc . types . non_null ( MarketplaceListingConnection ), graphql_name = \"marketplaceListings\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"category_slug\" , sgqlc . types . Arg ( String , graphql_name = \"categorySlug\" , default = None ), ), ( \"use_topic_aliases\" , sgqlc . types . Arg ( Boolean , graphql_name = \"useTopicAliases\" , default = None ), ), ( \"viewer_can_admin\" , sgqlc . types . Arg ( Boolean , graphql_name = \"viewerCanAdmin\" , default = None ), ), ( \"admin_id\" , sgqlc . types . Arg ( ID , graphql_name = \"adminId\" , default = None )), ( \"organization_id\" , sgqlc . types . Arg ( ID , graphql_name = \"organizationId\" , default = None ), ), ( \"all_states\" , sgqlc . types . Arg ( Boolean , graphql_name = \"allStates\" , default = None ), ), ( \"slugs\" , sgqlc . types . Arg ( sgqlc . types . list_of ( String ), graphql_name = \"slugs\" , default = None ), ), ( \"primary_category_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"primaryCategoryOnly\" , default = False ), ), ( \"with_free_trials_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"withFreeTrialsOnly\" , default = False ), ), ) ), ) meta = sgqlc . types . Field ( sgqlc . types . non_null ( GitHubMetadata ), graphql_name = \"meta\" ) node = sgqlc . types . Field ( Node , graphql_name = \"node\" , args = sgqlc . types . ArgDict ( ( ( \"id\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" , default = None ), ), ) ), ) nodes = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( Node )), graphql_name = \"nodes\" , args = sgqlc . types . ArgDict ( ( ( \"ids\" , sgqlc . types . Arg ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )) ), graphql_name = \"ids\" , default = None , ), ), ) ), ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) rate_limit = sgqlc . types . Field ( \"RateLimit\" , graphql_name = \"rateLimit\" , args = sgqlc . types . ArgDict ( ( ( \"dry_run\" , sgqlc . types . Arg ( Boolean , graphql_name = \"dryRun\" , default = False ), ), ) ), ) relay = sgqlc . types . Field ( sgqlc . types . non_null ( \"Query\" ), graphql_name = \"relay\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" , args = sgqlc . types . ArgDict ( ( ( \"owner\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"owner\" , default = None ), ), ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ( \"follow_renames\" , sgqlc . types . Arg ( Boolean , graphql_name = \"followRenames\" , default = True ), ), ) ), ) repository_owner = sgqlc . types . Field ( \"RepositoryOwner\" , graphql_name = \"repositoryOwner\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) resource = sgqlc . types . Field ( \"UniformResourceLocatable\" , graphql_name = \"resource\" , args = sgqlc . types . ArgDict ( ( ( \"url\" , sgqlc . types . Arg ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" , default = None ), ), ) ), ) search = sgqlc . types . Field ( sgqlc . types . non_null ( \"SearchResultItemConnection\" ), graphql_name = \"search\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"query\" , default = None ), ), ( \"type\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SearchType ), graphql_name = \"type\" , default = None , ), ), ) ), ) security_advisories = sgqlc . types . Field ( sgqlc . types . non_null ( \"SecurityAdvisoryConnection\" ), graphql_name = \"securityAdvisories\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( SecurityAdvisoryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"identifier\" , sgqlc . types . Arg ( SecurityAdvisoryIdentifierFilter , graphql_name = \"identifier\" , default = None , ), ), ( \"published_since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"publishedSince\" , default = None ), ), ( \"updated_since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"updatedSince\" , default = None ), ), ( \"classifications\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryClassification ) ), graphql_name = \"classifications\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) security_advisory = sgqlc . types . Field ( \"SecurityAdvisory\" , graphql_name = \"securityAdvisory\" , args = sgqlc . types . ArgDict ( ( ( \"ghsa_id\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"ghsaId\" , default = None , ), ), ) ), ) security_vulnerabilities = sgqlc . types . Field ( sgqlc . types . non_null ( \"SecurityVulnerabilityConnection\" ), graphql_name = \"securityVulnerabilities\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( SecurityVulnerabilityOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"ecosystem\" , sgqlc . types . Arg ( SecurityAdvisoryEcosystem , graphql_name = \"ecosystem\" , default = None , ), ), ( \"package\" , sgqlc . types . Arg ( String , graphql_name = \"package\" , default = None ), ), ( \"severities\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisorySeverity ) ), graphql_name = \"severities\" , default = None , ), ), ( \"classifications\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryClassification ) ), graphql_name = \"classifications\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) sponsorables = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorableItemConnection\" ), graphql_name = \"sponsorables\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorableOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"only_dependencies\" , sgqlc . types . Arg ( Boolean , graphql_name = \"onlyDependencies\" , default = False ), ), ( \"org_login_for_dependencies\" , sgqlc . types . Arg ( String , graphql_name = \"orgLoginForDependencies\" , default = None ), ), ( \"dependency_ecosystem\" , sgqlc . types . Arg ( SecurityAdvisoryEcosystem , graphql_name = \"dependencyEcosystem\" , default = None , ), ), ( \"ecosystem\" , sgqlc . types . Arg ( DependencyGraphEcosystem , graphql_name = \"ecosystem\" , default = None ), ), ) ), ) topic = sgqlc . types . Field ( \"Topic\" , graphql_name = \"topic\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) viewer = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"viewer\" ) RateLimit Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17963 17964 17965 17966 17967 17968 17969 17970 17971 17972 17973 17974 17975 class RateLimit ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cost\" , \"limit\" , \"node_count\" , \"remaining\" , \"reset_at\" , \"used\" ) cost = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"cost\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"limit\" ) node_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"nodeCount\" ) remaining = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"remaining\" ) reset_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"resetAt\" ) used = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"used\" ) Reactable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17978 17979 17980 17981 17982 17983 17984 17985 17986 17987 17988 17989 17990 17991 17992 17993 17994 17995 17996 17997 17998 17999 18000 18001 18002 18003 18004 18005 18006 18007 18008 18009 18010 18011 18012 18013 18014 18015 18016 18017 18018 18019 18020 18021 18022 18023 18024 18025 18026 class Reactable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"id\" , \"reaction_groups\" , \"reactions\" , \"viewer_can_react\" , ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) reaction_groups = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ReactionGroup\" )), graphql_name = \"reactionGroups\" , ) reactions = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReactionConnection\" ), graphql_name = \"reactions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"content\" , sgqlc . types . Arg ( ReactionContent , graphql_name = \"content\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( ReactionOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) viewer_can_react = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanReact\" ) ReactingUserConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18029 18030 18031 18032 18033 18034 18035 18036 18037 18038 18039 18040 18041 18042 18043 18044 18045 class ReactingUserConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReactingUserEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ReactingUserEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18048 18049 18050 18051 18052 18053 18054 18055 18056 18057 18058 18059 class ReactingUserEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"reacted_at\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"node\" ) reacted_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"reactedAt\" ) Reaction Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28389 28390 28391 28392 28393 28394 28395 28396 28397 28398 28399 28400 28401 28402 28403 28404 28405 28406 class Reaction ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content\" , \"created_at\" , \"database_id\" , \"reactable\" , \"user\" ) content = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionContent ), graphql_name = \"content\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) reactable = sgqlc . types . Field ( sgqlc . types . non_null ( Reactable ), graphql_name = \"reactable\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) ReactionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18062 18063 18064 18065 18066 18067 18068 18069 18070 18071 18072 18073 18074 18075 18076 18077 18078 18079 18080 18081 18082 18083 18084 18085 class ReactionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"viewer_has_reacted\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReactionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Reaction\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) viewer_has_reacted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasReacted\" ) ReactionContent Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 class ReactionContent ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CONFUSED\" , \"EYES\" , \"HEART\" , \"HOORAY\" , \"LAUGH\" , \"ROCKET\" , \"THUMBS_DOWN\" , \"THUMBS_UP\" , ) ReactionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18088 18089 18090 18091 18092 18093 18094 18095 18096 class ReactionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Reaction\" , graphql_name = \"node\" ) ReactionGroup Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18099 18100 18101 18102 18103 18104 18105 18106 18107 18108 18109 18110 18111 18112 18113 18114 18115 18116 18117 18118 18119 18120 18121 18122 18123 18124 18125 18126 18127 18128 18129 18130 18131 18132 18133 18134 18135 18136 18137 18138 18139 18140 18141 18142 18143 18144 18145 18146 18147 18148 18149 18150 class ReactionGroup ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content\" , \"created_at\" , \"reactors\" , \"subject\" , \"users\" , \"viewer_has_reacted\" , ) content = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionContent ), graphql_name = \"content\" ) created_at = sgqlc . types . Field ( DateTime , graphql_name = \"createdAt\" ) reactors = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReactorConnection\" ), graphql_name = \"reactors\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( Reactable ), graphql_name = \"subject\" ) users = sgqlc . types . Field ( sgqlc . types . non_null ( ReactingUserConnection ), graphql_name = \"users\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) viewer_has_reacted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasReacted\" ) ReactionOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 class ReactionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ReactionOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1491 1492 1493 1494 1495 1496 1497 class ReactionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) Reactor Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32828 32829 32830 32831 32832 32833 32834 class Reactor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Bot , Mannequin , Organization , User ) ReactorConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18153 18154 18155 18156 18157 18158 18159 18160 18161 18162 18163 18164 18165 18166 18167 class ReactorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReactorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Reactor\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ReactorEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18170 18171 18172 18173 18174 18175 18176 18177 18178 18179 18180 18181 class ReactorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"reacted_at\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"Reactor\" ), graphql_name = \"node\" ) reacted_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"reactedAt\" ) ReadyForReviewEvent Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28409 28410 28411 28412 28413 28414 28415 28416 28417 28418 28419 28420 28421 28422 class ReadyForReviewEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) Ref Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28425 28426 28427 28428 28429 28430 28431 28432 28433 28434 28435 28436 28437 28438 28439 28440 28441 28442 28443 28444 28445 28446 28447 28448 28449 28450 28451 28452 28453 28454 28455 28456 28457 28458 28459 28460 28461 28462 28463 28464 28465 28466 28467 28468 28469 28470 28471 28472 28473 28474 28475 28476 28477 28478 28479 28480 28481 28482 28483 28484 28485 28486 28487 28488 28489 28490 28491 28492 class Ref ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"associated_pull_requests\" , \"branch_protection_rule\" , \"name\" , \"prefix\" , \"ref_update_rule\" , \"repository\" , \"target\" , ) associated_pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"associatedPullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) prefix = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"prefix\" ) ref_update_rule = sgqlc . types . Field ( RefUpdateRule , graphql_name = \"refUpdateRule\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) target = sgqlc . types . Field ( GitObject , graphql_name = \"target\" ) RefConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18184 18185 18186 18187 18188 18189 18190 18191 18192 18193 18194 18195 18196 18197 18198 class RefConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RefEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Ref\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) RefEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18201 18202 18203 18204 18205 18206 18207 18208 18209 class RefEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Ref\" , graphql_name = \"node\" ) RefOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4616 4617 4618 4619 4620 4621 4622 4623 4624 4625 4626 class RefOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( RefOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) RefOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1500 1501 1502 1503 1504 1505 1506 class RefOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALPHABETICAL\" , \"TAG_COMMIT_DATE\" ) RefUpdateRule Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18212 18213 18214 18215 18216 18217 18218 18219 18220 18221 18222 18223 18224 18225 18226 18227 18228 18229 18230 18231 18232 18233 18234 18235 18236 18237 18238 18239 18240 18241 18242 18243 18244 18245 18246 18247 18248 18249 18250 18251 18252 18253 18254 18255 18256 18257 18258 18259 18260 18261 18262 18263 18264 18265 class RefUpdateRule ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"allows_deletions\" , \"allows_force_pushes\" , \"blocks_creations\" , \"pattern\" , \"required_approving_review_count\" , \"required_status_check_contexts\" , \"requires_code_owner_reviews\" , \"requires_conversation_resolution\" , \"requires_linear_history\" , \"requires_signatures\" , \"viewer_allowed_to_dismiss_reviews\" , \"viewer_can_push\" , ) allows_deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowsDeletions\" ) allows_force_pushes = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowsForcePushes\" ) blocks_creations = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"blocksCreations\" ) pattern = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"pattern\" ) required_approving_review_count = sgqlc . types . Field ( Int , graphql_name = \"requiredApprovingReviewCount\" ) required_status_check_contexts = sgqlc . types . Field ( sgqlc . types . list_of ( String ), graphql_name = \"requiredStatusCheckContexts\" ) requires_code_owner_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresCodeOwnerReviews\" ) requires_conversation_resolution = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresConversationResolution\" ) requires_linear_history = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresLinearHistory\" ) requires_signatures = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresSignatures\" ) viewer_allowed_to_dismiss_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerAllowedToDismissReviews\" ) viewer_can_push = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanPush\" ) ReferencedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28495 28496 28497 28498 28499 28500 28501 28502 28503 28504 28505 28506 28507 28508 28509 28510 28511 28512 28513 28514 28515 28516 28517 28518 28519 28520 28521 28522 28523 28524 28525 28526 class ReferencedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"commit\" , \"commit_repository\" , \"created_at\" , \"is_cross_repository\" , \"is_direct_reference\" , \"subject\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) commit_repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"commitRepository\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) is_direct_reference = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDirectReference\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"subject\" ) ReferencedSubject Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32837 32838 32839 32840 32841 32842 32843 class ReferencedSubject ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest ) RegenerateEnterpriseIdentityProviderRecoveryCodesInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4629 4630 4631 4632 4633 4634 4635 4636 4637 4638 4639 class RegenerateEnterpriseIdentityProviderRecoveryCodesInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RegenerateEnterpriseIdentityProviderRecoveryCodesPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18268 18269 18270 18271 18272 18273 18274 18275 18276 18277 18278 class RegenerateEnterpriseIdentityProviderRecoveryCodesPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"identity_provider\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) identity_provider = sgqlc . types . Field ( \"EnterpriseIdentityProvider\" , graphql_name = \"identityProvider\" ) RegenerateVerifiableDomainTokenInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4642 4643 4644 4645 4646 4647 4648 4649 4650 class RegenerateVerifiableDomainTokenInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RegenerateVerifiableDomainTokenPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18281 18282 18283 18284 18285 18286 18287 18288 18289 class RegenerateVerifiableDomainTokenPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"verification_token\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) verification_token = sgqlc . types . Field ( String , graphql_name = \"verificationToken\" ) RejectDeploymentsInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 class RejectDeploymentsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"workflow_run_id\" , \"environment_ids\" , \"comment\" , \"client_mutation_id\" , ) workflow_run_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"workflowRunId\" ) environment_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"environmentIds\" , ) comment = sgqlc . types . Field ( String , graphql_name = \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RejectDeploymentsPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18292 18293 18294 18295 18296 18297 18298 18299 18300 18301 18302 18303 class RejectDeploymentsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deployments\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deployments = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"Deployment\" )), graphql_name = \"deployments\" , ) Release Bases: sgqlc . types . Type , Node , UniformResourceLocatable , Reactable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Release ( sgqlc . types . Type , Node , UniformResourceLocatable , Reactable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"author\" , \"created_at\" , \"description\" , \"description_html\" , \"is_draft\" , \"is_latest\" , \"is_prerelease\" , \"mentions\" , \"name\" , \"published_at\" , \"release_assets\" , \"repository\" , \"short_description_html\" , \"tag\" , \"tag_commit\" , \"tag_name\" , \"updated_at\" , ) author = sgqlc . types . Field ( \"User\" , graphql_name = \"author\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) description_html = sgqlc . types . Field ( HTML , graphql_name = \"descriptionHTML\" ) is_draft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDraft\" ) is_latest = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isLatest\" ) is_prerelease = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrerelease\" ) mentions = sgqlc . types . Field ( UserConnection , graphql_name = \"mentions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) published_at = sgqlc . types . Field ( DateTime , graphql_name = \"publishedAt\" ) release_assets = sgqlc . types . Field ( sgqlc . types . non_null ( ReleaseAssetConnection ), graphql_name = \"releaseAssets\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"name\" , sgqlc . types . Arg ( String , graphql_name = \"name\" , default = None )), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) short_description_html = sgqlc . types . Field ( HTML , graphql_name = \"shortDescriptionHTML\" , args = sgqlc . types . ArgDict ( (( \"limit\" , sgqlc . types . Arg ( Int , graphql_name = \"limit\" , default = 200 )),) ), ) tag = sgqlc . types . Field ( Ref , graphql_name = \"tag\" ) tag_commit = sgqlc . types . Field ( Commit , graphql_name = \"tagCommit\" ) tag_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"tagName\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) ReleaseAsset Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28618 28619 28620 28621 28622 28623 28624 28625 28626 28627 28628 28629 28630 28631 28632 28633 28634 28635 28636 28637 28638 28639 28640 28641 28642 28643 28644 28645 28646 28647 28648 28649 28650 28651 28652 28653 28654 28655 28656 28657 class ReleaseAsset ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content_type\" , \"created_at\" , \"download_count\" , \"download_url\" , \"name\" , \"release\" , \"size\" , \"updated_at\" , \"uploaded_by\" , \"url\" , ) content_type = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"contentType\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) download_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"downloadCount\" ) download_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"downloadUrl\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) release = sgqlc . types . Field ( Release , graphql_name = \"release\" ) size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"size\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) uploaded_by = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"uploadedBy\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) ReleaseAssetConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18306 18307 18308 18309 18310 18311 18312 18313 18314 18315 18316 18317 18318 18319 18320 18321 18322 class ReleaseAssetConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReleaseAssetEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReleaseAsset\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ReleaseAssetEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18325 18326 18327 18328 18329 18330 18331 18332 18333 class ReleaseAssetEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ReleaseAsset\" , graphql_name = \"node\" ) ReleaseConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18336 18337 18338 18339 18340 18341 18342 18343 18344 18345 18346 18347 18348 18349 18350 class ReleaseConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReleaseEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Release\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ReleaseEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18353 18354 18355 18356 18357 18358 18359 18360 18361 class ReleaseEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Release\" , graphql_name = \"node\" ) ReleaseOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4676 4677 4678 4679 4680 4681 4682 4683 4684 4685 4686 4687 4688 class ReleaseOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ReleaseOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) ReleaseOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1509 1510 1511 1512 1513 1514 1515 class ReleaseOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" ) RemoveAssigneesFromAssignableInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4691 4692 4693 4694 4695 4696 4697 4698 4699 4700 4701 4702 4703 4704 4705 class RemoveAssigneesFromAssignableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignable_id\" , \"assignee_ids\" , \"client_mutation_id\" ) assignable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"assignableId\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"assigneeIds\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveAssigneesFromAssignablePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18364 18365 18366 18367 18368 18369 18370 18371 18372 class RemoveAssigneesFromAssignablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignable\" , \"client_mutation_id\" ) assignable = sgqlc . types . Field ( Assignable , graphql_name = \"assignable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveEnterpriseAdminInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4708 4709 4710 4711 4712 4713 4714 4715 4716 4717 4718 4719 class RemoveEnterpriseAdminInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveEnterpriseAdminPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18375 18376 18377 18378 18379 18380 18381 18382 18383 18384 18385 18386 class RemoveEnterpriseAdminPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"admin\" , \"client_mutation_id\" , \"enterprise\" , \"message\" , \"viewer\" ) admin = sgqlc . types . Field ( \"User\" , graphql_name = \"admin\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) viewer = sgqlc . types . Field ( \"User\" , graphql_name = \"viewer\" ) RemoveEnterpriseIdentityProviderInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 4732 class RemoveEnterpriseIdentityProviderInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveEnterpriseIdentityProviderPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18389 18390 18391 18392 18393 18394 18395 18396 18397 18398 18399 class RemoveEnterpriseIdentityProviderPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"identity_provider\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) identity_provider = sgqlc . types . Field ( \"EnterpriseIdentityProvider\" , graphql_name = \"identityProvider\" ) RemoveEnterpriseOrganizationInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 class RemoveEnterpriseOrganizationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"organization_id\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveEnterpriseOrganizationPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18402 18403 18404 18405 18406 18407 18408 18409 18410 18411 18412 class RemoveEnterpriseOrganizationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"organization\" , \"viewer\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) viewer = sgqlc . types . Field ( \"User\" , graphql_name = \"viewer\" ) RemoveEnterpriseSupportEntitlementInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 class RemoveEnterpriseSupportEntitlementInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveEnterpriseSupportEntitlementPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18415 18416 18417 18418 18419 18420 18421 18422 18423 class RemoveEnterpriseSupportEntitlementPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) RemoveLabelsFromLabelableInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4765 4766 4767 4768 4769 4770 4771 4772 4773 4774 4775 4776 4777 4778 4779 class RemoveLabelsFromLabelableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"labelable_id\" , \"label_ids\" , \"client_mutation_id\" ) labelable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"labelableId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"labelIds\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveLabelsFromLabelablePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18426 18427 18428 18429 18430 18431 18432 18433 18434 class RemoveLabelsFromLabelablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"labelable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) labelable = sgqlc . types . Field ( Labelable , graphql_name = \"labelable\" ) RemoveOutsideCollaboratorInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 class RemoveOutsideCollaboratorInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"user_id\" , \"organization_id\" , \"client_mutation_id\" ) user_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"userId\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveOutsideCollaboratorPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18437 18438 18439 18440 18441 18442 18443 18444 18445 class RemoveOutsideCollaboratorPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"removed_user\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) removed_user = sgqlc . types . Field ( \"User\" , graphql_name = \"removedUser\" ) RemoveReactionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4796 4797 4798 4799 4800 4801 4802 4803 4804 4805 4806 4807 class RemoveReactionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"content\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) content = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionContent ), graphql_name = \"content\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveReactionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18448 18449 18450 18451 18452 18453 18454 18455 18456 18457 class RemoveReactionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"reaction\" , \"subject\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) reaction = sgqlc . types . Field ( \"Reaction\" , graphql_name = \"reaction\" ) subject = sgqlc . types . Field ( Reactable , graphql_name = \"subject\" ) RemoveStarInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 class RemoveStarInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"starrable_id\" , \"client_mutation_id\" ) starrable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"starrableId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveStarPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18460 18461 18462 18463 18464 18465 18466 18467 18468 class RemoveStarPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"starrable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) starrable = sgqlc . types . Field ( \"Starrable\" , graphql_name = \"starrable\" ) RemoveUpvoteInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4823 4824 4825 4826 4827 4828 4829 4830 4831 class RemoveUpvoteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RemoveUpvotePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18471 18472 18473 18474 18475 18476 18477 18478 18479 class RemoveUpvotePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"subject\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) subject = sgqlc . types . Field ( \"Votable\" , graphql_name = \"subject\" ) RemovedFromProjectEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28660 28661 28662 28663 28664 28665 28666 28667 28668 28669 28670 28671 class RemovedFromProjectEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) RenamedTitleEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28674 28675 28676 28677 28678 28679 28680 28681 28682 28683 28684 28685 28686 28687 28688 28689 28690 28691 28692 28693 28694 28695 28696 28697 28698 28699 class RenamedTitleEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"current_title\" , \"previous_title\" , \"subject\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) current_title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"currentTitle\" ) previous_title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"previousTitle\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"RenamedTitleSubject\" ), graphql_name = \"subject\" ) RenamedTitleSubject Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32846 32847 32848 32849 32850 32851 32852 class RenamedTitleSubject ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest ) ReopenIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4834 4835 4836 4837 4838 4839 4840 4841 4842 class ReopenIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ReopenIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18482 18483 18484 18485 18486 18487 18488 18489 18490 class ReopenIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" ) ReopenPullRequestInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 class ReopenPullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ReopenPullRequestPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18493 18494 18495 18496 18497 18498 18499 18500 18501 class ReopenPullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) ReopenedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28702 28703 28704 28705 28706 28707 28708 28709 28710 28711 28712 28713 28714 28715 28716 class ReopenedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"closable\" , \"created_at\" , \"state_reason\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) closable = sgqlc . types . Field ( sgqlc . types . non_null ( Closable ), graphql_name = \"closable\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) state_reason = sgqlc . types . Field ( IssueStateReason , graphql_name = \"stateReason\" ) RepoAccessAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28719 28720 28721 28722 28723 28724 28725 28726 28727 28728 28729 28730 28731 28732 28733 28734 class RepoAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoAccessAuditEntryVisibility , graphql_name = \"visibility\" ) RepoAccessAuditEntryVisibility Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1518 1519 1520 1521 1522 1523 1524 class RepoAccessAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" ) RepoAddMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28737 28738 28739 28740 28741 28742 28743 28744 28745 28746 28747 28748 28749 28750 28751 28752 class RepoAddMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoAddMemberAuditEntryVisibility , graphql_name = \"visibility\" ) RepoAddMemberAuditEntryVisibility Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1527 1528 1529 1530 1531 1532 1533 class RepoAddMemberAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" ) RepoAddTopicAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , TopicAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28755 28756 28757 28758 28759 28760 28761 28762 28763 28764 28765 28766 28767 28768 class RepoAddTopicAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , TopicAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoArchivedAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28771 28772 28773 28774 28775 28776 28777 28778 28779 28780 28781 28782 28783 28784 28785 28786 class RepoArchivedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoArchivedAuditEntryVisibility , graphql_name = \"visibility\" ) RepoArchivedAuditEntryVisibility Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1536 1537 1538 1539 1540 1541 1542 class RepoArchivedAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" ) RepoChangeMergeSettingAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28789 28790 28791 28792 28793 28794 28795 28796 28797 28798 28799 28800 28801 28802 28803 28804 28805 class RepoChangeMergeSettingAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_enabled\" , \"merge_type\" ) is_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"isEnabled\" ) merge_type = sgqlc . types . Field ( RepoChangeMergeSettingAuditEntryMergeType , graphql_name = \"mergeType\" ) RepoChangeMergeSettingAuditEntryMergeType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1545 1546 1547 1548 1549 1550 1551 class RepoChangeMergeSettingAuditEntryMergeType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MERGE\" , \"REBASE\" , \"SQUASH\" ) RepoConfigDisableAnonymousGitAccessAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28808 28809 28810 28811 28812 28813 28814 28815 28816 28817 28818 28819 28820 class RepoConfigDisableAnonymousGitAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigDisableCollaboratorsOnlyAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28823 28824 28825 28826 28827 28828 28829 28830 28831 28832 28833 28834 28835 class RepoConfigDisableCollaboratorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigDisableContributorsOnlyAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28838 28839 28840 28841 28842 28843 28844 28845 28846 28847 28848 28849 28850 class RepoConfigDisableContributorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigDisableSockpuppetDisallowedAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28853 28854 28855 28856 28857 28858 28859 28860 28861 28862 28863 28864 28865 class RepoConfigDisableSockpuppetDisallowedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigEnableAnonymousGitAccessAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28868 28869 28870 28871 28872 28873 28874 28875 28876 28877 28878 28879 28880 class RepoConfigEnableAnonymousGitAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigEnableCollaboratorsOnlyAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28883 28884 28885 28886 28887 28888 28889 28890 28891 28892 28893 28894 28895 class RepoConfigEnableCollaboratorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigEnableContributorsOnlyAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28898 28899 28900 28901 28902 28903 28904 28905 28906 28907 28908 28909 28910 class RepoConfigEnableContributorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigEnableSockpuppetDisallowedAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28913 28914 28915 28916 28917 28918 28919 28920 28921 28922 28923 28924 28925 class RepoConfigEnableSockpuppetDisallowedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigLockAnonymousGitAccessAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28928 28929 28930 28931 28932 28933 28934 28935 28936 28937 28938 28939 28940 class RepoConfigLockAnonymousGitAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoConfigUnlockAnonymousGitAccessAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28943 28944 28945 28946 28947 28948 28949 28950 28951 28952 28953 28954 28955 class RepoConfigUnlockAnonymousGitAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepoCreateAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28958 28959 28960 28961 28962 28963 28964 28965 28966 28967 28968 28969 28970 28971 28972 28973 28974 28975 class RepoCreateAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"fork_parent_name\" , \"fork_source_name\" , \"visibility\" ) fork_parent_name = sgqlc . types . Field ( String , graphql_name = \"forkParentName\" ) fork_source_name = sgqlc . types . Field ( String , graphql_name = \"forkSourceName\" ) visibility = sgqlc . types . Field ( RepoCreateAuditEntryVisibility , graphql_name = \"visibility\" ) RepoCreateAuditEntryVisibility Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1554 1555 1556 1557 1558 1559 1560 class RepoCreateAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" ) RepoDestroyAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28978 28979 28980 28981 28982 28983 28984 28985 28986 28987 28988 28989 28990 28991 28992 28993 class RepoDestroyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoDestroyAuditEntryVisibility , graphql_name = \"visibility\" ) RepoDestroyAuditEntryVisibility Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1563 1564 1565 1566 1567 1568 1569 class RepoDestroyAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" ) RepoRemoveMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28996 28997 28998 28999 29000 29001 29002 29003 29004 29005 29006 29007 29008 29009 29010 29011 class RepoRemoveMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoRemoveMemberAuditEntryVisibility , graphql_name = \"visibility\" ) RepoRemoveMemberAuditEntryVisibility Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1572 1573 1574 1575 1576 1577 1578 class RepoRemoveMemberAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" ) RepoRemoveTopicAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , TopicAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 29014 29015 29016 29017 29018 29019 29020 29021 29022 29023 29024 29025 29026 29027 class RepoRemoveTopicAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , TopicAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () ReportedContentClassifiers Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1581 1582 1583 1584 1585 1586 1587 class ReportedContentClassifiers ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ABUSE\" , \"DUPLICATE\" , \"OFF_TOPIC\" , \"OUTDATED\" , \"RESOLVED\" , \"SPAM\" ) Repository Bases: sgqlc . types . Type , Node , ProjectV2Recent , ProjectOwner , PackageOwner , Subscribable , Starrable , UniformResourceLocatable , RepositoryInfo See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Repository ( sgqlc . types . Type , Node , ProjectV2Recent , ProjectOwner , PackageOwner , Subscribable , Starrable , UniformResourceLocatable , RepositoryInfo , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"allow_update_branch\" , \"assignable_users\" , \"auto_merge_allowed\" , \"branch_protection_rules\" , \"code_of_conduct\" , \"codeowners\" , \"collaborators\" , \"commit_comments\" , \"contact_links\" , \"database_id\" , \"default_branch_ref\" , \"delete_branch_on_merge\" , \"deploy_keys\" , \"deployments\" , \"discussion\" , \"discussion_categories\" , \"discussion_category\" , \"discussions\" , \"disk_usage\" , \"environment\" , \"environments\" , \"forking_allowed\" , \"forks\" , \"funding_links\" , \"interaction_ability\" , \"is_blank_issues_enabled\" , \"is_disabled\" , \"is_empty\" , \"is_security_policy_enabled\" , \"is_user_configuration_repository\" , \"issue\" , \"issue_or_pull_request\" , \"issue_templates\" , \"issues\" , \"label\" , \"labels\" , \"languages\" , \"latest_release\" , \"mentionable_users\" , \"merge_commit_allowed\" , \"merge_commit_message\" , \"merge_commit_title\" , \"milestone\" , \"milestones\" , \"object\" , \"parent\" , \"pinned_discussions\" , \"pinned_issues\" , \"primary_language\" , \"project_next\" , \"project_v2\" , \"projects_next\" , \"projects_v2\" , \"pull_request\" , \"pull_request_templates\" , \"pull_requests\" , \"rebase_merge_allowed\" , \"ref\" , \"refs\" , \"release\" , \"releases\" , \"repository_topics\" , \"security_policy_url\" , \"squash_merge_allowed\" , \"squash_merge_commit_message\" , \"squash_merge_commit_title\" , \"squash_pr_title_used_as_default\" , \"ssh_url\" , \"submodules\" , \"temp_clone_token\" , \"template_repository\" , \"viewer_can_administer\" , \"viewer_can_update_topics\" , \"viewer_default_commit_email\" , \"viewer_default_merge_method\" , \"viewer_permission\" , \"viewer_possible_commit_emails\" , \"vulnerability_alerts\" , \"watchers\" , \"web_commit_signoff_required\" , ) allow_update_branch = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowUpdateBranch\" ) assignable_users = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"assignableUsers\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) auto_merge_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"autoMergeAllowed\" ) branch_protection_rules = sgqlc . types . Field ( sgqlc . types . non_null ( BranchProtectionRuleConnection ), graphql_name = \"branchProtectionRules\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) code_of_conduct = sgqlc . types . Field ( CodeOfConduct , graphql_name = \"codeOfConduct\" ) codeowners = sgqlc . types . Field ( RepositoryCodeowners , graphql_name = \"codeowners\" , args = sgqlc . types . ArgDict ( ( ( \"ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"refName\" , default = None ), ), ) ), ) collaborators = sgqlc . types . Field ( RepositoryCollaboratorConnection , graphql_name = \"collaborators\" , args = sgqlc . types . ArgDict ( ( ( \"affiliation\" , sgqlc . types . Arg ( CollaboratorAffiliation , graphql_name = \"affiliation\" , default = None , ), ), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit_comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"commitComments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) contact_links = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( RepositoryContactLink )), graphql_name = \"contactLinks\" , ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) default_branch_ref = sgqlc . types . Field ( Ref , graphql_name = \"defaultBranchRef\" ) delete_branch_on_merge = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"deleteBranchOnMerge\" ) deploy_keys = sgqlc . types . Field ( sgqlc . types . non_null ( DeployKeyConnection ), graphql_name = \"deployKeys\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) deployments = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentConnection ), graphql_name = \"deployments\" , args = sgqlc . types . ArgDict ( ( ( \"environments\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"environments\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( DeploymentOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) discussion = sgqlc . types . Field ( Discussion , graphql_name = \"discussion\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) discussion_categories = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionCategoryConnection ), graphql_name = \"discussionCategories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"filter_by_assignable\" , sgqlc . types . Arg ( Boolean , graphql_name = \"filterByAssignable\" , default = False ), ), ) ), ) discussion_category = sgqlc . types . Field ( DiscussionCategory , graphql_name = \"discussionCategory\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ) ), ) discussions = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionConnection ), graphql_name = \"discussions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"category_id\" , sgqlc . types . Arg ( ID , graphql_name = \"categoryId\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( DiscussionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) disk_usage = sgqlc . types . Field ( Int , graphql_name = \"diskUsage\" ) environment = sgqlc . types . Field ( Environment , graphql_name = \"environment\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) environments = sgqlc . types . Field ( sgqlc . types . non_null ( EnvironmentConnection ), graphql_name = \"environments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) forking_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"forkingAllowed\" ) forks = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"forks\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"affiliations\" , default = None , ), ), ( \"owner_affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"ownerAffiliations\" , default = ( \"OWNER\" , \"COLLABORATOR\" ), ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) funding_links = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( FundingLink ))), graphql_name = \"fundingLinks\" , ) interaction_ability = sgqlc . types . Field ( RepositoryInteractionAbility , graphql_name = \"interactionAbility\" ) is_blank_issues_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isBlankIssuesEnabled\" ) is_disabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDisabled\" ) is_empty = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isEmpty\" ) is_security_policy_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"isSecurityPolicyEnabled\" ) is_user_configuration_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUserConfigurationRepository\" ) issue = sgqlc . types . Field ( Issue , graphql_name = \"issue\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) issue_or_pull_request = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"issueOrPullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) issue_templates = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueTemplate )), graphql_name = \"issueTemplates\" , ) issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"issues\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" , default = None , ), ), ( \"filter_by\" , sgqlc . types . Arg ( IssueFilters , graphql_name = \"filterBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) label = sgqlc . types . Field ( Label , graphql_name = \"label\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) labels = sgqlc . types . Field ( LabelConnection , graphql_name = \"labels\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( LabelOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ) ), ) languages = sgqlc . types . Field ( LanguageConnection , graphql_name = \"languages\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( LanguageOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) latest_release = sgqlc . types . Field ( Release , graphql_name = \"latestRelease\" ) mentionable_users = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"mentionableUsers\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) merge_commit_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"mergeCommitAllowed\" ) merge_commit_message = sgqlc . types . Field ( sgqlc . types . non_null ( MergeCommitMessage ), graphql_name = \"mergeCommitMessage\" ) merge_commit_title = sgqlc . types . Field ( sgqlc . types . non_null ( MergeCommitTitle ), graphql_name = \"mergeCommitTitle\" ) milestone = sgqlc . types . Field ( Milestone , graphql_name = \"milestone\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) milestones = sgqlc . types . Field ( MilestoneConnection , graphql_name = \"milestones\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( MilestoneState )), graphql_name = \"states\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( MilestoneOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ) ), ) object = sgqlc . types . Field ( GitObject , graphql_name = \"object\" , args = sgqlc . types . ArgDict ( ( ( \"oid\" , sgqlc . types . Arg ( GitObjectID , graphql_name = \"oid\" , default = None )), ( \"expression\" , sgqlc . types . Arg ( String , graphql_name = \"expression\" , default = None ), ), ) ), ) parent = sgqlc . types . Field ( \"Repository\" , graphql_name = \"parent\" ) pinned_discussions = sgqlc . types . Field ( sgqlc . types . non_null ( PinnedDiscussionConnection ), graphql_name = \"pinnedDiscussions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pinned_issues = sgqlc . types . Field ( PinnedIssueConnection , graphql_name = \"pinnedIssues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) primary_language = sgqlc . types . Field ( Language , graphql_name = \"primaryLanguage\" ) project_next = sgqlc . types . Field ( ProjectNext , graphql_name = \"projectNext\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) project_v2 = sgqlc . types . Field ( ProjectV2 , graphql_name = \"projectV2\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) projects_next = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextConnection ), graphql_name = \"projectsNext\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"sort_by\" , sgqlc . types . Arg ( ProjectNextOrderField , graphql_name = \"sortBy\" , default = \"TITLE\" ), ), ) ), ) projects_v2 = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Connection ), graphql_name = \"projectsV2\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2Order , graphql_name = \"orderBy\" , default = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, ), ), ) ), ) pull_request = sgqlc . types . Field ( PullRequest , graphql_name = \"pullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) pull_request_templates = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestTemplate )), graphql_name = \"pullRequestTemplates\" , ) pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) rebase_merge_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"rebaseMergeAllowed\" ) ref = sgqlc . types . Field ( Ref , graphql_name = \"ref\" , args = sgqlc . types . ArgDict ( ( ( \"qualified_name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"qualifiedName\" , default = None , ), ), ) ), ) refs = sgqlc . types . Field ( RefConnection , graphql_name = \"refs\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"ref_prefix\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"refPrefix\" , default = None , ), ), ( \"direction\" , sgqlc . types . Arg ( OrderDirection , graphql_name = \"direction\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RefOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) release = sgqlc . types . Field ( Release , graphql_name = \"release\" , args = sgqlc . types . ArgDict ( ( ( \"tag_name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"tagName\" , default = None , ), ), ) ), ) releases = sgqlc . types . Field ( sgqlc . types . non_null ( ReleaseConnection ), graphql_name = \"releases\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ReleaseOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) repository_topics = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryTopicConnection ), graphql_name = \"repositoryTopics\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) security_policy_url = sgqlc . types . Field ( URI , graphql_name = \"securityPolicyUrl\" ) squash_merge_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"squashMergeAllowed\" ) squash_merge_commit_message = sgqlc . types . Field ( sgqlc . types . non_null ( SquashMergeCommitMessage ), graphql_name = \"squashMergeCommitMessage\" , ) squash_merge_commit_title = sgqlc . types . Field ( sgqlc . types . non_null ( SquashMergeCommitTitle ), graphql_name = \"squashMergeCommitTitle\" , ) squash_pr_title_used_as_default = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"squashPrTitleUsedAsDefault\" ) ssh_url = sgqlc . types . Field ( sgqlc . types . non_null ( GitSSHRemote ), graphql_name = \"sshUrl\" ) submodules = sgqlc . types . Field ( sgqlc . types . non_null ( SubmoduleConnection ), graphql_name = \"submodules\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) temp_clone_token = sgqlc . types . Field ( String , graphql_name = \"tempCloneToken\" ) template_repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"templateRepository\" ) viewer_can_administer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanAdminister\" ) viewer_can_update_topics = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUpdateTopics\" ) viewer_default_commit_email = sgqlc . types . Field ( String , graphql_name = \"viewerDefaultCommitEmail\" ) viewer_default_merge_method = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestMergeMethod ), graphql_name = \"viewerDefaultMergeMethod\" , ) viewer_permission = sgqlc . types . Field ( RepositoryPermission , graphql_name = \"viewerPermission\" ) viewer_possible_commit_emails = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"viewerPossibleCommitEmails\" , ) vulnerability_alerts = sgqlc . types . Field ( RepositoryVulnerabilityAlertConnection , graphql_name = \"vulnerabilityAlerts\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( RepositoryVulnerabilityAlertState ) ), graphql_name = \"states\" , default = None , ), ), ( \"dependency_scopes\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( RepositoryVulnerabilityAlertDependencyScope ) ), graphql_name = \"dependencyScopes\" , default = None , ), ), ) ), ) watchers = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"watchers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) web_commit_signoff_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"webCommitSignoffRequired\" ) RepositoryAffiliation Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1590 1591 1592 1593 1594 1595 1596 class RepositoryAffiliation ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COLLABORATOR\" , \"ORGANIZATION_MEMBER\" , \"OWNER\" ) RepositoryAuditEntryData Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18504 18505 18506 18507 18508 18509 18510 18511 18512 18513 18514 18515 18516 18517 18518 18519 18520 18521 class RepositoryAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository\" , \"repository_name\" , \"repository_resource_path\" , \"repository_url\" , ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) repository_name = sgqlc . types . Field ( String , graphql_name = \"repositoryName\" ) repository_resource_path = sgqlc . types . Field ( URI , graphql_name = \"repositoryResourcePath\" ) repository_url = sgqlc . types . Field ( URI , graphql_name = \"repositoryUrl\" ) RepositoryCodeowners Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18524 18525 18526 18527 18528 18529 18530 18531 18532 18533 18534 18535 18536 class RepositoryCodeowners ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"errors\" ,) errors = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"RepositoryCodeownersError\" )) ), graphql_name = \"errors\" , ) RepositoryCodeownersError Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18539 18540 18541 18542 18543 18544 18545 18546 18547 18548 18549 18550 18551 18552 18553 18554 18555 18556 18557 18558 18559 18560 class RepositoryCodeownersError ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column\" , \"kind\" , \"line\" , \"message\" , \"path\" , \"source\" , \"suggestion\" , ) column = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"column\" ) kind = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"kind\" ) line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"line\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) source = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"source\" ) suggestion = sgqlc . types . Field ( String , graphql_name = \"suggestion\" ) RepositoryCollaboratorConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18563 18564 18565 18566 18567 18568 18569 18570 18571 18572 18573 18574 18575 18576 18577 18578 18579 class RepositoryCollaboratorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryCollaboratorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) RepositoryCollaboratorEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18582 18583 18584 18585 18586 18587 18588 18589 18590 18591 18592 18593 18594 18595 18596 18597 class RepositoryCollaboratorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"permission\" , \"permission_sources\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"node\" ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryPermission ), graphql_name = \"permission\" ) permission_sources = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( PermissionSource )), graphql_name = \"permissionSources\" , ) RepositoryConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18600 18601 18602 18603 18604 18605 18606 18607 18608 18609 18610 18611 18612 18613 18614 18615 18616 18617 18618 18619 class RepositoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"total_disk_usage\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Repository\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) total_disk_usage = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalDiskUsage\" ) RepositoryContactLink Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18622 18623 18624 18625 18626 18627 18628 18629 18630 18631 class RepositoryContactLink ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"about\" , \"name\" , \"url\" ) about = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"about\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) RepositoryContributionType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 class RepositoryContributionType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMIT\" , \"ISSUE\" , \"PULL_REQUEST\" , \"PULL_REQUEST_REVIEW\" , \"REPOSITORY\" , ) RepositoryDiscussionAuthor Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18634 18635 18636 18637 18638 18639 18640 18641 18642 18643 18644 18645 18646 18647 18648 18649 18650 18651 18652 18653 18654 18655 18656 18657 18658 18659 18660 18661 18662 18663 18664 18665 18666 18667 18668 18669 18670 18671 class RepositoryDiscussionAuthor ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_discussions\" ,) repository_discussions = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionConnection ), graphql_name = \"repositoryDiscussions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( DiscussionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"repository_id\" , sgqlc . types . Arg ( ID , graphql_name = \"repositoryId\" , default = None ), ), ( \"answered\" , sgqlc . types . Arg ( Boolean , graphql_name = \"answered\" , default = None ), ), ) ), ) RepositoryDiscussionCommentAuthor Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18674 18675 18676 18677 18678 18679 18680 18681 18682 18683 18684 18685 18686 18687 18688 18689 18690 18691 18692 18693 18694 18695 18696 18697 18698 18699 18700 18701 18702 18703 class RepositoryDiscussionCommentAuthor ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_discussion_comments\" ,) repository_discussion_comments = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionCommentConnection ), graphql_name = \"repositoryDiscussionComments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"repository_id\" , sgqlc . types . Arg ( ID , graphql_name = \"repositoryId\" , default = None ), ), ( \"only_answers\" , sgqlc . types . Arg ( Boolean , graphql_name = \"onlyAnswers\" , default = False ), ), ) ), ) RepositoryEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18706 18707 18708 18709 18710 18711 18712 18713 18714 class RepositoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Repository\" , graphql_name = \"node\" ) RepositoryInfo Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass RepositoryInfo ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"description\" , \"description_html\" , \"fork_count\" , \"has_issues_enabled\" , \"has_projects_enabled\" , \"has_wiki_enabled\" , \"homepage_url\" , \"is_archived\" , \"is_fork\" , \"is_in_organization\" , \"is_locked\" , \"is_mirror\" , \"is_private\" , \"is_template\" , \"license_info\" , \"lock_reason\" , \"mirror_url\" , \"name\" , \"name_with_owner\" , \"open_graph_image_url\" , \"owner\" , \"pushed_at\" , \"resource_path\" , \"short_description_html\" , \"updated_at\" , \"url\" , \"uses_custom_open_graph_image\" , \"visibility\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"descriptionHTML\" ) fork_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"forkCount\" ) has_issues_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasIssuesEnabled\" ) has_projects_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasProjectsEnabled\" ) has_wiki_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasWikiEnabled\" ) homepage_url = sgqlc . types . Field ( URI , graphql_name = \"homepageUrl\" ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) is_fork = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isFork\" ) is_in_organization = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isInOrganization\" ) is_locked = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isLocked\" ) is_mirror = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isMirror\" ) is_private = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrivate\" ) is_template = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isTemplate\" ) license_info = sgqlc . types . Field ( \"License\" , graphql_name = \"licenseInfo\" ) lock_reason = sgqlc . types . Field ( RepositoryLockReason , graphql_name = \"lockReason\" ) mirror_url = sgqlc . types . Field ( URI , graphql_name = \"mirrorUrl\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) name_with_owner = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"nameWithOwner\" ) open_graph_image_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"openGraphImageUrl\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( \"RepositoryOwner\" ), graphql_name = \"owner\" ) pushed_at = sgqlc . types . Field ( DateTime , graphql_name = \"pushedAt\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) short_description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"shortDescriptionHTML\" , args = sgqlc . types . ArgDict ( (( \"limit\" , sgqlc . types . Arg ( Int , graphql_name = \"limit\" , default = 200 )),) ), ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) uses_custom_open_graph_image = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"usesCustomOpenGraphImage\" ) visibility = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryVisibility ), graphql_name = \"visibility\" ) RepositoryInteractionAbility Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18827 18828 18829 18830 18831 18832 18833 18834 18835 18836 18837 18838 18839 18840 class RepositoryInteractionAbility ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"expires_at\" , \"limit\" , \"origin\" ) expires_at = sgqlc . types . Field ( DateTime , graphql_name = \"expiresAt\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimit ), graphql_name = \"limit\" ) origin = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimitOrigin ), graphql_name = \"origin\" ) RepositoryInteractionLimit Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 class RepositoryInteractionLimit ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COLLABORATORS_ONLY\" , \"CONTRIBUTORS_ONLY\" , \"EXISTING_USERS\" , \"NO_LIMIT\" , ) RepositoryInteractionLimitExpiry Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1628 1629 1630 1631 1632 1633 1634 class RepositoryInteractionLimitExpiry ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ONE_DAY\" , \"ONE_MONTH\" , \"ONE_WEEK\" , \"SIX_MONTHS\" , \"THREE_DAYS\" ) RepositoryInteractionLimitOrigin Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1637 1638 1639 1640 1641 1642 1643 class RepositoryInteractionLimitOrigin ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ORGANIZATION\" , \"REPOSITORY\" , \"USER\" ) RepositoryInvitation Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30047 30048 30049 30050 30051 30052 30053 30054 30055 30056 30057 30058 30059 30060 30061 30062 30063 30064 30065 30066 30067 30068 class RepositoryInvitation ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"email\" , \"invitee\" , \"inviter\" , \"permalink\" , \"permission\" , \"repository\" , ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) invitee = sgqlc . types . Field ( \"User\" , graphql_name = \"invitee\" ) inviter = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"inviter\" ) permalink = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"permalink\" ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryPermission ), graphql_name = \"permission\" ) repository = sgqlc . types . Field ( RepositoryInfo , graphql_name = \"repository\" ) RepositoryInvitationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18843 18844 18845 18846 18847 18848 18849 18850 18851 18852 18853 18854 18855 18856 18857 18858 18859 18860 18861 class RepositoryInvitationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryInvitationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryInvitation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) RepositoryInvitationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18864 18865 18866 18867 18868 18869 18870 18871 18872 class RepositoryInvitationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RepositoryInvitation\" , graphql_name = \"node\" ) RepositoryInvitationOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 class RepositoryInvitationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInvitationOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) RepositoryInvitationOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1646 1647 1648 1649 1650 1651 1652 class RepositoryInvitationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) RepositoryLockReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1655 1656 1657 1658 1659 1660 1661 class RepositoryLockReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BILLING\" , \"MIGRATING\" , \"MOVING\" , \"RENAME\" ) RepositoryMigration Bases: sgqlc . types . Type , Node , Migration See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30071 30072 30073 30074 30075 30076 30077 class RepositoryMigration ( sgqlc . types . Type , Node , Migration ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepositoryMigrationConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18875 18876 18877 18878 18879 18880 18881 18882 18883 18884 18885 18886 18887 18888 18889 18890 18891 18892 18893 class RepositoryMigrationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryMigrationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryMigration\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) RepositoryMigrationEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18896 18897 18898 18899 18900 18901 18902 18903 18904 class RepositoryMigrationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RepositoryMigration\" , graphql_name = \"node\" ) RepositoryMigrationOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 class RepositoryMigrationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryMigrationOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryMigrationOrderDirection ), graphql_name = \"direction\" , ) RepositoryMigrationOrderDirection Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1664 1665 1666 1667 1668 1669 1670 class RepositoryMigrationOrderDirection ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ASC\" , \"DESC\" ) RepositoryMigrationOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1673 1674 1675 1676 1677 1678 1679 class RepositoryMigrationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) RepositoryNode Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18907 18908 18909 18910 18911 18912 18913 18914 18915 18916 class RepositoryNode ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository\" ,) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) RepositoryOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4889 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899 4900 4901 class RepositoryOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) RepositoryOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1682 1683 1684 1685 1686 1687 1688 class RepositoryOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"PUSHED_AT\" , \"STARGAZERS\" , \"UPDATED_AT\" ) RepositoryOwner Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18919 18920 18921 18922 18923 18924 18925 18926 18927 18928 18929 18930 18931 18932 18933 18934 18935 18936 18937 18938 18939 18940 18941 18942 18943 18944 18945 18946 18947 18948 18949 18950 18951 18952 18953 18954 18955 18956 18957 18958 18959 18960 18961 18962 18963 18964 18965 18966 18967 18968 18969 18970 18971 18972 18973 18974 18975 18976 18977 18978 18979 18980 18981 18982 18983 18984 18985 18986 18987 18988 18989 18990 18991 18992 18993 18994 18995 18996 18997 18998 18999 19000 19001 19002 19003 19004 19005 19006 19007 19008 19009 19010 19011 19012 19013 19014 19015 19016 19017 class RepositoryOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"id\" , \"login\" , \"repositories\" , \"repository\" , \"resource_path\" , \"url\" , ) avatar_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"affiliations\" , default = None , ), ), ( \"owner_affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"ownerAffiliations\" , default = ( \"OWNER\" , \"COLLABORATOR\" ), ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"is_fork\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isFork\" , default = None ), ), ) ), ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ( \"follow_renames\" , sgqlc . types . Arg ( Boolean , graphql_name = \"followRenames\" , default = True ), ), ) ), ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) RepositoryPermission Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1691 1692 1693 1694 1695 1696 1697 class RepositoryPermission ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"MAINTAIN\" , \"READ\" , \"TRIAGE\" , \"WRITE\" ) RepositoryPrivacy Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1700 1701 1702 1703 1704 1705 1706 class RepositoryPrivacy ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"PRIVATE\" , \"PUBLIC\" ) RepositoryTopic Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30080 30081 30082 30083 30084 30085 30086 30087 class RepositoryTopic ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"topic\" ,) topic = sgqlc . types . Field ( sgqlc . types . non_null ( \"Topic\" ), graphql_name = \"topic\" ) RepositoryTopicConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19020 19021 19022 19023 19024 19025 19026 19027 19028 19029 19030 19031 19032 19033 19034 19035 19036 19037 19038 class RepositoryTopicConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryTopicEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryTopic\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) RepositoryTopicEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19041 19042 19043 19044 19045 19046 19047 19048 19049 class RepositoryTopicEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RepositoryTopic\" , graphql_name = \"node\" ) RepositoryVisibility Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1709 1710 1711 1712 1713 1714 1715 class RepositoryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" ) RepositoryVisibilityChangeDisableAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30090 30091 30092 30093 30094 30095 30096 30097 30098 30099 30100 30101 30102 class RepositoryVisibilityChangeDisableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepositoryVisibilityChangeEnableAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30105 30106 30107 30108 30109 30110 30111 30112 30113 30114 30115 30116 30117 class RepositoryVisibilityChangeEnableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () RepositoryVulnerabilityAlert Bases: sgqlc . types . Type , Node , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30120 30121 30122 30123 30124 30125 30126 30127 30128 30129 30130 30131 30132 30133 30134 30135 30136 30137 30138 30139 30140 30141 30142 30143 30144 30145 30146 30147 30148 30149 30150 30151 30152 30153 30154 30155 30156 30157 30158 30159 30160 30161 30162 30163 30164 30165 30166 30167 30168 30169 30170 30171 30172 30173 30174 30175 30176 30177 class RepositoryVulnerabilityAlert ( sgqlc . types . Type , Node , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"dependabot_update\" , \"dependency_scope\" , \"dismiss_comment\" , \"dismiss_reason\" , \"dismissed_at\" , \"dismisser\" , \"fix_reason\" , \"fixed_at\" , \"number\" , \"security_advisory\" , \"security_vulnerability\" , \"state\" , \"vulnerable_manifest_filename\" , \"vulnerable_manifest_path\" , \"vulnerable_requirements\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) dependabot_update = sgqlc . types . Field ( DependabotUpdate , graphql_name = \"dependabotUpdate\" ) dependency_scope = sgqlc . types . Field ( RepositoryVulnerabilityAlertDependencyScope , graphql_name = \"dependencyScope\" ) dismiss_comment = sgqlc . types . Field ( String , graphql_name = \"dismissComment\" ) dismiss_reason = sgqlc . types . Field ( String , graphql_name = \"dismissReason\" ) dismissed_at = sgqlc . types . Field ( DateTime , graphql_name = \"dismissedAt\" ) dismisser = sgqlc . types . Field ( \"User\" , graphql_name = \"dismisser\" ) fix_reason = sgqlc . types . Field ( String , graphql_name = \"fixReason\" ) fixed_at = sgqlc . types . Field ( DateTime , graphql_name = \"fixedAt\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) security_advisory = sgqlc . types . Field ( \"SecurityAdvisory\" , graphql_name = \"securityAdvisory\" ) security_vulnerability = sgqlc . types . Field ( SecurityVulnerability , graphql_name = \"securityVulnerability\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryVulnerabilityAlertState ), graphql_name = \"state\" ) vulnerable_manifest_filename = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"vulnerableManifestFilename\" ) vulnerable_manifest_path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"vulnerableManifestPath\" ) vulnerable_requirements = sgqlc . types . Field ( String , graphql_name = \"vulnerableRequirements\" ) RepositoryVulnerabilityAlertConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19052 19053 19054 19055 19056 19057 19058 19059 19060 19061 19062 19063 19064 19065 19066 19067 19068 19069 19070 class RepositoryVulnerabilityAlertConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryVulnerabilityAlertEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryVulnerabilityAlert\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) RepositoryVulnerabilityAlertDependencyScope Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1718 1719 1720 1721 1722 1723 1724 class RepositoryVulnerabilityAlertDependencyScope ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DEVELOPMENT\" , \"RUNTIME\" ) RepositoryVulnerabilityAlertEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19073 19074 19075 19076 19077 19078 19079 19080 19081 class RepositoryVulnerabilityAlertEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RepositoryVulnerabilityAlert\" , graphql_name = \"node\" ) RepositoryVulnerabilityAlertState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1727 1728 1729 1730 1731 1732 1733 class RepositoryVulnerabilityAlertState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISMISSED\" , \"FIXED\" , \"OPEN\" ) RequestReviewsInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 class RequestReviewsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"user_ids\" , \"team_ids\" , \"union\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) user_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"userIds\" ) team_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"teamIds\" ) union = sgqlc . types . Field ( Boolean , graphql_name = \"union\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RequestReviewsPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19084 19085 19086 19087 19088 19089 19090 19091 19092 19093 19094 19095 19096 19097 19098 19099 19100 19101 class RequestReviewsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" , \"requested_reviewers_edge\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) requested_reviewers_edge = sgqlc . types . Field ( \"UserEdge\" , graphql_name = \"requestedReviewersEdge\" ) RequestableCheckStatusState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1736 1737 1738 1739 1740 1741 1742 class RequestableCheckStatusState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMPLETED\" , \"IN_PROGRESS\" , \"PENDING\" , \"QUEUED\" , \"WAITING\" ) RequestedReviewer Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32855 32856 32857 32858 32859 32860 32861 class RequestedReviewer ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Mannequin , Team , User ) RequestedReviewerConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19104 19105 19106 19107 19108 19109 19110 19111 19112 19113 19114 19115 19116 19117 19118 19119 19120 19121 19122 class RequestedReviewerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RequestedReviewerEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RequestedReviewer\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) RequestedReviewerEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19125 19126 19127 19128 19129 19130 19131 19132 19133 class RequestedReviewerEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RequestedReviewer\" , graphql_name = \"node\" ) RequirableByPullRequest Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19136 19137 19138 19139 19140 19141 19142 19143 19144 19145 19146 19147 19148 19149 19150 19151 19152 19153 19154 19155 19156 19157 19158 19159 19160 class RequirableByPullRequest ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_required\" ,) is_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isRequired\" , args = sgqlc . types . ArgDict ( ( ( \"pull_request_id\" , sgqlc . types . Arg ( ID , graphql_name = \"pullRequestId\" , default = None ), ), ( \"pull_request_number\" , sgqlc . types . Arg ( Int , graphql_name = \"pullRequestNumber\" , default = None ), ), ) ), ) RequiredStatusCheckDescription Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19163 19164 19165 19166 19167 19168 19169 19170 19171 class RequiredStatusCheckDescription ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app\" , \"context\" ) app = sgqlc . types . Field ( \"App\" , graphql_name = \"app\" ) context = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"context\" ) RequiredStatusCheckInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4930 4931 4932 4933 4934 4935 4936 4937 4938 class RequiredStatusCheckInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"context\" , \"app_id\" ) context = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"context\" ) app_id = sgqlc . types . Field ( ID , graphql_name = \"appId\" ) RerequestCheckSuiteInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 class RerequestCheckSuiteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"check_suite_id\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) check_suite_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"checkSuiteId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RerequestCheckSuitePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19174 19175 19176 19177 19178 19179 19180 19181 19182 class RerequestCheckSuitePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_suite\" , \"client_mutation_id\" ) check_suite = sgqlc . types . Field ( \"CheckSuite\" , graphql_name = \"checkSuite\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ResolveReviewThreadInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4957 4958 4959 4960 4961 4962 4963 4964 4965 class ResolveReviewThreadInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"thread_id\" , \"client_mutation_id\" ) thread_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"threadId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ResolveReviewThreadPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19185 19186 19187 19188 19189 19190 19191 19192 19193 class ResolveReviewThreadPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"thread\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) thread = sgqlc . types . Field ( \"PullRequestReviewThread\" , graphql_name = \"thread\" ) RestrictedContribution Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30180 30181 30182 30183 30184 30185 30186 class RestrictedContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () ReviewDismissalAllowance Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30189 30190 30191 30192 30193 30194 30195 30196 30197 30198 30199 class ReviewDismissalAllowance ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"branch_protection_rule\" ) actor = sgqlc . types . Field ( \"ReviewDismissalAllowanceActor\" , graphql_name = \"actor\" ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" ) ReviewDismissalAllowanceActor Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32864 32865 32866 32867 32868 32869 32870 class ReviewDismissalAllowanceActor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Team , User ) ReviewDismissalAllowanceConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19196 19197 19198 19199 19200 19201 19202 19203 19204 19205 19206 19207 19208 19209 19210 19211 19212 19213 19214 class ReviewDismissalAllowanceConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReviewDismissalAllowanceEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReviewDismissalAllowance\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ReviewDismissalAllowanceEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19217 19218 19219 19220 19221 19222 19223 19224 19225 class ReviewDismissalAllowanceEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ReviewDismissalAllowance\" , graphql_name = \"node\" ) ReviewDismissedEvent Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30202 30203 30204 30205 30206 30207 30208 30209 30210 30211 30212 30213 30214 30215 30216 30217 30218 30219 30220 30221 30222 30223 30224 30225 30226 30227 30228 30229 30230 30231 30232 30233 30234 30235 30236 30237 class ReviewDismissedEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" , \"dismissal_message\" , \"dismissal_message_html\" , \"previous_review_state\" , \"pull_request\" , \"pull_request_commit\" , \"review\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) dismissal_message = sgqlc . types . Field ( String , graphql_name = \"dismissalMessage\" ) dismissal_message_html = sgqlc . types . Field ( String , graphql_name = \"dismissalMessageHTML\" ) previous_review_state = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewState ), graphql_name = \"previousReviewState\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) pull_request_commit = sgqlc . types . Field ( PullRequestCommit , graphql_name = \"pullRequestCommit\" ) review = sgqlc . types . Field ( PullRequestReview , graphql_name = \"review\" ) ReviewRequest Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30240 30241 30242 30243 30244 30245 30246 30247 30248 30249 30250 30251 30252 30253 30254 30255 30256 30257 30258 30259 30260 30261 class ReviewRequest ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"as_code_owner\" , \"database_id\" , \"pull_request\" , \"requested_reviewer\" , ) as_code_owner = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"asCodeOwner\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) requested_reviewer = sgqlc . types . Field ( \"RequestedReviewer\" , graphql_name = \"requestedReviewer\" ) ReviewRequestConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19228 19229 19230 19231 19232 19233 19234 19235 19236 19237 19238 19239 19240 19241 19242 19243 19244 19245 19246 class ReviewRequestConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReviewRequestEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReviewRequest\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) ReviewRequestEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19249 19250 19251 19252 19253 19254 19255 19256 19257 class ReviewRequestEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ReviewRequest\" , graphql_name = \"node\" ) ReviewRequestRemovedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30264 30265 30266 30267 30268 30269 30270 30271 30272 30273 30274 30275 30276 30277 30278 30279 30280 class ReviewRequestRemovedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" , \"requested_reviewer\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) requested_reviewer = sgqlc . types . Field ( \"RequestedReviewer\" , graphql_name = \"requestedReviewer\" ) ReviewRequestedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30283 30284 30285 30286 30287 30288 30289 30290 30291 30292 30293 30294 30295 30296 30297 30298 30299 class ReviewRequestedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" , \"requested_reviewer\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) requested_reviewer = sgqlc . types . Field ( \"RequestedReviewer\" , graphql_name = \"requestedReviewer\" ) ReviewStatusHovercardContext Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30302 30303 30304 30305 30306 30307 30308 30309 30310 30311 class ReviewStatusHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"review_decision\" ,) review_decision = sgqlc . types . Field ( PullRequestReviewDecision , graphql_name = \"reviewDecision\" ) RevokeEnterpriseOrganizationsMigratorRoleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 class RevokeEnterpriseOrganizationsMigratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RevokeEnterpriseOrganizationsMigratorRolePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19260 19261 19262 19263 19264 19265 19266 19267 19268 19269 19270 19271 19272 19273 19274 19275 19276 19277 19278 19279 19280 19281 19282 class RevokeEnterpriseOrganizationsMigratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organizations\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organizations = sgqlc . types . Field ( OrganizationConnection , graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) RevokeMigratorRoleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4982 4983 4984 4985 4986 4987 4988 4989 4990 4991 4992 4993 4994 4995 4996 class RevokeMigratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"actor\" , \"actor_type\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) actor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"actor\" ) actor_type = sgqlc . types . Field ( sgqlc . types . non_null ( ActorType ), graphql_name = \"actorType\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) RevokeMigratorRolePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19285 19286 19287 19288 19289 19290 19291 19292 19293 class RevokeMigratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"success\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) success = sgqlc . types . Field ( Boolean , graphql_name = \"success\" ) RoleInOrganization Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1745 1746 1747 1748 1749 1750 1751 class RoleInOrganization ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DIRECT_MEMBER\" , \"OWNER\" , \"UNAFFILIATED\" ) SamlDigestAlgorithm Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1754 1755 1756 1757 1758 1759 1760 class SamlDigestAlgorithm ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SHA1\" , \"SHA256\" , \"SHA384\" , \"SHA512\" ) SamlSignatureAlgorithm Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1763 1764 1765 1766 1767 1768 1769 class SamlSignatureAlgorithm ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"RSA_SHA1\" , \"RSA_SHA256\" , \"RSA_SHA384\" , \"RSA_SHA512\" ) SavedReply Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30314 30315 30316 30317 30318 30319 30320 30321 30322 30323 30324 30325 class SavedReply ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"body_html\" , \"database_id\" , \"title\" , \"user\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bodyHTML\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) user = sgqlc . types . Field ( Actor , graphql_name = \"user\" ) SavedReplyConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19296 19297 19298 19299 19300 19301 19302 19303 19304 19305 19306 19307 19308 19309 19310 19311 19312 class SavedReplyConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SavedReplyEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SavedReply\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SavedReplyEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19315 19316 19317 19318 19319 19320 19321 19322 19323 class SavedReplyEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SavedReply\" , graphql_name = \"node\" ) SavedReplyOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4999 5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 class SavedReplyOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SavedReplyOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SavedReplyOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1772 1773 1774 1775 1776 1777 1778 class SavedReplyOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"UPDATED_AT\" ,) SearchResultItem Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32873 32874 32875 32876 32877 32878 32879 32880 32881 32882 32883 32884 32885 32886 32887 32888 class SearchResultItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Discussion , Issue , MarketplaceListing , Organization , PullRequest , Repository , User , ) SearchResultItemConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19326 19327 19328 19329 19330 19331 19332 19333 19334 19335 19336 19337 19338 19339 19340 19341 19342 19343 19344 19345 19346 19347 19348 19349 19350 19351 19352 19353 19354 19355 19356 19357 19358 19359 19360 19361 19362 19363 class SearchResultItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"code_count\" , \"discussion_count\" , \"edges\" , \"issue_count\" , \"nodes\" , \"page_info\" , \"repository_count\" , \"user_count\" , \"wiki_count\" , ) code_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"codeCount\" ) discussion_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"discussionCount\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SearchResultItemEdge\" ), graphql_name = \"edges\" ) issue_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"issueCount\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SearchResultItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) repository_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"repositoryCount\" ) user_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"userCount\" ) wiki_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"wikiCount\" ) SearchResultItemEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19366 19367 19368 19369 19370 19371 19372 19373 19374 19375 19376 19377 class SearchResultItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"text_matches\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SearchResultItem\" , graphql_name = \"node\" ) text_matches = sgqlc . types . Field ( sgqlc . types . list_of ( \"TextMatch\" ), graphql_name = \"textMatches\" ) SearchType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1781 1782 1783 1784 1785 1786 1787 class SearchType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISCUSSION\" , \"ISSUE\" , \"REPOSITORY\" , \"USER\" ) SecurityAdvisory Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass SecurityAdvisory ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"classification\" , \"cvss\" , \"cwes\" , \"database_id\" , \"description\" , \"ghsa_id\" , \"identifiers\" , \"notifications_permalink\" , \"origin\" , \"permalink\" , \"published_at\" , \"references\" , \"severity\" , \"summary\" , \"updated_at\" , \"vulnerabilities\" , \"withdrawn_at\" , ) classification = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryClassification ), graphql_name = \"classification\" , ) cvss = sgqlc . types . Field ( sgqlc . types . non_null ( CVSS ), graphql_name = \"cvss\" ) cwes = sgqlc . types . Field ( sgqlc . types . non_null ( CWEConnection ), graphql_name = \"cwes\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) ghsa_id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"ghsaId\" ) identifiers = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryIdentifier )) ), graphql_name = \"identifiers\" , ) notifications_permalink = sgqlc . types . Field ( URI , graphql_name = \"notificationsPermalink\" ) origin = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"origin\" ) permalink = sgqlc . types . Field ( URI , graphql_name = \"permalink\" ) published_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"publishedAt\" ) references = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryReference )) ), graphql_name = \"references\" , ) severity = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisorySeverity ), graphql_name = \"severity\" ) summary = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"summary\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) vulnerabilities = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityVulnerabilityConnection ), graphql_name = \"vulnerabilities\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( SecurityVulnerabilityOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"ecosystem\" , sgqlc . types . Arg ( SecurityAdvisoryEcosystem , graphql_name = \"ecosystem\" , default = None , ), ), ( \"package\" , sgqlc . types . Arg ( String , graphql_name = \"package\" , default = None ), ), ( \"severities\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisorySeverity ) ), graphql_name = \"severities\" , default = None , ), ), ( \"classifications\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryClassification ) ), graphql_name = \"classifications\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) withdrawn_at = sgqlc . types . Field ( DateTime , graphql_name = \"withdrawnAt\" ) SecurityAdvisoryClassification Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1790 1791 1792 1793 1794 1795 1796 class SecurityAdvisoryClassification ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"GENERAL\" , \"MALWARE\" ) SecurityAdvisoryConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19380 19381 19382 19383 19384 19385 19386 19387 19388 19389 19390 19391 19392 19393 19394 19395 19396 19397 19398 class SecurityAdvisoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SecurityAdvisoryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SecurityAdvisory\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SecurityAdvisoryEcosystem Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 class SecurityAdvisoryEcosystem ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTIONS\" , \"COMPOSER\" , \"ERLANG\" , \"GO\" , \"MAVEN\" , \"NPM\" , \"NUGET\" , \"PIP\" , \"RUBYGEMS\" , \"RUST\" , ) SecurityAdvisoryEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19401 19402 19403 19404 19405 19406 19407 19408 19409 class SecurityAdvisoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SecurityAdvisory\" , graphql_name = \"node\" ) SecurityAdvisoryIdentifier Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19412 19413 19414 19415 19416 19417 19418 19419 19420 class SecurityAdvisoryIdentifier ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"type\" , \"value\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"type\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"value\" ) SecurityAdvisoryIdentifierFilter Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 class SecurityAdvisoryIdentifierFilter ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"type\" , \"value\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryIdentifierType ), graphql_name = \"type\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"value\" ) SecurityAdvisoryIdentifierType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1819 1820 1821 1822 1823 1824 1825 class SecurityAdvisoryIdentifierType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CVE\" , \"GHSA\" ) SecurityAdvisoryOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5027 5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 class SecurityAdvisoryOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SecurityAdvisoryOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1828 1829 1830 1831 1832 1833 1834 class SecurityAdvisoryOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"PUBLISHED_AT\" , \"UPDATED_AT\" ) SecurityAdvisoryPackage Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19423 19424 19425 19426 19427 19428 19429 19430 19431 19432 19433 class SecurityAdvisoryPackage ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ecosystem\" , \"name\" ) ecosystem = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryEcosystem ), graphql_name = \"ecosystem\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) SecurityAdvisoryPackageVersion Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19436 19437 19438 19439 19440 19441 19442 19443 19444 19445 class SecurityAdvisoryPackageVersion ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"identifier\" ,) identifier = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"identifier\" ) SecurityAdvisoryReference Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19448 19449 19450 19451 19452 19453 19454 19455 class SecurityAdvisoryReference ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"url\" ,) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) SecurityAdvisorySeverity Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1837 1838 1839 1840 1841 1842 1843 class SecurityAdvisorySeverity ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CRITICAL\" , \"HIGH\" , \"LOW\" , \"MODERATE\" ) SecurityVulnerability Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19458 19459 19460 19461 19462 19463 19464 19465 19466 19467 19468 19469 19470 19471 19472 19473 19474 19475 19476 19477 19478 19479 19480 19481 19482 19483 19484 19485 19486 19487 19488 19489 class SecurityVulnerability ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"advisory\" , \"first_patched_version\" , \"package\" , \"severity\" , \"updated_at\" , \"vulnerable_version_range\" , ) advisory = sgqlc . types . Field ( sgqlc . types . non_null ( \"SecurityAdvisory\" ), graphql_name = \"advisory\" ) first_patched_version = sgqlc . types . Field ( SecurityAdvisoryPackageVersion , graphql_name = \"firstPatchedVersion\" ) package = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryPackage ), graphql_name = \"package\" ) severity = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisorySeverity ), graphql_name = \"severity\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) vulnerable_version_range = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"vulnerableVersionRange\" ) SecurityVulnerabilityConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19492 19493 19494 19495 19496 19497 19498 19499 19500 19501 19502 19503 19504 19505 19506 19507 19508 19509 19510 class SecurityVulnerabilityConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SecurityVulnerabilityEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( SecurityVulnerability ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SecurityVulnerabilityEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19513 19514 19515 19516 19517 19518 19519 19520 19521 class SecurityVulnerabilityEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( SecurityVulnerability , graphql_name = \"node\" ) SecurityVulnerabilityOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 class SecurityVulnerabilityOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityVulnerabilityOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SecurityVulnerabilityOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1846 1847 1848 1849 1850 1851 1852 class SecurityVulnerabilityOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"UPDATED_AT\" ,) SetEnterpriseIdentityProviderInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069 5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083 5084 5085 5086 class SetEnterpriseIdentityProviderInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"sso_url\" , \"issuer\" , \"idp_certificate\" , \"signature_method\" , \"digest_method\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) sso_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"ssoUrl\" ) issuer = sgqlc . types . Field ( String , graphql_name = \"issuer\" ) idp_certificate = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"idpCertificate\" ) signature_method = sgqlc . types . Field ( sgqlc . types . non_null ( SamlSignatureAlgorithm ), graphql_name = \"signatureMethod\" ) digest_method = sgqlc . types . Field ( sgqlc . types . non_null ( SamlDigestAlgorithm ), graphql_name = \"digestMethod\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) SetEnterpriseIdentityProviderPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19524 19525 19526 19527 19528 19529 19530 19531 19532 19533 19534 class SetEnterpriseIdentityProviderPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"identity_provider\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) identity_provider = sgqlc . types . Field ( \"EnterpriseIdentityProvider\" , graphql_name = \"identityProvider\" ) SetOrganizationInteractionLimitInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5089 5090 5091 5092 5093 5094 5095 5096 5097 5098 5099 5100 5101 5102 5103 class SetOrganizationInteractionLimitInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"limit\" , \"expiry\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimit ), graphql_name = \"limit\" ) expiry = sgqlc . types . Field ( RepositoryInteractionLimitExpiry , graphql_name = \"expiry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) SetOrganizationInteractionLimitPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19537 19538 19539 19540 19541 19542 19543 19544 19545 class SetOrganizationInteractionLimitPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) SetRepositoryInteractionLimitInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5106 5107 5108 5109 5110 5111 5112 5113 5114 5115 5116 5117 5118 5119 5120 class SetRepositoryInteractionLimitInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"limit\" , \"expiry\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimit ), graphql_name = \"limit\" ) expiry = sgqlc . types . Field ( RepositoryInteractionLimitExpiry , graphql_name = \"expiry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) SetRepositoryInteractionLimitPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19548 19549 19550 19551 19552 19553 19554 19555 19556 class SetRepositoryInteractionLimitPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) SetUserInteractionLimitInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5123 5124 5125 5126 5127 5128 5129 5130 5131 5132 5133 5134 5135 class SetUserInteractionLimitInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"user_id\" , \"limit\" , \"expiry\" , \"client_mutation_id\" ) user_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"userId\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimit ), graphql_name = \"limit\" ) expiry = sgqlc . types . Field ( RepositoryInteractionLimitExpiry , graphql_name = \"expiry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) SetUserInteractionLimitPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19559 19560 19561 19562 19563 19564 19565 19566 19567 class SetUserInteractionLimitPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"user\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) SmimeSignature Bases: sgqlc . types . Type , GitSignature See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30463 30464 30465 30466 30467 30468 30469 class SmimeSignature ( sgqlc . types . Type , GitSignature ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () SortBy Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19570 19571 19572 19573 19574 19575 19576 19577 19578 19579 19580 class SortBy ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"direction\" , \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"field\" ) Sponsor Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32891 32892 32893 32894 32895 32896 32897 class Sponsor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Organization , User ) SponsorConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19583 19584 19585 19586 19587 19588 19589 19590 19591 19592 19593 19594 19595 19596 19597 class SponsorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Sponsor\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SponsorEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19600 19601 19602 19603 19604 19605 19606 19607 19608 class SponsorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Sponsor\" , graphql_name = \"node\" ) SponsorOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5138 5139 5140 5141 5142 5143 5144 5145 5146 5147 5148 5149 5150 class SponsorOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SponsorOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1855 1856 1857 1858 1859 1860 1861 class SponsorOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LOGIN\" , \"RELEVANCE\" ) Sponsorable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Sponsorable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"estimated_next_sponsors_payout_in_cents\" , \"has_sponsors_listing\" , \"is_sponsored_by\" , \"is_sponsoring_viewer\" , \"monthly_estimated_sponsors_income_in_cents\" , \"sponsoring\" , \"sponsors\" , \"sponsors_activities\" , \"sponsors_listing\" , \"sponsorship_for_viewer_as_sponsor\" , \"sponsorship_for_viewer_as_sponsorable\" , \"sponsorship_newsletters\" , \"sponsorships_as_maintainer\" , \"sponsorships_as_sponsor\" , \"viewer_can_sponsor\" , \"viewer_is_sponsoring\" , ) estimated_next_sponsors_payout_in_cents = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"estimatedNextSponsorsPayoutInCents\" ) has_sponsors_listing = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasSponsorsListing\" ) is_sponsored_by = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSponsoredBy\" , args = sgqlc . types . ArgDict ( ( ( \"account_login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"accountLogin\" , default = None , ), ), ) ), ) is_sponsoring_viewer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSponsoringViewer\" ) monthly_estimated_sponsors_income_in_cents = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"monthlyEstimatedSponsorsIncomeInCents\" ) sponsoring = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorConnection ), graphql_name = \"sponsoring\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, ), ), ) ), ) sponsors = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorConnection ), graphql_name = \"sponsors\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"tier_id\" , sgqlc . types . Arg ( ID , graphql_name = \"tierId\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, ), ), ) ), ) sponsors_activities = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorsActivityConnection\" ), graphql_name = \"sponsorsActivities\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"period\" , sgqlc . types . Arg ( SponsorsActivityPeriod , graphql_name = \"period\" , default = \"MONTH\" ), ), ( \"order_by\" , sgqlc . types . Arg ( SponsorsActivityOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" }, ), ), ( \"actions\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SponsorsActivityAction ) ), graphql_name = \"actions\" , default = (), ), ), ) ), ) sponsors_listing = sgqlc . types . Field ( \"SponsorsListing\" , graphql_name = \"sponsorsListing\" ) sponsorship_for_viewer_as_sponsor = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"sponsorshipForViewerAsSponsor\" ) sponsorship_for_viewer_as_sponsorable = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"sponsorshipForViewerAsSponsorable\" ) sponsorship_newsletters = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorshipNewsletterConnection\" ), graphql_name = \"sponsorshipNewsletters\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorshipNewsletterOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) sponsorships_as_maintainer = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorshipConnection\" ), graphql_name = \"sponsorshipsAsMaintainer\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"include_private\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includePrivate\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( SponsorshipOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) sponsorships_as_sponsor = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorshipConnection\" ), graphql_name = \"sponsorshipsAsSponsor\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorshipOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) viewer_can_sponsor = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanSponsor\" ) viewer_is_sponsoring = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsSponsoring\" ) SponsorableItem Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32900 32901 32902 32903 32904 32905 32906 class SponsorableItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Organization , User ) SponsorableItemConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19837 19838 19839 19840 19841 19842 19843 19844 19845 19846 19847 19848 19849 19850 19851 19852 19853 19854 19855 class SponsorableItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorableItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorableItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SponsorableItemEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19858 19859 19860 19861 19862 19863 19864 19865 19866 class SponsorableItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SponsorableItem\" , graphql_name = \"node\" ) SponsorableOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5153 5154 5155 5156 5157 5158 5159 5160 5161 5162 5163 5164 5165 class SponsorableOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorableOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SponsorableOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1864 1865 1866 1867 1868 1869 1870 class SponsorableOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LOGIN\" ,) SponsorsActivity Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30472 30473 30474 30475 30476 30477 30478 30479 30480 30481 30482 30483 30484 30485 30486 30487 30488 30489 30490 30491 30492 30493 30494 30495 30496 30497 class SponsorsActivity ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"action\" , \"previous_sponsors_tier\" , \"sponsor\" , \"sponsorable\" , \"sponsors_tier\" , \"timestamp\" , ) action = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsActivityAction ), graphql_name = \"action\" ) previous_sponsors_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"previousSponsorsTier\" ) sponsor = sgqlc . types . Field ( \"Sponsor\" , graphql_name = \"sponsor\" ) sponsorable = sgqlc . types . Field ( sgqlc . types . non_null ( Sponsorable ), graphql_name = \"sponsorable\" ) sponsors_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"sponsorsTier\" ) timestamp = sgqlc . types . Field ( DateTime , graphql_name = \"timestamp\" ) SponsorsActivityAction Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 class SponsorsActivityAction ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CANCELLED_SPONSORSHIP\" , \"NEW_SPONSORSHIP\" , \"PENDING_CHANGE\" , \"REFUND\" , \"SPONSOR_MATCH_DISABLED\" , \"TIER_CHANGE\" , ) SponsorsActivityConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19869 19870 19871 19872 19873 19874 19875 19876 19877 19878 19879 19880 19881 19882 19883 19884 19885 19886 19887 class SponsorsActivityConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorsActivityEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorsActivity\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SponsorsActivityEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19890 19891 19892 19893 19894 19895 19896 19897 19898 class SponsorsActivityEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SponsorsActivity\" , graphql_name = \"node\" ) SponsorsActivityOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5168 5169 5170 5171 5172 5173 5174 5175 5176 5177 5178 5179 5180 class SponsorsActivityOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsActivityOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SponsorsActivityOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1889 1890 1891 1892 1893 1894 1895 class SponsorsActivityOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"TIMESTAMP\" ,) SponsorsActivityPeriod Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1898 1899 1900 1901 1902 1903 1904 class SponsorsActivityPeriod ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"DAY\" , \"MONTH\" , \"WEEK\" ) SponsorsGoal Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19901 19902 19903 19904 19905 19906 19907 19908 19909 19910 19911 19912 19913 19914 19915 19916 19917 19918 19919 19920 19921 19922 19923 19924 class SponsorsGoal ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"description\" , \"kind\" , \"percent_complete\" , \"target_value\" , \"title\" , ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) kind = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsGoalKind ), graphql_name = \"kind\" ) percent_complete = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"percentComplete\" ) target_value = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"targetValue\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) SponsorsGoalKind Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1907 1908 1909 1910 1911 1912 1913 class SponsorsGoalKind ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MONTHLY_SPONSORSHIP_AMOUNT\" , \"TOTAL_SPONSORS_COUNT\" ) SponsorsListing Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30500 30501 30502 30503 30504 30505 30506 30507 30508 30509 30510 30511 30512 30513 30514 30515 30516 30517 30518 30519 30520 30521 30522 30523 30524 30525 30526 30527 30528 30529 30530 30531 30532 30533 30534 30535 30536 30537 30538 30539 30540 30541 30542 30543 30544 30545 30546 30547 30548 30549 30550 30551 30552 30553 30554 30555 30556 30557 30558 30559 30560 30561 30562 30563 30564 30565 30566 30567 30568 30569 30570 30571 30572 30573 30574 30575 30576 30577 class SponsorsListing ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"active_goal\" , \"created_at\" , \"dashboard_resource_path\" , \"dashboard_url\" , \"full_description\" , \"full_description_html\" , \"is_public\" , \"name\" , \"next_payout_date\" , \"resource_path\" , \"short_description\" , \"slug\" , \"sponsorable\" , \"tiers\" , \"url\" , ) active_goal = sgqlc . types . Field ( SponsorsGoal , graphql_name = \"activeGoal\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) dashboard_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"dashboardResourcePath\" ) dashboard_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"dashboardUrl\" ) full_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"fullDescription\" ) full_description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"fullDescriptionHTML\" ) is_public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPublic\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) next_payout_date = sgqlc . types . Field ( Date , graphql_name = \"nextPayoutDate\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) short_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"shortDescription\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) sponsorable = sgqlc . types . Field ( sgqlc . types . non_null ( Sponsorable ), graphql_name = \"sponsorable\" ) tiers = sgqlc . types . Field ( SponsorsTierConnection , graphql_name = \"tiers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorsTierOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"MONTHLY_PRICE_IN_CENTS\" , \"direction\" : \"ASC\" }, ), ), ) ), ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) SponsorsTier Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30580 30581 30582 30583 30584 30585 30586 30587 30588 30589 30590 30591 30592 30593 30594 30595 30596 30597 30598 30599 30600 30601 30602 30603 30604 30605 30606 30607 30608 30609 30610 30611 30612 30613 30614 30615 30616 30617 30618 30619 30620 30621 30622 30623 30624 30625 30626 30627 30628 30629 30630 30631 class SponsorsTier ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"admin_info\" , \"closest_lesser_value_tier\" , \"created_at\" , \"description\" , \"description_html\" , \"is_custom_amount\" , \"is_one_time\" , \"monthly_price_in_cents\" , \"monthly_price_in_dollars\" , \"name\" , \"sponsors_listing\" , \"updated_at\" , ) admin_info = sgqlc . types . Field ( SponsorsTierAdminInfo , graphql_name = \"adminInfo\" ) closest_lesser_value_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"closestLesserValueTier\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"descriptionHTML\" ) is_custom_amount = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCustomAmount\" ) is_one_time = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOneTime\" ) monthly_price_in_cents = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"monthlyPriceInCents\" ) monthly_price_in_dollars = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"monthlyPriceInDollars\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) sponsors_listing = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsListing ), graphql_name = \"sponsorsListing\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) SponsorsTierAdminInfo Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19927 19928 19929 19930 19931 19932 19933 19934 19935 19936 19937 19938 19939 19940 19941 19942 19943 19944 19945 19946 19947 19948 19949 19950 19951 19952 19953 19954 19955 19956 19957 19958 19959 19960 class SponsorsTierAdminInfo ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsorships\" ,) sponsorships = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorshipConnection\" ), graphql_name = \"sponsorships\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"include_private\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includePrivate\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( SponsorshipOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) SponsorsTierConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19963 19964 19965 19966 19967 19968 19969 19970 19971 19972 19973 19974 19975 19976 19977 19978 19979 class SponsorsTierConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorsTierEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorsTier\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SponsorsTierEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19982 19983 19984 19985 19986 19987 19988 19989 19990 class SponsorsTierEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"node\" ) SponsorsTierOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5183 5184 5185 5186 5187 5188 5189 5190 5191 5192 5193 5194 5195 class SponsorsTierOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsTierOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SponsorsTierOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1916 1917 1918 1919 1920 1921 1922 class SponsorsTierOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"MONTHLY_PRICE_IN_CENTS\" ) Sponsorship Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30634 30635 30636 30637 30638 30639 30640 30641 30642 30643 30644 30645 30646 30647 30648 30649 30650 30651 30652 30653 30654 30655 30656 30657 30658 30659 30660 30661 30662 30663 30664 30665 30666 30667 30668 30669 30670 30671 30672 30673 class Sponsorship ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"is_one_time_payment\" , \"is_sponsor_opted_into_email\" , \"maintainer\" , \"privacy_level\" , \"sponsor\" , \"sponsor_entity\" , \"sponsorable\" , \"tier\" , \"tier_selected_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_one_time_payment = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOneTimePayment\" ) is_sponsor_opted_into_email = sgqlc . types . Field ( Boolean , graphql_name = \"isSponsorOptedIntoEmail\" ) maintainer = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"maintainer\" ) privacy_level = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorshipPrivacy ), graphql_name = \"privacyLevel\" ) sponsor = sgqlc . types . Field ( \"User\" , graphql_name = \"sponsor\" ) sponsor_entity = sgqlc . types . Field ( \"Sponsor\" , graphql_name = \"sponsorEntity\" ) sponsorable = sgqlc . types . Field ( sgqlc . types . non_null ( Sponsorable ), graphql_name = \"sponsorable\" ) tier = sgqlc . types . Field ( SponsorsTier , graphql_name = \"tier\" ) tier_selected_at = sgqlc . types . Field ( DateTime , graphql_name = \"tierSelectedAt\" ) SponsorshipConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19993 19994 19995 19996 19997 19998 19999 20000 20001 20002 20003 20004 20005 20006 20007 20008 20009 20010 20011 20012 20013 20014 20015 20016 20017 20018 20019 20020 20021 20022 class SponsorshipConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"total_recurring_monthly_price_in_cents\" , \"total_recurring_monthly_price_in_dollars\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorshipEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Sponsorship\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) total_recurring_monthly_price_in_cents = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRecurringMonthlyPriceInCents\" ) total_recurring_monthly_price_in_dollars = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRecurringMonthlyPriceInDollars\" ) SponsorshipEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20025 20026 20027 20028 20029 20030 20031 20032 20033 class SponsorshipEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"node\" ) SponsorshipNewsletter Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30676 30677 30678 30679 30680 30681 30682 30683 30684 30685 30686 30687 30688 30689 30690 30691 30692 30693 30694 30695 30696 30697 30698 30699 30700 30701 30702 30703 class SponsorshipNewsletter ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"created_at\" , \"is_published\" , \"sponsorable\" , \"subject\" , \"updated_at\" , ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_published = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPublished\" ) sponsorable = sgqlc . types . Field ( sgqlc . types . non_null ( Sponsorable ), graphql_name = \"sponsorable\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"subject\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) SponsorshipNewsletterConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20036 20037 20038 20039 20040 20041 20042 20043 20044 20045 20046 20047 20048 20049 20050 20051 20052 20053 20054 class SponsorshipNewsletterConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorshipNewsletterEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorshipNewsletter\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SponsorshipNewsletterEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20057 20058 20059 20060 20061 20062 20063 20064 20065 class SponsorshipNewsletterEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SponsorshipNewsletter\" , graphql_name = \"node\" ) SponsorshipNewsletterOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5198 5199 5200 5201 5202 5203 5204 5205 5206 5207 5208 5209 5210 class SponsorshipNewsletterOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorshipNewsletterOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SponsorshipNewsletterOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1925 1926 1927 1928 1929 1930 1931 class SponsorshipNewsletterOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) SponsorshipOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5213 5214 5215 5216 5217 5218 5219 5220 5221 5222 5223 5224 5225 class SponsorshipOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorshipOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) SponsorshipOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1934 1935 1936 1937 1938 1939 1940 class SponsorshipOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) SponsorshipPrivacy Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1943 1944 1945 1946 1947 1948 1949 class SponsorshipPrivacy ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"PRIVATE\" , \"PUBLIC\" ) SquashMergeCommitMessage Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1952 1953 1954 1955 1956 1957 1958 class SquashMergeCommitMessage ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BLANK\" , \"COMMIT_MESSAGES\" , \"PR_BODY\" ) SquashMergeCommitTitle Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1961 1962 1963 1964 1965 1966 1967 class SquashMergeCommitTitle ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMIT_OR_PR_TITLE\" , \"PR_TITLE\" ) SshSignature Bases: sgqlc . types . Type , GitSignature See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30706 30707 30708 30709 30710 30711 30712 30713 class SshSignature ( sgqlc . types . Type , GitSignature ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"key_fingerprint\" ,) key_fingerprint = sgqlc . types . Field ( String , graphql_name = \"keyFingerprint\" ) StarOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5228 5229 5230 5231 5232 5233 5234 5235 5236 5237 5238 5239 5240 class StarOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( StarOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) StarOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1970 1971 1972 1973 1974 1975 1976 class StarOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"STARRED_AT\" ,) StargazerConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20068 20069 20070 20071 20072 20073 20074 20075 20076 20077 20078 20079 20080 20081 20082 20083 20084 class StargazerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"StargazerEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) StargazerEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20087 20088 20089 20090 20091 20092 20093 20094 20095 20096 20097 20098 class StargazerEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"starred_at\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"node\" ) starred_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"starredAt\" ) Starrable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20101 20102 20103 20104 20105 20106 20107 20108 20109 20110 20111 20112 20113 20114 20115 20116 20117 20118 20119 20120 20121 20122 20123 20124 20125 20126 20127 20128 20129 20130 20131 20132 20133 class Starrable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"stargazer_count\" , \"stargazers\" , \"viewer_has_starred\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) stargazer_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"stargazerCount\" ) stargazers = sgqlc . types . Field ( sgqlc . types . non_null ( StargazerConnection ), graphql_name = \"stargazers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( StarOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) viewer_has_starred = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasStarred\" ) StarredRepositoryConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20136 20137 20138 20139 20140 20141 20142 20143 20144 20145 20146 20147 20148 20149 20150 20151 20152 20153 20154 20155 class StarredRepositoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"is_over_limit\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"StarredRepositoryEdge\" ), graphql_name = \"edges\" ) is_over_limit = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOverLimit\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Repository\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) StarredRepositoryEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20158 20159 20160 20161 20162 20163 20164 20165 20166 20167 20168 20169 class StarredRepositoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"starred_at\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"node\" ) starred_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"starredAt\" ) StartRepositoryMigrationInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5243 5244 5245 5246 5247 5248 5249 5250 5251 5252 5253 5254 5255 5256 5257 5258 5259 5260 5261 5262 5263 5264 5265 5266 5267 5268 5269 5270 5271 5272 5273 5274 5275 5276 5277 5278 5279 5280 5281 5282 5283 5284 class StartRepositoryMigrationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"source_id\" , \"owner_id\" , \"source_repository_url\" , \"repository_name\" , \"continue_on_error\" , \"git_archive_url\" , \"metadata_archive_url\" , \"access_token\" , \"github_pat\" , \"skip_releases\" , \"target_repo_visibility\" , \"lock_source\" , \"client_mutation_id\" , ) source_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"sourceId\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) source_repository_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"sourceRepositoryUrl\" ) repository_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"repositoryName\" ) continue_on_error = sgqlc . types . Field ( Boolean , graphql_name = \"continueOnError\" ) git_archive_url = sgqlc . types . Field ( String , graphql_name = \"gitArchiveUrl\" ) metadata_archive_url = sgqlc . types . Field ( String , graphql_name = \"metadataArchiveUrl\" ) access_token = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"accessToken\" ) github_pat = sgqlc . types . Field ( String , graphql_name = \"githubPat\" ) skip_releases = sgqlc . types . Field ( Boolean , graphql_name = \"skipReleases\" ) target_repo_visibility = sgqlc . types . Field ( String , graphql_name = \"targetRepoVisibility\" ) lock_source = sgqlc . types . Field ( Boolean , graphql_name = \"lockSource\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) StartRepositoryMigrationPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20172 20173 20174 20175 20176 20177 20178 20179 20180 20181 20182 class StartRepositoryMigrationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository_migration\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository_migration = sgqlc . types . Field ( \"RepositoryMigration\" , graphql_name = \"repositoryMigration\" ) Status Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30716 30717 30718 30719 30720 30721 30722 30723 30724 30725 30726 30727 30728 30729 30730 30731 30732 30733 30734 30735 30736 30737 30738 30739 30740 30741 30742 30743 30744 30745 30746 30747 30748 30749 30750 30751 30752 30753 30754 30755 30756 30757 30758 30759 class Status ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"combined_contexts\" , \"commit\" , \"context\" , \"contexts\" , \"state\" ) combined_contexts = sgqlc . types . Field ( sgqlc . types . non_null ( StatusCheckRollupContextConnection ), graphql_name = \"combinedContexts\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) context = sgqlc . types . Field ( \"StatusContext\" , graphql_name = \"context\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) contexts = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"StatusContext\" )) ), graphql_name = \"contexts\" , ) state = sgqlc . types . Field ( sgqlc . types . non_null ( StatusState ), graphql_name = \"state\" ) StatusCheckRollup Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30762 30763 30764 30765 30766 30767 30768 30769 30770 30771 30772 30773 30774 30775 30776 30777 30778 30779 30780 30781 30782 30783 30784 30785 class StatusCheckRollup ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"contexts\" , \"state\" ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) contexts = sgqlc . types . Field ( sgqlc . types . non_null ( StatusCheckRollupContextConnection ), graphql_name = \"contexts\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) state = sgqlc . types . Field ( sgqlc . types . non_null ( StatusState ), graphql_name = \"state\" ) StatusCheckRollupContext Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32909 32910 32911 32912 32913 32914 32915 class StatusCheckRollupContext ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( CheckRun , StatusContext ) StatusCheckRollupContextConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20185 20186 20187 20188 20189 20190 20191 20192 20193 20194 20195 20196 20197 20198 20199 20200 20201 20202 20203 20204 20205 20206 20207 20208 20209 20210 20211 20212 20213 20214 20215 20216 20217 20218 20219 20220 20221 20222 20223 20224 20225 20226 class StatusCheckRollupContextConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_run_count\" , \"check_run_counts_by_state\" , \"edges\" , \"nodes\" , \"page_info\" , \"status_context_count\" , \"status_context_counts_by_state\" , \"total_count\" , ) check_run_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"checkRunCount\" ) check_run_counts_by_state = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckRunStateCount )), graphql_name = \"checkRunCountsByState\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"StatusCheckRollupContextEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"StatusCheckRollupContext\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) status_context_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"statusContextCount\" ) status_context_counts_by_state = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"StatusContextStateCount\" )), graphql_name = \"statusContextCountsByState\" , ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) StatusCheckRollupContextEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20229 20230 20231 20232 20233 20234 20235 20236 20237 class StatusCheckRollupContextEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"StatusCheckRollupContext\" , graphql_name = \"node\" ) StatusContext Bases: sgqlc . types . Type , RequirableByPullRequest , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30788 30789 30790 30791 30792 30793 30794 30795 30796 30797 30798 30799 30800 30801 30802 30803 30804 30805 30806 30807 30808 30809 30810 30811 30812 30813 30814 30815 30816 30817 30818 30819 class StatusContext ( sgqlc . types . Type , RequirableByPullRequest , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"commit\" , \"context\" , \"created_at\" , \"creator\" , \"description\" , \"state\" , \"target_url\" , ) avatar_url = sgqlc . types . Field ( URI , graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = 40 )),) ), ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) context = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"context\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( StatusState ), graphql_name = \"state\" ) target_url = sgqlc . types . Field ( URI , graphql_name = \"targetUrl\" ) StatusContextStateCount Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20240 20241 20242 20243 20244 20245 20246 20247 20248 class StatusContextStateCount ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"count\" , \"state\" ) count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"count\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( StatusState ), graphql_name = \"state\" ) StatusState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1979 1980 1981 1982 1983 1984 1985 class StatusState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ERROR\" , \"EXPECTED\" , \"FAILURE\" , \"PENDING\" , \"SUCCESS\" ) SubmitPullRequestReviewInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5287 5288 5289 5290 5291 5292 5293 5294 5295 5296 5297 5298 5299 5300 5301 5302 5303 5304 5305 5306 class SubmitPullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"pull_request_review_id\" , \"event\" , \"body\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestId\" ) pull_request_review_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestReviewId\" ) event = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewEvent ), graphql_name = \"event\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) SubmitPullRequestReviewPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20251 20252 20253 20254 20255 20256 20257 20258 20259 20260 20261 class SubmitPullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" ) Submodule Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20264 20265 20266 20267 20268 20269 20270 20271 20272 20273 20274 20275 20276 20277 class Submodule ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch\" , \"git_url\" , \"name\" , \"path\" , \"subproject_commit_oid\" ) branch = sgqlc . types . Field ( String , graphql_name = \"branch\" ) git_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"gitUrl\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) subproject_commit_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"subprojectCommitOid\" ) SubmoduleConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20280 20281 20282 20283 20284 20285 20286 20287 20288 20289 20290 20291 20292 20293 20294 20295 20296 class SubmoduleConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SubmoduleEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( Submodule ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) SubmoduleEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20299 20300 20301 20302 20303 20304 20305 20306 20307 class SubmoduleEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( Submodule , graphql_name = \"node\" ) Subscribable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20310 20311 20312 20313 20314 20315 20316 20317 20318 20319 20320 20321 20322 20323 class Subscribable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"viewer_can_subscribe\" , \"viewer_subscription\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) viewer_can_subscribe = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanSubscribe\" ) viewer_subscription = sgqlc . types . Field ( SubscriptionState , graphql_name = \"viewerSubscription\" ) SubscribedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30822 30823 30824 30825 30826 30827 30828 30829 30830 30831 30832 30833 30834 30835 class SubscribedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"subscribable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) subscribable = sgqlc . types . Field ( sgqlc . types . non_null ( Subscribable ), graphql_name = \"subscribable\" ) SubscriptionState Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1991 1992 1993 1994 1995 1996 1997 class SubscriptionState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"IGNORED\" , \"SUBSCRIBED\" , \"UNSUBSCRIBED\" ) SuggestedReviewer Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20326 20327 20328 20329 20330 20331 20332 20333 20334 20335 20336 20337 20338 20339 class SuggestedReviewer ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_author\" , \"is_commenter\" , \"reviewer\" ) is_author = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isAuthor\" ) is_commenter = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCommenter\" ) reviewer = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"reviewer\" ) Tag Bases: sgqlc . types . Type , Node , GitObject See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30838 30839 30840 30841 30842 30843 30844 30845 30846 30847 30848 class Tag ( sgqlc . types . Type , Node , GitObject ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"message\" , \"name\" , \"tagger\" , \"target\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) tagger = sgqlc . types . Field ( GitActor , graphql_name = \"tagger\" ) target = sgqlc . types . Field ( sgqlc . types . non_null ( GitObject ), graphql_name = \"target\" ) Team Bases: sgqlc . types . Type , Node , Subscribable , MemberStatusable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Team ( sgqlc . types . Type , Node , Subscribable , MemberStatusable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ancestors\" , \"avatar_url\" , \"child_teams\" , \"combined_slug\" , \"created_at\" , \"database_id\" , \"description\" , \"discussion\" , \"discussions\" , \"discussions_resource_path\" , \"discussions_url\" , \"edit_team_resource_path\" , \"edit_team_url\" , \"invitations\" , \"members\" , \"members_resource_path\" , \"members_url\" , \"name\" , \"new_team_resource_path\" , \"new_team_url\" , \"organization\" , \"parent_team\" , \"privacy\" , \"repositories\" , \"repositories_resource_path\" , \"repositories_url\" , \"resource_path\" , \"slug\" , \"teams_resource_path\" , \"teams_url\" , \"updated_at\" , \"url\" , \"viewer_can_administer\" , ) ancestors = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"ancestors\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) avatar_url = sgqlc . types . Field ( URI , graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = 400 )),) ), ) child_teams = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"childTeams\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( TeamOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"user_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"userLogins\" , default = None , ), ), ( \"immediate_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"immediateOnly\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) combined_slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"combinedSlug\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) discussion = sgqlc . types . Field ( \"TeamDiscussion\" , graphql_name = \"discussion\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) discussions = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussionConnection ), graphql_name = \"discussions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"is_pinned\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isPinned\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( TeamDiscussionOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) discussions_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"discussionsResourcePath\" ) discussions_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"discussionsUrl\" ) edit_team_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"editTeamResourcePath\" ) edit_team_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"editTeamUrl\" ) invitations = sgqlc . types . Field ( OrganizationInvitationConnection , graphql_name = \"invitations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) members = sgqlc . types . Field ( sgqlc . types . non_null ( TeamMemberConnection ), graphql_name = \"members\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"membership\" , sgqlc . types . Arg ( TeamMembershipType , graphql_name = \"membership\" , default = \"ALL\" ), ), ( \"role\" , sgqlc . types . Arg ( TeamMemberRole , graphql_name = \"role\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( TeamMemberOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) members_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"membersResourcePath\" ) members_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"membersUrl\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) new_team_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"newTeamResourcePath\" ) new_team_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"newTeamUrl\" ) organization = sgqlc . types . Field ( sgqlc . types . non_null ( Organization ), graphql_name = \"organization\" ) parent_team = sgqlc . types . Field ( \"Team\" , graphql_name = \"parentTeam\" ) privacy = sgqlc . types . Field ( sgqlc . types . non_null ( TeamPrivacy ), graphql_name = \"privacy\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( TeamRepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( TeamRepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) repositories_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"repositoriesResourcePath\" ) repositories_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"repositoriesUrl\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) teams_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsResourcePath\" ) teams_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsUrl\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) viewer_can_administer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanAdminister\" ) TeamAddMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31118 31119 31120 31121 31122 31123 31124 31125 31126 31127 class TeamAddMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" ,) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" ) TeamAddRepositoryAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31130 31131 31132 31133 31134 31135 31136 31137 31138 31139 31140 31141 31142 31143 31144 class TeamAddRepositoryAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , TeamAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" ,) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" ) TeamAuditEntryData Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20342 20343 20344 20345 20346 20347 20348 20349 20350 20351 20352 class TeamAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"team\" , \"team_name\" , \"team_resource_path\" , \"team_url\" ) team = sgqlc . types . Field ( \"Team\" , graphql_name = \"team\" ) team_name = sgqlc . types . Field ( String , graphql_name = \"teamName\" ) team_resource_path = sgqlc . types . Field ( URI , graphql_name = \"teamResourcePath\" ) team_url = sgqlc . types . Field ( URI , graphql_name = \"teamUrl\" ) TeamChangeParentTeamAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31147 31148 31149 31150 31151 31152 31153 31154 31155 31156 31157 31158 31159 31160 31161 31162 31163 31164 31165 31166 31167 31168 31169 31170 31171 31172 31173 31174 31175 31176 31177 31178 class TeamChangeParentTeamAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" , \"parent_team\" , \"parent_team_name\" , \"parent_team_name_was\" , \"parent_team_resource_path\" , \"parent_team_url\" , \"parent_team_was\" , \"parent_team_was_resource_path\" , \"parent_team_was_url\" , ) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" ) parent_team = sgqlc . types . Field ( Team , graphql_name = \"parentTeam\" ) parent_team_name = sgqlc . types . Field ( String , graphql_name = \"parentTeamName\" ) parent_team_name_was = sgqlc . types . Field ( String , graphql_name = \"parentTeamNameWas\" ) parent_team_resource_path = sgqlc . types . Field ( URI , graphql_name = \"parentTeamResourcePath\" ) parent_team_url = sgqlc . types . Field ( URI , graphql_name = \"parentTeamUrl\" ) parent_team_was = sgqlc . types . Field ( Team , graphql_name = \"parentTeamWas\" ) parent_team_was_resource_path = sgqlc . types . Field ( URI , graphql_name = \"parentTeamWasResourcePath\" ) parent_team_was_url = sgqlc . types . Field ( URI , graphql_name = \"parentTeamWasUrl\" ) TeamConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20355 20356 20357 20358 20359 20360 20361 20362 20363 20364 20365 20366 20367 20368 20369 class TeamConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Team\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) TeamDiscussion Bases: sgqlc . types . Type , Node , Comment , Deletable , Reactable , Subscribable , UniformResourceLocatable , Updatable , UpdatableComment See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31181 31182 31183 31184 31185 31186 31187 31188 31189 31190 31191 31192 31193 31194 31195 31196 31197 31198 31199 31200 31201 31202 31203 31204 31205 31206 31207 31208 31209 31210 31211 31212 31213 31214 31215 31216 31217 31218 31219 31220 31221 31222 31223 31224 31225 31226 31227 31228 31229 31230 31231 31232 31233 31234 31235 31236 31237 31238 31239 31240 31241 31242 31243 31244 31245 31246 31247 31248 31249 31250 31251 31252 31253 31254 class TeamDiscussion ( sgqlc . types . Type , Node , Comment , Deletable , Reactable , Subscribable , UniformResourceLocatable , Updatable , UpdatableComment , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body_version\" , \"comments\" , \"comments_resource_path\" , \"comments_url\" , \"is_pinned\" , \"is_private\" , \"number\" , \"team\" , \"title\" , \"viewer_can_pin\" , ) body_version = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"bodyVersion\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussionCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( TeamDiscussionCommentOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"from_comment\" , sgqlc . types . Arg ( Int , graphql_name = \"fromComment\" , default = None ), ), ) ), ) comments_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"commentsResourcePath\" ) comments_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"commentsUrl\" ) is_pinned = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPinned\" ) is_private = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrivate\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) team = sgqlc . types . Field ( sgqlc . types . non_null ( Team ), graphql_name = \"team\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) viewer_can_pin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanPin\" ) TeamDiscussionComment Bases: sgqlc . types . Type , Node , Comment , Deletable , Reactable , UniformResourceLocatable , Updatable , UpdatableComment See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31257 31258 31259 31260 31261 31262 31263 31264 31265 31266 31267 31268 31269 31270 31271 31272 31273 31274 31275 31276 31277 31278 31279 class TeamDiscussionComment ( sgqlc . types . Type , Node , Comment , Deletable , Reactable , UniformResourceLocatable , Updatable , UpdatableComment , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body_version\" , \"discussion\" , \"number\" ) body_version = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"bodyVersion\" ) discussion = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussion ), graphql_name = \"discussion\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) TeamDiscussionCommentConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20372 20373 20374 20375 20376 20377 20378 20379 20380 20381 20382 20383 20384 20385 20386 20387 20388 20389 20390 class TeamDiscussionCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamDiscussionCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamDiscussionComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) TeamDiscussionCommentEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20393 20394 20395 20396 20397 20398 20399 20400 20401 class TeamDiscussionCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"TeamDiscussionComment\" , graphql_name = \"node\" ) TeamDiscussionCommentOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5309 5310 5311 5312 5313 5314 5315 5316 5317 5318 5319 5320 5321 class TeamDiscussionCommentOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussionCommentOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) TeamDiscussionCommentOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2000 2001 2002 2003 2004 2005 2006 class TeamDiscussionCommentOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"NUMBER\" ,) TeamDiscussionConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20404 20405 20406 20407 20408 20409 20410 20411 20412 20413 20414 20415 20416 20417 20418 20419 20420 20421 20422 class TeamDiscussionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamDiscussionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamDiscussion\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) TeamDiscussionEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20425 20426 20427 20428 20429 20430 20431 20432 20433 class TeamDiscussionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"TeamDiscussion\" , graphql_name = \"node\" ) TeamDiscussionOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5324 5325 5326 5327 5328 5329 5330 5331 5332 5333 5334 5335 5336 class TeamDiscussionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) TeamDiscussionOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2009 2010 2011 2012 2013 2014 2015 class TeamDiscussionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) TeamEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20436 20437 20438 20439 20440 20441 20442 20443 20444 class TeamEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Team\" , graphql_name = \"node\" ) TeamMemberConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20447 20448 20449 20450 20451 20452 20453 20454 20455 20456 20457 20458 20459 20460 20461 20462 20463 class TeamMemberConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamMemberEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) TeamMemberEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20466 20467 20468 20469 20470 20471 20472 20473 20474 20475 20476 20477 20478 20479 20480 20481 20482 20483 20484 20485 20486 20487 class TeamMemberEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"member_access_resource_path\" , \"member_access_url\" , \"node\" , \"role\" , ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) member_access_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"memberAccessResourcePath\" ) member_access_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"memberAccessUrl\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"node\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( TeamMemberRole ), graphql_name = \"role\" ) TeamMemberOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5339 5340 5341 5342 5343 5344 5345 5346 5347 5348 5349 5350 5351 class TeamMemberOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamMemberOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) TeamMemberOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2018 2019 2020 2021 2022 2023 2024 class TeamMemberOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"LOGIN\" ) TeamMemberRole Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2027 2028 2029 2030 2031 2032 2033 class TeamMemberRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MAINTAINER\" , \"MEMBER\" ) TeamMembershipType Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2036 2037 2038 2039 2040 2041 2042 class TeamMembershipType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"CHILD_TEAM\" , \"IMMEDIATE\" ) TeamOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5354 5355 5356 5357 5358 5359 5360 5361 5362 5363 5364 5365 5366 class TeamOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) TeamOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2045 2046 2047 2048 2049 2050 2051 class TeamOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"NAME\" ,) TeamPrivacy Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2054 2055 2056 2057 2058 2059 2060 class TeamPrivacy ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SECRET\" , \"VISIBLE\" ) TeamRemoveMemberAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31282 31283 31284 31285 31286 31287 31288 31289 31290 31291 class TeamRemoveMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" ,) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" ) TeamRemoveRepositoryAuditEntry Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31294 31295 31296 31297 31298 31299 31300 31301 31302 31303 31304 31305 31306 31307 31308 class TeamRemoveRepositoryAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , TeamAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" ,) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" ) TeamRepositoryConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20490 20491 20492 20493 20494 20495 20496 20497 20498 20499 20500 20501 20502 20503 20504 20505 20506 class TeamRepositoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamRepositoryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Repository\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) TeamRepositoryEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20509 20510 20511 20512 20513 20514 20515 20516 20517 20518 20519 20520 class TeamRepositoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"permission\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"node\" ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryPermission ), graphql_name = \"permission\" ) TeamRepositoryOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5369 5370 5371 5372 5373 5374 5375 5376 5377 5378 5379 5380 5381 class TeamRepositoryOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamRepositoryOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) TeamRepositoryOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 class TeamRepositoryOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"PERMISSION\" , \"PUSHED_AT\" , \"STARGAZERS\" , \"UPDATED_AT\" , ) TeamRole Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2079 2080 2081 2082 2083 2084 2085 class TeamRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"MEMBER\" ) TextMatch Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20523 20524 20525 20526 20527 20528 20529 20530 20531 20532 20533 20534 20535 20536 20537 class TextMatch ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"fragment\" , \"highlights\" , \"property\" ) fragment = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"fragment\" ) highlights = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"TextMatchHighlight\" )) ), graphql_name = \"highlights\" , ) property = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"property\" ) TextMatchHighlight Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20540 20541 20542 20543 20544 20545 20546 20547 20548 20549 20550 20551 class TextMatchHighlight ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"begin_indice\" , \"end_indice\" , \"text\" ) begin_indice = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"beginIndice\" ) end_indice = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"endIndice\" ) text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"text\" ) Topic Bases: sgqlc . types . Type , Node , Starrable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31311 31312 31313 31314 31315 31316 31317 31318 31319 31320 31321 31322 31323 31324 31325 31326 31327 31328 31329 31330 31331 31332 31333 31334 31335 31336 31337 31338 31339 31340 31341 31342 31343 31344 31345 31346 31347 31348 31349 31350 31351 31352 31353 31354 31355 31356 31357 31358 31359 31360 31361 31362 31363 31364 31365 31366 31367 31368 31369 31370 31371 31372 31373 31374 31375 31376 31377 31378 class Topic ( sgqlc . types . Type , Node , Starrable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"related_topics\" , \"repositories\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) related_topics = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"Topic\" ))), graphql_name = \"relatedTopics\" , args = sgqlc . types . ArgDict ( (( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = 3 )),) ), ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"affiliations\" , default = None , ), ), ( \"owner_affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"ownerAffiliations\" , default = ( \"OWNER\" , \"COLLABORATOR\" ), ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"sponsorable_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"sponsorableOnly\" , default = False ), ), ) ), ) TopicAuditEntryData Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20554 20555 20556 20557 20558 20559 20560 20561 20562 class TopicAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"topic\" , \"topic_name\" ) topic = sgqlc . types . Field ( \"Topic\" , graphql_name = \"topic\" ) topic_name = sgqlc . types . Field ( String , graphql_name = \"topicName\" ) TopicSuggestionDeclineReason Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2088 2089 2090 2091 2092 2093 2094 class TopicSuggestionDeclineReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"NOT_RELEVANT\" , \"PERSONAL_PREFERENCE\" , \"TOO_GENERAL\" , \"TOO_SPECIFIC\" ) TrackedIssueStates Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2097 2098 2099 2100 2101 2102 2103 class TrackedIssueStates ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" ) TransferIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5384 5385 5386 5387 5388 5389 5390 5391 5392 5393 5394 5395 5396 5397 5398 5399 5400 5401 5402 5403 class TransferIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"repository_id\" , \"create_labels_if_missing\" , \"client_mutation_id\" , ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) create_labels_if_missing = sgqlc . types . Field ( Boolean , graphql_name = \"createLabelsIfMissing\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) TransferIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20565 20566 20567 20568 20569 20570 20571 20572 20573 class TransferIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" ) TransferredEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31381 31382 31383 31384 31385 31386 31387 31388 31389 31390 31391 31392 31393 class TransferredEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"from_repository\" , \"issue\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) from_repository = sgqlc . types . Field ( Repository , graphql_name = \"fromRepository\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" ) Tree Bases: sgqlc . types . Type , Node , GitObject See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31396 31397 31398 31399 31400 31401 31402 31403 31404 31405 class Tree ( sgqlc . types . Type , Node , GitObject ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"entries\" ,) entries = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( TreeEntry )), graphql_name = \"entries\" ) TreeEntry Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20576 20577 20578 20579 20580 20581 20582 20583 20584 20585 20586 20587 20588 20589 20590 20591 20592 20593 20594 20595 20596 20597 20598 20599 20600 20601 20602 20603 20604 20605 20606 20607 20608 20609 20610 20611 class TreeEntry ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"extension\" , \"is_generated\" , \"line_count\" , \"mode\" , \"name\" , \"object\" , \"oid\" , \"path\" , \"repository\" , \"size\" , \"submodule\" , \"type\" , ) extension = sgqlc . types . Field ( String , graphql_name = \"extension\" ) is_generated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isGenerated\" ) line_count = sgqlc . types . Field ( Int , graphql_name = \"lineCount\" ) mode = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"mode\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) object = sgqlc . types . Field ( GitObject , graphql_name = \"object\" ) oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"oid\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"size\" ) submodule = sgqlc . types . Field ( Submodule , graphql_name = \"submodule\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"type\" ) URI Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2106 2107 2108 2109 2110 2111 class URI ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema UnarchiveRepositoryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5406 5407 5408 5409 5410 5411 5412 5413 5414 5415 5416 class UnarchiveRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnarchiveRepositoryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20614 20615 20616 20617 20618 20619 20620 20621 20622 class UnarchiveRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) UnassignedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31408 31409 31410 31411 31412 31413 31414 31415 31416 31417 31418 31419 31420 31421 31422 31423 class UnassignedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"assignable\" , \"assignee\" , \"created_at\" , \"user\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) assignable = sgqlc . types . Field ( sgqlc . types . non_null ( Assignable ), graphql_name = \"assignable\" ) assignee = sgqlc . types . Field ( \"Assignee\" , graphql_name = \"assignee\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) UnfollowOrganizationInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5419 5420 5421 5422 5423 5424 5425 5426 5427 5428 5429 class UnfollowOrganizationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnfollowOrganizationPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20625 20626 20627 20628 20629 20630 20631 20632 20633 class UnfollowOrganizationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) UnfollowUserInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5432 5433 5434 5435 5436 5437 5438 5439 5440 class UnfollowUserInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"user_id\" , \"client_mutation_id\" ) user_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"userId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnfollowUserPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20636 20637 20638 20639 20640 20641 20642 20643 20644 class UnfollowUserPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"user\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) UniformResourceLocatable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20647 20648 20649 20650 20651 20652 20653 20654 20655 20656 20657 class UniformResourceLocatable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"resource_path\" , \"url\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) UnknownSignature Bases: sgqlc . types . Type , GitSignature See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31426 31427 31428 31429 31430 31431 31432 class UnknownSignature ( sgqlc . types . Type , GitSignature ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = () UnlabeledEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31435 31436 31437 31438 31439 31440 31441 31442 31443 31444 31445 31446 31447 31448 31449 class UnlabeledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"label\" , \"labelable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) label = sgqlc . types . Field ( sgqlc . types . non_null ( Label ), graphql_name = \"label\" ) labelable = sgqlc . types . Field ( sgqlc . types . non_null ( Labelable ), graphql_name = \"labelable\" ) UnlinkRepositoryFromProjectInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5443 5444 5445 5446 5447 5448 5449 5450 5451 5452 5453 5454 class UnlinkRepositoryFromProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"repository_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnlinkRepositoryFromProjectPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20660 20661 20662 20663 20664 20665 20666 20667 20668 20669 class UnlinkRepositoryFromProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) UnlockLockableInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5457 5458 5459 5460 5461 5462 5463 5464 5465 class UnlockLockableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"lockable_id\" , \"client_mutation_id\" ) lockable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"lockableId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnlockLockablePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20672 20673 20674 20675 20676 20677 20678 20679 20680 20681 class UnlockLockablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"unlocked_record\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) unlocked_record = sgqlc . types . Field ( Lockable , graphql_name = \"unlockedRecord\" ) UnlockedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31452 31453 31454 31455 31456 31457 31458 31459 31460 31461 31462 31463 31464 31465 class UnlockedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"lockable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) lockable = sgqlc . types . Field ( sgqlc . types . non_null ( Lockable ), graphql_name = \"lockable\" ) UnmarkDiscussionCommentAsAnswerInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5468 5469 5470 5471 5472 5473 5474 5475 5476 class UnmarkDiscussionCommentAsAnswerInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnmarkDiscussionCommentAsAnswerPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20684 20685 20686 20687 20688 20689 20690 20691 20692 class UnmarkDiscussionCommentAsAnswerPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" ) UnmarkFileAsViewedInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5479 5480 5481 5482 5483 5484 5485 5486 5487 5488 5489 5490 class UnmarkFileAsViewedInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"path\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnmarkFileAsViewedPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20695 20696 20697 20698 20699 20700 20701 20702 20703 class UnmarkFileAsViewedPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) UnmarkIssueAsDuplicateInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5493 5494 5495 5496 5497 5498 5499 5500 5501 5502 5503 5504 5505 5506 class UnmarkIssueAsDuplicateInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"duplicate_id\" , \"canonical_id\" , \"client_mutation_id\" ) duplicate_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"duplicateId\" ) canonical_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"canonicalId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnmarkIssueAsDuplicatePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20706 20707 20708 20709 20710 20711 20712 20713 20714 class UnmarkIssueAsDuplicatePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"duplicate\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) duplicate = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"duplicate\" ) UnmarkedAsDuplicateEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31468 31469 31470 31471 31472 31473 31474 31475 31476 31477 31478 31479 31480 31481 31482 31483 31484 31485 31486 31487 31488 31489 class UnmarkedAsDuplicateEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"canonical\" , \"created_at\" , \"duplicate\" , \"is_cross_repository\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) canonical = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"canonical\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) duplicate = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"duplicate\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) UnminimizeCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5509 5510 5511 5512 5513 5514 5515 5516 5517 class UnminimizeCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnminimizeCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20717 20718 20719 20720 20721 20722 20723 20724 20725 20726 20727 class UnminimizeCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"unminimized_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) unminimized_comment = sgqlc . types . Field ( Minimizable , graphql_name = \"unminimizedComment\" ) UnpinIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5520 5521 5522 5523 5524 5525 5526 5527 5528 class UnpinIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnpinIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20730 20731 20732 20733 20734 20735 20736 20737 20738 class UnpinIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" ) UnpinnedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31492 31493 31494 31495 31496 31497 31498 31499 31500 31501 31502 31503 class UnpinnedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"issue\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" ) UnresolveReviewThreadInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5531 5532 5533 5534 5535 5536 5537 5538 5539 class UnresolveReviewThreadInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"thread_id\" , \"client_mutation_id\" ) thread_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"threadId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UnresolveReviewThreadPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20741 20742 20743 20744 20745 20746 20747 20748 20749 class UnresolveReviewThreadPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"thread\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) thread = sgqlc . types . Field ( \"PullRequestReviewThread\" , graphql_name = \"thread\" ) UnsubscribedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31506 31507 31508 31509 31510 31511 31512 31513 31514 31515 31516 31517 31518 31519 class UnsubscribedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"subscribable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) subscribable = sgqlc . types . Field ( sgqlc . types . non_null ( Subscribable ), graphql_name = \"subscribable\" ) Updatable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20752 20753 20754 20755 20756 20757 20758 20759 20760 20761 class Updatable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"viewer_can_update\" ,) viewer_can_update = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUpdate\" ) UpdatableComment Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20764 20765 20766 20767 20768 20769 20770 20771 20772 20773 20774 20775 20776 class UpdatableComment ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"viewer_cannot_update_reasons\" ,) viewer_cannot_update_reasons = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( CommentCannotUpdateReason )) ), graphql_name = \"viewerCannotUpdateReasons\" , ) UpdateBranchProtectionRuleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5542 5543 5544 5545 5546 5547 5548 5549 5550 5551 5552 5553 5554 5555 5556 5557 5558 5559 5560 5561 5562 5563 5564 5565 5566 5567 5568 5569 5570 5571 5572 5573 5574 5575 5576 5577 5578 5579 5580 5581 5582 5583 5584 5585 5586 5587 5588 5589 5590 5591 5592 5593 5594 5595 5596 5597 5598 5599 5600 5601 5602 5603 5604 5605 5606 5607 5608 5609 5610 5611 5612 5613 5614 5615 5616 5617 5618 5619 5620 5621 5622 5623 5624 5625 5626 5627 5628 5629 5630 5631 5632 5633 5634 5635 5636 class UpdateBranchProtectionRuleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule_id\" , \"pattern\" , \"requires_approving_reviews\" , \"required_approving_review_count\" , \"requires_commit_signatures\" , \"requires_linear_history\" , \"blocks_creations\" , \"allows_force_pushes\" , \"allows_deletions\" , \"is_admin_enforced\" , \"requires_status_checks\" , \"requires_strict_status_checks\" , \"requires_code_owner_reviews\" , \"dismisses_stale_reviews\" , \"restricts_review_dismissals\" , \"review_dismissal_actor_ids\" , \"bypass_pull_request_actor_ids\" , \"bypass_force_push_actor_ids\" , \"restricts_pushes\" , \"push_actor_ids\" , \"required_status_check_contexts\" , \"required_status_checks\" , \"requires_conversation_resolution\" , \"client_mutation_id\" , ) branch_protection_rule_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"branchProtectionRuleId\" ) pattern = sgqlc . types . Field ( String , graphql_name = \"pattern\" ) requires_approving_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"requiresApprovingReviews\" ) required_approving_review_count = sgqlc . types . Field ( Int , graphql_name = \"requiredApprovingReviewCount\" ) requires_commit_signatures = sgqlc . types . Field ( Boolean , graphql_name = \"requiresCommitSignatures\" ) requires_linear_history = sgqlc . types . Field ( Boolean , graphql_name = \"requiresLinearHistory\" ) blocks_creations = sgqlc . types . Field ( Boolean , graphql_name = \"blocksCreations\" ) allows_force_pushes = sgqlc . types . Field ( Boolean , graphql_name = \"allowsForcePushes\" ) allows_deletions = sgqlc . types . Field ( Boolean , graphql_name = \"allowsDeletions\" ) is_admin_enforced = sgqlc . types . Field ( Boolean , graphql_name = \"isAdminEnforced\" ) requires_status_checks = sgqlc . types . Field ( Boolean , graphql_name = \"requiresStatusChecks\" ) requires_strict_status_checks = sgqlc . types . Field ( Boolean , graphql_name = \"requiresStrictStatusChecks\" ) requires_code_owner_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"requiresCodeOwnerReviews\" ) dismisses_stale_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"dismissesStaleReviews\" ) restricts_review_dismissals = sgqlc . types . Field ( Boolean , graphql_name = \"restrictsReviewDismissals\" ) review_dismissal_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"reviewDismissalActorIds\" , ) bypass_pull_request_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"bypassPullRequestActorIds\" , ) bypass_force_push_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"bypassForcePushActorIds\" , ) restricts_pushes = sgqlc . types . Field ( Boolean , graphql_name = \"restrictsPushes\" ) push_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"pushActorIds\" ) required_status_check_contexts = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"requiredStatusCheckContexts\" , ) required_status_checks = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( RequiredStatusCheckInput )), graphql_name = \"requiredStatusChecks\" , ) requires_conversation_resolution = sgqlc . types . Field ( Boolean , graphql_name = \"requiresConversationResolution\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateBranchProtectionRulePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20779 20780 20781 20782 20783 20784 20785 20786 20787 20788 20789 class UpdateBranchProtectionRulePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule\" , \"client_mutation_id\" ) branch_protection_rule = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"branchProtectionRule\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateCheckRunInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5639 5640 5641 5642 5643 5644 5645 5646 5647 5648 5649 5650 5651 5652 5653 5654 5655 5656 5657 5658 5659 5660 5661 5662 5663 5664 5665 5666 5667 5668 5669 5670 5671 5672 5673 5674 5675 5676 5677 class UpdateCheckRunInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"check_run_id\" , \"name\" , \"details_url\" , \"external_id\" , \"status\" , \"started_at\" , \"conclusion\" , \"completed_at\" , \"output\" , \"actions\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) check_run_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"checkRunId\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) details_url = sgqlc . types . Field ( URI , graphql_name = \"detailsUrl\" ) external_id = sgqlc . types . Field ( String , graphql_name = \"externalId\" ) status = sgqlc . types . Field ( RequestableCheckStatusState , graphql_name = \"status\" ) started_at = sgqlc . types . Field ( DateTime , graphql_name = \"startedAt\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) completed_at = sgqlc . types . Field ( DateTime , graphql_name = \"completedAt\" ) output = sgqlc . types . Field ( CheckRunOutput , graphql_name = \"output\" ) actions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckRunAction )), graphql_name = \"actions\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateCheckRunPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20792 20793 20794 20795 20796 20797 20798 20799 20800 class UpdateCheckRunPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_run\" , \"client_mutation_id\" ) check_run = sgqlc . types . Field ( \"CheckRun\" , graphql_name = \"checkRun\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateCheckSuitePreferencesInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5680 5681 5682 5683 5684 5685 5686 5687 5688 5689 5690 5691 5692 5693 5694 5695 5696 5697 5698 5699 5700 class UpdateCheckSuitePreferencesInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"auto_trigger_preferences\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) auto_trigger_preferences = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckSuiteAutoTriggerPreference )) ), graphql_name = \"autoTriggerPreferences\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateCheckSuitePreferencesPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20803 20804 20805 20806 20807 20808 20809 20810 20811 class UpdateCheckSuitePreferencesPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) UpdateDiscussionCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5703 5704 5705 5706 5707 5708 5709 5710 5711 5712 class UpdateDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comment_id\" , \"body\" , \"client_mutation_id\" ) comment_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"commentId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateDiscussionCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20814 20815 20816 20817 20818 20819 20820 20821 20822 class UpdateDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"comment\" ) UpdateDiscussionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5715 5716 5717 5718 5719 5720 5721 5722 5723 5724 5725 5726 5727 5728 5729 5730 5731 5732 5733 5734 class UpdateDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"discussion_id\" , \"title\" , \"body\" , \"category_id\" , \"client_mutation_id\" , ) discussion_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"discussionId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) category_id = sgqlc . types . Field ( ID , graphql_name = \"categoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateDiscussionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20825 20826 20827 20828 20829 20830 20831 20832 20833 class UpdateDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" ) UpdateEnterpriseAdministratorRoleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5737 5738 5739 5740 5741 5742 5743 5744 5745 5746 5747 5748 5749 5750 5751 class UpdateEnterpriseAdministratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"role\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorRole ), graphql_name = \"role\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseAdministratorRolePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20836 20837 20838 20839 20840 20841 20842 20843 20844 class UpdateEnterpriseAdministratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5754 5755 5756 5757 5758 5759 5760 5761 5762 5763 5764 5765 5766 5767 5768 5769 5770 5771 5772 5773 5774 5775 5776 class UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"policy_value\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) policy_value = sgqlc . types . Field ( EnterpriseAllowPrivateRepositoryForkingPolicyValue , graphql_name = \"policyValue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20847 20848 20849 20850 20851 20852 20853 20854 20855 20856 class UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseDefaultRepositoryPermissionSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 5789 5790 5791 5792 5793 class UpdateEnterpriseDefaultRepositoryPermissionSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseDefaultRepositoryPermissionSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseDefaultRepositoryPermissionSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20859 20860 20861 20862 20863 20864 20865 20866 20867 20868 class UpdateEnterpriseDefaultRepositoryPermissionSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5796 5797 5798 5799 5800 5801 5802 5803 5804 5805 5806 5807 5808 5809 5810 5811 5812 class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20871 20872 20873 20874 20875 20876 20877 20878 20879 20880 20881 20882 class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseMembersCanCreateRepositoriesSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5815 5816 5817 5818 5819 5820 5821 5822 5823 5824 5825 5826 5827 5828 5829 5830 5831 5832 5833 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 class UpdateEnterpriseMembersCanCreateRepositoriesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"members_can_create_repositories_policy_enabled\" , \"members_can_create_public_repositories\" , \"members_can_create_private_repositories\" , \"members_can_create_internal_repositories\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( EnterpriseMembersCanCreateRepositoriesSettingValue , graphql_name = \"settingValue\" ) members_can_create_repositories_policy_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreateRepositoriesPolicyEnabled\" ) members_can_create_public_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreatePublicRepositories\" ) members_can_create_private_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreatePrivateRepositories\" ) members_can_create_internal_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreateInternalRepositories\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20885 20886 20887 20888 20889 20890 20891 20892 20893 20894 class UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseMembersCanDeleteIssuesSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5851 5852 5853 5854 5855 5856 5857 5858 5859 5860 5861 5862 5863 5864 5865 class UpdateEnterpriseMembersCanDeleteIssuesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseMembersCanDeleteIssuesSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20897 20898 20899 20900 20901 20902 20903 20904 20905 20906 class UpdateEnterpriseMembersCanDeleteIssuesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 5880 5881 5882 class UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20909 20910 20911 20912 20913 20914 20915 20916 20917 20918 class UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5885 5886 5887 5888 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 class UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20921 20922 20923 20924 20925 20926 20927 20928 20929 20930 class UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseMembersCanMakePurchasesSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 class UpdateEnterpriseMembersCanMakePurchasesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMembersCanMakePurchasesSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseMembersCanMakePurchasesSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20933 20934 20935 20936 20937 20938 20939 20940 20941 20942 class UpdateEnterpriseMembersCanMakePurchasesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5919 5920 5921 5922 5923 5924 5925 5926 5927 5928 5929 5930 5931 5932 5933 class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20945 20946 20947 20948 20949 20950 20951 20952 20953 20954 class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5936 5937 5938 5939 5940 5941 5942 5943 5944 5945 5946 5947 5948 5949 5950 class UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20957 20958 20959 20960 20961 20962 20963 20964 20965 20966 class UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseOrganizationProjectsSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5953 5954 5955 5956 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 class UpdateEnterpriseOrganizationProjectsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseOrganizationProjectsSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20969 20970 20971 20972 20973 20974 20975 20976 20977 20978 class UpdateEnterpriseOrganizationProjectsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseOwnerOrganizationRoleInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5970 5971 5972 5973 5974 5975 5976 5977 5978 5979 5980 5981 5982 5983 5984 5985 5986 5987 5988 5989 5990 5991 class UpdateEnterpriseOwnerOrganizationRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"organization_id\" , \"organization_role\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) organization_role = sgqlc . types . Field ( sgqlc . types . non_null ( RoleInOrganization ), graphql_name = \"organizationRole\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseOwnerOrganizationRolePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20981 20982 20983 20984 20985 20986 20987 20988 20989 class UpdateEnterpriseOwnerOrganizationRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseProfileInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5994 5995 5996 5997 5998 5999 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6010 6011 6012 6013 6014 6015 class UpdateEnterpriseProfileInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"name\" , \"description\" , \"website_url\" , \"location\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) website_url = sgqlc . types . Field ( String , graphql_name = \"websiteUrl\" ) location = sgqlc . types . Field ( String , graphql_name = \"location\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseProfilePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20992 20993 20994 20995 20996 20997 20998 20999 21000 class UpdateEnterpriseProfilePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) UpdateEnterpriseRepositoryProjectsSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6018 6019 6020 6021 6022 6023 6024 6025 6026 6027 6028 6029 6030 6031 6032 class UpdateEnterpriseRepositoryProjectsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseRepositoryProjectsSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21003 21004 21005 21006 21007 21008 21009 21010 21011 21012 class UpdateEnterpriseRepositoryProjectsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseTeamDiscussionsSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6035 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 6047 6048 6049 class UpdateEnterpriseTeamDiscussionsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseTeamDiscussionsSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21015 21016 21017 21018 21019 21020 21021 21022 21023 21024 class UpdateEnterpriseTeamDiscussionsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6052 6053 6054 6055 6056 6057 6058 6059 6060 6061 6062 6063 6064 6065 class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledSettingValue ), graphql_name = \"settingValue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21027 21028 21029 21030 21031 21032 21033 21034 21035 21036 class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) UpdateEnvironmentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6068 6069 6070 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 6081 6082 6083 6084 6085 6086 6087 class UpdateEnvironmentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"environment_id\" , \"wait_timer\" , \"reviewers\" , \"client_mutation_id\" , ) environment_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"environmentId\" ) wait_timer = sgqlc . types . Field ( Int , graphql_name = \"waitTimer\" ) reviewers = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"reviewers\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateEnvironmentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21039 21040 21041 21042 21043 21044 21045 21046 21047 class UpdateEnvironmentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"environment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) environment = sgqlc . types . Field ( \"Environment\" , graphql_name = \"environment\" ) UpdateIpAllowListEnabledSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6090 6091 6092 6093 6094 6095 6096 6097 6098 6099 6100 6101 6102 class UpdateIpAllowListEnabledSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"setting_value\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEnabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateIpAllowListEnabledSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21050 21051 21052 21053 21054 21055 21056 21057 21058 class UpdateIpAllowListEnabledSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"IpAllowListOwner\" , graphql_name = \"owner\" ) UpdateIpAllowListEntryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6105 6106 6107 6108 6109 6110 6111 6112 6113 6114 6115 6116 6117 6118 6119 6120 6121 6122 6123 6124 6125 6126 6127 6128 class UpdateIpAllowListEntryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ip_allow_list_entry_id\" , \"allow_list_value\" , \"name\" , \"is_active\" , \"client_mutation_id\" , ) ip_allow_list_entry_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ipAllowListEntryId\" ) allow_list_value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"allowListValue\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) is_active = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isActive\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateIpAllowListEntryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21061 21062 21063 21064 21065 21066 21067 21068 21069 21070 21071 class UpdateIpAllowListEntryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ip_allow_list_entry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ip_allow_list_entry = sgqlc . types . Field ( \"IpAllowListEntry\" , graphql_name = \"ipAllowListEntry\" ) UpdateIpAllowListForInstalledAppsEnabledSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6131 6132 6133 6134 6135 6136 6137 6138 6139 6140 6141 6142 6143 class UpdateIpAllowListForInstalledAppsEnabledSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"setting_value\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListForInstalledAppsEnabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateIpAllowListForInstalledAppsEnabledSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21074 21075 21076 21077 21078 21079 21080 21081 21082 class UpdateIpAllowListForInstalledAppsEnabledSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"IpAllowListOwner\" , graphql_name = \"owner\" ) UpdateIssueCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6146 6147 6148 6149 6150 6151 6152 6153 6154 6155 class UpdateIssueCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"body\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateIssueCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21085 21086 21087 21088 21089 21090 21091 21092 21093 class UpdateIssueCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue_comment = sgqlc . types . Field ( \"IssueComment\" , graphql_name = \"issueComment\" ) UpdateIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6158 6159 6160 6161 6162 6163 6164 6165 6166 6167 6168 6169 6170 6171 6172 6173 6174 6175 6176 6177 6178 6179 6180 6181 6182 6183 6184 6185 6186 6187 6188 6189 class UpdateIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"title\" , \"body\" , \"assignee_ids\" , \"milestone_id\" , \"label_ids\" , \"state\" , \"project_ids\" , \"client_mutation_id\" , ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) milestone_id = sgqlc . types . Field ( ID , graphql_name = \"milestoneId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"labelIds\" ) state = sgqlc . types . Field ( IssueState , graphql_name = \"state\" ) project_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"projectIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21096 21097 21098 21099 21100 21101 21102 21103 21104 21105 class UpdateIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"issue\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" ) UpdateNotificationRestrictionSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6192 6193 6194 6195 6196 6197 6198 6199 6200 6201 6202 6203 6204 class UpdateNotificationRestrictionSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"setting_value\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( NotificationRestrictionSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateNotificationRestrictionSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21108 21109 21110 21111 21112 21113 21114 21115 21116 class UpdateNotificationRestrictionSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"VerifiableDomainOwner\" , graphql_name = \"owner\" ) UpdateOrganizationAllowPrivateRepositoryForkingSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6207 6208 6209 6210 6211 6212 6213 6214 6215 6216 6217 6218 6219 6220 class UpdateOrganizationAllowPrivateRepositoryForkingSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"forking_enabled\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) forking_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"forkingEnabled\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21119 21120 21121 21122 21123 21124 21125 21126 21127 21128 class UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) UpdateOrganizationWebCommitSignoffSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6223 6224 6225 6226 6227 6228 6229 6230 6231 6232 6233 6234 6235 6236 6237 6238 6239 6240 class UpdateOrganizationWebCommitSignoffSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"web_commit_signoff_required\" , \"client_mutation_id\" , ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) web_commit_signoff_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"webCommitSignoffRequired\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateOrganizationWebCommitSignoffSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21131 21132 21133 21134 21135 21136 21137 21138 21139 21140 class UpdateOrganizationWebCommitSignoffSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) UpdateProjectCardInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6243 6244 6245 6246 6247 6248 6249 6250 6251 6252 6253 6254 6255 class UpdateProjectCardInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_card_id\" , \"is_archived\" , \"note\" , \"client_mutation_id\" ) project_card_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectCardId\" ) is_archived = sgqlc . types . Field ( Boolean , graphql_name = \"isArchived\" ) note = sgqlc . types . Field ( String , graphql_name = \"note\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectCardPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21143 21144 21145 21146 21147 21148 21149 21150 21151 class UpdateProjectCardPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_card\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_card = sgqlc . types . Field ( \"ProjectCard\" , graphql_name = \"projectCard\" ) UpdateProjectColumnInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6258 6259 6260 6261 6262 6263 6264 6265 6266 6267 6268 6269 class UpdateProjectColumnInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_column_id\" , \"name\" , \"client_mutation_id\" ) project_column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectColumnId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectColumnPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21154 21155 21156 21157 21158 21159 21160 21161 21162 class UpdateProjectColumnPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_column\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_column = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"projectColumn\" ) UpdateProjectDraftIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6272 6273 6274 6275 6276 6277 6278 6279 6280 6281 6282 6283 6284 6285 6286 6287 6288 6289 6290 6291 6292 6293 class UpdateProjectDraftIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"draft_issue_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"client_mutation_id\" , ) draft_issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"draftIssueId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectDraftIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21165 21166 21167 21168 21169 21170 21171 21172 21173 class UpdateProjectDraftIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"draft_issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) draft_issue = sgqlc . types . Field ( \"DraftIssue\" , graphql_name = \"draftIssue\" ) UpdateProjectInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6296 6297 6298 6299 6300 6301 6302 6303 6304 6305 6306 6307 6308 6309 6310 6311 6312 6313 6314 6315 class UpdateProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"name\" , \"body\" , \"state\" , \"public\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) state = sgqlc . types . Field ( ProjectState , graphql_name = \"state\" ) public = sgqlc . types . Field ( Boolean , graphql_name = \"public\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectNextInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6318 6319 6320 6321 6322 6323 6324 6325 6326 6327 6328 6329 6330 6331 6332 6333 6334 6335 6336 6337 6338 6339 class UpdateProjectNextInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"title\" , \"description\" , \"short_description\" , \"closed\" , \"public\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) short_description = sgqlc . types . Field ( String , graphql_name = \"shortDescription\" ) closed = sgqlc . types . Field ( Boolean , graphql_name = \"closed\" ) public = sgqlc . types . Field ( Boolean , graphql_name = \"public\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectNextItemFieldInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6342 6343 6344 6345 6346 6347 6348 6349 6350 6351 6352 6353 6354 6355 6356 6357 6358 6359 class UpdateProjectNextItemFieldInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"field_id\" , \"value\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( ID , graphql_name = \"itemId\" ) field_id = sgqlc . types . Field ( ID , graphql_name = \"fieldId\" ) value = sgqlc . types . Field ( String , graphql_name = \"value\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectNextItemFieldPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21176 21177 21178 21179 21180 21181 21182 21183 21184 21185 21186 class UpdateProjectNextItemFieldPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_next_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_next_item = sgqlc . types . Field ( \"ProjectNextItem\" , graphql_name = \"projectNextItem\" ) UpdateProjectNextPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21189 21190 21191 21192 21193 21194 21195 21196 21197 class UpdateProjectNextPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_next\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_next = sgqlc . types . Field ( \"ProjectNext\" , graphql_name = \"projectNext\" ) UpdateProjectPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21200 21201 21202 21203 21204 21205 21206 21207 21208 class UpdateProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) UpdateProjectV2DraftIssueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 6372 6373 6374 6375 6376 6377 6378 6379 6380 6381 6382 6383 class UpdateProjectV2DraftIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"draft_issue_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"client_mutation_id\" , ) draft_issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"draftIssueId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectV2DraftIssuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21211 21212 21213 21214 21215 21216 21217 21218 21219 class UpdateProjectV2DraftIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"draft_issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) draft_issue = sgqlc . types . Field ( \"DraftIssue\" , graphql_name = \"draftIssue\" ) UpdateProjectV2Input Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6386 6387 6388 6389 6390 6391 6392 6393 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 6405 6406 6407 class UpdateProjectV2Input ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"title\" , \"short_description\" , \"readme\" , \"closed\" , \"public\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) short_description = sgqlc . types . Field ( String , graphql_name = \"shortDescription\" ) readme = sgqlc . types . Field ( String , graphql_name = \"readme\" ) closed = sgqlc . types . Field ( Boolean , graphql_name = \"closed\" ) public = sgqlc . types . Field ( Boolean , graphql_name = \"public\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectV2ItemFieldValueInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6410 6411 6412 6413 6414 6415 6416 6417 6418 6419 6420 6421 6422 6423 6424 6425 6426 6427 6428 6429 class UpdateProjectV2ItemFieldValueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"field_id\" , \"value\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"itemId\" ) field_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"fieldId\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2FieldValue ), graphql_name = \"value\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectV2ItemFieldValuePayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21222 21223 21224 21225 21226 21227 21228 21229 21230 class UpdateProjectV2ItemFieldValuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_v2_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_v2_item = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"projectV2Item\" ) UpdateProjectV2ItemPositionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6432 6433 6434 6435 6436 6437 6438 6439 6440 6441 6442 class UpdateProjectV2ItemPositionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"after_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"itemId\" ) after_id = sgqlc . types . Field ( ID , graphql_name = \"afterId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateProjectV2ItemPositionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21233 21234 21235 21236 21237 21238 21239 21240 21241 21242 21243 21244 21245 21246 21247 21248 21249 21250 21251 21252 21253 21254 21255 class UpdateProjectV2ItemPositionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"items\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) items = sgqlc . types . Field ( ProjectV2ItemConnection , graphql_name = \"items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) UpdateProjectV2Payload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21258 21259 21260 21261 21262 21263 21264 21265 21266 class UpdateProjectV2Payload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_v2\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_v2 = sgqlc . types . Field ( \"ProjectV2\" , graphql_name = \"projectV2\" ) UpdatePullRequestBranchInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6445 6446 6447 6448 6449 6450 6451 6452 6453 6454 6455 6456 class UpdatePullRequestBranchInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"expected_head_oid\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) expected_head_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"expectedHeadOid\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdatePullRequestBranchPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21269 21270 21271 21272 21273 21274 21275 21276 21277 class UpdatePullRequestBranchPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) UpdatePullRequestInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6459 6460 6461 6462 6463 6464 6465 6466 6467 6468 6469 6470 6471 6472 6473 6474 6475 6476 6477 6478 6479 6480 6481 6482 6483 6484 6485 6486 6487 6488 6489 6490 6491 6492 6493 6494 6495 6496 6497 6498 class UpdatePullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"base_ref_name\" , \"title\" , \"body\" , \"state\" , \"maintainer_can_modify\" , \"assignee_ids\" , \"milestone_id\" , \"label_ids\" , \"project_ids\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) base_ref_name = sgqlc . types . Field ( String , graphql_name = \"baseRefName\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) state = sgqlc . types . Field ( PullRequestUpdateState , graphql_name = \"state\" ) maintainer_can_modify = sgqlc . types . Field ( Boolean , graphql_name = \"maintainerCanModify\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) milestone_id = sgqlc . types . Field ( ID , graphql_name = \"milestoneId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"labelIds\" ) project_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"projectIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdatePullRequestPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21280 21281 21282 21283 21284 21285 21286 21287 21288 21289 class UpdatePullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) UpdatePullRequestReviewCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6501 6502 6503 6504 6505 6506 6507 6508 6509 6510 6511 6512 class UpdatePullRequestReviewCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_review_comment_id\" , \"body\" , \"client_mutation_id\" ) pull_request_review_comment_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestReviewCommentId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdatePullRequestReviewCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21292 21293 21294 21295 21296 21297 21298 21299 21300 21301 21302 class UpdatePullRequestReviewCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review_comment = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"pullRequestReviewComment\" ) UpdatePullRequestReviewInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6515 6516 6517 6518 6519 6520 6521 6522 6523 6524 6525 6526 class UpdatePullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_review_id\" , \"body\" , \"client_mutation_id\" ) pull_request_review_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestReviewId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdatePullRequestReviewPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21305 21306 21307 21308 21309 21310 21311 21312 21313 21314 21315 class UpdatePullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" ) UpdateRefInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6529 6530 6531 6532 6533 6534 6535 6536 6537 6538 6539 class UpdateRefInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ref_id\" , \"oid\" , \"force\" , \"client_mutation_id\" ) ref_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"refId\" ) oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"oid\" ) force = sgqlc . types . Field ( Boolean , graphql_name = \"force\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateRefPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21318 21319 21320 21321 21322 21323 21324 21325 21326 class UpdateRefPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ref\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) UpdateRepositoryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6542 6543 6544 6545 6546 6547 6548 6549 6550 6551 6552 6553 6554 6555 6556 6557 6558 6559 6560 6561 6562 6563 6564 6565 6566 6567 6568 6569 class UpdateRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"description\" , \"template\" , \"homepage_url\" , \"has_wiki_enabled\" , \"has_issues_enabled\" , \"has_projects_enabled\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) template = sgqlc . types . Field ( Boolean , graphql_name = \"template\" ) homepage_url = sgqlc . types . Field ( URI , graphql_name = \"homepageUrl\" ) has_wiki_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasWikiEnabled\" ) has_issues_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasIssuesEnabled\" ) has_projects_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasProjectsEnabled\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateRepositoryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21329 21330 21331 21332 21333 21334 21335 21336 21337 class UpdateRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) UpdateRepositoryWebCommitSignoffSettingInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6572 6573 6574 6575 6576 6577 6578 6579 6580 6581 6582 6583 6584 6585 6586 6587 6588 6589 class UpdateRepositoryWebCommitSignoffSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"web_commit_signoff_required\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) web_commit_signoff_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"webCommitSignoffRequired\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateRepositoryWebCommitSignoffSettingPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21340 21341 21342 21343 21344 21345 21346 21347 21348 21349 class UpdateRepositoryWebCommitSignoffSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) UpdateSponsorshipPreferencesInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6592 6593 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 6606 6607 6608 6609 6610 6611 6612 6613 class UpdateSponsorshipPreferencesInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsor_id\" , \"sponsor_login\" , \"sponsorable_id\" , \"sponsorable_login\" , \"receive_emails\" , \"privacy_level\" , \"client_mutation_id\" , ) sponsor_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorId\" ) sponsor_login = sgqlc . types . Field ( String , graphql_name = \"sponsorLogin\" ) sponsorable_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorableId\" ) sponsorable_login = sgqlc . types . Field ( String , graphql_name = \"sponsorableLogin\" ) receive_emails = sgqlc . types . Field ( Boolean , graphql_name = \"receiveEmails\" ) privacy_level = sgqlc . types . Field ( SponsorshipPrivacy , graphql_name = \"privacyLevel\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateSponsorshipPreferencesPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21352 21353 21354 21355 21356 21357 21358 21359 21360 class UpdateSponsorshipPreferencesPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"sponsorship\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) sponsorship = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"sponsorship\" ) UpdateSubscriptionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6616 6617 6618 6619 6620 6621 6622 6623 6624 6625 6626 6627 6628 6629 class UpdateSubscriptionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subscribable_id\" , \"state\" , \"client_mutation_id\" ) subscribable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subscribableId\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( SubscriptionState ), graphql_name = \"state\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateSubscriptionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21363 21364 21365 21366 21367 21368 21369 21370 21371 class UpdateSubscriptionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"subscribable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) subscribable = sgqlc . types . Field ( Subscribable , graphql_name = \"subscribable\" ) UpdateTeamDiscussionCommentInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6632 6633 6634 6635 6636 6637 6638 6639 6640 6641 6642 class UpdateTeamDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"body\" , \"body_version\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) body_version = sgqlc . types . Field ( String , graphql_name = \"bodyVersion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateTeamDiscussionCommentPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21374 21375 21376 21377 21378 21379 21380 21381 21382 21383 21384 class UpdateTeamDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"team_discussion_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) team_discussion_comment = sgqlc . types . Field ( \"TeamDiscussionComment\" , graphql_name = \"teamDiscussionComment\" ) UpdateTeamDiscussionInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6645 6646 6647 6648 6649 6650 6651 6652 6653 6654 6655 6656 6657 6658 6659 6660 6661 6662 6663 6664 class UpdateTeamDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"title\" , \"body\" , \"body_version\" , \"pinned\" , \"client_mutation_id\" , ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) body_version = sgqlc . types . Field ( String , graphql_name = \"bodyVersion\" ) pinned = sgqlc . types . Field ( Boolean , graphql_name = \"pinned\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateTeamDiscussionPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21387 21388 21389 21390 21391 21392 21393 21394 21395 class UpdateTeamDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"team_discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) team_discussion = sgqlc . types . Field ( \"TeamDiscussion\" , graphql_name = \"teamDiscussion\" ) UpdateTeamsRepositoryInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6667 6668 6669 6670 6671 6672 6673 6674 6675 6676 6677 6678 6679 6680 6681 6682 6683 6684 class UpdateTeamsRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"team_ids\" , \"permission\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) team_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"teamIds\" , ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryPermission ), graphql_name = \"permission\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateTeamsRepositoryPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21398 21399 21400 21401 21402 21403 21404 21405 21406 21407 21408 21409 class UpdateTeamsRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" , \"teams\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) teams = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"Team\" )), graphql_name = \"teams\" ) UpdateTopicsInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6687 6688 6689 6690 6691 6692 6693 6694 6695 6696 6697 6698 6699 6700 6701 class UpdateTopicsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"topic_names\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) topic_names = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"topicNames\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) UpdateTopicsPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21412 21413 21414 21415 21416 21417 21418 21419 21420 21421 21422 21423 21424 class UpdateTopicsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"invalid_topic_names\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) invalid_topic_names = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"invalidTopicNames\" , ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) User Bases: sgqlc . types . Type , Node , Actor , PackageOwner , ProjectOwner , ProjectNextOwner , ProjectV2Owner , ProjectV2Recent , RepositoryDiscussionAuthor , RepositoryDiscussionCommentAuthor , RepositoryOwner , UniformResourceLocatable , ProfileOwner , Sponsorable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31522 31523 31524 31525 31526 31527 31528 31529 31530 31531 31532 31533 31534 31535 31536 31537 31538 31539 31540 31541 31542 31543 31544 31545 31546 31547 31548 31549 31550 31551 31552 31553 31554 31555 31556 31557 31558 31559 31560 31561 31562 31563 31564 31565 31566 31567 31568 31569 31570 31571 31572 31573 31574 31575 31576 31577 31578 31579 31580 31581 31582 31583 31584 31585 31586 31587 31588 31589 31590 31591 31592 31593 31594 31595 31596 31597 31598 31599 31600 31601 31602 31603 31604 31605 31606 31607 31608 31609 31610 31611 31612 31613 31614 31615 31616 31617 31618 31619 31620 31621 31622 31623 31624 31625 31626 31627 31628 31629 31630 31631 31632 31633 31634 31635 31636 31637 31638 31639 31640 31641 31642 31643 31644 31645 31646 31647 31648 31649 31650 31651 31652 31653 31654 31655 31656 31657 31658 31659 31660 31661 31662 31663 31664 31665 31666 31667 31668 31669 31670 31671 31672 31673 31674 31675 31676 31677 31678 31679 31680 31681 31682 31683 31684 31685 31686 31687 31688 31689 31690 31691 31692 31693 31694 31695 31696 31697 31698 31699 31700 31701 31702 31703 31704 31705 31706 31707 31708 31709 31710 31711 31712 31713 31714 31715 31716 31717 31718 31719 31720 31721 31722 31723 31724 31725 31726 31727 31728 31729 31730 31731 31732 31733 31734 31735 31736 31737 31738 31739 31740 31741 31742 31743 31744 31745 31746 31747 31748 31749 31750 31751 31752 31753 31754 31755 31756 31757 31758 31759 31760 31761 31762 31763 31764 31765 31766 31767 31768 31769 31770 31771 31772 31773 31774 31775 31776 31777 31778 31779 31780 31781 31782 31783 31784 31785 31786 31787 31788 31789 31790 31791 31792 31793 31794 31795 31796 31797 31798 31799 31800 31801 31802 31803 31804 31805 31806 31807 31808 31809 31810 31811 31812 31813 31814 31815 31816 31817 31818 31819 31820 31821 31822 31823 31824 31825 31826 31827 31828 31829 31830 31831 31832 31833 31834 31835 31836 31837 31838 31839 31840 31841 31842 31843 31844 31845 31846 31847 31848 31849 31850 31851 31852 31853 31854 31855 31856 31857 31858 31859 31860 31861 31862 31863 31864 31865 31866 31867 31868 31869 31870 31871 31872 31873 31874 31875 31876 31877 31878 31879 31880 31881 31882 31883 31884 31885 31886 31887 31888 31889 31890 31891 31892 31893 31894 31895 31896 31897 31898 31899 31900 31901 31902 31903 31904 31905 31906 31907 31908 31909 31910 31911 31912 31913 31914 31915 31916 31917 31918 31919 31920 31921 31922 31923 31924 31925 31926 31927 31928 31929 31930 31931 31932 31933 31934 31935 31936 31937 31938 31939 31940 31941 31942 31943 31944 31945 31946 31947 31948 31949 31950 31951 31952 31953 31954 31955 31956 31957 31958 31959 31960 31961 31962 31963 31964 31965 31966 31967 31968 31969 31970 31971 31972 31973 31974 31975 31976 31977 31978 31979 31980 31981 31982 31983 31984 31985 31986 31987 31988 31989 31990 31991 31992 31993 31994 31995 31996 31997 31998 31999 32000 32001 32002 32003 32004 32005 32006 32007 32008 32009 32010 32011 32012 32013 32014 32015 32016 32017 32018 32019 32020 32021 32022 32023 32024 32025 32026 32027 32028 32029 32030 32031 32032 32033 32034 32035 32036 32037 32038 32039 32040 32041 32042 32043 32044 32045 32046 32047 32048 32049 32050 32051 32052 32053 32054 32055 32056 32057 32058 32059 32060 32061 32062 32063 32064 32065 32066 32067 32068 32069 32070 32071 32072 32073 32074 32075 32076 32077 32078 32079 32080 32081 32082 32083 32084 32085 32086 32087 32088 32089 32090 32091 32092 32093 32094 32095 32096 32097 32098 32099 32100 32101 32102 32103 32104 class User ( sgqlc . types . Type , Node , Actor , PackageOwner , ProjectOwner , ProjectNextOwner , ProjectV2Owner , ProjectV2Recent , RepositoryDiscussionAuthor , RepositoryDiscussionCommentAuthor , RepositoryOwner , UniformResourceLocatable , ProfileOwner , Sponsorable , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"bio\" , \"bio_html\" , \"can_receive_organization_emails_when_notifications_restricted\" , \"commit_comments\" , \"company\" , \"company_html\" , \"contributions_collection\" , \"created_at\" , \"database_id\" , \"followers\" , \"following\" , \"gist\" , \"gist_comments\" , \"gists\" , \"hovercard\" , \"interaction_ability\" , \"is_bounty_hunter\" , \"is_campus_expert\" , \"is_developer_program_member\" , \"is_employee\" , \"is_following_viewer\" , \"is_git_hub_star\" , \"is_hireable\" , \"is_site_admin\" , \"is_viewer\" , \"issue_comments\" , \"issues\" , \"organization\" , \"organization_verified_domain_emails\" , \"organizations\" , \"public_keys\" , \"pull_requests\" , \"repositories_contributed_to\" , \"saved_replies\" , \"starred_repositories\" , \"status\" , \"top_repositories\" , \"twitter_username\" , \"updated_at\" , \"viewer_can_follow\" , \"viewer_is_following\" , \"watching\" , ) bio = sgqlc . types . Field ( String , graphql_name = \"bio\" ) bio_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bioHTML\" ) can_receive_organization_emails_when_notifications_restricted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"canReceiveOrganizationEmailsWhenNotificationsRestricted\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) commit_comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"commitComments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) company = sgqlc . types . Field ( String , graphql_name = \"company\" ) company_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"companyHTML\" ) contributions_collection = sgqlc . types . Field ( sgqlc . types . non_null ( ContributionsCollection ), graphql_name = \"contributionsCollection\" , args = sgqlc . types . ArgDict ( ( ( \"organization_id\" , sgqlc . types . Arg ( ID , graphql_name = \"organizationID\" , default = None ), ), ( \"from_\" , sgqlc . types . Arg ( DateTime , graphql_name = \"from\" , default = None )), ( \"to\" , sgqlc . types . Arg ( DateTime , graphql_name = \"to\" , default = None )), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) followers = sgqlc . types . Field ( sgqlc . types . non_null ( FollowerConnection ), graphql_name = \"followers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) following = sgqlc . types . Field ( sgqlc . types . non_null ( FollowingConnection ), graphql_name = \"following\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) gist = sgqlc . types . Field ( Gist , graphql_name = \"gist\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) gist_comments = sgqlc . types . Field ( sgqlc . types . non_null ( GistCommentConnection ), graphql_name = \"gistComments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) gists = sgqlc . types . Field ( sgqlc . types . non_null ( GistConnection ), graphql_name = \"gists\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( GistPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( GistOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) hovercard = sgqlc . types . Field ( sgqlc . types . non_null ( Hovercard ), graphql_name = \"hovercard\" , args = sgqlc . types . ArgDict ( ( ( \"primary_subject_id\" , sgqlc . types . Arg ( ID , graphql_name = \"primarySubjectId\" , default = None ), ), ) ), ) interaction_ability = sgqlc . types . Field ( RepositoryInteractionAbility , graphql_name = \"interactionAbility\" ) is_bounty_hunter = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isBountyHunter\" ) is_campus_expert = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCampusExpert\" ) is_developer_program_member = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDeveloperProgramMember\" ) is_employee = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isEmployee\" ) is_following_viewer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isFollowingViewer\" ) is_git_hub_star = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isGitHubStar\" ) is_hireable = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isHireable\" ) is_site_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSiteAdmin\" ) is_viewer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isViewer\" ) issue_comments = sgqlc . types . Field ( sgqlc . types . non_null ( IssueCommentConnection ), graphql_name = \"issueComments\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueCommentOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"issues\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" , default = None , ), ), ( \"filter_by\" , sgqlc . types . Arg ( IssueFilters , graphql_name = \"filterBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) organization = sgqlc . types . Field ( Organization , graphql_name = \"organization\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) organization_verified_domain_emails = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"organizationVerifiedDomainEmails\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) organizations = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationConnection ), graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) public_keys = sgqlc . types . Field ( sgqlc . types . non_null ( PublicKeyConnection ), graphql_name = \"publicKeys\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repositories_contributed_to = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositoriesContributedTo\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"include_user_repositories\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeUserRepositories\" , default = None ), ), ( \"contribution_types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryContributionType ), graphql_name = \"contributionTypes\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) saved_replies = sgqlc . types . Field ( SavedReplyConnection , graphql_name = \"savedReplies\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SavedReplyOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) starred_repositories = sgqlc . types . Field ( sgqlc . types . non_null ( StarredRepositoryConnection ), graphql_name = \"starredRepositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"owned_by_viewer\" , sgqlc . types . Arg ( Boolean , graphql_name = \"ownedByViewer\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( StarOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) status = sgqlc . types . Field ( \"UserStatus\" , graphql_name = \"status\" ) top_repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"topRepositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RepositoryOrder ), graphql_name = \"orderBy\" , default = None , ), ), ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ) ), ) twitter_username = sgqlc . types . Field ( String , graphql_name = \"twitterUsername\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) viewer_can_follow = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanFollow\" ) viewer_is_following = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsFollowing\" ) watching = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"watching\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"affiliations\" , default = None , ), ), ( \"owner_affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"ownerAffiliations\" , default = ( \"OWNER\" , \"COLLABORATOR\" ), ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) UserBlockDuration Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2114 2115 2116 2117 2118 2119 2120 class UserBlockDuration ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ONE_DAY\" , \"ONE_MONTH\" , \"ONE_WEEK\" , \"PERMANENT\" , \"THREE_DAYS\" ) UserBlockedEvent Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32107 32108 32109 32110 32111 32112 32113 32114 32115 32116 32117 32118 32119 32120 32121 class UserBlockedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"block_duration\" , \"created_at\" , \"subject\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) block_duration = sgqlc . types . Field ( sgqlc . types . non_null ( UserBlockDuration ), graphql_name = \"blockDuration\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) subject = sgqlc . types . Field ( User , graphql_name = \"subject\" ) UserConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21427 21428 21429 21430 21431 21432 21433 21434 21435 21436 21437 21438 21439 21440 21441 class UserConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) UserContentEdit Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32124 32125 32126 32127 32128 32129 32130 32131 32132 32133 32134 32135 32136 32137 32138 32139 32140 32141 32142 32143 32144 32145 32146 32147 32148 32149 32150 32151 class UserContentEdit ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"deleted_at\" , \"deleted_by\" , \"diff\" , \"edited_at\" , \"editor\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) deleted_at = sgqlc . types . Field ( DateTime , graphql_name = \"deletedAt\" ) deleted_by = sgqlc . types . Field ( Actor , graphql_name = \"deletedBy\" ) diff = sgqlc . types . Field ( String , graphql_name = \"diff\" ) edited_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"editedAt\" ) editor = sgqlc . types . Field ( Actor , graphql_name = \"editor\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) UserContentEditConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21444 21445 21446 21447 21448 21449 21450 21451 21452 21453 21454 21455 21456 21457 21458 21459 21460 21461 21462 class UserContentEditConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserContentEditEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserContentEdit\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) UserContentEditEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21465 21466 21467 21468 21469 21470 21471 21472 21473 class UserContentEditEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"UserContentEdit\" , graphql_name = \"node\" ) UserEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21476 21477 21478 21479 21480 21481 21482 21483 21484 class UserEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) UserEmailMetadata Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21487 21488 21489 21490 21491 21492 21493 21494 21495 21496 class UserEmailMetadata ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"primary\" , \"type\" , \"value\" ) primary = sgqlc . types . Field ( Boolean , graphql_name = \"primary\" ) type = sgqlc . types . Field ( String , graphql_name = \"type\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"value\" ) UserStatus Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32154 32155 32156 32157 32158 32159 32160 32161 32162 32163 32164 32165 32166 32167 32168 32169 32170 32171 32172 32173 32174 32175 32176 32177 32178 32179 32180 32181 32182 32183 32184 32185 class UserStatus ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"emoji\" , \"emoji_html\" , \"expires_at\" , \"indicates_limited_availability\" , \"message\" , \"organization\" , \"updated_at\" , \"user\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) emoji = sgqlc . types . Field ( String , graphql_name = \"emoji\" ) emoji_html = sgqlc . types . Field ( HTML , graphql_name = \"emojiHTML\" ) expires_at = sgqlc . types . Field ( DateTime , graphql_name = \"expiresAt\" ) indicates_limited_availability = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"indicatesLimitedAvailability\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) organization = sgqlc . types . Field ( Organization , graphql_name = \"organization\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user = sgqlc . types . Field ( sgqlc . types . non_null ( User ), graphql_name = \"user\" ) UserStatusConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21499 21500 21501 21502 21503 21504 21505 21506 21507 21508 21509 21510 21511 21512 21513 21514 21515 class UserStatusConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserStatusEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserStatus\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) UserStatusEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21518 21519 21520 21521 21522 21523 21524 21525 21526 class UserStatusEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"UserStatus\" , graphql_name = \"node\" ) UserStatusOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6704 6705 6706 6707 6708 6709 6710 6711 6712 6713 6714 6715 6716 class UserStatusOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( UserStatusOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) UserStatusOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2123 2124 2125 2126 2127 2128 2129 class UserStatusOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"UPDATED_AT\" ,) VerifiableDomain Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32188 32189 32190 32191 32192 32193 32194 32195 32196 32197 32198 32199 32200 32201 32202 32203 32204 32205 32206 32207 32208 32209 32210 32211 32212 32213 32214 32215 32216 32217 32218 32219 32220 32221 32222 32223 32224 32225 32226 32227 32228 32229 32230 32231 32232 32233 32234 32235 32236 32237 32238 32239 32240 32241 32242 32243 class VerifiableDomain ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"dns_host_name\" , \"domain\" , \"has_found_host_name\" , \"has_found_verification_token\" , \"is_approved\" , \"is_required_for_policy_enforcement\" , \"is_verified\" , \"owner\" , \"punycode_encoded_domain\" , \"token_expiration_time\" , \"updated_at\" , \"verification_token\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) dns_host_name = sgqlc . types . Field ( URI , graphql_name = \"dnsHostName\" ) domain = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"domain\" ) has_found_host_name = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasFoundHostName\" ) has_found_verification_token = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasFoundVerificationToken\" ) is_approved = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isApproved\" ) is_required_for_policy_enforcement = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isRequiredForPolicyEnforcement\" ) is_verified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerified\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( \"VerifiableDomainOwner\" ), graphql_name = \"owner\" ) punycode_encoded_domain = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"punycodeEncodedDomain\" ) token_expiration_time = sgqlc . types . Field ( DateTime , graphql_name = \"tokenExpirationTime\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) verification_token = sgqlc . types . Field ( String , graphql_name = \"verificationToken\" ) VerifiableDomainConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21529 21530 21531 21532 21533 21534 21535 21536 21537 21538 21539 21540 21541 21542 21543 21544 21545 21546 21547 class VerifiableDomainConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"VerifiableDomainEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"VerifiableDomain\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) VerifiableDomainEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21550 21551 21552 21553 21554 21555 21556 21557 21558 class VerifiableDomainEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"VerifiableDomain\" , graphql_name = \"node\" ) VerifiableDomainOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6719 6720 6721 6722 6723 6724 6725 6726 6727 6728 6729 6730 6731 class VerifiableDomainOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( VerifiableDomainOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) VerifiableDomainOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2132 2133 2134 2135 2136 2137 2138 class VerifiableDomainOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"DOMAIN\" ) VerifiableDomainOwner Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32918 32919 32920 32921 32922 32923 32924 class VerifiableDomainOwner ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Enterprise , Organization ) VerifyVerifiableDomainInput Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6734 6735 6736 6737 6738 6739 6740 6741 6742 class VerifyVerifiableDomainInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) VerifyVerifiableDomainPayload Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21561 21562 21563 21564 21565 21566 21567 21568 21569 class VerifyVerifiableDomainPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"domain\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) domain = sgqlc . types . Field ( \"VerifiableDomain\" , graphql_name = \"domain\" ) ViewerHovercardContext Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32246 32247 32248 32249 32250 32251 32252 32253 class ViewerHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"viewer\" ,) viewer = sgqlc . types . Field ( sgqlc . types . non_null ( User ), graphql_name = \"viewer\" ) Votable Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21572 21573 21574 21575 21576 21577 21578 21579 21580 21581 21582 21583 21584 21585 21586 21587 class Votable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"upvote_count\" , \"viewer_can_upvote\" , \"viewer_has_upvoted\" ) upvote_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"upvoteCount\" ) viewer_can_upvote = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUpvote\" ) viewer_has_upvoted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasUpvoted\" ) Workflow Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32256 32257 32258 32259 32260 32261 32262 32263 32264 32265 32266 32267 32268 32269 32270 32271 32272 32273 32274 32275 32276 32277 32278 32279 32280 32281 32282 32283 32284 32285 32286 32287 32288 32289 32290 32291 32292 32293 class Workflow ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"name\" , \"runs\" , \"updated_at\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) runs = sgqlc . types . Field ( sgqlc . types . non_null ( WorkflowRunConnection ), graphql_name = \"runs\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( WorkflowRunOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) WorkflowRun Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32296 32297 32298 32299 32300 32301 32302 32303 32304 32305 32306 32307 32308 32309 32310 32311 32312 32313 32314 32315 32316 32317 32318 32319 32320 32321 32322 32323 32324 32325 32326 32327 32328 32329 32330 32331 32332 32333 32334 32335 32336 32337 32338 32339 32340 32341 32342 32343 32344 32345 32346 32347 32348 32349 32350 32351 32352 32353 32354 32355 32356 32357 32358 32359 32360 32361 class WorkflowRun ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_suite\" , \"created_at\" , \"database_id\" , \"deployment_reviews\" , \"pending_deployment_requests\" , \"resource_path\" , \"run_number\" , \"updated_at\" , \"url\" , \"workflow\" , ) check_suite = sgqlc . types . Field ( sgqlc . types . non_null ( CheckSuite ), graphql_name = \"checkSuite\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) deployment_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentReviewConnection ), graphql_name = \"deploymentReviews\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pending_deployment_requests = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentRequestConnection ), graphql_name = \"pendingDeploymentRequests\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) run_number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"runNumber\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) workflow = sgqlc . types . Field ( sgqlc . types . non_null ( Workflow ), graphql_name = \"workflow\" ) WorkflowRunConnection Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21590 21591 21592 21593 21594 21595 21596 21597 21598 21599 21600 21601 21602 21603 21604 21605 21606 class WorkflowRunConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"WorkflowRunEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"WorkflowRun\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) WorkflowRunEdge Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21609 21610 21611 21612 21613 21614 21615 21616 21617 class WorkflowRunEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"WorkflowRun\" , graphql_name = \"node\" ) WorkflowRunOrder Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 class WorkflowRunOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( WorkflowRunOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) WorkflowRunOrderField Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2141 2142 2143 2144 2145 2146 2147 class WorkflowRunOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,) X509Certificate Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2150 2151 2152 2153 2154 2155 class X509Certificate ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"Graphql Schema"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema","text":"","title":"graphql_schema"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema-classes","text":"","title":"Classes"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AbortQueuedMigrationsInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2161 2162 2163 2164 2165 2166 2167 2168 2169 class AbortQueuedMigrationsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AbortQueuedMigrationsInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AbortQueuedMigrationsPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6763 6764 6765 6766 6767 6768 6769 6770 6771 class AbortQueuedMigrationsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"success\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) success = sgqlc . types . Field ( Boolean , graphql_name = \"success\" )","title":"AbortQueuedMigrationsPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AcceptEnterpriseAdministratorInvitationInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 class AcceptEnterpriseAdministratorInvitationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"invitation_id\" , \"client_mutation_id\" ) invitation_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"invitationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AcceptEnterpriseAdministratorInvitationInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AcceptEnterpriseAdministratorInvitationPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6774 6775 6776 6777 6778 6779 6780 6781 6782 6783 6784 6785 class AcceptEnterpriseAdministratorInvitationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"invitation\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) invitation = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"invitation\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"AcceptEnterpriseAdministratorInvitationPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AcceptTopicSuggestionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 class AcceptTopicSuggestionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AcceptTopicSuggestionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AcceptTopicSuggestionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6788 6789 6790 6791 6792 6793 6794 6795 6796 class AcceptTopicSuggestionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"topic\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) topic = sgqlc . types . Field ( \"Topic\" , graphql_name = \"topic\" )","title":"AcceptTopicSuggestionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Actor","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6799 6800 6801 6802 6803 6804 6805 6806 6807 6808 6809 6810 6811 6812 6813 6814 6815 6816 6817 class Actor ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"login\" , \"resource_path\" , \"url\" ) avatar_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"Actor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ActorLocation","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6820 6821 6822 6823 6824 6825 6826 6827 6828 6829 6830 6831 class ActorLocation ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"city\" , \"country\" , \"country_code\" , \"region\" , \"region_code\" ) city = sgqlc . types . Field ( String , graphql_name = \"city\" ) country = sgqlc . types . Field ( String , graphql_name = \"country\" ) country_code = sgqlc . types . Field ( String , graphql_name = \"countryCode\" ) region = sgqlc . types . Field ( String , graphql_name = \"region\" ) region_code = sgqlc . types . Field ( String , graphql_name = \"regionCode\" )","title":"ActorLocation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ActorType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16 17 18 19 20 21 22 class ActorType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"TEAM\" , \"USER\" )","title":"ActorType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddAssigneesToAssignableInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 class AddAssigneesToAssignableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignable_id\" , \"assignee_ids\" , \"client_mutation_id\" ) assignable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"assignableId\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"assigneeIds\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddAssigneesToAssignableInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddAssigneesToAssignablePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6834 6835 6836 6837 6838 6839 6840 6841 6842 class AddAssigneesToAssignablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignable\" , \"client_mutation_id\" ) assignable = sgqlc . types . Field ( \"Assignable\" , graphql_name = \"assignable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddAssigneesToAssignablePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 class AddCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"body\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6845 6846 6847 6848 6849 6850 6851 6852 6853 6854 6855 6856 6857 class AddCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment_edge\" , \"subject\" , \"timeline_edge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment_edge = sgqlc . types . Field ( \"IssueCommentEdge\" , graphql_name = \"commentEdge\" ) subject = sgqlc . types . Field ( \"Node\" , graphql_name = \"subject\" ) timeline_edge = sgqlc . types . Field ( \"IssueTimelineItemEdge\" , graphql_name = \"timelineEdge\" )","title":"AddCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddDiscussionCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 class AddDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"discussion_id\" , \"reply_to_id\" , \"body\" , \"client_mutation_id\" ) discussion_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"discussionId\" ) reply_to_id = sgqlc . types . Field ( ID , graphql_name = \"replyToId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddDiscussionCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddDiscussionCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6860 6861 6862 6863 6864 6865 6866 6867 6868 class AddDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"comment\" )","title":"AddDiscussionCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddDiscussionPollVoteInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 class AddDiscussionPollVoteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"poll_option_id\" , \"client_mutation_id\" ) poll_option_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pollOptionId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddDiscussionPollVoteInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddDiscussionPollVotePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6871 6872 6873 6874 6875 6876 6877 6878 6879 class AddDiscussionPollVotePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"poll_option\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) poll_option = sgqlc . types . Field ( \"DiscussionPollOption\" , graphql_name = \"pollOption\" )","title":"AddDiscussionPollVotePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddEnterpriseSupportEntitlementInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 class AddEnterpriseSupportEntitlementInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddEnterpriseSupportEntitlementInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddEnterpriseSupportEntitlementPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6882 6883 6884 6885 6886 6887 6888 6889 6890 class AddEnterpriseSupportEntitlementPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"AddEnterpriseSupportEntitlementPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddLabelsToLabelableInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 class AddLabelsToLabelableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"labelable_id\" , \"label_ids\" , \"client_mutation_id\" ) labelable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"labelableId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"labelIds\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddLabelsToLabelableInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddLabelsToLabelablePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6893 6894 6895 6896 6897 6898 6899 6900 6901 class AddLabelsToLabelablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"labelable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) labelable = sgqlc . types . Field ( \"Labelable\" , graphql_name = \"labelable\" )","title":"AddLabelsToLabelablePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectCardInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 class AddProjectCardInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_column_id\" , \"content_id\" , \"note\" , \"client_mutation_id\" ) project_column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectColumnId\" ) content_id = sgqlc . types . Field ( ID , graphql_name = \"contentId\" ) note = sgqlc . types . Field ( String , graphql_name = \"note\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddProjectCardInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectCardPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6904 6905 6906 6907 6908 6909 6910 6911 6912 6913 class AddProjectCardPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"card_edge\" , \"client_mutation_id\" , \"project_column\" ) card_edge = sgqlc . types . Field ( \"ProjectCardEdge\" , graphql_name = \"cardEdge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_column = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"projectColumn\" )","title":"AddProjectCardPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectColumnInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 class AddProjectColumnInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"name\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddProjectColumnInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectColumnPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6916 6917 6918 6919 6920 6921 6922 6923 6924 6925 class AddProjectColumnPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"column_edge\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) column_edge = sgqlc . types . Field ( \"ProjectColumnEdge\" , graphql_name = \"columnEdge\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" )","title":"AddProjectColumnPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectDraftIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 class AddProjectDraftIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddProjectDraftIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectDraftIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6928 6929 6930 6931 6932 6933 6934 6935 6936 6937 6938 class AddProjectDraftIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_next_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_next_item = sgqlc . types . Field ( \"ProjectNextItem\" , graphql_name = \"projectNextItem\" )","title":"AddProjectDraftIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectNextItemInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 class AddProjectNextItemInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"content_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) content_id = sgqlc . types . Field ( ID , graphql_name = \"contentId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddProjectNextItemInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectNextItemPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6941 6942 6943 6944 6945 6946 6947 6948 6949 6950 6951 class AddProjectNextItemPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_next_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_next_item = sgqlc . types . Field ( \"ProjectNextItem\" , graphql_name = \"projectNextItem\" )","title":"AddProjectNextItemPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectV2DraftIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 class AddProjectV2DraftIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddProjectV2DraftIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectV2DraftIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6954 6955 6956 6957 6958 6959 6960 6961 6962 class AddProjectV2DraftIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_item = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"projectItem\" )","title":"AddProjectV2DraftIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectV2ItemByIdInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 class AddProjectV2ItemByIdInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"content_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) content_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"contentId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddProjectV2ItemByIdInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddProjectV2ItemByIdPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6965 6966 6967 6968 6969 6970 6971 6972 6973 class AddProjectV2ItemByIdPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) item = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"item\" )","title":"AddProjectV2ItemByIdPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 class AddPullRequestReviewCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"pull_request_review_id\" , \"commit_oid\" , \"body\" , \"path\" , \"position\" , \"in_reply_to\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestId\" ) pull_request_review_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestReviewId\" ) commit_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"commitOID\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) in_reply_to = sgqlc . types . Field ( ID , graphql_name = \"inReplyTo\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddPullRequestReviewCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6976 6977 6978 6979 6980 6981 6982 6983 6984 6985 6986 6987 class AddPullRequestReviewCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment\" , \"comment_edge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"comment\" ) comment_edge = sgqlc . types . Field ( \"PullRequestReviewCommentEdge\" , graphql_name = \"commentEdge\" )","title":"AddPullRequestReviewCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 class AddPullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"commit_oid\" , \"body\" , \"event\" , \"comments\" , \"threads\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) commit_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"commitOID\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) event = sgqlc . types . Field ( PullRequestReviewEvent , graphql_name = \"event\" ) comments = sgqlc . types . Field ( sgqlc . types . list_of ( \"DraftPullRequestReviewComment\" ), graphql_name = \"comments\" ) threads = sgqlc . types . Field ( sgqlc . types . list_of ( \"DraftPullRequestReviewThread\" ), graphql_name = \"threads\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddPullRequestReviewInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6990 6991 6992 6993 6994 6995 6996 6997 6998 6999 7000 7001 class AddPullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" , \"review_edge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" ) review_edge = sgqlc . types . Field ( \"PullRequestReviewEdge\" , graphql_name = \"reviewEdge\" )","title":"AddPullRequestReviewPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewThreadInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 class AddPullRequestReviewThreadInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"body\" , \"pull_request_id\" , \"pull_request_review_id\" , \"line\" , \"side\" , \"start_line\" , \"start_side\" , \"client_mutation_id\" , ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) pull_request_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestId\" ) pull_request_review_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestReviewId\" ) line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"line\" ) side = sgqlc . types . Field ( DiffSide , graphql_name = \"side\" ) start_line = sgqlc . types . Field ( Int , graphql_name = \"startLine\" ) start_side = sgqlc . types . Field ( DiffSide , graphql_name = \"startSide\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddPullRequestReviewThreadInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddPullRequestReviewThreadPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7004 7005 7006 7007 7008 7009 7010 7011 7012 class AddPullRequestReviewThreadPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"thread\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) thread = sgqlc . types . Field ( \"PullRequestReviewThread\" , graphql_name = \"thread\" )","title":"AddPullRequestReviewThreadPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddReactionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 class AddReactionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"content\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) content = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionContent ), graphql_name = \"content\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddReactionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddReactionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7015 7016 7017 7018 7019 7020 7021 7022 7023 7024 class AddReactionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"reaction\" , \"subject\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) reaction = sgqlc . types . Field ( \"Reaction\" , graphql_name = \"reaction\" ) subject = sgqlc . types . Field ( \"Reactable\" , graphql_name = \"subject\" )","title":"AddReactionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddStarInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 class AddStarInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"starrable_id\" , \"client_mutation_id\" ) starrable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"starrableId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddStarInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddStarPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7027 7028 7029 7030 7031 7032 7033 7034 7035 class AddStarPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"starrable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) starrable = sgqlc . types . Field ( \"Starrable\" , graphql_name = \"starrable\" )","title":"AddStarPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddUpvoteInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2493 2494 2495 2496 2497 2498 2499 2500 2501 class AddUpvoteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddUpvoteInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddUpvotePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7038 7039 7040 7041 7042 7043 7044 7045 7046 class AddUpvotePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"subject\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) subject = sgqlc . types . Field ( \"Votable\" , graphql_name = \"subject\" )","title":"AddUpvotePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddVerifiableDomainInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 class AddVerifiableDomainInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"domain\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) domain = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"domain\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"AddVerifiableDomainInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddVerifiableDomainPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7049 7050 7051 7052 7053 7054 7055 7056 7057 class AddVerifiableDomainPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"domain\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) domain = sgqlc . types . Field ( \"VerifiableDomain\" , graphql_name = \"domain\" )","title":"AddVerifiableDomainPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AddedToProjectEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21620 21621 21622 21623 21624 21625 21626 21627 21628 21629 21630 21631 class AddedToProjectEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" )","title":"AddedToProjectEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.App","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21634 21635 21636 21637 21638 21639 21640 21641 21642 21643 21644 21645 21646 21647 21648 21649 21650 21651 21652 21653 21654 21655 21656 21657 21658 21659 21660 21661 21662 21663 21664 21665 21666 21667 21668 21669 21670 21671 21672 21673 21674 21675 21676 21677 21678 21679 21680 21681 21682 21683 21684 21685 21686 21687 21688 21689 21690 21691 21692 21693 21694 21695 class App ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"description\" , \"ip_allow_list_entries\" , \"logo_background_color\" , \"logo_url\" , \"name\" , \"slug\" , \"updated_at\" , \"url\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) ip_allow_list_entries = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEntryConnection ), graphql_name = \"ipAllowListEntries\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( IpAllowListEntryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" }, ), ), ) ), ) logo_background_color = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"logoBackgroundColor\" ) logo_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"logoUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"App"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ApproveDeploymentsInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 class ApproveDeploymentsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"workflow_run_id\" , \"environment_ids\" , \"comment\" , \"client_mutation_id\" , ) workflow_run_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"workflowRunId\" ) environment_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"environmentIds\" , ) comment = sgqlc . types . Field ( String , graphql_name = \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ApproveDeploymentsInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ApproveDeploymentsPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7060 7061 7062 7063 7064 7065 7066 7067 7068 7069 7070 7071 class ApproveDeploymentsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deployments\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deployments = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"Deployment\" )), graphql_name = \"deployments\" , )","title":"ApproveDeploymentsPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ApproveVerifiableDomainInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2539 2540 2541 2542 2543 2544 2545 2546 2547 class ApproveVerifiableDomainInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ApproveVerifiableDomainInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ApproveVerifiableDomainPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7074 7075 7076 7077 7078 7079 7080 7081 7082 class ApproveVerifiableDomainPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"domain\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) domain = sgqlc . types . Field ( \"VerifiableDomain\" , graphql_name = \"domain\" )","title":"ApproveVerifiableDomainPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ArchiveRepositoryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 class ArchiveRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ArchiveRepositoryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ArchiveRepositoryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7085 7086 7087 7088 7089 7090 7091 7092 7093 class ArchiveRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"ArchiveRepositoryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Assignable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7096 7097 7098 7099 7100 7101 7102 7103 7104 7105 7106 7107 7108 7109 7110 7111 7112 7113 7114 7115 7116 7117 class Assignable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignees\" ,) assignees = sgqlc . types . Field ( sgqlc . types . non_null ( \"UserConnection\" ), graphql_name = \"assignees\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"Assignable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AssignedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21698 21699 21700 21701 21702 21703 21704 21705 21706 21707 21708 21709 21710 21711 21712 21713 class AssignedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"assignable\" , \"assignee\" , \"created_at\" , \"user\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) assignable = sgqlc . types . Field ( sgqlc . types . non_null ( Assignable ), graphql_name = \"assignable\" ) assignee = sgqlc . types . Field ( \"Assignee\" , graphql_name = \"assignee\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"AssignedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Assignee","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32367 32368 32369 32370 32371 32372 32373 class Assignee ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Bot , Mannequin , Organization , User )","title":"Assignee"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AuditEntry","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7120 7121 7122 7123 7124 7125 7126 7127 7128 7129 7130 7131 7132 7133 7134 7135 7136 7137 7138 7139 7140 7141 7142 7143 7144 7145 7146 7147 7148 7149 7150 7151 7152 7153 7154 7155 class AuditEntry ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"action\" , \"actor\" , \"actor_ip\" , \"actor_location\" , \"actor_login\" , \"actor_resource_path\" , \"actor_url\" , \"created_at\" , \"operation_type\" , \"user\" , \"user_login\" , \"user_resource_path\" , \"user_url\" , ) action = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"action\" ) actor = sgqlc . types . Field ( \"AuditEntryActor\" , graphql_name = \"actor\" ) actor_ip = sgqlc . types . Field ( String , graphql_name = \"actorIp\" ) actor_location = sgqlc . types . Field ( ActorLocation , graphql_name = \"actorLocation\" ) actor_login = sgqlc . types . Field ( String , graphql_name = \"actorLogin\" ) actor_resource_path = sgqlc . types . Field ( URI , graphql_name = \"actorResourcePath\" ) actor_url = sgqlc . types . Field ( URI , graphql_name = \"actorUrl\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( PreciseDateTime ), graphql_name = \"createdAt\" ) operation_type = sgqlc . types . Field ( OperationType , graphql_name = \"operationType\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" ) user_login = sgqlc . types . Field ( String , graphql_name = \"userLogin\" ) user_resource_path = sgqlc . types . Field ( URI , graphql_name = \"userResourcePath\" ) user_url = sgqlc . types . Field ( URI , graphql_name = \"userUrl\" )","title":"AuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AuditEntryActor","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32376 32377 32378 32379 32380 32381 32382 class AuditEntryActor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Bot , Organization , User )","title":"AuditEntryActor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AuditLogOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2563 2564 2565 2566 2567 2568 2569 2570 2571 class AuditLogOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( AuditLogOrderField , graphql_name = \"field\" ) direction = sgqlc . types . Field ( OrderDirection , graphql_name = \"direction\" )","title":"AuditLogOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AuditLogOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25 26 27 28 29 30 31 class AuditLogOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"AuditLogOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoMergeDisabledEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21716 21717 21718 21719 21720 21721 21722 21723 21724 21725 21726 21727 21728 21729 21730 21731 21732 21733 21734 21735 21736 21737 class AutoMergeDisabledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"disabler\" , \"pull_request\" , \"reason\" , \"reason_code\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) disabler = sgqlc . types . Field ( \"User\" , graphql_name = \"disabler\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) reason = sgqlc . types . Field ( String , graphql_name = \"reason\" ) reason_code = sgqlc . types . Field ( String , graphql_name = \"reasonCode\" )","title":"AutoMergeDisabledEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoMergeEnabledEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21740 21741 21742 21743 21744 21745 21746 21747 21748 21749 21750 21751 21752 class AutoMergeEnabledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"enabler\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enabler = sgqlc . types . Field ( \"User\" , graphql_name = \"enabler\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"AutoMergeEnabledEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoMergeRequest","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7158 7159 7160 7161 7162 7163 7164 7165 7166 7167 7168 7169 7170 7171 7172 7173 7174 7175 7176 7177 7178 7179 7180 7181 7182 7183 class AutoMergeRequest ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"author_email\" , \"commit_body\" , \"commit_headline\" , \"enabled_at\" , \"enabled_by\" , \"merge_method\" , \"pull_request\" , ) author_email = sgqlc . types . Field ( String , graphql_name = \"authorEmail\" ) commit_body = sgqlc . types . Field ( String , graphql_name = \"commitBody\" ) commit_headline = sgqlc . types . Field ( String , graphql_name = \"commitHeadline\" ) enabled_at = sgqlc . types . Field ( DateTime , graphql_name = \"enabledAt\" ) enabled_by = sgqlc . types . Field ( Actor , graphql_name = \"enabledBy\" ) merge_method = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestMergeMethod ), graphql_name = \"mergeMethod\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"AutoMergeRequest"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoRebaseEnabledEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21755 21756 21757 21758 21759 21760 21761 21762 21763 21764 21765 21766 21767 class AutoRebaseEnabledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"enabler\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enabler = sgqlc . types . Field ( \"User\" , graphql_name = \"enabler\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"AutoRebaseEnabledEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutoSquashEnabledEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21770 21771 21772 21773 21774 21775 21776 21777 21778 21779 21780 21781 21782 class AutoSquashEnabledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"enabler\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enabler = sgqlc . types . Field ( \"User\" , graphql_name = \"enabler\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"AutoSquashEnabledEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutomaticBaseChangeFailedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21785 21786 21787 21788 21789 21790 21791 21792 21793 21794 21795 21796 21797 21798 21799 21800 class AutomaticBaseChangeFailedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"new_base\" , \"old_base\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) new_base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"newBase\" ) old_base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"oldBase\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"AutomaticBaseChangeFailedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.AutomaticBaseChangeSucceededEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21803 21804 21805 21806 21807 21808 21809 21810 21811 21812 21813 21814 21815 21816 21817 21818 class AutomaticBaseChangeSucceededEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"new_base\" , \"old_base\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) new_base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"newBase\" ) old_base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"oldBase\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"AutomaticBaseChangeSucceededEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Base64String","text":"Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 34 35 36 37 38 39 class Base64String ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"Base64String"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BaseRefChangedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21821 21822 21823 21824 21825 21826 21827 21828 21829 21830 21831 21832 21833 21834 21835 21836 21837 21838 21839 21840 21841 21842 21843 21844 21845 21846 21847 21848 class BaseRefChangedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"current_ref_name\" , \"database_id\" , \"previous_ref_name\" , \"pull_request\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) current_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"currentRefName\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) previous_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"previousRefName\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"BaseRefChangedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BaseRefDeletedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21851 21852 21853 21854 21855 21856 21857 21858 21859 21860 21861 21862 21863 class BaseRefDeletedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"base_ref_name\" , \"created_at\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) base_ref_name = sgqlc . types . Field ( String , graphql_name = \"baseRefName\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"BaseRefDeletedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BaseRefForcePushedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21866 21867 21868 21869 21870 21871 21872 21873 21874 21875 21876 21877 21878 21879 21880 21881 21882 21883 21884 21885 21886 21887 21888 21889 class BaseRefForcePushedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"after_commit\" , \"before_commit\" , \"created_at\" , \"pull_request\" , \"ref\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) after_commit = sgqlc . types . Field ( \"Commit\" , graphql_name = \"afterCommit\" ) before_commit = sgqlc . types . Field ( \"Commit\" , graphql_name = \"beforeCommit\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" )","title":"BaseRefForcePushedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Blame","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7186 7187 7188 7189 7190 7191 7192 7193 7194 7195 7196 class Blame ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ranges\" ,) ranges = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"BlameRange\" ))), graphql_name = \"ranges\" , )","title":"Blame"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BlameRange","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7199 7200 7201 7202 7203 7204 7205 7206 7207 7208 7209 7210 7211 7212 7213 class BlameRange ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"age\" , \"commit\" , \"ending_line\" , \"starting_line\" ) age = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"age\" ) commit = sgqlc . types . Field ( sgqlc . types . non_null ( \"Commit\" ), graphql_name = \"commit\" ) ending_line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"endingLine\" ) starting_line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"startingLine\" )","title":"BlameRange"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Blob","text":"Bases: sgqlc . types . Type , GitObject , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21892 21893 21894 21895 21896 21897 21898 21899 21900 21901 21902 21903 21904 class Blob ( sgqlc . types . Type , GitObject , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"byte_size\" , \"is_binary\" , \"is_truncated\" , \"text\" ) byte_size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"byteSize\" ) is_binary = sgqlc . types . Field ( Boolean , graphql_name = \"isBinary\" ) is_truncated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isTruncated\" ) text = sgqlc . types . Field ( String , graphql_name = \"text\" )","title":"Blob"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Bot","text":"Bases: sgqlc . types . Type , Node , Actor , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21907 21908 21909 21910 21911 21912 21913 21914 21915 21916 21917 21918 21919 21920 class Bot ( sgqlc . types . Type , Node , Actor , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"updated_at\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"Bot"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchActorAllowanceActor","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32385 32386 32387 32388 32389 32390 32391 class BranchActorAllowanceActor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Team , User )","title":"BranchActorAllowanceActor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRule","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass BranchProtectionRule ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"allows_deletions\" , \"allows_force_pushes\" , \"blocks_creations\" , \"branch_protection_rule_conflicts\" , \"bypass_force_push_allowances\" , \"bypass_pull_request_allowances\" , \"creator\" , \"database_id\" , \"dismisses_stale_reviews\" , \"is_admin_enforced\" , \"matching_refs\" , \"pattern\" , \"push_allowances\" , \"repository\" , \"required_approving_review_count\" , \"required_status_check_contexts\" , \"required_status_checks\" , \"requires_approving_reviews\" , \"requires_code_owner_reviews\" , \"requires_commit_signatures\" , \"requires_conversation_resolution\" , \"requires_linear_history\" , \"requires_status_checks\" , \"requires_strict_status_checks\" , \"restricts_pushes\" , \"restricts_review_dismissals\" , \"review_dismissal_allowances\" , ) allows_deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowsDeletions\" ) allows_force_pushes = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowsForcePushes\" ) blocks_creations = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"blocksCreations\" ) branch_protection_rule_conflicts = sgqlc . types . Field ( sgqlc . types . non_null ( BranchProtectionRuleConflictConnection ), graphql_name = \"branchProtectionRuleConflicts\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) bypass_force_push_allowances = sgqlc . types . Field ( sgqlc . types . non_null ( BypassForcePushAllowanceConnection ), graphql_name = \"bypassForcePushAllowances\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) bypass_pull_request_allowances = sgqlc . types . Field ( sgqlc . types . non_null ( BypassPullRequestAllowanceConnection ), graphql_name = \"bypassPullRequestAllowances\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) dismisses_stale_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"dismissesStaleReviews\" ) is_admin_enforced = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isAdminEnforced\" ) matching_refs = sgqlc . types . Field ( sgqlc . types . non_null ( RefConnection ), graphql_name = \"matchingRefs\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pattern = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"pattern\" ) push_allowances = sgqlc . types . Field ( sgqlc . types . non_null ( PushAllowanceConnection ), graphql_name = \"pushAllowances\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) required_approving_review_count = sgqlc . types . Field ( Int , graphql_name = \"requiredApprovingReviewCount\" ) required_status_check_contexts = sgqlc . types . Field ( sgqlc . types . list_of ( String ), graphql_name = \"requiredStatusCheckContexts\" ) required_status_checks = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( RequiredStatusCheckDescription )), graphql_name = \"requiredStatusChecks\" , ) requires_approving_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresApprovingReviews\" ) requires_code_owner_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresCodeOwnerReviews\" ) requires_commit_signatures = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresCommitSignatures\" ) requires_conversation_resolution = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresConversationResolution\" ) requires_linear_history = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresLinearHistory\" ) requires_status_checks = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresStatusChecks\" ) requires_strict_status_checks = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresStrictStatusChecks\" ) restricts_pushes = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"restrictsPushes\" ) restricts_review_dismissals = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"restrictsReviewDismissals\" ) review_dismissal_allowances = sgqlc . types . Field ( sgqlc . types . non_null ( ReviewDismissalAllowanceConnection ), graphql_name = \"reviewDismissalAllowances\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"BranchProtectionRule"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleConflict","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7216 7217 7218 7219 7220 7221 7222 7223 7224 7225 7226 7227 7228 7229 7230 7231 7232 7233 class BranchProtectionRuleConflict ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule\" , \"conflicting_branch_protection_rule\" , \"ref\" , ) branch_protection_rule = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"branchProtectionRule\" ) conflicting_branch_protection_rule = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"conflictingBranchProtectionRule\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" )","title":"BranchProtectionRuleConflict"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleConflictConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7236 7237 7238 7239 7240 7241 7242 7243 7244 7245 7246 7247 7248 7249 7250 7251 7252 7253 7254 class BranchProtectionRuleConflictConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"BranchProtectionRuleConflictEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( BranchProtectionRuleConflict ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"BranchProtectionRuleConflictConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleConflictEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7257 7258 7259 7260 7261 7262 7263 7264 7265 class BranchProtectionRuleConflictEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( BranchProtectionRuleConflict , graphql_name = \"node\" )","title":"BranchProtectionRuleConflictEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7268 7269 7270 7271 7272 7273 7274 7275 7276 7277 7278 7279 7280 7281 7282 7283 7284 7285 7286 class BranchProtectionRuleConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"BranchProtectionRuleEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"BranchProtectionRule\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"BranchProtectionRuleConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BranchProtectionRuleEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7289 7290 7291 7292 7293 7294 7295 7296 7297 class BranchProtectionRuleEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"node\" )","title":"BranchProtectionRuleEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassForcePushAllowance","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22107 22108 22109 22110 22111 22112 22113 22114 22115 22116 22117 class BypassForcePushAllowance ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"branch_protection_rule\" ) actor = sgqlc . types . Field ( \"BranchActorAllowanceActor\" , graphql_name = \"actor\" ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" )","title":"BypassForcePushAllowance"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassForcePushAllowanceConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7300 7301 7302 7303 7304 7305 7306 7307 7308 7309 7310 7311 7312 7313 7314 7315 7316 7317 7318 class BypassForcePushAllowanceConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"BypassForcePushAllowanceEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"BypassForcePushAllowance\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"BypassForcePushAllowanceConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassForcePushAllowanceEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7321 7322 7323 7324 7325 7326 7327 7328 7329 class BypassForcePushAllowanceEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"BypassForcePushAllowance\" , graphql_name = \"node\" )","title":"BypassForcePushAllowanceEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassPullRequestAllowance","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22120 22121 22122 22123 22124 22125 22126 22127 22128 22129 22130 class BypassPullRequestAllowance ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"branch_protection_rule\" ) actor = sgqlc . types . Field ( \"BranchActorAllowanceActor\" , graphql_name = \"actor\" ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" )","title":"BypassPullRequestAllowance"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassPullRequestAllowanceConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7332 7333 7334 7335 7336 7337 7338 7339 7340 7341 7342 7343 7344 7345 7346 7347 7348 7349 7350 class BypassPullRequestAllowanceConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"BypassPullRequestAllowanceEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"BypassPullRequestAllowance\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"BypassPullRequestAllowanceConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.BypassPullRequestAllowanceEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7353 7354 7355 7356 7357 7358 7359 7360 7361 class BypassPullRequestAllowanceEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"BypassPullRequestAllowance\" , graphql_name = \"node\" )","title":"BypassPullRequestAllowanceEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CVSS","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7364 7365 7366 7367 7368 7369 7370 7371 7372 class CVSS ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"score\" , \"vector_string\" ) score = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"score\" ) vector_string = sgqlc . types . Field ( String , graphql_name = \"vectorString\" )","title":"CVSS"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CWE","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22133 22134 22135 22136 22137 22138 22139 22140 22141 22142 22143 22144 class CWE ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cwe_id\" , \"description\" , \"name\" ) cwe_id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cweId\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" )","title":"CWE"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CWEConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7375 7376 7377 7378 7379 7380 7381 7382 7383 7384 7385 7386 7387 7388 7389 class CWEConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CWEEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CWE\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CWEConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CWEEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7392 7393 7394 7395 7396 7397 7398 7399 7400 class CWEEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CWE\" , graphql_name = \"node\" )","title":"CWEEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CancelEnterpriseAdminInvitationInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 class CancelEnterpriseAdminInvitationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"invitation_id\" , \"client_mutation_id\" ) invitation_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"invitationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CancelEnterpriseAdminInvitationInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CancelEnterpriseAdminInvitationPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7403 7404 7405 7406 7407 7408 7409 7410 7411 7412 7413 7414 class CancelEnterpriseAdminInvitationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"invitation\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) invitation = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"invitation\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"CancelEnterpriseAdminInvitationPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CancelSponsorshipInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 class CancelSponsorshipInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsor_id\" , \"sponsor_login\" , \"sponsorable_id\" , \"sponsorable_login\" , \"client_mutation_id\" , ) sponsor_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorId\" ) sponsor_login = sgqlc . types . Field ( String , graphql_name = \"sponsorLogin\" ) sponsorable_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorableId\" ) sponsorable_login = sgqlc . types . Field ( String , graphql_name = \"sponsorableLogin\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CancelSponsorshipInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CancelSponsorshipPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7417 7418 7419 7420 7421 7422 7423 7424 7425 class CancelSponsorshipPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"sponsors_tier\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) sponsors_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"sponsorsTier\" )","title":"CancelSponsorshipPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ChangeUserStatusInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 class ChangeUserStatusInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"emoji\" , \"message\" , \"organization_id\" , \"limited_availability\" , \"expires_at\" , \"client_mutation_id\" , ) emoji = sgqlc . types . Field ( String , graphql_name = \"emoji\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) organization_id = sgqlc . types . Field ( ID , graphql_name = \"organizationId\" ) limited_availability = sgqlc . types . Field ( Boolean , graphql_name = \"limitedAvailability\" ) expires_at = sgqlc . types . Field ( DateTime , graphql_name = \"expiresAt\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ChangeUserStatusInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ChangeUserStatusPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7428 7429 7430 7431 7432 7433 7434 7435 7436 class ChangeUserStatusPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"status\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) status = sgqlc . types . Field ( \"UserStatus\" , graphql_name = \"status\" )","title":"ChangeUserStatusPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotation","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7439 7440 7441 7442 7443 7444 7445 7446 7447 7448 7449 7450 7451 7452 7453 7454 7455 7456 7457 7458 7459 7460 7461 7462 7463 7464 7465 7466 class CheckAnnotation ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"annotation_level\" , \"blob_url\" , \"database_id\" , \"location\" , \"message\" , \"path\" , \"raw_details\" , \"title\" , ) annotation_level = sgqlc . types . Field ( CheckAnnotationLevel , graphql_name = \"annotationLevel\" ) blob_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"blobUrl\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) location = sgqlc . types . Field ( sgqlc . types . non_null ( \"CheckAnnotationSpan\" ), graphql_name = \"location\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) raw_details = sgqlc . types . Field ( String , graphql_name = \"rawDetails\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" )","title":"CheckAnnotation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7469 7470 7471 7472 7473 7474 7475 7476 7477 7478 7479 7480 7481 7482 7483 7484 7485 7486 7487 class CheckAnnotationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckAnnotationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( CheckAnnotation ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CheckAnnotationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationData","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 class CheckAnnotationData ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"location\" , \"annotation_level\" , \"message\" , \"title\" , \"raw_details\" , ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) location = sgqlc . types . Field ( sgqlc . types . non_null ( \"CheckAnnotationRange\" ), graphql_name = \"location\" ) annotation_level = sgqlc . types . Field ( sgqlc . types . non_null ( CheckAnnotationLevel ), graphql_name = \"annotationLevel\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) raw_details = sgqlc . types . Field ( String , graphql_name = \"rawDetails\" )","title":"CheckAnnotationData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7490 7491 7492 7493 7494 7495 7496 7497 7498 class CheckAnnotationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( CheckAnnotation , graphql_name = \"node\" )","title":"CheckAnnotationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationLevel","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 45 46 47 48 49 50 51 class CheckAnnotationLevel ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FAILURE\" , \"NOTICE\" , \"WARNING\" )","title":"CheckAnnotationLevel"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationPosition","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7501 7502 7503 7504 7505 7506 7507 7508 7509 class CheckAnnotationPosition ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column\" , \"line\" ) column = sgqlc . types . Field ( Int , graphql_name = \"column\" ) line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"line\" )","title":"CheckAnnotationPosition"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationRange","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 class CheckAnnotationRange ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"start_line\" , \"start_column\" , \"end_line\" , \"end_column\" ) start_line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"startLine\" ) start_column = sgqlc . types . Field ( Int , graphql_name = \"startColumn\" ) end_line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"endLine\" ) end_column = sgqlc . types . Field ( Int , graphql_name = \"endColumn\" )","title":"CheckAnnotationRange"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckAnnotationSpan","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7512 7513 7514 7515 7516 7517 7518 7519 7520 7521 7522 7523 7524 class CheckAnnotationSpan ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"end\" , \"start\" ) end = sgqlc . types . Field ( sgqlc . types . non_null ( CheckAnnotationPosition ), graphql_name = \"end\" ) start = sgqlc . types . Field ( sgqlc . types . non_null ( CheckAnnotationPosition ), graphql_name = \"start\" )","title":"CheckAnnotationSpan"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckConclusionState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class CheckConclusionState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTION_REQUIRED\" , \"CANCELLED\" , \"FAILURE\" , \"NEUTRAL\" , \"SKIPPED\" , \"STALE\" , \"STARTUP_FAILURE\" , \"SUCCESS\" , \"TIMED_OUT\" , )","title":"CheckConclusionState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRun","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable , RequirableByPullRequest See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22147 22148 22149 22150 22151 22152 22153 22154 22155 22156 22157 22158 22159 22160 22161 22162 22163 22164 22165 22166 22167 22168 22169 22170 22171 22172 22173 22174 22175 22176 22177 22178 22179 22180 22181 22182 22183 22184 22185 22186 22187 22188 22189 22190 22191 22192 22193 22194 22195 22196 22197 22198 22199 22200 22201 22202 22203 22204 22205 22206 22207 22208 22209 22210 22211 22212 22213 22214 22215 22216 22217 22218 22219 22220 22221 22222 22223 22224 22225 22226 22227 22228 22229 class CheckRun ( sgqlc . types . Type , Node , UniformResourceLocatable , RequirableByPullRequest ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"annotations\" , \"check_suite\" , \"completed_at\" , \"conclusion\" , \"database_id\" , \"deployment\" , \"details_url\" , \"external_id\" , \"name\" , \"pending_deployment_request\" , \"permalink\" , \"repository\" , \"started_at\" , \"status\" , \"steps\" , \"summary\" , \"text\" , \"title\" , ) annotations = sgqlc . types . Field ( CheckAnnotationConnection , graphql_name = \"annotations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) check_suite = sgqlc . types . Field ( sgqlc . types . non_null ( \"CheckSuite\" ), graphql_name = \"checkSuite\" ) completed_at = sgqlc . types . Field ( DateTime , graphql_name = \"completedAt\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) deployment = sgqlc . types . Field ( \"Deployment\" , graphql_name = \"deployment\" ) details_url = sgqlc . types . Field ( URI , graphql_name = \"detailsUrl\" ) external_id = sgqlc . types . Field ( String , graphql_name = \"externalId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) pending_deployment_request = sgqlc . types . Field ( DeploymentRequest , graphql_name = \"pendingDeploymentRequest\" ) permalink = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"permalink\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) started_at = sgqlc . types . Field ( DateTime , graphql_name = \"startedAt\" ) status = sgqlc . types . Field ( sgqlc . types . non_null ( CheckStatusState ), graphql_name = \"status\" ) steps = sgqlc . types . Field ( CheckStepConnection , graphql_name = \"steps\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"number\" , sgqlc . types . Arg ( Int , graphql_name = \"number\" , default = None )), ) ), ) summary = sgqlc . types . Field ( String , graphql_name = \"summary\" ) text = sgqlc . types . Field ( String , graphql_name = \"text\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" )","title":"CheckRun"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunAction","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 class CheckRunAction ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"label\" , \"description\" , \"identifier\" ) label = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"label\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) identifier = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"identifier\" )","title":"CheckRunAction"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7527 7528 7529 7530 7531 7532 7533 7534 7535 7536 7537 7538 7539 7540 7541 class CheckRunConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckRunEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckRun\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CheckRunConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7544 7545 7546 7547 7548 7549 7550 7551 7552 class CheckRunEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CheckRun\" , graphql_name = \"node\" )","title":"CheckRunEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunFilter","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 class CheckRunFilter ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_type\" , \"app_id\" , \"check_name\" , \"status\" , \"statuses\" , \"conclusions\" , ) check_type = sgqlc . types . Field ( CheckRunType , graphql_name = \"checkType\" ) app_id = sgqlc . types . Field ( Int , graphql_name = \"appId\" ) check_name = sgqlc . types . Field ( String , graphql_name = \"checkName\" ) status = sgqlc . types . Field ( CheckStatusState , graphql_name = \"status\" ) statuses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckStatusState )), graphql_name = \"statuses\" , ) conclusions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckConclusionState )), graphql_name = \"conclusions\" , )","title":"CheckRunFilter"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunOutput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 class CheckRunOutput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"title\" , \"summary\" , \"text\" , \"annotations\" , \"images\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) summary = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"summary\" ) text = sgqlc . types . Field ( String , graphql_name = \"text\" ) annotations = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckAnnotationData )), graphql_name = \"annotations\" , ) images = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"CheckRunOutputImage\" )), graphql_name = \"images\" , )","title":"CheckRunOutput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunOutputImage","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 class CheckRunOutputImage ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"alt\" , \"image_url\" , \"caption\" ) alt = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"alt\" ) image_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"imageUrl\" ) caption = sgqlc . types . Field ( String , graphql_name = \"caption\" )","title":"CheckRunOutputImage"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class CheckRunState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTION_REQUIRED\" , \"CANCELLED\" , \"COMPLETED\" , \"FAILURE\" , \"IN_PROGRESS\" , \"NEUTRAL\" , \"PENDING\" , \"QUEUED\" , \"SKIPPED\" , \"STALE\" , \"STARTUP_FAILURE\" , \"SUCCESS\" , \"TIMED_OUT\" , \"WAITING\" , )","title":"CheckRunState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunStateCount","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7555 7556 7557 7558 7559 7560 7561 7562 7563 class CheckRunStateCount ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"count\" , \"state\" ) count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"count\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( CheckRunState ), graphql_name = \"state\" )","title":"CheckRunStateCount"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckRunType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 97 98 99 100 101 102 103 class CheckRunType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"LATEST\" )","title":"CheckRunType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckStatusState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class CheckStatusState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMPLETED\" , \"IN_PROGRESS\" , \"PENDING\" , \"QUEUED\" , \"REQUESTED\" , \"WAITING\" , )","title":"CheckStatusState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckStep","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7566 7567 7568 7569 7570 7571 7572 7573 7574 7575 7576 7577 7578 7579 7580 7581 7582 7583 7584 7585 7586 7587 7588 7589 7590 7591 class CheckStep ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"completed_at\" , \"conclusion\" , \"external_id\" , \"name\" , \"number\" , \"seconds_to_completion\" , \"started_at\" , \"status\" , ) completed_at = sgqlc . types . Field ( DateTime , graphql_name = \"completedAt\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) external_id = sgqlc . types . Field ( String , graphql_name = \"externalId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) seconds_to_completion = sgqlc . types . Field ( Int , graphql_name = \"secondsToCompletion\" ) started_at = sgqlc . types . Field ( DateTime , graphql_name = \"startedAt\" ) status = sgqlc . types . Field ( sgqlc . types . non_null ( CheckStatusState ), graphql_name = \"status\" )","title":"CheckStep"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckStepConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7594 7595 7596 7597 7598 7599 7600 7601 7602 7603 7604 7605 7606 7607 7608 7609 7610 class CheckStepConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckStepEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( CheckStep ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CheckStepConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckStepEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7613 7614 7615 7616 7617 7618 7619 7620 7621 class CheckStepEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( CheckStep , graphql_name = \"node\" )","title":"CheckStepEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuite","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass CheckSuite ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app\" , \"branch\" , \"check_runs\" , \"commit\" , \"conclusion\" , \"created_at\" , \"creator\" , \"database_id\" , \"matching_pull_requests\" , \"push\" , \"repository\" , \"resource_path\" , \"status\" , \"updated_at\" , \"url\" , \"workflow_run\" , ) app = sgqlc . types . Field ( App , graphql_name = \"app\" ) branch = sgqlc . types . Field ( \"Ref\" , graphql_name = \"branch\" ) check_runs = sgqlc . types . Field ( CheckRunConnection , graphql_name = \"checkRuns\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"filter_by\" , sgqlc . types . Arg ( CheckRunFilter , graphql_name = \"filterBy\" , default = None ), ), ) ), ) commit = sgqlc . types . Field ( sgqlc . types . non_null ( \"Commit\" ), graphql_name = \"commit\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( \"User\" , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) matching_pull_requests = sgqlc . types . Field ( PullRequestConnection , graphql_name = \"matchingPullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) push = sgqlc . types . Field ( \"Push\" , graphql_name = \"push\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) status = sgqlc . types . Field ( sgqlc . types . non_null ( CheckStatusState ), graphql_name = \"status\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) workflow_run = sgqlc . types . Field ( \"WorkflowRun\" , graphql_name = \"workflowRun\" )","title":"CheckSuite"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuiteAutoTriggerPreference","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2746 2747 2748 2749 2750 2751 2752 2753 2754 class CheckSuiteAutoTriggerPreference ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app_id\" , \"setting\" ) app_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"appId\" ) setting = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"setting\" )","title":"CheckSuiteAutoTriggerPreference"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuiteConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7624 7625 7626 7627 7628 7629 7630 7631 7632 7633 7634 7635 7636 7637 7638 7639 7640 class CheckSuiteConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckSuiteEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CheckSuite\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CheckSuiteConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuiteEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7643 7644 7645 7646 7647 7648 7649 7650 7651 class CheckSuiteEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CheckSuite\" , graphql_name = \"node\" )","title":"CheckSuiteEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CheckSuiteFilter","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2757 2758 2759 2760 2761 2762 2763 2764 2765 class CheckSuiteFilter ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app_id\" , \"check_name\" ) app_id = sgqlc . types . Field ( Int , graphql_name = \"appId\" ) check_name = sgqlc . types . Field ( String , graphql_name = \"checkName\" )","title":"CheckSuiteFilter"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClearLabelsFromLabelableInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 class ClearLabelsFromLabelableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"labelable_id\" , \"client_mutation_id\" ) labelable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"labelableId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ClearLabelsFromLabelableInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClearLabelsFromLabelablePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7654 7655 7656 7657 7658 7659 7660 7661 7662 class ClearLabelsFromLabelablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"labelable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) labelable = sgqlc . types . Field ( \"Labelable\" , graphql_name = \"labelable\" )","title":"ClearLabelsFromLabelablePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClearProjectV2ItemFieldValueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 class ClearProjectV2ItemFieldValueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"field_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"itemId\" ) field_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"fieldId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ClearProjectV2ItemFieldValueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClearProjectV2ItemFieldValuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7665 7666 7667 7668 7669 7670 7671 7672 7673 class ClearProjectV2ItemFieldValuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_v2_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_v2_item = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"projectV2Item\" )","title":"ClearProjectV2ItemFieldValuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloneProjectInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 class CloneProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"target_owner_id\" , \"source_id\" , \"include_workflows\" , \"name\" , \"body\" , \"public\" , \"client_mutation_id\" , ) target_owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"targetOwnerId\" ) source_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"sourceId\" ) include_workflows = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"includeWorkflows\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) public = sgqlc . types . Field ( Boolean , graphql_name = \"public\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CloneProjectInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloneProjectPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7676 7677 7678 7679 7680 7681 7682 7683 7684 7685 class CloneProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"job_status_id\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) job_status_id = sgqlc . types . Field ( String , graphql_name = \"jobStatusId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" )","title":"CloneProjectPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloneTemplateRepositoryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 class CloneTemplateRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"owner_id\" , \"description\" , \"visibility\" , \"include_all_branches\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) visibility = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryVisibility ), graphql_name = \"visibility\" ) include_all_branches = sgqlc . types . Field ( Boolean , graphql_name = \"includeAllBranches\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CloneTemplateRepositoryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloneTemplateRepositoryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7688 7689 7690 7691 7692 7693 7694 7695 7696 class CloneTemplateRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"CloneTemplateRepositoryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Closable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7699 7700 7701 7702 7703 7704 7705 7706 7707 class Closable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"closed\" , \"closed_at\" ) closed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"closed\" ) closed_at = sgqlc . types . Field ( DateTime , graphql_name = \"closedAt\" )","title":"Closable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloseIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 class CloseIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"state_reason\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) state_reason = sgqlc . types . Field ( IssueClosedStateReason , graphql_name = \"stateReason\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CloseIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CloseIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7710 7711 7712 7713 7714 7715 7716 7717 7718 class CloseIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" )","title":"CloseIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClosePullRequestInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 class ClosePullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ClosePullRequestInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClosePullRequestPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7721 7722 7723 7724 7725 7726 7727 7728 7729 class ClosePullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"ClosePullRequestPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ClosedEvent","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22346 22347 22348 22349 22350 22351 22352 22353 22354 22355 22356 22357 22358 22359 22360 22361 class ClosedEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"closable\" , \"closer\" , \"created_at\" , \"state_reason\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) closable = sgqlc . types . Field ( sgqlc . types . non_null ( Closable ), graphql_name = \"closable\" ) closer = sgqlc . types . Field ( \"Closer\" , graphql_name = \"closer\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) state_reason = sgqlc . types . Field ( IssueStateReason , graphql_name = \"stateReason\" )","title":"ClosedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Closer","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32394 32395 32396 32397 32398 32399 32400 class Closer ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Commit , PullRequest )","title":"Closer"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CodeOfConduct","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22364 22365 22366 22367 22368 22369 22370 22371 22372 22373 22374 22375 class CodeOfConduct ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"key\" , \"name\" , \"resource_path\" , \"url\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) resource_path = sgqlc . types . Field ( URI , graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( URI , graphql_name = \"url\" )","title":"CodeOfConduct"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CollaboratorAffiliation","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 122 123 124 125 126 127 128 class CollaboratorAffiliation ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"DIRECT\" , \"OUTSIDE\" )","title":"CollaboratorAffiliation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Comment","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7732 7733 7734 7735 7736 7737 7738 7739 7740 7741 7742 7743 7744 7745 7746 7747 7748 7749 7750 7751 7752 7753 7754 7755 7756 7757 7758 7759 7760 7761 7762 7763 7764 7765 7766 7767 7768 7769 7770 7771 7772 7773 7774 7775 7776 7777 7778 7779 7780 7781 7782 7783 7784 7785 7786 7787 7788 7789 7790 7791 7792 7793 7794 7795 class Comment ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"author\" , \"author_association\" , \"body\" , \"body_html\" , \"body_text\" , \"created_at\" , \"created_via_email\" , \"editor\" , \"id\" , \"includes_created_edit\" , \"last_edited_at\" , \"published_at\" , \"updated_at\" , \"user_content_edits\" , \"viewer_did_author\" , ) author = sgqlc . types . Field ( Actor , graphql_name = \"author\" ) author_association = sgqlc . types . Field ( sgqlc . types . non_null ( CommentAuthorAssociation ), graphql_name = \"authorAssociation\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bodyHTML\" ) body_text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"bodyText\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) created_via_email = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"createdViaEmail\" ) editor = sgqlc . types . Field ( Actor , graphql_name = \"editor\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) includes_created_edit = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"includesCreatedEdit\" ) last_edited_at = sgqlc . types . Field ( DateTime , graphql_name = \"lastEditedAt\" ) published_at = sgqlc . types . Field ( DateTime , graphql_name = \"publishedAt\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user_content_edits = sgqlc . types . Field ( \"UserContentEditConnection\" , graphql_name = \"userContentEdits\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) viewer_did_author = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerDidAuthor\" )","title":"Comment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommentAuthorAssociation","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 class CommentAuthorAssociation ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COLLABORATOR\" , \"CONTRIBUTOR\" , \"FIRST_TIMER\" , \"FIRST_TIME_CONTRIBUTOR\" , \"MANNEQUIN\" , \"MEMBER\" , \"NONE\" , \"OWNER\" , )","title":"CommentAuthorAssociation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommentCannotUpdateReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 class CommentCannotUpdateReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ARCHIVED\" , \"DENIED\" , \"INSUFFICIENT_ACCESS\" , \"LOCKED\" , \"LOGIN_REQUIRED\" , \"MAINTENANCE\" , \"VERIFIED_EMAIL_REQUIRED\" , )","title":"CommentCannotUpdateReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommentDeletedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22378 22379 22380 22381 22382 22383 22384 22385 22386 22387 22388 22389 22390 22391 22392 class CommentDeletedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" , \"deleted_comment_author\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) deleted_comment_author = sgqlc . types . Field ( Actor , graphql_name = \"deletedCommentAuthor\" )","title":"CommentDeletedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Commit","text":"Bases: sgqlc . types . Type , Node , GitObject , Subscribable , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Commit ( sgqlc . types . Type , Node , GitObject , Subscribable , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"additions\" , \"associated_pull_requests\" , \"author\" , \"authored_by_committer\" , \"authored_date\" , \"authors\" , \"blame\" , \"changed_files\" , \"changed_files_if_available\" , \"check_suites\" , \"comments\" , \"committed_date\" , \"committed_via_web\" , \"committer\" , \"deletions\" , \"deployments\" , \"file\" , \"history\" , \"message\" , \"message_body\" , \"message_body_html\" , \"message_headline\" , \"message_headline_html\" , \"on_behalf_of\" , \"parents\" , \"pushed_date\" , \"signature\" , \"status\" , \"status_check_rollup\" , \"submodules\" , \"tarball_url\" , \"tree\" , \"tree_resource_path\" , \"tree_url\" , \"zipball_url\" , ) additions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"additions\" ) associated_pull_requests = sgqlc . types . Field ( PullRequestConnection , graphql_name = \"associatedPullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( PullRequestOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ) ), ) author = sgqlc . types . Field ( GitActor , graphql_name = \"author\" ) authored_by_committer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"authoredByCommitter\" ) authored_date = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"authoredDate\" ) authors = sgqlc . types . Field ( sgqlc . types . non_null ( GitActorConnection ), graphql_name = \"authors\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) blame = sgqlc . types . Field ( sgqlc . types . non_null ( Blame ), graphql_name = \"blame\" , args = sgqlc . types . ArgDict ( ( ( \"path\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"path\" , default = None ), ), ) ), ) changed_files = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"changedFiles\" ) changed_files_if_available = sgqlc . types . Field ( Int , graphql_name = \"changedFilesIfAvailable\" ) check_suites = sgqlc . types . Field ( CheckSuiteConnection , graphql_name = \"checkSuites\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"filter_by\" , sgqlc . types . Arg ( CheckSuiteFilter , graphql_name = \"filterBy\" , default = None ), ), ) ), ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) committed_date = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"committedDate\" ) committed_via_web = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"committedViaWeb\" ) committer = sgqlc . types . Field ( GitActor , graphql_name = \"committer\" ) deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"deletions\" ) deployments = sgqlc . types . Field ( DeploymentConnection , graphql_name = \"deployments\" , args = sgqlc . types . ArgDict ( ( ( \"environments\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"environments\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( DeploymentOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) file = sgqlc . types . Field ( TreeEntry , graphql_name = \"file\" , args = sgqlc . types . ArgDict ( ( ( \"path\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"path\" , default = None ), ), ) ), ) history = sgqlc . types . Field ( sgqlc . types . non_null ( CommitHistoryConnection ), graphql_name = \"history\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"path\" , sgqlc . types . Arg ( String , graphql_name = \"path\" , default = None )), ( \"author\" , sgqlc . types . Arg ( CommitAuthor , graphql_name = \"author\" , default = None ), ), ( \"since\" , sgqlc . types . Arg ( GitTimestamp , graphql_name = \"since\" , default = None ), ), ( \"until\" , sgqlc . types . Arg ( GitTimestamp , graphql_name = \"until\" , default = None ), ), ) ), ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) message_body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"messageBody\" ) message_body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"messageBodyHTML\" ) message_headline = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"messageHeadline\" ) message_headline_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"messageHeadlineHTML\" ) on_behalf_of = sgqlc . types . Field ( \"Organization\" , graphql_name = \"onBehalfOf\" ) parents = sgqlc . types . Field ( sgqlc . types . non_null ( CommitConnection ), graphql_name = \"parents\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pushed_date = sgqlc . types . Field ( DateTime , graphql_name = \"pushedDate\" ) signature = sgqlc . types . Field ( GitSignature , graphql_name = \"signature\" ) status = sgqlc . types . Field ( \"Status\" , graphql_name = \"status\" ) status_check_rollup = sgqlc . types . Field ( \"StatusCheckRollup\" , graphql_name = \"statusCheckRollup\" ) submodules = sgqlc . types . Field ( sgqlc . types . non_null ( SubmoduleConnection ), graphql_name = \"submodules\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) tarball_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"tarballUrl\" ) tree = sgqlc . types . Field ( sgqlc . types . non_null ( \"Tree\" ), graphql_name = \"tree\" ) tree_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"treeResourcePath\" ) tree_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"treeUrl\" ) zipball_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"zipballUrl\" )","title":"Commit"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitAuthor","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 class CommitAuthor ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"emails\" ) id = sgqlc . types . Field ( ID , graphql_name = \"id\" ) emails = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"emails\" )","title":"CommitAuthor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitComment","text":"Bases: sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22684 22685 22686 22687 22688 22689 22690 22691 22692 22693 22694 22695 22696 22697 22698 22699 22700 22701 22702 22703 22704 22705 22706 22707 class CommitComment ( sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"path\" , \"position\" , \"resource_path\" , \"url\" ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"CommitComment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitCommentConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7798 7799 7800 7801 7802 7803 7804 7805 7806 7807 7808 7809 7810 7811 7812 7813 7814 7815 7816 class CommitCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CommitCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CommitComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CommitCommentConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitCommentEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7819 7820 7821 7822 7823 7824 7825 7826 7827 class CommitCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CommitComment\" , graphql_name = \"node\" )","title":"CommitCommentEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitCommentThread","text":"Bases: sgqlc . types . Type , Node , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22710 22711 22712 22713 22714 22715 22716 22717 22718 22719 22720 22721 22722 22723 22724 22725 22726 22727 22728 22729 22730 22731 22732 22733 22734 class CommitCommentThread ( sgqlc . types . Type , Node , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"commit\" , \"path\" , \"position\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" )","title":"CommitCommentThread"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7830 7831 7832 7833 7834 7835 7836 7837 7838 7839 7840 7841 7842 7843 7844 class CommitConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CommitEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Commit\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CommitConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitContributionOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 class CommitContributionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( CommitContributionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"CommitContributionOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitContributionOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 166 167 168 169 170 171 172 class CommitContributionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMIT_COUNT\" , \"OCCURRED_AT\" )","title":"CommitContributionOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitContributionsByRepository","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7847 7848 7849 7850 7851 7852 7853 7854 7855 7856 7857 7858 7859 7860 7861 7862 7863 7864 7865 7866 7867 7868 7869 7870 7871 7872 7873 7874 7875 7876 7877 7878 7879 7880 7881 7882 7883 class CommitContributionsByRepository ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contributions\" , \"repository\" , \"resource_path\" , \"url\" ) contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedCommitContributionConnection\" ), graphql_name = \"contributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( CommitContributionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"OCCURRED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"CommitContributionsByRepository"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7886 7887 7888 7889 7890 7891 7892 7893 7894 class CommitEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Commit\" , graphql_name = \"node\" )","title":"CommitEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitHistoryConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7897 7898 7899 7900 7901 7902 7903 7904 7905 7906 7907 7908 7909 7910 7911 class CommitHistoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( CommitEdge ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Commit\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CommitHistoryConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommitMessage","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2903 2904 2905 2906 2907 2908 2909 2910 2911 class CommitMessage ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"headline\" , \"body\" ) headline = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"headline\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" )","title":"CommitMessage"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CommittableBranch","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 class CommittableBranch ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"repository_name_with_owner\" , \"branch_name\" ) id = sgqlc . types . Field ( ID , graphql_name = \"id\" ) repository_name_with_owner = sgqlc . types . Field ( String , graphql_name = \"repositoryNameWithOwner\" ) branch_name = sgqlc . types . Field ( String , graphql_name = \"branchName\" )","title":"CommittableBranch"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConnectedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22737 22738 22739 22740 22741 22742 22743 22744 22745 22746 22747 22748 22749 22750 22751 22752 22753 22754 22755 22756 22757 22758 22759 22760 22761 22762 class ConnectedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"is_cross_repository\" , \"source\" , \"subject\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) source = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"source\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"subject\" )","title":"ConnectedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Contribution","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7914 7915 7916 7917 7918 7919 7920 7921 7922 7923 7924 7925 7926 7927 7928 7929 7930 7931 class Contribution ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_restricted\" , \"occurred_at\" , \"resource_path\" , \"url\" , \"user\" ) is_restricted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isRestricted\" ) occurred_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"occurredAt\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) user = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"user\" )","title":"Contribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionCalendar","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7934 7935 7936 7937 7938 7939 7940 7941 7942 7943 7944 7945 7946 7947 7948 7949 7950 7951 7952 7953 7954 7955 7956 7957 7958 7959 7960 7961 7962 7963 7964 7965 7966 7967 7968 class ContributionCalendar ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"colors\" , \"is_halloween\" , \"months\" , \"total_contributions\" , \"weeks\" , ) colors = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"colors\" , ) is_halloween = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isHalloween\" ) months = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ContributionCalendarMonth\" )) ), graphql_name = \"months\" , ) total_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalContributions\" ) weeks = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ContributionCalendarWeek\" )) ), graphql_name = \"weeks\" , )","title":"ContributionCalendar"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionCalendarDay","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7971 7972 7973 7974 7975 7976 7977 7978 7979 7980 7981 7982 7983 7984 7985 7986 7987 7988 7989 7990 7991 7992 class ContributionCalendarDay ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"color\" , \"contribution_count\" , \"contribution_level\" , \"date\" , \"weekday\" , ) color = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"color\" ) contribution_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"contributionCount\" ) contribution_level = sgqlc . types . Field ( sgqlc . types . non_null ( ContributionLevel ), graphql_name = \"contributionLevel\" ) date = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"date\" ) weekday = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"weekday\" )","title":"ContributionCalendarDay"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionCalendarMonth","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 7995 7996 7997 7998 7999 8000 8001 8002 8003 8004 8005 8006 8007 class ContributionCalendarMonth ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"first_day\" , \"name\" , \"total_weeks\" , \"year\" ) first_day = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"firstDay\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) total_weeks = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalWeeks\" ) year = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"year\" )","title":"ContributionCalendarMonth"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionCalendarWeek","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8010 8011 8012 8013 8014 8015 8016 8017 8018 8019 8020 8021 8022 8023 class ContributionCalendarWeek ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contribution_days\" , \"first_day\" ) contribution_days = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ContributionCalendarDay )) ), graphql_name = \"contributionDays\" , ) first_day = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"firstDay\" )","title":"ContributionCalendarWeek"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionLevel","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 175 176 177 178 179 180 181 182 183 184 185 186 187 class ContributionLevel ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FIRST_QUARTILE\" , \"FOURTH_QUARTILE\" , \"NONE\" , \"SECOND_QUARTILE\" , \"THIRD_QUARTILE\" , )","title":"ContributionLevel"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 class ContributionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"direction\" ,) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ContributionOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ContributionsCollection","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ContributionsCollection ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit_contributions_by_repository\" , \"contribution_calendar\" , \"contribution_years\" , \"does_end_in_current_month\" , \"earliest_restricted_contribution_date\" , \"ended_at\" , \"first_issue_contribution\" , \"first_pull_request_contribution\" , \"first_repository_contribution\" , \"has_activity_in_the_past\" , \"has_any_contributions\" , \"has_any_restricted_contributions\" , \"is_single_day\" , \"issue_contributions\" , \"issue_contributions_by_repository\" , \"joined_git_hub_contribution\" , \"latest_restricted_contribution_date\" , \"most_recent_collection_with_activity\" , \"most_recent_collection_without_activity\" , \"popular_issue_contribution\" , \"popular_pull_request_contribution\" , \"pull_request_contributions\" , \"pull_request_contributions_by_repository\" , \"pull_request_review_contributions\" , \"pull_request_review_contributions_by_repository\" , \"repository_contributions\" , \"restricted_contributions_count\" , \"started_at\" , \"total_commit_contributions\" , \"total_issue_contributions\" , \"total_pull_request_contributions\" , \"total_pull_request_review_contributions\" , \"total_repositories_with_contributed_commits\" , \"total_repositories_with_contributed_issues\" , \"total_repositories_with_contributed_pull_request_reviews\" , \"total_repositories_with_contributed_pull_requests\" , \"total_repository_contributions\" , \"user\" , ) commit_contributions_by_repository = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( CommitContributionsByRepository )) ), graphql_name = \"commitContributionsByRepository\" , args = sgqlc . types . ArgDict ( ( ( \"max_repositories\" , sgqlc . types . Arg ( Int , graphql_name = \"maxRepositories\" , default = 25 ), ), ) ), ) contribution_calendar = sgqlc . types . Field ( sgqlc . types . non_null ( ContributionCalendar ), graphql_name = \"contributionCalendar\" ) contribution_years = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( Int ))), graphql_name = \"contributionYears\" , ) does_end_in_current_month = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"doesEndInCurrentMonth\" ) earliest_restricted_contribution_date = sgqlc . types . Field ( Date , graphql_name = \"earliestRestrictedContributionDate\" ) ended_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"endedAt\" ) first_issue_contribution = sgqlc . types . Field ( \"CreatedIssueOrRestrictedContribution\" , graphql_name = \"firstIssueContribution\" ) first_pull_request_contribution = sgqlc . types . Field ( \"CreatedPullRequestOrRestrictedContribution\" , graphql_name = \"firstPullRequestContribution\" , ) first_repository_contribution = sgqlc . types . Field ( \"CreatedRepositoryOrRestrictedContribution\" , graphql_name = \"firstRepositoryContribution\" , ) has_activity_in_the_past = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasActivityInThePast\" ) has_any_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasAnyContributions\" ) has_any_restricted_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasAnyRestrictedContributions\" ) is_single_day = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSingleDay\" ) issue_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedIssueContributionConnection\" ), graphql_name = \"issueContributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) issue_contributions_by_repository = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"IssueContributionsByRepository\" )) ), graphql_name = \"issueContributionsByRepository\" , args = sgqlc . types . ArgDict ( ( ( \"max_repositories\" , sgqlc . types . Arg ( Int , graphql_name = \"maxRepositories\" , default = 25 ), ), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) joined_git_hub_contribution = sgqlc . types . Field ( \"JoinedGitHubContribution\" , graphql_name = \"joinedGitHubContribution\" ) latest_restricted_contribution_date = sgqlc . types . Field ( Date , graphql_name = \"latestRestrictedContributionDate\" ) most_recent_collection_with_activity = sgqlc . types . Field ( \"ContributionsCollection\" , graphql_name = \"mostRecentCollectionWithActivity\" ) most_recent_collection_without_activity = sgqlc . types . Field ( \"ContributionsCollection\" , graphql_name = \"mostRecentCollectionWithoutActivity\" ) popular_issue_contribution = sgqlc . types . Field ( \"CreatedIssueContribution\" , graphql_name = \"popularIssueContribution\" ) popular_pull_request_contribution = sgqlc . types . Field ( \"CreatedPullRequestContribution\" , graphql_name = \"popularPullRequestContribution\" ) pull_request_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedPullRequestContributionConnection\" ), graphql_name = \"pullRequestContributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) pull_request_contributions_by_repository = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"PullRequestContributionsByRepository\" ) ) ), graphql_name = \"pullRequestContributionsByRepository\" , args = sgqlc . types . ArgDict ( ( ( \"max_repositories\" , sgqlc . types . Arg ( Int , graphql_name = \"maxRepositories\" , default = 25 ), ), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) pull_request_review_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedPullRequestReviewContributionConnection\" ), graphql_name = \"pullRequestReviewContributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) pull_request_review_contributions_by_repository = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"PullRequestReviewContributionsByRepository\" ) ) ), graphql_name = \"pullRequestReviewContributionsByRepository\" , args = sgqlc . types . ArgDict ( ( ( \"max_repositories\" , sgqlc . types . Arg ( Int , graphql_name = \"maxRepositories\" , default = 25 ), ), ) ), ) repository_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( \"CreatedRepositoryContributionConnection\" ), graphql_name = \"repositoryContributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) restricted_contributions_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"restrictedContributionsCount\" ) started_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"startedAt\" ) total_commit_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCommitContributions\" ) total_issue_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalIssueContributions\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) total_pull_request_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalPullRequestContributions\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) total_pull_request_review_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalPullRequestReviewContributions\" ) total_repositories_with_contributed_commits = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoriesWithContributedCommits\" , ) total_repositories_with_contributed_issues = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoriesWithContributedIssues\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) total_repositories_with_contributed_pull_request_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoriesWithContributedPullRequestReviews\" , ) total_repositories_with_contributed_pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoriesWithContributedPullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ( \"exclude_popular\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludePopular\" , default = False ), ), ) ), ) total_repository_contributions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRepositoryContributions\" , args = sgqlc . types . ArgDict ( ( ( \"exclude_first\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeFirst\" , default = False ), ), ) ), ) user = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"user\" )","title":"ContributionsCollection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertProjectCardNoteToIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 class ConvertProjectCardNoteToIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_card_id\" , \"repository_id\" , \"title\" , \"body\" , \"client_mutation_id\" , ) project_card_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectCardId\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ConvertProjectCardNoteToIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertProjectCardNoteToIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8450 8451 8452 8453 8454 8455 8456 8457 8458 class ConvertProjectCardNoteToIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_card\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_card = sgqlc . types . Field ( \"ProjectCard\" , graphql_name = \"projectCard\" )","title":"ConvertProjectCardNoteToIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertPullRequestToDraftInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 class ConvertPullRequestToDraftInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ConvertPullRequestToDraftInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertPullRequestToDraftPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8461 8462 8463 8464 8465 8466 8467 8468 8469 class ConvertPullRequestToDraftPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"ConvertPullRequestToDraftPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertToDraftEvent","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22765 22766 22767 22768 22769 22770 22771 22772 22773 22774 22775 22776 22777 22778 class ConvertToDraftEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"ConvertToDraftEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertedNoteToIssueEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22781 22782 22783 22784 22785 22786 22787 22788 22789 22790 22791 22792 class ConvertedNoteToIssueEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" )","title":"ConvertedNoteToIssueEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ConvertedToDiscussionEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22795 22796 22797 22798 22799 22800 22801 22802 22803 22804 22805 22806 class ConvertedToDiscussionEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"discussion\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" )","title":"ConvertedToDiscussionEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateBranchProtectionRuleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 class CreateBranchProtectionRuleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"pattern\" , \"requires_approving_reviews\" , \"required_approving_review_count\" , \"requires_commit_signatures\" , \"requires_linear_history\" , \"blocks_creations\" , \"allows_force_pushes\" , \"allows_deletions\" , \"is_admin_enforced\" , \"requires_status_checks\" , \"requires_strict_status_checks\" , \"requires_code_owner_reviews\" , \"dismisses_stale_reviews\" , \"restricts_review_dismissals\" , \"review_dismissal_actor_ids\" , \"bypass_pull_request_actor_ids\" , \"bypass_force_push_actor_ids\" , \"restricts_pushes\" , \"push_actor_ids\" , \"required_status_check_contexts\" , \"required_status_checks\" , \"requires_conversation_resolution\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) pattern = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"pattern\" ) requires_approving_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"requiresApprovingReviews\" ) required_approving_review_count = sgqlc . types . Field ( Int , graphql_name = \"requiredApprovingReviewCount\" ) requires_commit_signatures = sgqlc . types . Field ( Boolean , graphql_name = \"requiresCommitSignatures\" ) requires_linear_history = sgqlc . types . Field ( Boolean , graphql_name = \"requiresLinearHistory\" ) blocks_creations = sgqlc . types . Field ( Boolean , graphql_name = \"blocksCreations\" ) allows_force_pushes = sgqlc . types . Field ( Boolean , graphql_name = \"allowsForcePushes\" ) allows_deletions = sgqlc . types . Field ( Boolean , graphql_name = \"allowsDeletions\" ) is_admin_enforced = sgqlc . types . Field ( Boolean , graphql_name = \"isAdminEnforced\" ) requires_status_checks = sgqlc . types . Field ( Boolean , graphql_name = \"requiresStatusChecks\" ) requires_strict_status_checks = sgqlc . types . Field ( Boolean , graphql_name = \"requiresStrictStatusChecks\" ) requires_code_owner_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"requiresCodeOwnerReviews\" ) dismisses_stale_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"dismissesStaleReviews\" ) restricts_review_dismissals = sgqlc . types . Field ( Boolean , graphql_name = \"restrictsReviewDismissals\" ) review_dismissal_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"reviewDismissalActorIds\" , ) bypass_pull_request_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"bypassPullRequestActorIds\" , ) bypass_force_push_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"bypassForcePushActorIds\" , ) restricts_pushes = sgqlc . types . Field ( Boolean , graphql_name = \"restrictsPushes\" ) push_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"pushActorIds\" ) required_status_check_contexts = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"requiredStatusCheckContexts\" , ) required_status_checks = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"RequiredStatusCheckInput\" )), graphql_name = \"requiredStatusChecks\" , ) requires_conversation_resolution = sgqlc . types . Field ( Boolean , graphql_name = \"requiresConversationResolution\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateBranchProtectionRuleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateBranchProtectionRulePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8472 8473 8474 8475 8476 8477 8478 8479 8480 8481 8482 class CreateBranchProtectionRulePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule\" , \"client_mutation_id\" ) branch_protection_rule = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"branchProtectionRule\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateBranchProtectionRulePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCheckRunInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 class CreateCheckRunInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"head_sha\" , \"details_url\" , \"external_id\" , \"status\" , \"started_at\" , \"conclusion\" , \"completed_at\" , \"output\" , \"actions\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) head_sha = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"headSha\" ) details_url = sgqlc . types . Field ( URI , graphql_name = \"detailsUrl\" ) external_id = sgqlc . types . Field ( String , graphql_name = \"externalId\" ) status = sgqlc . types . Field ( RequestableCheckStatusState , graphql_name = \"status\" ) started_at = sgqlc . types . Field ( DateTime , graphql_name = \"startedAt\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) completed_at = sgqlc . types . Field ( DateTime , graphql_name = \"completedAt\" ) output = sgqlc . types . Field ( CheckRunOutput , graphql_name = \"output\" ) actions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckRunAction )), graphql_name = \"actions\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateCheckRunInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCheckRunPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8485 8486 8487 8488 8489 8490 8491 8492 8493 class CreateCheckRunPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_run\" , \"client_mutation_id\" ) check_run = sgqlc . types . Field ( \"CheckRun\" , graphql_name = \"checkRun\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateCheckRunPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCheckSuiteInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 class CreateCheckSuiteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"head_sha\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) head_sha = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"headSha\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateCheckSuiteInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCheckSuitePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8496 8497 8498 8499 8500 8501 8502 8503 8504 class CreateCheckSuitePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_suite\" , \"client_mutation_id\" ) check_suite = sgqlc . types . Field ( \"CheckSuite\" , graphql_name = \"checkSuite\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateCheckSuitePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCommitOnBranchInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 class CreateCommitOnBranchInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch\" , \"file_changes\" , \"message\" , \"expected_head_oid\" , \"client_mutation_id\" , ) branch = sgqlc . types . Field ( sgqlc . types . non_null ( CommittableBranch ), graphql_name = \"branch\" ) file_changes = sgqlc . types . Field ( \"FileChanges\" , graphql_name = \"fileChanges\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( CommitMessage ), graphql_name = \"message\" ) expected_head_oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"expectedHeadOid\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateCommitOnBranchInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateCommitOnBranchPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8507 8508 8509 8510 8511 8512 8513 8514 8515 8516 class CreateCommitOnBranchPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"commit\" , \"ref\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) commit = sgqlc . types . Field ( \"Commit\" , graphql_name = \"commit\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" )","title":"CreateCommitOnBranchPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateDiscussionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 class CreateDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"title\" , \"body\" , \"category_id\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) category_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"categoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateDiscussionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateDiscussionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8519 8520 8521 8522 8523 8524 8525 8526 8527 class CreateDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" )","title":"CreateDiscussionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateEnterpriseOrganizationInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 class CreateEnterpriseOrganizationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"profile_name\" , \"billing_email\" , \"admin_logins\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) profile_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"profileName\" ) billing_email = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"billingEmail\" ) admin_logins = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"adminLogins\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateEnterpriseOrganizationInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateEnterpriseOrganizationPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8530 8531 8532 8533 8534 8535 8536 8537 8538 8539 class CreateEnterpriseOrganizationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" )","title":"CreateEnterpriseOrganizationPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateEnvironmentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 class CreateEnvironmentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateEnvironmentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateEnvironmentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8542 8543 8544 8545 8546 8547 8548 8549 8550 class CreateEnvironmentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"environment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) environment = sgqlc . types . Field ( \"Environment\" , graphql_name = \"environment\" )","title":"CreateEnvironmentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateIpAllowListEntryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 class CreateIpAllowListEntryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"allow_list_value\" , \"name\" , \"is_active\" , \"client_mutation_id\" , ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) allow_list_value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"allowListValue\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) is_active = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isActive\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateIpAllowListEntryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateIpAllowListEntryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8553 8554 8555 8556 8557 8558 8559 8560 8561 8562 8563 class CreateIpAllowListEntryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ip_allow_list_entry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ip_allow_list_entry = sgqlc . types . Field ( \"IpAllowListEntry\" , graphql_name = \"ipAllowListEntry\" )","title":"CreateIpAllowListEntryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 class CreateIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"milestone_id\" , \"label_ids\" , \"project_ids\" , \"issue_template\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) milestone_id = sgqlc . types . Field ( ID , graphql_name = \"milestoneId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"labelIds\" ) project_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"projectIds\" ) issue_template = sgqlc . types . Field ( String , graphql_name = \"issueTemplate\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8566 8567 8568 8569 8570 8571 8572 8573 8574 class CreateIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" )","title":"CreateIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateMigrationSourceInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 class CreateMigrationSourceInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"url\" , \"access_token\" , \"type\" , \"owner_id\" , \"github_pat\" , \"client_mutation_id\" , ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"url\" ) access_token = sgqlc . types . Field ( String , graphql_name = \"accessToken\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( MigrationSourceType ), graphql_name = \"type\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) github_pat = sgqlc . types . Field ( String , graphql_name = \"githubPat\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateMigrationSourceInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateMigrationSourcePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8577 8578 8579 8580 8581 8582 8583 8584 8585 8586 8587 class CreateMigrationSourcePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"migration_source\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) migration_source = sgqlc . types . Field ( \"MigrationSource\" , graphql_name = \"migrationSource\" )","title":"CreateMigrationSourcePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateProjectInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 class CreateProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"name\" , \"body\" , \"template\" , \"repository_ids\" , \"client_mutation_id\" , ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) template = sgqlc . types . Field ( ProjectTemplate , graphql_name = \"template\" ) repository_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"repositoryIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateProjectInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateProjectPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8590 8591 8592 8593 8594 8595 8596 8597 8598 class CreateProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" )","title":"CreateProjectPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateProjectV2Input","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 class CreateProjectV2Input ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"title\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateProjectV2Input"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateProjectV2Payload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8601 8602 8603 8604 8605 8606 8607 8608 8609 class CreateProjectV2Payload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_v2\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_v2 = sgqlc . types . Field ( \"ProjectV2\" , graphql_name = \"projectV2\" )","title":"CreateProjectV2Payload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatePullRequestInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 class CreatePullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"base_ref_name\" , \"head_ref_name\" , \"title\" , \"body\" , \"maintainer_can_modify\" , \"draft\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) base_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"baseRefName\" ) head_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"headRefName\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) maintainer_can_modify = sgqlc . types . Field ( Boolean , graphql_name = \"maintainerCanModify\" ) draft = sgqlc . types . Field ( Boolean , graphql_name = \"draft\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreatePullRequestInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatePullRequestPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8612 8613 8614 8615 8616 8617 8618 8619 8620 class CreatePullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"CreatePullRequestPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateRefInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 class CreateRefInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"oid\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"oid\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateRefInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateRefPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8623 8624 8625 8626 8627 8628 8629 8630 8631 class CreateRefPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ref\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" )","title":"CreateRefPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateRepositoryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 class CreateRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"owner_id\" , \"description\" , \"visibility\" , \"template\" , \"homepage_url\" , \"has_wiki_enabled\" , \"has_issues_enabled\" , \"team_id\" , \"client_mutation_id\" , ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) owner_id = sgqlc . types . Field ( ID , graphql_name = \"ownerId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) visibility = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryVisibility ), graphql_name = \"visibility\" ) template = sgqlc . types . Field ( Boolean , graphql_name = \"template\" ) homepage_url = sgqlc . types . Field ( URI , graphql_name = \"homepageUrl\" ) has_wiki_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasWikiEnabled\" ) has_issues_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasIssuesEnabled\" ) team_id = sgqlc . types . Field ( ID , graphql_name = \"teamId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateRepositoryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateRepositoryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8634 8635 8636 8637 8638 8639 8640 8641 8642 class CreateRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"CreateRepositoryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateSponsorsTierInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 class CreateSponsorsTierInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsorable_id\" , \"sponsorable_login\" , \"amount\" , \"is_recurring\" , \"repository_id\" , \"repository_owner_login\" , \"repository_name\" , \"welcome_message\" , \"description\" , \"publish\" , \"client_mutation_id\" , ) sponsorable_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorableId\" ) sponsorable_login = sgqlc . types . Field ( String , graphql_name = \"sponsorableLogin\" ) amount = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"amount\" ) is_recurring = sgqlc . types . Field ( Boolean , graphql_name = \"isRecurring\" ) repository_id = sgqlc . types . Field ( ID , graphql_name = \"repositoryId\" ) repository_owner_login = sgqlc . types . Field ( String , graphql_name = \"repositoryOwnerLogin\" ) repository_name = sgqlc . types . Field ( String , graphql_name = \"repositoryName\" ) welcome_message = sgqlc . types . Field ( String , graphql_name = \"welcomeMessage\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) publish = sgqlc . types . Field ( Boolean , graphql_name = \"publish\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateSponsorsTierInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateSponsorsTierPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8645 8646 8647 8648 8649 8650 8651 8652 8653 class CreateSponsorsTierPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"sponsors_tier\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) sponsors_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"sponsorsTier\" )","title":"CreateSponsorsTierPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateSponsorshipInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 class CreateSponsorshipInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsor_id\" , \"sponsor_login\" , \"sponsorable_id\" , \"sponsorable_login\" , \"tier_id\" , \"amount\" , \"is_recurring\" , \"receive_emails\" , \"privacy_level\" , \"client_mutation_id\" , ) sponsor_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorId\" ) sponsor_login = sgqlc . types . Field ( String , graphql_name = \"sponsorLogin\" ) sponsorable_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorableId\" ) sponsorable_login = sgqlc . types . Field ( String , graphql_name = \"sponsorableLogin\" ) tier_id = sgqlc . types . Field ( ID , graphql_name = \"tierId\" ) amount = sgqlc . types . Field ( Int , graphql_name = \"amount\" ) is_recurring = sgqlc . types . Field ( Boolean , graphql_name = \"isRecurring\" ) receive_emails = sgqlc . types . Field ( Boolean , graphql_name = \"receiveEmails\" ) privacy_level = sgqlc . types . Field ( SponsorshipPrivacy , graphql_name = \"privacyLevel\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateSponsorshipInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateSponsorshipPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8656 8657 8658 8659 8660 8661 8662 8663 8664 class CreateSponsorshipPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"sponsorship\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) sponsorship = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"sponsorship\" )","title":"CreateSponsorshipPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateTeamDiscussionCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 class CreateTeamDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"discussion_id\" , \"body\" , \"client_mutation_id\" ) discussion_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"discussionId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateTeamDiscussionCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateTeamDiscussionCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8667 8668 8669 8670 8671 8672 8673 8674 8675 8676 8677 class CreateTeamDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"team_discussion_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) team_discussion_comment = sgqlc . types . Field ( \"TeamDiscussionComment\" , graphql_name = \"teamDiscussionComment\" )","title":"CreateTeamDiscussionCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateTeamDiscussionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 class CreateTeamDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"team_id\" , \"title\" , \"body\" , \"private\" , \"client_mutation_id\" ) team_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"teamId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) private = sgqlc . types . Field ( Boolean , graphql_name = \"private\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"CreateTeamDiscussionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreateTeamDiscussionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8680 8681 8682 8683 8684 8685 8686 8687 8688 class CreateTeamDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"team_discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) team_discussion = sgqlc . types . Field ( \"TeamDiscussion\" , graphql_name = \"teamDiscussion\" )","title":"CreateTeamDiscussionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedCommitContribution","text":"Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22809 22810 22811 22812 22813 22814 22815 22816 22817 22818 22819 22820 22821 class CreatedCommitContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit_count\" , \"repository\" ) commit_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"commitCount\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"CreatedCommitContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedCommitContributionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8691 8692 8693 8694 8695 8696 8697 8698 8699 8700 8701 8702 8703 8704 8705 8706 8707 8708 8709 class CreatedCommitContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedCommitContributionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedCommitContribution\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CreatedCommitContributionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedCommitContributionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8712 8713 8714 8715 8716 8717 8718 8719 8720 class CreatedCommitContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedCommitContribution\" , graphql_name = \"node\" )","title":"CreatedCommitContributionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedIssueContribution","text":"Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22824 22825 22826 22827 22828 22829 22830 22831 class CreatedIssueContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue\" ,) issue = sgqlc . types . Field ( sgqlc . types . non_null ( \"Issue\" ), graphql_name = \"issue\" )","title":"CreatedIssueContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedIssueContributionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8723 8724 8725 8726 8727 8728 8729 8730 8731 8732 8733 8734 8735 8736 8737 8738 8739 8740 8741 class CreatedIssueContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedIssueContributionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedIssueContribution\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CreatedIssueContributionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedIssueContributionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8744 8745 8746 8747 8748 8749 8750 8751 8752 class CreatedIssueContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedIssueContribution\" , graphql_name = \"node\" )","title":"CreatedIssueContributionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedIssueOrRestrictedContribution","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32403 32404 32405 32406 32407 32408 32409 class CreatedIssueOrRestrictedContribution ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( CreatedIssueContribution , RestrictedContribution )","title":"CreatedIssueOrRestrictedContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestContribution","text":"Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22834 22835 22836 22837 22838 22839 22840 22841 22842 22843 class CreatedPullRequestContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request\" ,) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"CreatedPullRequestContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestContributionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8755 8756 8757 8758 8759 8760 8761 8762 8763 8764 8765 8766 8767 8768 8769 8770 8771 8772 8773 class CreatedPullRequestContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedPullRequestContributionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedPullRequestContribution\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CreatedPullRequestContributionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestContributionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8776 8777 8778 8779 8780 8781 8782 8783 8784 class CreatedPullRequestContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedPullRequestContribution\" , graphql_name = \"node\" )","title":"CreatedPullRequestContributionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestOrRestrictedContribution","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32412 32413 32414 32415 32416 32417 32418 class CreatedPullRequestOrRestrictedContribution ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( CreatedPullRequestContribution , RestrictedContribution )","title":"CreatedPullRequestOrRestrictedContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestReviewContribution","text":"Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22846 22847 22848 22849 22850 22851 22852 22853 22854 22855 22856 22857 22858 22859 22860 22861 class CreatedPullRequestReviewContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request\" , \"pull_request_review\" , \"repository\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) pull_request_review = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequestReview\" ), graphql_name = \"pullRequestReview\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"CreatedPullRequestReviewContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestReviewContributionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8787 8788 8789 8790 8791 8792 8793 8794 8795 8796 8797 8798 8799 8800 8801 8802 8803 8804 8805 8806 8807 class CreatedPullRequestReviewContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedPullRequestReviewContributionEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedPullRequestReviewContribution\" ), graphql_name = \"nodes\" , ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CreatedPullRequestReviewContributionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedPullRequestReviewContributionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8810 8811 8812 8813 8814 8815 8816 8817 8818 8819 8820 class CreatedPullRequestReviewContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedPullRequestReviewContribution\" , graphql_name = \"node\" )","title":"CreatedPullRequestReviewContributionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedRepositoryContribution","text":"Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22864 22865 22866 22867 22868 22869 22870 22871 22872 22873 class CreatedRepositoryContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository\" ,) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"CreatedRepositoryContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedRepositoryContributionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8823 8824 8825 8826 8827 8828 8829 8830 8831 8832 8833 8834 8835 8836 8837 8838 8839 8840 8841 class CreatedRepositoryContributionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedRepositoryContributionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"CreatedRepositoryContribution\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"CreatedRepositoryContributionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedRepositoryContributionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8844 8845 8846 8847 8848 8849 8850 8851 8852 class CreatedRepositoryContributionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"CreatedRepositoryContribution\" , graphql_name = \"node\" )","title":"CreatedRepositoryContributionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CreatedRepositoryOrRestrictedContribution","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32421 32422 32423 32424 32425 32426 32427 class CreatedRepositoryOrRestrictedContribution ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( CreatedRepositoryContribution , RestrictedContribution )","title":"CreatedRepositoryOrRestrictedContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.CrossReferencedEvent","text":"Bases: sgqlc . types . Type , UniformResourceLocatable , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22876 22877 22878 22879 22880 22881 22882 22883 22884 22885 22886 22887 22888 22889 22890 22891 22892 22893 22894 22895 22896 22897 22898 22899 22900 22901 22902 22903 22904 22905 22906 22907 22908 22909 class CrossReferencedEvent ( sgqlc . types . Type , UniformResourceLocatable , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"is_cross_repository\" , \"referenced_at\" , \"source\" , \"target\" , \"will_close_target\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) referenced_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"referencedAt\" ) source = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"source\" ) target = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"target\" ) will_close_target = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"willCloseTarget\" )","title":"CrossReferencedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeclineTopicSuggestionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 class DeclineTopicSuggestionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"reason\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) reason = sgqlc . types . Field ( sgqlc . types . non_null ( TopicSuggestionDeclineReason ), graphql_name = \"reason\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeclineTopicSuggestionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeclineTopicSuggestionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8855 8856 8857 8858 8859 8860 8861 8862 8863 class DeclineTopicSuggestionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"topic\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) topic = sgqlc . types . Field ( \"Topic\" , graphql_name = \"topic\" )","title":"DeclineTopicSuggestionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DefaultRepositoryPermissionField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 195 196 197 198 199 200 201 class DefaultRepositoryPermissionField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"NONE\" , \"READ\" , \"WRITE\" )","title":"DefaultRepositoryPermissionField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Deletable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8866 8867 8868 8869 8870 8871 8872 8873 8874 8875 class Deletable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"viewer_can_delete\" ,) viewer_can_delete = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanDelete\" )","title":"Deletable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteBranchProtectionRuleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 class DeleteBranchProtectionRuleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule_id\" , \"client_mutation_id\" ) branch_protection_rule_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"branchProtectionRuleId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteBranchProtectionRuleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteBranchProtectionRulePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8878 8879 8880 8881 8882 8883 8884 8885 class DeleteBranchProtectionRulePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteBranchProtectionRulePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDeploymentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3551 3552 3553 3554 3555 3556 3557 3558 3559 class DeleteDeploymentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteDeploymentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDeploymentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8888 8889 8890 8891 8892 8893 8894 8895 class DeleteDeploymentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteDeploymentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDiscussionCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3562 3563 3564 3565 3566 3567 3568 3569 3570 class DeleteDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteDiscussionCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDiscussionCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8898 8899 8900 8901 8902 8903 8904 8905 8906 class DeleteDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"comment\" )","title":"DeleteDiscussionCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDiscussionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3573 3574 3575 3576 3577 3578 3579 3580 3581 class DeleteDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteDiscussionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteDiscussionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8909 8910 8911 8912 8913 8914 8915 8916 8917 class DeleteDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" )","title":"DeleteDiscussionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteEnvironmentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3584 3585 3586 3587 3588 3589 3590 3591 3592 class DeleteEnvironmentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteEnvironmentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteEnvironmentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8920 8921 8922 8923 8924 8925 8926 8927 class DeleteEnvironmentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteEnvironmentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIpAllowListEntryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3595 3596 3597 3598 3599 3600 3601 3602 3603 3604 3605 class DeleteIpAllowListEntryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ip_allow_list_entry_id\" , \"client_mutation_id\" ) ip_allow_list_entry_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ipAllowListEntryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteIpAllowListEntryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIpAllowListEntryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8930 8931 8932 8933 8934 8935 8936 8937 8938 8939 8940 class DeleteIpAllowListEntryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ip_allow_list_entry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ip_allow_list_entry = sgqlc . types . Field ( \"IpAllowListEntry\" , graphql_name = \"ipAllowListEntry\" )","title":"DeleteIpAllowListEntryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIssueCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3608 3609 3610 3611 3612 3613 3614 3615 3616 class DeleteIssueCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteIssueCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIssueCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8943 8944 8945 8946 8947 8948 8949 8950 class DeleteIssueCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteIssueCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3619 3620 3621 3622 3623 3624 3625 3626 3627 class DeleteIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8953 8954 8955 8956 8957 8958 8959 8960 8961 class DeleteIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"DeleteIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectCardInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3630 3631 3632 3633 3634 3635 3636 3637 3638 class DeleteProjectCardInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"card_id\" , \"client_mutation_id\" ) card_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"cardId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteProjectCardInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectCardPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8964 8965 8966 8967 8968 8969 8970 8971 8972 8973 class DeleteProjectCardPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"column\" , \"deleted_card_id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) column = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"column\" ) deleted_card_id = sgqlc . types . Field ( ID , graphql_name = \"deletedCardId\" )","title":"DeleteProjectCardPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectColumnInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3641 3642 3643 3644 3645 3646 3647 3648 3649 class DeleteProjectColumnInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column_id\" , \"client_mutation_id\" ) column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"columnId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteProjectColumnInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectColumnPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8976 8977 8978 8979 8980 8981 8982 8983 8984 8985 class DeleteProjectColumnPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deleted_column_id\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deleted_column_id = sgqlc . types . Field ( ID , graphql_name = \"deletedColumnId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" )","title":"DeleteProjectColumnPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3652 3653 3654 3655 3656 3657 3658 3659 3660 class DeleteProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteProjectInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectNextItemInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 class DeleteProjectNextItemInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( ID , graphql_name = \"itemId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteProjectNextItemInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectNextItemPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8988 8989 8990 8991 8992 8993 8994 8995 8996 class DeleteProjectNextItemPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deleted_item_id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deleted_item_id = sgqlc . types . Field ( ID , graphql_name = \"deletedItemId\" )","title":"DeleteProjectNextItemPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 8999 9000 9001 9002 9003 9004 9005 9006 9007 class DeleteProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"ProjectOwner\" , graphql_name = \"owner\" )","title":"DeleteProjectPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectV2ItemInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 class DeleteProjectV2ItemInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"itemId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteProjectV2ItemInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteProjectV2ItemPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9010 9011 9012 9013 9014 9015 9016 9017 9018 class DeleteProjectV2ItemPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deleted_item_id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deleted_item_id = sgqlc . types . Field ( ID , graphql_name = \"deletedItemId\" )","title":"DeleteProjectV2ItemPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeletePullRequestReviewCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3687 3688 3689 3690 3691 3692 3693 3694 3695 class DeletePullRequestReviewCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeletePullRequestReviewCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeletePullRequestReviewCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9021 9022 9023 9024 9025 9026 9027 9028 9029 9030 9031 9032 9033 9034 9035 9036 9037 9038 class DeletePullRequestReviewCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" , \"pull_request_review_comment\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" ) pull_request_review_comment = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"pullRequestReviewComment\" )","title":"DeletePullRequestReviewCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeletePullRequestReviewInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3698 3699 3700 3701 3702 3703 3704 3705 3706 3707 3708 class DeletePullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_review_id\" , \"client_mutation_id\" ) pull_request_review_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestReviewId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeletePullRequestReviewInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeletePullRequestReviewPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9041 9042 9043 9044 9045 9046 9047 9048 9049 9050 9051 class DeletePullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" )","title":"DeletePullRequestReviewPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteRefInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3711 3712 3713 3714 3715 3716 3717 3718 3719 class DeleteRefInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ref_id\" , \"client_mutation_id\" ) ref_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"refId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteRefInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteRefPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9054 9055 9056 9057 9058 9059 9060 9061 class DeleteRefPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteRefPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteTeamDiscussionCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3722 3723 3724 3725 3726 3727 3728 3729 3730 class DeleteTeamDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteTeamDiscussionCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteTeamDiscussionCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9064 9065 9066 9067 9068 9069 9070 9071 class DeleteTeamDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteTeamDiscussionCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteTeamDiscussionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3733 3734 3735 3736 3737 3738 3739 3740 3741 class DeleteTeamDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteTeamDiscussionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteTeamDiscussionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9074 9075 9076 9077 9078 9079 9080 9081 class DeleteTeamDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" ,) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteTeamDiscussionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteVerifiableDomainInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3744 3745 3746 3747 3748 3749 3750 3751 3752 class DeleteVerifiableDomainInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DeleteVerifiableDomainInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeleteVerifiableDomainPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9084 9085 9086 9087 9088 9089 9090 9091 9092 class DeleteVerifiableDomainPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"VerifiableDomainOwner\" , graphql_name = \"owner\" )","title":"DeleteVerifiableDomainPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DemilestonedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22912 22913 22914 22915 22916 22917 22918 22919 22920 22921 22922 22923 22924 22925 22926 22927 22928 class DemilestonedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"milestone_title\" , \"subject\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) milestone_title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"milestoneTitle\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"MilestoneItem\" ), graphql_name = \"subject\" )","title":"DemilestonedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DependabotUpdate","text":"Bases: sgqlc . types . Type , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22931 22932 22933 22934 22935 22936 22937 22938 22939 class DependabotUpdate ( sgqlc . types . Type , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"error\" , \"pull_request\" ) error = sgqlc . types . Field ( DependabotUpdateError , graphql_name = \"error\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"DependabotUpdate"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DependabotUpdateError","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9095 9096 9097 9098 9099 9100 9101 9102 9103 9104 9105 9106 class DependabotUpdateError ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"error_type\" , \"title\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) error_type = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"errorType\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" )","title":"DependabotUpdateError"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DependencyGraphEcosystem","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 class DependencyGraphEcosystem ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTIONS\" , \"COMPOSER\" , \"GO\" , \"MAVEN\" , \"NPM\" , \"NUGET\" , \"PIP\" , \"RUBYGEMS\" , \"RUST\" , )","title":"DependencyGraphEcosystem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeployKey","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22942 22943 22944 22945 22946 22947 22948 22949 22950 22951 22952 22953 22954 22955 22956 22957 class DeployKey ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"key\" , \"read_only\" , \"title\" , \"verified\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) read_only = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"readOnly\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) verified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"verified\" )","title":"DeployKey"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeployKeyConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9109 9110 9111 9112 9113 9114 9115 9116 9117 9118 9119 9120 9121 9122 9123 9124 9125 class DeployKeyConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeployKeyEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeployKey\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DeployKeyConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeployKeyEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9128 9129 9130 9131 9132 9133 9134 9135 9136 class DeployKeyEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DeployKey\" , graphql_name = \"node\" )","title":"DeployKeyEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeployedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22960 22961 22962 22963 22964 22965 22966 22967 22968 22969 22970 22971 22972 22973 22974 22975 22976 22977 22978 22979 22980 22981 22982 22983 22984 22985 class DeployedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" , \"deployment\" , \"pull_request\" , \"ref\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) deployment = sgqlc . types . Field ( sgqlc . types . non_null ( \"Deployment\" ), graphql_name = \"deployment\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" )","title":"DeployedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Deployment","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 22988 22989 22990 22991 22992 22993 22994 22995 22996 22997 22998 22999 23000 23001 23002 23003 23004 23005 23006 23007 23008 23009 23010 23011 23012 23013 23014 23015 23016 23017 23018 23019 23020 23021 23022 23023 23024 23025 23026 23027 23028 23029 23030 23031 23032 23033 23034 23035 23036 23037 23038 23039 23040 23041 23042 23043 23044 23045 23046 23047 23048 23049 23050 23051 class Deployment ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"commit_oid\" , \"created_at\" , \"creator\" , \"database_id\" , \"description\" , \"environment\" , \"latest_environment\" , \"latest_status\" , \"original_environment\" , \"payload\" , \"ref\" , \"repository\" , \"state\" , \"statuses\" , \"task\" , \"updated_at\" , ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) commit_oid = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"commitOid\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) environment = sgqlc . types . Field ( String , graphql_name = \"environment\" ) latest_environment = sgqlc . types . Field ( String , graphql_name = \"latestEnvironment\" ) latest_status = sgqlc . types . Field ( \"DeploymentStatus\" , graphql_name = \"latestStatus\" ) original_environment = sgqlc . types . Field ( String , graphql_name = \"originalEnvironment\" ) payload = sgqlc . types . Field ( String , graphql_name = \"payload\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) state = sgqlc . types . Field ( DeploymentState , graphql_name = \"state\" ) statuses = sgqlc . types . Field ( DeploymentStatusConnection , graphql_name = \"statuses\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) task = sgqlc . types . Field ( String , graphql_name = \"task\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"Deployment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9139 9140 9141 9142 9143 9144 9145 9146 9147 9148 9149 9150 9151 9152 9153 9154 9155 class DeploymentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Deployment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DeploymentConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9158 9159 9160 9161 9162 9163 9164 9165 9166 class DeploymentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Deployment\" , graphql_name = \"node\" )","title":"DeploymentEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentEnvironmentChangedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23054 23055 23056 23057 23058 23059 23060 23061 23062 23063 23064 23065 23066 23067 23068 23069 23070 class DeploymentEnvironmentChangedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"deployment_status\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) deployment_status = sgqlc . types . Field ( sgqlc . types . non_null ( \"DeploymentStatus\" ), graphql_name = \"deploymentStatus\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"DeploymentEnvironmentChangedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3755 3756 3757 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 class DeploymentOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"DeploymentOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 223 224 225 226 227 228 229 class DeploymentOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"DeploymentOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentProtectionRule","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9169 9170 9171 9172 9173 9174 9175 9176 9177 9178 9179 9180 9181 9182 9183 9184 9185 9186 9187 9188 9189 9190 9191 9192 9193 9194 9195 class DeploymentProtectionRule ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"reviewers\" , \"timeout\" , \"type\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) reviewers = sgqlc . types . Field ( sgqlc . types . non_null ( \"DeploymentReviewerConnection\" ), graphql_name = \"reviewers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) timeout = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"timeout\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentProtectionRuleType ), graphql_name = \"type\" )","title":"DeploymentProtectionRule"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentProtectionRuleConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9198 9199 9200 9201 9202 9203 9204 9205 9206 9207 9208 9209 9210 9211 9212 9213 9214 9215 9216 class DeploymentProtectionRuleConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentProtectionRuleEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( DeploymentProtectionRule ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DeploymentProtectionRuleConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentProtectionRuleEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9219 9220 9221 9222 9223 9224 9225 9226 9227 class DeploymentProtectionRuleEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( DeploymentProtectionRule , graphql_name = \"node\" )","title":"DeploymentProtectionRuleEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentProtectionRuleType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 232 233 234 235 236 237 238 class DeploymentProtectionRuleType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"REQUIRED_REVIEWERS\" , \"WAIT_TIMER\" )","title":"DeploymentProtectionRuleType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentRequest","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9230 9231 9232 9233 9234 9235 9236 9237 9238 9239 9240 9241 9242 9243 9244 9245 9246 9247 9248 9249 9250 9251 9252 9253 9254 9255 9256 9257 9258 9259 9260 9261 9262 9263 9264 9265 9266 9267 class DeploymentRequest ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"current_user_can_approve\" , \"environment\" , \"reviewers\" , \"wait_timer\" , \"wait_timer_started_at\" , ) current_user_can_approve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"currentUserCanApprove\" ) environment = sgqlc . types . Field ( sgqlc . types . non_null ( \"Environment\" ), graphql_name = \"environment\" ) reviewers = sgqlc . types . Field ( sgqlc . types . non_null ( \"DeploymentReviewerConnection\" ), graphql_name = \"reviewers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) wait_timer = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"waitTimer\" ) wait_timer_started_at = sgqlc . types . Field ( DateTime , graphql_name = \"waitTimerStartedAt\" )","title":"DeploymentRequest"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentRequestConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9270 9271 9272 9273 9274 9275 9276 9277 9278 9279 9280 9281 9282 9283 9284 9285 9286 9287 9288 class DeploymentRequestConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentRequestEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( DeploymentRequest ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DeploymentRequestConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentRequestEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9291 9292 9293 9294 9295 9296 9297 9298 9299 class DeploymentRequestEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( DeploymentRequest , graphql_name = \"node\" )","title":"DeploymentRequestEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReview","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23073 23074 23075 23076 23077 23078 23079 23080 23081 23082 23083 23084 23085 23086 23087 23088 23089 23090 23091 23092 23093 23094 23095 23096 23097 23098 23099 23100 class DeploymentReview ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comment\" , \"database_id\" , \"environments\" , \"state\" , \"user\" ) comment = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"comment\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) environments = sgqlc . types . Field ( sgqlc . types . non_null ( EnvironmentConnection ), graphql_name = \"environments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) state = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentReviewState ), graphql_name = \"state\" ) user = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"user\" )","title":"DeploymentReview"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9302 9303 9304 9305 9306 9307 9308 9309 9310 9311 9312 9313 9314 9315 9316 9317 9318 9319 9320 class DeploymentReviewConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentReviewEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentReview\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DeploymentReviewConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9323 9324 9325 9326 9327 9328 9329 9330 9331 class DeploymentReviewEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DeploymentReview\" , graphql_name = \"node\" )","title":"DeploymentReviewEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 241 242 243 244 245 246 247 class DeploymentReviewState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"APPROVED\" , \"REJECTED\" )","title":"DeploymentReviewState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewer","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32430 32431 32432 32433 32434 32435 32436 class DeploymentReviewer ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Team , User )","title":"DeploymentReviewer"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewerConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9334 9335 9336 9337 9338 9339 9340 9341 9342 9343 9344 9345 9346 9347 9348 9349 9350 9351 9352 class DeploymentReviewerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentReviewerEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentReviewer\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DeploymentReviewerConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentReviewerEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9355 9356 9357 9358 9359 9360 9361 9362 9363 class DeploymentReviewerEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DeploymentReviewer\" , graphql_name = \"node\" )","title":"DeploymentReviewerEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 class DeploymentState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ABANDONED\" , \"ACTIVE\" , \"DESTROYED\" , \"ERROR\" , \"FAILURE\" , \"INACTIVE\" , \"IN_PROGRESS\" , \"PENDING\" , \"QUEUED\" , \"WAITING\" , )","title":"DeploymentState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentStatus","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23103 23104 23105 23106 23107 23108 23109 23110 23111 23112 23113 23114 23115 23116 23117 23118 23119 23120 23121 23122 23123 23124 23125 23126 23127 23128 23129 23130 23131 23132 23133 23134 class DeploymentStatus ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"deployment\" , \"description\" , \"environment_url\" , \"log_url\" , \"state\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"creator\" ) deployment = sgqlc . types . Field ( sgqlc . types . non_null ( Deployment ), graphql_name = \"deployment\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) environment_url = sgqlc . types . Field ( URI , graphql_name = \"environmentUrl\" ) log_url = sgqlc . types . Field ( URI , graphql_name = \"logUrl\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentStatusState ), graphql_name = \"state\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"DeploymentStatus"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentStatusConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9366 9367 9368 9369 9370 9371 9372 9373 9374 9375 9376 9377 9378 9379 9380 9381 9382 9383 9384 class DeploymentStatusConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentStatusEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DeploymentStatus\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DeploymentStatusConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentStatusEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9387 9388 9389 9390 9391 9392 9393 9394 9395 class DeploymentStatusEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DeploymentStatus\" , graphql_name = \"node\" )","title":"DeploymentStatusEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DeploymentStatusState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 class DeploymentStatusState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ERROR\" , \"FAILURE\" , \"INACTIVE\" , \"IN_PROGRESS\" , \"PENDING\" , \"QUEUED\" , \"SUCCESS\" , \"WAITING\" , )","title":"DeploymentStatusState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiffSide","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 288 289 290 291 292 293 294 class DiffSide ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LEFT\" , \"RIGHT\" )","title":"DiffSide"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DisablePullRequestAutoMergeInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 class DisablePullRequestAutoMergeInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DisablePullRequestAutoMergeInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DisablePullRequestAutoMergePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9398 9399 9400 9401 9402 9403 9404 9405 9406 9407 class DisablePullRequestAutoMergePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"DisablePullRequestAutoMergePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DisconnectedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23137 23138 23139 23140 23141 23142 23143 23144 23145 23146 23147 23148 23149 23150 23151 23152 23153 23154 23155 23156 23157 23158 23159 23160 23161 23162 class DisconnectedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"is_cross_repository\" , \"source\" , \"subject\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) source = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"source\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"subject\" )","title":"DisconnectedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Discussion","text":"Bases: sgqlc . types . Type , Comment , Updatable , Deletable , Labelable , Lockable , RepositoryNode , Subscribable , Reactable , Votable , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23165 23166 23167 23168 23169 23170 23171 23172 23173 23174 23175 23176 23177 23178 23179 23180 23181 23182 23183 23184 23185 23186 23187 23188 23189 23190 23191 23192 23193 23194 23195 23196 23197 23198 23199 23200 23201 23202 23203 23204 23205 23206 23207 23208 23209 23210 23211 23212 23213 23214 23215 23216 23217 23218 23219 23220 23221 23222 class Discussion ( sgqlc . types . Type , Comment , Updatable , Deletable , Labelable , Lockable , RepositoryNode , Subscribable , Reactable , Votable , Node , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"answer\" , \"answer_chosen_at\" , \"answer_chosen_by\" , \"category\" , \"comments\" , \"number\" , \"poll\" , \"resource_path\" , \"title\" , \"url\" , ) answer = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"answer\" ) answer_chosen_at = sgqlc . types . Field ( DateTime , graphql_name = \"answerChosenAt\" ) answer_chosen_by = sgqlc . types . Field ( Actor , graphql_name = \"answerChosenBy\" ) category = sgqlc . types . Field ( sgqlc . types . non_null ( \"DiscussionCategory\" ), graphql_name = \"category\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) poll = sgqlc . types . Field ( \"DiscussionPoll\" , graphql_name = \"poll\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"Discussion"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCategory","text":"Bases: sgqlc . types . Type , Node , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23225 23226 23227 23228 23229 23230 23231 23232 23233 23234 23235 23236 23237 23238 23239 23240 23241 23242 23243 23244 23245 23246 23247 23248 23249 23250 23251 23252 23253 23254 class DiscussionCategory ( sgqlc . types . Type , Node , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"description\" , \"emoji\" , \"emoji_html\" , \"is_answerable\" , \"name\" , \"slug\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) emoji = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"emoji\" ) emoji_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"emojiHTML\" ) is_answerable = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isAnswerable\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"DiscussionCategory"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCategoryConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9410 9411 9412 9413 9414 9415 9416 9417 9418 9419 9420 9421 9422 9423 9424 9425 9426 9427 9428 class DiscussionCategoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionCategoryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionCategory\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DiscussionCategoryConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCategoryEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9431 9432 9433 9434 9435 9436 9437 9438 9439 class DiscussionCategoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DiscussionCategory\" , graphql_name = \"node\" )","title":"DiscussionCategoryEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionComment","text":"Bases: sgqlc . types . Type , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , Votable , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23257 23258 23259 23260 23261 23262 23263 23264 23265 23266 23267 23268 23269 23270 23271 23272 23273 23274 23275 23276 23277 23278 23279 23280 23281 23282 23283 23284 23285 23286 23287 23288 23289 23290 23291 23292 23293 23294 23295 23296 23297 23298 23299 23300 23301 23302 23303 23304 23305 23306 23307 23308 23309 23310 23311 23312 23313 23314 class DiscussionComment ( sgqlc . types . Type , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , Votable , Node , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"deleted_at\" , \"discussion\" , \"is_answer\" , \"replies\" , \"reply_to\" , \"resource_path\" , \"url\" , \"viewer_can_mark_as_answer\" , \"viewer_can_unmark_as_answer\" , ) deleted_at = sgqlc . types . Field ( DateTime , graphql_name = \"deletedAt\" ) discussion = sgqlc . types . Field ( Discussion , graphql_name = \"discussion\" ) is_answer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isAnswer\" ) replies = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionCommentConnection ), graphql_name = \"replies\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) reply_to = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"replyTo\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) viewer_can_mark_as_answer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanMarkAsAnswer\" ) viewer_can_unmark_as_answer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUnmarkAsAnswer\" )","title":"DiscussionComment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCommentConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9442 9443 9444 9445 9446 9447 9448 9449 9450 9451 9452 9453 9454 9455 9456 9457 9458 9459 9460 class DiscussionCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DiscussionCommentConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionCommentEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9463 9464 9465 9466 9467 9468 9469 9470 9471 class DiscussionCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"node\" )","title":"DiscussionCommentEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9474 9475 9476 9477 9478 9479 9480 9481 9482 9483 9484 9485 9486 9487 9488 9489 9490 class DiscussionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Discussion\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DiscussionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9493 9494 9495 9496 9497 9498 9499 9500 9501 class DiscussionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"node\" )","title":"DiscussionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795 class DiscussionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"DiscussionOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 297 298 299 300 301 302 303 class DiscussionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"UPDATED_AT\" )","title":"DiscussionOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPoll","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23317 23318 23319 23320 23321 23322 23323 23324 23325 23326 23327 23328 23329 23330 23331 23332 23333 23334 23335 23336 23337 23338 23339 23340 23341 23342 23343 23344 23345 23346 23347 23348 23349 23350 23351 23352 23353 23354 23355 23356 23357 23358 23359 23360 23361 23362 23363 23364 class DiscussionPoll ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"discussion\" , \"options\" , \"question\" , \"total_vote_count\" , \"viewer_can_vote\" , \"viewer_has_voted\" , ) discussion = sgqlc . types . Field ( Discussion , graphql_name = \"discussion\" ) options = sgqlc . types . Field ( DiscussionPollOptionConnection , graphql_name = \"options\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( DiscussionPollOptionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"AUTHORED_ORDER\" , \"direction\" : \"ASC\" }, ), ), ) ), ) question = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"question\" ) total_vote_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalVoteCount\" ) viewer_can_vote = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanVote\" ) viewer_has_voted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasVoted\" )","title":"DiscussionPoll"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOption","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23367 23368 23369 23370 23371 23372 23373 23374 23375 23376 23377 23378 23379 23380 23381 class DiscussionPollOption ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"option\" , \"poll\" , \"total_vote_count\" , \"viewer_has_voted\" ) option = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"option\" ) poll = sgqlc . types . Field ( DiscussionPoll , graphql_name = \"poll\" ) total_vote_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalVoteCount\" ) viewer_has_voted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasVoted\" )","title":"DiscussionPollOption"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOptionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9504 9505 9506 9507 9508 9509 9510 9511 9512 9513 9514 9515 9516 9517 9518 9519 9520 9521 9522 class DiscussionPollOptionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionPollOptionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"DiscussionPollOption\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"DiscussionPollOptionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOptionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9525 9526 9527 9528 9529 9530 9531 9532 9533 class DiscussionPollOptionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"DiscussionPollOption\" , graphql_name = \"node\" )","title":"DiscussionPollOptionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOptionOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3798 3799 3800 3801 3802 3803 3804 3805 3806 3807 3808 3809 3810 class DiscussionPollOptionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionPollOptionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"DiscussionPollOptionOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DiscussionPollOptionOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 306 307 308 309 310 311 312 class DiscussionPollOptionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"AUTHORED_ORDER\" , \"VOTE_COUNT\" )","title":"DiscussionPollOptionOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissPullRequestReviewInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 class DismissPullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_review_id\" , \"message\" , \"client_mutation_id\" ) pull_request_review_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestReviewId\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DismissPullRequestReviewInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissPullRequestReviewPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9536 9537 9538 9539 9540 9541 9542 9543 9544 9545 9546 class DismissPullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" )","title":"DismissPullRequestReviewPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 315 316 317 318 319 320 321 322 323 324 325 326 327 class DismissReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FIX_STARTED\" , \"INACCURATE\" , \"NOT_USED\" , \"NO_BANDWIDTH\" , \"TOLERABLE_RISK\" , )","title":"DismissReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissRepositoryVulnerabilityAlertInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 class DismissRepositoryVulnerabilityAlertInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_vulnerability_alert_id\" , \"dismiss_reason\" , \"client_mutation_id\" , ) repository_vulnerability_alert_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryVulnerabilityAlertId\" ) dismiss_reason = sgqlc . types . Field ( sgqlc . types . non_null ( DismissReason ), graphql_name = \"dismissReason\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"DismissRepositoryVulnerabilityAlertInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DismissRepositoryVulnerabilityAlertPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9549 9550 9551 9552 9553 9554 9555 9556 9557 9558 9559 class DismissRepositoryVulnerabilityAlertPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository_vulnerability_alert\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository_vulnerability_alert = sgqlc . types . Field ( \"RepositoryVulnerabilityAlert\" , graphql_name = \"repositoryVulnerabilityAlert\" )","title":"DismissRepositoryVulnerabilityAlertPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DraftIssue","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23384 23385 23386 23387 23388 23389 23390 23391 23392 23393 23394 23395 23396 23397 23398 23399 23400 23401 23402 23403 23404 23405 23406 23407 23408 23409 23410 23411 23412 23413 23414 23415 23416 23417 23418 23419 23420 23421 23422 23423 23424 23425 23426 23427 23428 23429 23430 23431 23432 23433 23434 23435 23436 23437 23438 23439 23440 23441 23442 23443 23444 23445 23446 23447 23448 23449 23450 23451 23452 23453 23454 23455 23456 23457 23458 23459 23460 23461 23462 23463 23464 23465 class DraftIssue ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignees\" , \"body\" , \"body_html\" , \"body_text\" , \"created_at\" , \"creator\" , \"project\" , \"project_item\" , \"project_v2_items\" , \"projects_v2\" , \"title\" , \"updated_at\" , ) assignees = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"assignees\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bodyHTML\" ) body_text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"bodyText\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectNext\" ), graphql_name = \"project\" ) project_item = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectNextItem\" ), graphql_name = \"projectItem\" ) project_v2_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemConnection ), graphql_name = \"projectV2Items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) projects_v2 = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Connection ), graphql_name = \"projectsV2\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"DraftIssue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DraftPullRequestReviewComment","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 class DraftPullRequestReviewComment ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"position\" , \"body\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) position = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"position\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" )","title":"DraftPullRequestReviewComment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.DraftPullRequestReviewThread","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 class DraftPullRequestReviewThread ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"line\" , \"side\" , \"start_line\" , \"start_side\" , \"body\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"line\" ) side = sgqlc . types . Field ( DiffSide , graphql_name = \"side\" ) start_line = sgqlc . types . Field ( Int , graphql_name = \"startLine\" ) start_side = sgqlc . types . Field ( DiffSide , graphql_name = \"startSide\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" )","title":"DraftPullRequestReviewThread"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnablePullRequestAutoMergeInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 class EnablePullRequestAutoMergeInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"commit_headline\" , \"commit_body\" , \"merge_method\" , \"author_email\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) commit_headline = sgqlc . types . Field ( String , graphql_name = \"commitHeadline\" ) commit_body = sgqlc . types . Field ( String , graphql_name = \"commitBody\" ) merge_method = sgqlc . types . Field ( PullRequestMergeMethod , graphql_name = \"mergeMethod\" ) author_email = sgqlc . types . Field ( String , graphql_name = \"authorEmail\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"EnablePullRequestAutoMergeInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnablePullRequestAutoMergePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9562 9563 9564 9565 9566 9567 9568 9569 9570 9571 class EnablePullRequestAutoMergePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"EnablePullRequestAutoMergePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Enterprise","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Enterprise ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"billing_info\" , \"created_at\" , \"database_id\" , \"description\" , \"description_html\" , \"location\" , \"members\" , \"name\" , \"organizations\" , \"owner_info\" , \"resource_path\" , \"slug\" , \"url\" , \"viewer_is_admin\" , \"website_url\" , ) avatar_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) billing_info = sgqlc . types . Field ( EnterpriseBillingInfo , graphql_name = \"billingInfo\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"descriptionHTML\" ) location = sgqlc . types . Field ( String , graphql_name = \"location\" ) members = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMemberConnection ), graphql_name = \"members\" , args = sgqlc . types . ArgDict ( ( ( \"organization_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"organizationLogins\" , default = None , ), ), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseMemberOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"role\" , sgqlc . types . Arg ( EnterpriseUserAccountMembershipRole , graphql_name = \"role\" , default = None , ), ), ( \"deployment\" , sgqlc . types . Arg ( EnterpriseUserDeployment , graphql_name = \"deployment\" , default = None , ), ), ( \"has_two_factor_enabled\" , sgqlc . types . Arg ( Boolean , graphql_name = \"hasTwoFactorEnabled\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) organizations = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationConnection ), graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"viewer_organization_role\" , sgqlc . types . Arg ( RoleInOrganization , graphql_name = \"viewerOrganizationRole\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) owner_info = sgqlc . types . Field ( EnterpriseOwnerInfo , graphql_name = \"ownerInfo\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) viewer_is_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsAdmin\" ) website_url = sgqlc . types . Field ( URI , graphql_name = \"websiteUrl\" )","title":"Enterprise"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9574 9575 9576 9577 9578 9579 9580 9581 9582 9583 9584 9585 9586 9587 9588 9589 9590 class EnterpriseAdministratorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseAdministratorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseAdministratorConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9593 9594 9595 9596 9597 9598 9599 9600 9601 9602 9603 9604 class EnterpriseAdministratorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"role\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorRole ), graphql_name = \"role\" )","title":"EnterpriseAdministratorEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitation","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23608 23609 23610 23611 23612 23613 23614 23615 23616 23617 23618 23619 23620 23621 23622 23623 23624 23625 23626 23627 23628 23629 23630 23631 23632 23633 class EnterpriseAdministratorInvitation ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"email\" , \"enterprise\" , \"invitee\" , \"inviter\" , \"role\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) enterprise = sgqlc . types . Field ( sgqlc . types . non_null ( Enterprise ), graphql_name = \"enterprise\" ) invitee = sgqlc . types . Field ( \"User\" , graphql_name = \"invitee\" ) inviter = sgqlc . types . Field ( \"User\" , graphql_name = \"inviter\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorRole ), graphql_name = \"role\" )","title":"EnterpriseAdministratorInvitation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9607 9608 9609 9610 9611 9612 9613 9614 9615 9616 9617 9618 9619 9620 9621 9622 9623 9624 9625 9626 class EnterpriseAdministratorInvitationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseAdministratorInvitationEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseAdministratorInvitation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseAdministratorInvitationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9629 9630 9631 9632 9633 9634 9635 9636 9637 class EnterpriseAdministratorInvitationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"node\" )","title":"EnterpriseAdministratorInvitationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitationOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3898 3899 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 class EnterpriseAdministratorInvitationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorInvitationOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"EnterpriseAdministratorInvitationOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorInvitationOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 330 331 332 333 334 335 336 class EnterpriseAdministratorInvitationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"EnterpriseAdministratorInvitationOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAdministratorRole","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 339 340 341 342 343 344 345 class EnterpriseAdministratorRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BILLING_MANAGER\" , \"OWNER\" )","title":"EnterpriseAdministratorRole"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAllowPrivateRepositoryForkingPolicyValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 348 349 350 351 352 353 354 355 356 357 358 359 360 361 class EnterpriseAllowPrivateRepositoryForkingPolicyValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ENTERPRISE_ORGANIZATIONS\" , \"ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS\" , \"EVERYWHERE\" , \"SAME_ORGANIZATION\" , \"SAME_ORGANIZATION_USER_ACCOUNTS\" , \"USER_ACCOUNTS\" , )","title":"EnterpriseAllowPrivateRepositoryForkingPolicyValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseAuditEntryData","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9640 9641 9642 9643 9644 9645 9646 9647 9648 9649 9650 9651 class EnterpriseAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_resource_path\" , \"enterprise_slug\" , \"enterprise_url\" ) enterprise_resource_path = sgqlc . types . Field ( URI , graphql_name = \"enterpriseResourcePath\" ) enterprise_slug = sgqlc . types . Field ( String , graphql_name = \"enterpriseSlug\" ) enterprise_url = sgqlc . types . Field ( URI , graphql_name = \"enterpriseUrl\" )","title":"EnterpriseAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseBillingInfo","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9654 9655 9656 9657 9658 9659 9660 9661 9662 9663 9664 9665 9666 9667 9668 9669 9670 9671 9672 9673 9674 9675 9676 9677 9678 9679 9680 9681 9682 9683 9684 9685 9686 9687 9688 9689 9690 9691 9692 9693 9694 9695 9696 9697 9698 9699 9700 9701 class EnterpriseBillingInfo ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"all_licensable_users_count\" , \"asset_packs\" , \"bandwidth_quota\" , \"bandwidth_usage\" , \"bandwidth_usage_percentage\" , \"storage_quota\" , \"storage_usage\" , \"storage_usage_percentage\" , \"total_available_licenses\" , \"total_licenses\" , ) all_licensable_users_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"allLicensableUsersCount\" ) asset_packs = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"assetPacks\" ) bandwidth_quota = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"bandwidthQuota\" ) bandwidth_usage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"bandwidthUsage\" ) bandwidth_usage_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"bandwidthUsagePercentage\" ) storage_quota = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"storageQuota\" ) storage_usage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"storageUsage\" ) storage_usage_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"storageUsagePercentage\" ) total_available_licenses = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalAvailableLicenses\" ) total_licenses = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalLicenses\" )","title":"EnterpriseBillingInfo"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseDefaultRepositoryPermissionSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 364 365 366 367 368 369 370 class EnterpriseDefaultRepositoryPermissionSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"NONE\" , \"NO_POLICY\" , \"READ\" , \"WRITE\" )","title":"EnterpriseDefaultRepositoryPermissionSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseEnabledDisabledSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 373 374 375 376 377 378 379 class EnterpriseEnabledDisabledSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" , \"NO_POLICY\" )","title":"EnterpriseEnabledDisabledSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseEnabledSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 382 383 384 385 386 387 388 class EnterpriseEnabledSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ENABLED\" , \"NO_POLICY\" )","title":"EnterpriseEnabledSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseIdentityProvider","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23636 23637 23638 23639 23640 23641 23642 23643 23644 23645 23646 23647 23648 23649 23650 23651 23652 23653 23654 23655 23656 23657 23658 23659 23660 23661 23662 23663 23664 23665 23666 23667 23668 23669 23670 23671 23672 23673 23674 23675 23676 23677 23678 23679 23680 23681 23682 23683 23684 23685 23686 class EnterpriseIdentityProvider ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"digest_method\" , \"enterprise\" , \"external_identities\" , \"idp_certificate\" , \"issuer\" , \"recovery_codes\" , \"signature_method\" , \"sso_url\" , ) digest_method = sgqlc . types . Field ( SamlDigestAlgorithm , graphql_name = \"digestMethod\" ) enterprise = sgqlc . types . Field ( Enterprise , graphql_name = \"enterprise\" ) external_identities = sgqlc . types . Field ( sgqlc . types . non_null ( ExternalIdentityConnection ), graphql_name = \"externalIdentities\" , args = sgqlc . types . ArgDict ( ( ( \"members_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"membersOnly\" , default = None ), ), ( \"login\" , sgqlc . types . Arg ( String , graphql_name = \"login\" , default = None )), ( \"user_name\" , sgqlc . types . Arg ( String , graphql_name = \"userName\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) idp_certificate = sgqlc . types . Field ( X509Certificate , graphql_name = \"idpCertificate\" ) issuer = sgqlc . types . Field ( String , graphql_name = \"issuer\" ) recovery_codes = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"recoveryCodes\" ) signature_method = sgqlc . types . Field ( SamlSignatureAlgorithm , graphql_name = \"signatureMethod\" ) sso_url = sgqlc . types . Field ( URI , graphql_name = \"ssoUrl\" )","title":"EnterpriseIdentityProvider"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMember","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32439 32440 32441 32442 32443 32444 32445 class EnterpriseMember ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( EnterpriseUserAccount , User )","title":"EnterpriseMember"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMemberConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9704 9705 9706 9707 9708 9709 9710 9711 9712 9713 9714 9715 9716 9717 9718 9719 9720 9721 9722 class EnterpriseMemberConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseMemberEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseMember\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseMemberConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMemberEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9725 9726 9727 9728 9729 9730 9731 9732 9733 class EnterpriseMemberEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseMember\" , graphql_name = \"node\" )","title":"EnterpriseMemberEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMemberOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 class EnterpriseMemberOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMemberOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"EnterpriseMemberOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMemberOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 391 392 393 394 395 396 397 class EnterpriseMemberOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"LOGIN\" )","title":"EnterpriseMemberOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMembersCanCreateRepositoriesSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 400 401 402 403 404 405 406 class EnterpriseMembersCanCreateRepositoriesSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"DISABLED\" , \"NO_POLICY\" , \"PRIVATE\" , \"PUBLIC\" )","title":"EnterpriseMembersCanCreateRepositoriesSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseMembersCanMakePurchasesSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 409 410 411 412 413 414 415 class EnterpriseMembersCanMakePurchasesSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" )","title":"EnterpriseMembersCanMakePurchasesSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOrganizationMembershipConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9736 9737 9738 9739 9740 9741 9742 9743 9744 9745 9746 9747 9748 9749 9750 9751 9752 9753 class EnterpriseOrganizationMembershipConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseOrganizationMembershipEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Organization\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseOrganizationMembershipConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOrganizationMembershipEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9756 9757 9758 9759 9760 9761 9762 9763 9764 9765 9766 9767 class EnterpriseOrganizationMembershipEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"role\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Organization\" , graphql_name = \"node\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseUserAccountMembershipRole ), graphql_name = \"role\" )","title":"EnterpriseOrganizationMembershipEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOutsideCollaboratorConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9770 9771 9772 9773 9774 9775 9776 9777 9778 9779 9780 9781 9782 9783 9784 9785 9786 class EnterpriseOutsideCollaboratorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseOutsideCollaboratorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseOutsideCollaboratorConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOutsideCollaboratorEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 9789 9790 9791 9792 9793 9794 9795 9796 9797 9798 9799 9800 9801 9802 9803 9804 9805 9806 9807 9808 9809 9810 9811 9812 9813 9814 9815 9816 9817 9818 9819 9820 class EnterpriseOutsideCollaboratorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"repositories\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( \"EnterpriseRepositoryInfoConnection\" ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"NAME\" , \"direction\" : \"ASC\" }, ), ), ) ), )","title":"EnterpriseOutsideCollaboratorEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseOwnerInfo","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass EnterpriseOwnerInfo ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"admins\" , \"affiliated_users_with_two_factor_disabled\" , \"affiliated_users_with_two_factor_disabled_exist\" , \"allow_private_repository_forking_setting\" , \"allow_private_repository_forking_setting_organizations\" , \"allow_private_repository_forking_setting_policy_value\" , \"default_repository_permission_setting\" , \"default_repository_permission_setting_organizations\" , \"domains\" , \"enterprise_server_installations\" , \"ip_allow_list_enabled_setting\" , \"ip_allow_list_entries\" , \"ip_allow_list_for_installed_apps_enabled_setting\" , \"is_updating_default_repository_permission\" , \"is_updating_two_factor_requirement\" , \"members_can_change_repository_visibility_setting\" , \"members_can_change_repository_visibility_setting_organizations\" , \"members_can_create_internal_repositories_setting\" , \"members_can_create_private_repositories_setting\" , \"members_can_create_public_repositories_setting\" , \"members_can_create_repositories_setting\" , \"members_can_create_repositories_setting_organizations\" , \"members_can_delete_issues_setting\" , \"members_can_delete_issues_setting_organizations\" , \"members_can_delete_repositories_setting\" , \"members_can_delete_repositories_setting_organizations\" , \"members_can_invite_collaborators_setting\" , \"members_can_invite_collaborators_setting_organizations\" , \"members_can_make_purchases_setting\" , \"members_can_update_protected_branches_setting\" , \"members_can_update_protected_branches_setting_organizations\" , \"members_can_view_dependency_insights_setting\" , \"members_can_view_dependency_insights_setting_organizations\" , \"notification_delivery_restriction_enabled_setting\" , \"oidc_provider\" , \"organization_projects_setting\" , \"organization_projects_setting_organizations\" , \"outside_collaborators\" , \"pending_admin_invitations\" , \"pending_collaborator_invitations\" , \"pending_member_invitations\" , \"repository_projects_setting\" , \"repository_projects_setting_organizations\" , \"saml_identity_provider\" , \"saml_identity_provider_setting_organizations\" , \"support_entitlements\" , \"team_discussions_setting\" , \"team_discussions_setting_organizations\" , \"two_factor_required_setting\" , \"two_factor_required_setting_organizations\" , ) admins = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorConnection ), graphql_name = \"admins\" , args = sgqlc . types . ArgDict ( ( ( \"organization_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"organizationLogins\" , default = None , ), ), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"role\" , sgqlc . types . Arg ( EnterpriseAdministratorRole , graphql_name = \"role\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseMemberOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"has_two_factor_enabled\" , sgqlc . types . Arg ( Boolean , graphql_name = \"hasTwoFactorEnabled\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) affiliated_users_with_two_factor_disabled = sgqlc . types . Field ( sgqlc . types . non_null ( \"UserConnection\" ), graphql_name = \"affiliatedUsersWithTwoFactorDisabled\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) affiliated_users_with_two_factor_disabled_exist = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"affiliatedUsersWithTwoFactorDisabledExist\" , ) allow_private_repository_forking_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"allowPrivateRepositoryForkingSetting\" , ) allow_private_repository_forking_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"allowPrivateRepositoryForkingSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) allow_private_repository_forking_setting_policy_value = sgqlc . types . Field ( EnterpriseAllowPrivateRepositoryForkingPolicyValue , graphql_name = \"allowPrivateRepositoryForkingSettingPolicyValue\" , ) default_repository_permission_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseDefaultRepositoryPermissionSettingValue ), graphql_name = \"defaultRepositoryPermissionSetting\" , ) default_repository_permission_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"defaultRepositoryPermissionSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DefaultRepositoryPermissionField ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) domains = sgqlc . types . Field ( sgqlc . types . non_null ( \"VerifiableDomainConnection\" ), graphql_name = \"domains\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"is_verified\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isVerified\" , default = None ), ), ( \"is_approved\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isApproved\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( VerifiableDomainOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) enterprise_server_installations = sgqlc . types . Field ( sgqlc . types . non_null ( \"EnterpriseServerInstallationConnection\" ), graphql_name = \"enterpriseServerInstallations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"connected_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"connectedOnly\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseServerInstallationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"HOST_NAME\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ip_allow_list_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEnabledSettingValue ), graphql_name = \"ipAllowListEnabledSetting\" , ) ip_allow_list_entries = sgqlc . types . Field ( sgqlc . types . non_null ( \"IpAllowListEntryConnection\" ), graphql_name = \"ipAllowListEntries\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( IpAllowListEntryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ip_allow_list_for_installed_apps_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListForInstalledAppsEnabledSettingValue ), graphql_name = \"ipAllowListForInstalledAppsEnabledSetting\" , ) is_updating_default_repository_permission = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUpdatingDefaultRepositoryPermission\" , ) is_updating_two_factor_requirement = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUpdatingTwoFactorRequirement\" ) members_can_change_repository_visibility_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanChangeRepositoryVisibilitySetting\" , ) members_can_change_repository_visibility_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanChangeRepositoryVisibilitySettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_create_internal_repositories_setting = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreateInternalRepositoriesSetting\" ) members_can_create_private_repositories_setting = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreatePrivateRepositoriesSetting\" ) members_can_create_public_repositories_setting = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreatePublicRepositoriesSetting\" ) members_can_create_repositories_setting = sgqlc . types . Field ( EnterpriseMembersCanCreateRepositoriesSettingValue , graphql_name = \"membersCanCreateRepositoriesSetting\" , ) members_can_create_repositories_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanCreateRepositoriesSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( OrganizationMembersCanCreateRepositoriesSettingValue ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_delete_issues_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanDeleteIssuesSetting\" , ) members_can_delete_issues_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanDeleteIssuesSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_delete_repositories_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanDeleteRepositoriesSetting\" , ) members_can_delete_repositories_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanDeleteRepositoriesSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_invite_collaborators_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanInviteCollaboratorsSetting\" , ) members_can_invite_collaborators_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanInviteCollaboratorsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_make_purchases_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMembersCanMakePurchasesSettingValue ), graphql_name = \"membersCanMakePurchasesSetting\" , ) members_can_update_protected_branches_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanUpdateProtectedBranchesSetting\" , ) members_can_update_protected_branches_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanUpdateProtectedBranchesSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) members_can_view_dependency_insights_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"membersCanViewDependencyInsightsSetting\" , ) members_can_view_dependency_insights_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"membersCanViewDependencyInsightsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) notification_delivery_restriction_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( NotificationRestrictionSettingValue ), graphql_name = \"notificationDeliveryRestrictionEnabledSetting\" , ) oidc_provider = sgqlc . types . Field ( \"OIDCProvider\" , graphql_name = \"oidcProvider\" ) organization_projects_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"organizationProjectsSetting\" , ) organization_projects_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"organizationProjectsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) outside_collaborators = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseOutsideCollaboratorConnection ), graphql_name = \"outsideCollaborators\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( String , graphql_name = \"login\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseMemberOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"visibility\" , sgqlc . types . Arg ( RepositoryVisibility , graphql_name = \"visibility\" , default = None ), ), ( \"has_two_factor_enabled\" , sgqlc . types . Arg ( Boolean , graphql_name = \"hasTwoFactorEnabled\" , default = None ), ), ( \"organization_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"organizationLogins\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pending_admin_invitations = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorInvitationConnection ), graphql_name = \"pendingAdminInvitations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( EnterpriseAdministratorInvitationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"role\" , sgqlc . types . Arg ( EnterpriseAdministratorRole , graphql_name = \"role\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pending_collaborator_invitations = sgqlc . types . Field ( sgqlc . types . non_null ( \"RepositoryInvitationConnection\" ), graphql_name = \"pendingCollaboratorInvitations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( RepositoryInvitationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pending_member_invitations = sgqlc . types . Field ( sgqlc . types . non_null ( \"EnterprisePendingMemberInvitationConnection\" ), graphql_name = \"pendingMemberInvitations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"organization_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"organizationLogins\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository_projects_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"repositoryProjectsSetting\" , ) repository_projects_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"repositoryProjectsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) saml_identity_provider = sgqlc . types . Field ( \"EnterpriseIdentityProvider\" , graphql_name = \"samlIdentityProvider\" ) saml_identity_provider_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"samlIdentityProviderSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( IdentityProviderConfigurationState ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) support_entitlements = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMemberConnection ), graphql_name = \"supportEntitlements\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( EnterpriseMemberOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) team_discussions_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"teamDiscussionsSetting\" , ) team_discussions_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"teamDiscussionsSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) two_factor_required_setting = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledSettingValue ), graphql_name = \"twoFactorRequiredSetting\" , ) two_factor_required_setting_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( \"OrganizationConnection\" ), graphql_name = \"twoFactorRequiredSettingOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"value\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Boolean ), graphql_name = \"value\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ) ), )","title":"EnterpriseOwnerInfo"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterprisePendingMemberInvitationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 10726 10727 10728 10729 10730 10731 class EnterprisePendingMemberInvitationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"total_unique_user_count\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterprisePendingMemberInvitationEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationInvitation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) total_unique_user_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalUniqueUserCount\" )","title":"EnterprisePendingMemberInvitationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterprisePendingMemberInvitationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10734 10735 10736 10737 10738 10739 10740 10741 10742 class EnterprisePendingMemberInvitationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"OrganizationInvitation\" , graphql_name = \"node\" )","title":"EnterprisePendingMemberInvitationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseRepositoryInfo","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23689 23690 23691 23692 23693 23694 23695 23696 23697 23698 23699 23700 23701 23702 class EnterpriseRepositoryInfo ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_private\" , \"name\" , \"name_with_owner\" ) is_private = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrivate\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) name_with_owner = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"nameWithOwner\" )","title":"EnterpriseRepositoryInfo"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseRepositoryInfoConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10745 10746 10747 10748 10749 10750 10751 10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 class EnterpriseRepositoryInfoConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseRepositoryInfoEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseRepositoryInfo\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseRepositoryInfoConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseRepositoryInfoEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10766 10767 10768 10769 10770 10771 10772 10773 10774 class EnterpriseRepositoryInfoEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseRepositoryInfo\" , graphql_name = \"node\" )","title":"EnterpriseRepositoryInfoEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallation","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23705 23706 23707 23708 23709 23710 23711 23712 23713 23714 23715 23716 23717 23718 23719 23720 23721 23722 23723 23724 23725 23726 23727 23728 23729 23730 23731 23732 23733 23734 23735 23736 23737 23738 23739 23740 23741 23742 23743 23744 23745 23746 23747 23748 23749 23750 23751 23752 23753 23754 23755 23756 23757 23758 23759 23760 23761 23762 23763 23764 23765 23766 23767 23768 23769 23770 23771 23772 23773 23774 23775 23776 23777 23778 class EnterpriseServerInstallation ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"customer_name\" , \"host_name\" , \"is_connected\" , \"updated_at\" , \"user_accounts\" , \"user_accounts_uploads\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) customer_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"customerName\" ) host_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"hostName\" ) is_connected = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isConnected\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user_accounts = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountConnection ), graphql_name = \"userAccounts\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( EnterpriseServerUserAccountOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) user_accounts_uploads = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountsUploadConnection ), graphql_name = \"userAccountsUploads\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( EnterpriseServerUserAccountsUploadOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"EnterpriseServerInstallation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10777 10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 10791 10792 10793 10794 10795 class EnterpriseServerInstallationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerInstallationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerInstallation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseServerInstallationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10798 10799 10800 10801 10802 10803 10804 10805 10806 class EnterpriseServerInstallationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseServerInstallation\" , graphql_name = \"node\" )","title":"EnterpriseServerInstallationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallationOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 class EnterpriseServerInstallationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerInstallationOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"EnterpriseServerInstallationOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerInstallationOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 418 419 420 421 422 423 424 class EnterpriseServerInstallationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"CUSTOMER_NAME\" , \"HOST_NAME\" )","title":"EnterpriseServerInstallationOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccount","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23781 23782 23783 23784 23785 23786 23787 23788 23789 23790 23791 23792 23793 23794 23795 23796 23797 23798 23799 23800 23801 23802 23803 23804 23805 23806 23807 23808 23809 23810 23811 23812 23813 23814 23815 23816 23817 23818 23819 23820 23821 23822 23823 23824 23825 23826 23827 23828 23829 23830 23831 23832 23833 23834 23835 23836 23837 23838 23839 23840 23841 class EnterpriseServerUserAccount ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"emails\" , \"enterprise_server_installation\" , \"is_site_admin\" , \"login\" , \"profile_name\" , \"remote_created_at\" , \"remote_user_id\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) emails = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountEmailConnection ), graphql_name = \"emails\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( EnterpriseServerUserAccountEmailOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"EMAIL\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) enterprise_server_installation = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerInstallation ), graphql_name = \"enterpriseServerInstallation\" , ) is_site_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSiteAdmin\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) profile_name = sgqlc . types . Field ( String , graphql_name = \"profileName\" ) remote_created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"remoteCreatedAt\" ) remote_user_id = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"remoteUserId\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"EnterpriseServerUserAccount"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10809 10810 10811 10812 10813 10814 10815 10816 10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 class EnterpriseServerUserAccountConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccount\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseServerUserAccountConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10830 10831 10832 10833 10834 10835 10836 10837 10838 class EnterpriseServerUserAccountEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseServerUserAccount\" , graphql_name = \"node\" )","title":"EnterpriseServerUserAccountEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmail","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23844 23845 23846 23847 23848 23849 23850 23851 23852 23853 23854 23855 23856 23857 23858 23859 23860 23861 23862 23863 23864 23865 23866 23867 23868 23869 class EnterpriseServerUserAccountEmail ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"email\" , \"is_primary\" , \"updated_at\" , \"user_account\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) email = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"email\" ) is_primary = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrimary\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user_account = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccount ), graphql_name = \"userAccount\" )","title":"EnterpriseServerUserAccountEmail"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmailConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10841 10842 10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 10856 10857 10858 10859 10860 class EnterpriseServerUserAccountEmailConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountEmailEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountEmail\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseServerUserAccountEmailConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmailEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10863 10864 10865 10866 10867 10868 10869 10870 10871 class EnterpriseServerUserAccountEmailEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseServerUserAccountEmail\" , graphql_name = \"node\" )","title":"EnterpriseServerUserAccountEmailEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmailOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 3957 3958 class EnterpriseServerUserAccountEmailOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountEmailOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"EnterpriseServerUserAccountEmailOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountEmailOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 427 428 429 430 431 432 433 class EnterpriseServerUserAccountEmailOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"EMAIL\" ,)","title":"EnterpriseServerUserAccountEmailOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 class EnterpriseServerUserAccountOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"EnterpriseServerUserAccountOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 436 437 438 439 440 441 442 class EnterpriseServerUserAccountOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LOGIN\" , \"REMOTE_CREATED_AT\" )","title":"EnterpriseServerUserAccountOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUpload","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23872 23873 23874 23875 23876 23877 23878 23879 23880 23881 23882 23883 23884 23885 23886 23887 23888 23889 23890 23891 23892 23893 23894 23895 23896 23897 23898 23899 23900 23901 23902 23903 class EnterpriseServerUserAccountsUpload ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"enterprise\" , \"enterprise_server_installation\" , \"name\" , \"sync_state\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enterprise = sgqlc . types . Field ( sgqlc . types . non_null ( Enterprise ), graphql_name = \"enterprise\" ) enterprise_server_installation = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerInstallation ), graphql_name = \"enterpriseServerInstallation\" , ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) sync_state = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountsUploadSyncState ), graphql_name = \"syncState\" , ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"EnterpriseServerUserAccountsUpload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10874 10875 10876 10877 10878 10879 10880 10881 10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 class EnterpriseServerUserAccountsUploadConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountsUploadEdge\" ), graphql_name = \"edges\" , ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnterpriseServerUserAccountsUpload\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnterpriseServerUserAccountsUploadConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10896 10897 10898 10899 10900 10901 10902 10903 10904 class EnterpriseServerUserAccountsUploadEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"EnterpriseServerUserAccountsUpload\" , graphql_name = \"node\" )","title":"EnterpriseServerUserAccountsUploadEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 class EnterpriseServerUserAccountsUploadOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseServerUserAccountsUploadOrderField ), graphql_name = \"field\" , ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"EnterpriseServerUserAccountsUploadOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 445 446 447 448 449 450 451 class EnterpriseServerUserAccountsUploadOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"EnterpriseServerUserAccountsUploadOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseServerUserAccountsUploadSyncState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 454 455 456 457 458 459 460 class EnterpriseServerUserAccountsUploadSyncState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FAILURE\" , \"PENDING\" , \"SUCCESS\" )","title":"EnterpriseServerUserAccountsUploadSyncState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseUserAccount","text":"Bases: sgqlc . types . Type , Actor , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23906 23907 23908 23909 23910 23911 23912 23913 23914 23915 23916 23917 23918 23919 23920 23921 23922 23923 23924 23925 23926 23927 23928 23929 23930 23931 23932 23933 23934 23935 23936 23937 23938 23939 23940 23941 23942 23943 23944 23945 23946 23947 23948 23949 23950 23951 23952 23953 23954 23955 23956 23957 23958 23959 23960 23961 23962 class EnterpriseUserAccount ( sgqlc . types . Type , Actor , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"enterprise\" , \"name\" , \"organizations\" , \"updated_at\" , \"user\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) enterprise = sgqlc . types . Field ( sgqlc . types . non_null ( Enterprise ), graphql_name = \"enterprise\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) organizations = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseOrganizationMembershipConnection ), graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( OrganizationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"role\" , sgqlc . types . Arg ( EnterpriseUserAccountMembershipRole , graphql_name = \"role\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"EnterpriseUserAccount"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseUserAccountMembershipRole","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 463 464 465 466 467 468 469 class EnterpriseUserAccountMembershipRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MEMBER\" , \"OWNER\" , \"UNAFFILIATED\" )","title":"EnterpriseUserAccountMembershipRole"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnterpriseUserDeployment","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 472 473 474 475 476 477 478 class EnterpriseUserDeployment ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOUD\" , \"SERVER\" )","title":"EnterpriseUserDeployment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Environment","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23965 23966 23967 23968 23969 23970 23971 23972 23973 23974 23975 23976 23977 23978 23979 23980 23981 23982 23983 23984 23985 23986 23987 23988 class Environment ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"name\" , \"protection_rules\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) protection_rules = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentProtectionRuleConnection ), graphql_name = \"protectionRules\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"Environment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnvironmentConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10907 10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 10921 10922 10923 class EnvironmentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"EnvironmentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Environment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"EnvironmentConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.EnvironmentEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10926 10927 10928 10929 10930 10931 10932 10933 10934 class EnvironmentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Environment\" , graphql_name = \"node\" )","title":"EnvironmentEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentity","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 23991 23992 23993 23994 23995 23996 23997 23998 23999 24000 24001 24002 24003 24004 24005 24006 24007 24008 24009 24010 24011 24012 24013 24014 class ExternalIdentity ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"guid\" , \"organization_invitation\" , \"saml_identity\" , \"scim_identity\" , \"user\" , ) guid = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"guid\" ) organization_invitation = sgqlc . types . Field ( \"OrganizationInvitation\" , graphql_name = \"organizationInvitation\" ) saml_identity = sgqlc . types . Field ( ExternalIdentitySamlAttributes , graphql_name = \"samlIdentity\" ) scim_identity = sgqlc . types . Field ( ExternalIdentityScimAttributes , graphql_name = \"scimIdentity\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"ExternalIdentity"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentityAttribute","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 class ExternalIdentityAttribute ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"metadata\" , \"name\" , \"value\" ) metadata = sgqlc . types . Field ( String , graphql_name = \"metadata\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"value\" )","title":"ExternalIdentityAttribute"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentityConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 10960 10961 10962 10963 10964 10965 10966 10967 class ExternalIdentityConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ExternalIdentityEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ExternalIdentity\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ExternalIdentityConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentityEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10970 10971 10972 10973 10974 10975 10976 10977 10978 class ExternalIdentityEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ExternalIdentity\" , graphql_name = \"node\" )","title":"ExternalIdentityEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentitySamlAttributes","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 10981 10982 10983 10984 10985 10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 11012 class ExternalIdentitySamlAttributes ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"attributes\" , \"emails\" , \"family_name\" , \"given_name\" , \"groups\" , \"name_id\" , \"username\" , ) attributes = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ExternalIdentityAttribute )) ), graphql_name = \"attributes\" , ) emails = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"UserEmailMetadata\" )), graphql_name = \"emails\" , ) family_name = sgqlc . types . Field ( String , graphql_name = \"familyName\" ) given_name = sgqlc . types . Field ( String , graphql_name = \"givenName\" ) groups = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"groups\" ) name_id = sgqlc . types . Field ( String , graphql_name = \"nameId\" ) username = sgqlc . types . Field ( String , graphql_name = \"username\" )","title":"ExternalIdentitySamlAttributes"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ExternalIdentityScimAttributes","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 11025 11026 11027 11028 11029 11030 11031 class ExternalIdentityScimAttributes ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"emails\" , \"family_name\" , \"given_name\" , \"groups\" , \"username\" ) emails = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"UserEmailMetadata\" )), graphql_name = \"emails\" , ) family_name = sgqlc . types . Field ( String , graphql_name = \"familyName\" ) given_name = sgqlc . types . Field ( String , graphql_name = \"givenName\" ) groups = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"groups\" ) username = sgqlc . types . Field ( String , graphql_name = \"username\" )","title":"ExternalIdentityScimAttributes"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FileAddition","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 3993 3994 3995 3996 3997 3998 3999 4000 4001 4002 4003 class FileAddition ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" , \"contents\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) contents = sgqlc . types . Field ( sgqlc . types . non_null ( Base64String ), graphql_name = \"contents\" )","title":"FileAddition"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FileChanges","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 4020 class FileChanges ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"deletions\" , \"additions\" ) deletions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"FileDeletion\" )), graphql_name = \"deletions\" , ) additions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( FileAddition )), graphql_name = \"additions\" , )","title":"FileChanges"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FileDeletion","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4023 4024 4025 4026 4027 4028 4029 4030 class FileDeletion ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"path\" ,) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" )","title":"FileDeletion"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FileViewedState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 481 482 483 484 485 486 487 class FileViewedState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISMISSED\" , \"UNVIEWED\" , \"VIEWED\" )","title":"FileViewedState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowOrganizationInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4033 4034 4035 4036 4037 4038 4039 4040 4041 4042 4043 class FollowOrganizationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"FollowOrganizationInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowOrganizationPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11034 11035 11036 11037 11038 11039 11040 11041 11042 class FollowOrganizationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" )","title":"FollowOrganizationPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowUserInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4046 4047 4048 4049 4050 4051 4052 4053 4054 class FollowUserInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"user_id\" , \"client_mutation_id\" ) user_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"userId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"FollowUserInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowUserPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11045 11046 11047 11048 11049 11050 11051 11052 11053 class FollowUserPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"user\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"FollowUserPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowerConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11056 11057 11058 11059 11060 11061 11062 11063 11064 11065 11066 11067 11068 11069 11070 class FollowerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"FollowerConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FollowingConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11073 11074 11075 11076 11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 class FollowingConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"FollowingConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FundingLink","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 class FundingLink ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"platform\" , \"url\" ) platform = sgqlc . types . Field ( sgqlc . types . non_null ( FundingPlatform ), graphql_name = \"platform\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"FundingLink"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.FundingPlatform","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 class FundingPlatform ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMUNITY_BRIDGE\" , \"CUSTOM\" , \"GITHUB\" , \"ISSUEHUNT\" , \"KO_FI\" , \"LFX_CROWDFUNDING\" , \"LIBERAPAY\" , \"OPEN_COLLECTIVE\" , \"OTECHIE\" , \"PATREON\" , \"TIDELIFT\" , )","title":"FundingPlatform"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GenericHovercardContext","text":"Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24017 24018 24019 24020 24021 24022 24023 class GenericHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"GenericHovercardContext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Gist","text":"Bases: sgqlc . types . Type , Node , Starrable , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24026 24027 24028 24029 24030 24031 24032 24033 24034 24035 24036 24037 24038 24039 24040 24041 24042 24043 24044 24045 24046 24047 24048 24049 24050 24051 24052 24053 24054 24055 24056 24057 24058 24059 24060 24061 24062 24063 24064 24065 24066 24067 24068 24069 24070 24071 24072 24073 24074 24075 24076 24077 24078 24079 24080 24081 24082 24083 24084 24085 24086 24087 24088 24089 24090 24091 24092 24093 24094 24095 24096 24097 24098 24099 24100 24101 24102 class Gist ( sgqlc . types . Type , Node , Starrable , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"created_at\" , \"description\" , \"files\" , \"forks\" , \"is_fork\" , \"is_public\" , \"name\" , \"owner\" , \"pushed_at\" , \"updated_at\" , ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( GistCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) files = sgqlc . types . Field ( sgqlc . types . list_of ( GistFile ), graphql_name = \"files\" , args = sgqlc . types . ArgDict ( ( ( \"limit\" , sgqlc . types . Arg ( Int , graphql_name = \"limit\" , default = 10 )), ( \"oid\" , sgqlc . types . Arg ( GitObjectID , graphql_name = \"oid\" , default = None )), ) ), ) forks = sgqlc . types . Field ( sgqlc . types . non_null ( GistConnection ), graphql_name = \"forks\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( GistOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) is_fork = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isFork\" ) is_public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPublic\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) owner = sgqlc . types . Field ( RepositoryOwner , graphql_name = \"owner\" ) pushed_at = sgqlc . types . Field ( DateTime , graphql_name = \"pushedAt\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"Gist"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistComment","text":"Bases: sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24105 24106 24107 24108 24109 24110 24111 24112 24113 24114 24115 class GistComment ( sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"gist\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) gist = sgqlc . types . Field ( sgqlc . types . non_null ( Gist ), graphql_name = \"gist\" )","title":"GistComment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistCommentConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 11116 11117 11118 11119 class GistCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"GistCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"GistComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"GistCommentConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistCommentEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11122 11123 11124 11125 11126 11127 11128 11129 11130 class GistCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"GistComment\" , graphql_name = \"node\" )","title":"GistCommentEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11133 11134 11135 11136 11137 11138 11139 11140 11141 11142 11143 11144 11145 11146 11147 class GistConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"GistEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Gist\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"GistConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11150 11151 11152 11153 11154 11155 11156 11157 11158 class GistEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Gist\" , graphql_name = \"node\" )","title":"GistEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistFile","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11161 11162 11163 11164 11165 11166 11167 11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 11194 class GistFile ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"encoded_name\" , \"encoding\" , \"extension\" , \"is_image\" , \"is_truncated\" , \"language\" , \"name\" , \"size\" , \"text\" , ) encoded_name = sgqlc . types . Field ( String , graphql_name = \"encodedName\" ) encoding = sgqlc . types . Field ( String , graphql_name = \"encoding\" ) extension = sgqlc . types . Field ( String , graphql_name = \"extension\" ) is_image = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isImage\" ) is_truncated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isTruncated\" ) language = sgqlc . types . Field ( \"Language\" , graphql_name = \"language\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) size = sgqlc . types . Field ( Int , graphql_name = \"size\" ) text = sgqlc . types . Field ( String , graphql_name = \"text\" , args = sgqlc . types . ArgDict ( (( \"truncate\" , sgqlc . types . Arg ( Int , graphql_name = \"truncate\" , default = None )),) ), )","title":"GistFile"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 class GistOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( GistOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"GistOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 514 515 516 517 518 519 520 class GistOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"PUSHED_AT\" , \"UPDATED_AT\" )","title":"GistOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GistPrivacy","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 523 524 525 526 527 528 529 class GistPrivacy ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"PUBLIC\" , \"SECRET\" )","title":"GistPrivacy"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitActor","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 11207 11208 11209 11210 11211 11212 11213 11214 class GitActor ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"date\" , \"email\" , \"name\" , \"user\" ) avatar_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) date = sgqlc . types . Field ( GitTimestamp , graphql_name = \"date\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"GitActor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitActorConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11217 11218 11219 11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 class GitActorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"GitActorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( GitActor ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"GitActorConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitActorEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11234 11235 11236 11237 11238 11239 11240 11241 11242 class GitActorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( GitActor , graphql_name = \"node\" )","title":"GitActorEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitHubMetadata","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11245 11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 11272 11273 11274 11275 11276 11277 11278 11279 class GitHubMetadata ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"git_hub_services_sha\" , \"git_ip_addresses\" , \"hook_ip_addresses\" , \"importer_ip_addresses\" , \"is_password_authentication_verifiable\" , \"pages_ip_addresses\" , ) git_hub_services_sha = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"gitHubServicesSha\" ) git_ip_addresses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"gitIpAddresses\" ) hook_ip_addresses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"hookIpAddresses\" , ) importer_ip_addresses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"importerIpAddresses\" , ) is_password_authentication_verifiable = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPasswordAuthenticationVerifiable\" ) pages_ip_addresses = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"pagesIpAddresses\" , )","title":"GitHubMetadata"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitObject","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11282 11283 11284 11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 class GitObject ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"abbreviated_oid\" , \"commit_resource_path\" , \"commit_url\" , \"id\" , \"oid\" , \"repository\" , ) abbreviated_oid = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"abbreviatedOid\" ) commit_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"commitResourcePath\" ) commit_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"commitUrl\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"oid\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"GitObject"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitObjectID","text":"Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 532 533 534 535 536 537 class GitObjectID ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"GitObjectID"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitSSHRemote","text":"Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 540 541 542 543 544 545 class GitSSHRemote ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"GitSSHRemote"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitSignature","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11310 11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 11337 class GitSignature ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"email\" , \"is_valid\" , \"payload\" , \"signature\" , \"signer\" , \"state\" , \"was_signed_by_git_hub\" , ) email = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"email\" ) is_valid = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isValid\" ) payload = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"payload\" ) signature = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"signature\" ) signer = sgqlc . types . Field ( \"User\" , graphql_name = \"signer\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( GitSignatureState ), graphql_name = \"state\" ) was_signed_by_git_hub = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"wasSignedByGitHub\" )","title":"GitSignature"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitSignatureState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 class GitSignatureState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BAD_CERT\" , \"BAD_EMAIL\" , \"EXPIRED_KEY\" , \"GPGVERIFY_ERROR\" , \"GPGVERIFY_UNAVAILABLE\" , \"INVALID\" , \"MALFORMED_SIG\" , \"NOT_SIGNING_KEY\" , \"NO_USER\" , \"OCSP_ERROR\" , \"OCSP_PENDING\" , \"OCSP_REVOKED\" , \"UNKNOWN_KEY\" , \"UNKNOWN_SIG_TYPE\" , \"UNSIGNED\" , \"UNVERIFIED_EMAIL\" , \"VALID\" , )","title":"GitSignatureState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GitTimestamp","text":"Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 575 576 577 578 579 580 class GitTimestamp ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"GitTimestamp"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GpgSignature","text":"Bases: sgqlc . types . Type , GitSignature See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24118 24119 24120 24121 24122 24123 24124 24125 class GpgSignature ( sgqlc . types . Type , GitSignature ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"key_id\" ,) key_id = sgqlc . types . Field ( String , graphql_name = \"keyId\" )","title":"GpgSignature"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GrantEnterpriseOrganizationsMigratorRoleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083 class GrantEnterpriseOrganizationsMigratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"GrantEnterpriseOrganizationsMigratorRoleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GrantEnterpriseOrganizationsMigratorRolePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 class GrantEnterpriseOrganizationsMigratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organizations\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organizations = sgqlc . types . Field ( \"OrganizationConnection\" , graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"GrantEnterpriseOrganizationsMigratorRolePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GrantMigratorRoleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097 4098 4099 4100 class GrantMigratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"actor\" , \"actor_type\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) actor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"actor\" ) actor_type = sgqlc . types . Field ( sgqlc . types . non_null ( ActorType ), graphql_name = \"actorType\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"GrantMigratorRoleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.GrantMigratorRolePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11365 11366 11367 11368 11369 11370 11371 11372 11373 class GrantMigratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"success\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) success = sgqlc . types . Field ( Boolean , graphql_name = \"success\" )","title":"GrantMigratorRolePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HTML","text":"Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 583 584 585 586 587 588 class HTML ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"HTML"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HeadRefDeletedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24128 24129 24130 24131 24132 24133 24134 24135 24136 24137 24138 24139 24140 24141 24142 24143 24144 24145 24146 24147 24148 24149 24150 24151 class HeadRefDeletedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"head_ref\" , \"head_ref_name\" , \"pull_request\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) head_ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"headRef\" ) head_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"headRefName\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"HeadRefDeletedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HeadRefForcePushedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24154 24155 24156 24157 24158 24159 24160 24161 24162 24163 24164 24165 24166 24167 24168 24169 24170 24171 24172 24173 24174 24175 24176 24177 class HeadRefForcePushedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"after_commit\" , \"before_commit\" , \"created_at\" , \"pull_request\" , \"ref\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) after_commit = sgqlc . types . Field ( Commit , graphql_name = \"afterCommit\" ) before_commit = sgqlc . types . Field ( Commit , graphql_name = \"beforeCommit\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" )","title":"HeadRefForcePushedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HeadRefRestoredEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24180 24181 24182 24183 24184 24185 24186 24187 24188 24189 24190 24191 24192 24193 class HeadRefRestoredEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"HeadRefRestoredEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Hovercard","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 class Hovercard ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contexts\" ,) contexts = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"HovercardContext\" )) ), graphql_name = \"contexts\" , )","title":"Hovercard"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.HovercardContext","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11391 11392 11393 11394 11395 11396 11397 11398 11399 class HovercardContext ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"message\" , \"octicon\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) octicon = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"octicon\" )","title":"HovercardContext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IdentityProviderConfigurationState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 594 595 596 597 598 599 600 class IdentityProviderConfigurationState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CONFIGURED\" , \"ENFORCED\" , \"UNCONFIGURED\" )","title":"IdentityProviderConfigurationState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.InviteEnterpriseAdminInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 class InviteEnterpriseAdminInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"invitee\" , \"email\" , \"role\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) invitee = sgqlc . types . Field ( String , graphql_name = \"invitee\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) role = sgqlc . types . Field ( EnterpriseAdministratorRole , graphql_name = \"role\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"InviteEnterpriseAdminInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.InviteEnterpriseAdminPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 class InviteEnterpriseAdminPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"invitation\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) invitation = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"invitation\" )","title":"InviteEnterpriseAdminPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEnabledSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 606 607 608 609 610 611 612 class IpAllowListEnabledSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" )","title":"IpAllowListEnabledSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntry","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24196 24197 24198 24199 24200 24201 24202 24203 24204 24205 24206 24207 24208 24209 24210 24211 24212 24213 24214 24215 24216 24217 24218 24219 24220 24221 24222 24223 24224 24225 class IpAllowListEntry ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"allow_list_value\" , \"created_at\" , \"is_active\" , \"name\" , \"owner\" , \"updated_at\" , ) allow_list_value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"allowListValue\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_active = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isActive\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( \"IpAllowListOwner\" ), graphql_name = \"owner\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"IpAllowListEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntryConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 11428 11429 11430 11431 11432 11433 class IpAllowListEntryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IpAllowListEntryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"IpAllowListEntry\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"IpAllowListEntryConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntryEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11436 11437 11438 11439 11440 11441 11442 11443 11444 class IpAllowListEntryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"IpAllowListEntry\" , graphql_name = \"node\" )","title":"IpAllowListEntryEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntryOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 class IpAllowListEntryOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEntryOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"IpAllowListEntryOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListEntryOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 615 616 617 618 619 620 621 class IpAllowListEntryOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALLOW_LIST_VALUE\" , \"CREATED_AT\" )","title":"IpAllowListEntryOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListForInstalledAppsEnabledSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 624 625 626 627 628 629 630 class IpAllowListForInstalledAppsEnabledSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" )","title":"IpAllowListForInstalledAppsEnabledSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IpAllowListOwner","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32448 32449 32450 32451 32452 32453 32454 class IpAllowListOwner ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Enterprise , Organization )","title":"IpAllowListOwner"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Issue","text":"Bases: sgqlc . types . Type , Node , Assignable , Closable , Comment , Updatable , UpdatableComment , Labelable , Lockable , Reactable , RepositoryNode , Subscribable , UniformResourceLocatable , ProjectNextOwner , ProjectV2Owner See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Issue ( sgqlc . types . Type , Node , Assignable , Closable , Comment , Updatable , UpdatableComment , Labelable , Lockable , Reactable , RepositoryNode , Subscribable , UniformResourceLocatable , ProjectNextOwner , ProjectV2Owner , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body_resource_path\" , \"body_url\" , \"comments\" , \"hovercard\" , \"is_pinned\" , \"is_read_by_viewer\" , \"milestone\" , \"number\" , \"participants\" , \"project_cards\" , \"project_items\" , \"project_next_items\" , \"state\" , \"state_reason\" , \"timeline\" , \"timeline_items\" , \"title\" , \"title_html\" , \"tracked_in_issues\" , \"tracked_issues\" , \"tracked_issues_count\" , ) body_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"bodyResourcePath\" ) body_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"bodyUrl\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( IssueCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueCommentOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) hovercard = sgqlc . types . Field ( sgqlc . types . non_null ( Hovercard ), graphql_name = \"hovercard\" , args = sgqlc . types . ArgDict ( ( ( \"include_notification_contexts\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeNotificationContexts\" , default = True , ), ), ) ), ) is_pinned = sgqlc . types . Field ( Boolean , graphql_name = \"isPinned\" ) is_read_by_viewer = sgqlc . types . Field ( Boolean , graphql_name = \"isReadByViewer\" ) milestone = sgqlc . types . Field ( \"Milestone\" , graphql_name = \"milestone\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) participants = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"participants\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) project_cards = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectCardConnection ), graphql_name = \"projectCards\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"archived_states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( ProjectCardArchivedState ), graphql_name = \"archivedStates\" , default = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ), ), ), ) ), ) project_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemConnection ), graphql_name = \"projectItems\" , args = sgqlc . types . ArgDict ( ( ( \"include_archived\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeArchived\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) project_next_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItemConnection ), graphql_name = \"projectNextItems\" , args = sgqlc . types . ArgDict ( ( ( \"include_archived\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeArchived\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) state = sgqlc . types . Field ( sgqlc . types . non_null ( IssueState ), graphql_name = \"state\" ) state_reason = sgqlc . types . Field ( IssueStateReason , graphql_name = \"stateReason\" ) timeline = sgqlc . types . Field ( sgqlc . types . non_null ( IssueTimelineConnection ), graphql_name = \"timeline\" , args = sgqlc . types . ArgDict ( ( ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) timeline_items = sgqlc . types . Field ( sgqlc . types . non_null ( IssueTimelineItemsConnection ), graphql_name = \"timelineItems\" , args = sgqlc . types . ArgDict ( ( ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ( \"skip\" , sgqlc . types . Arg ( Int , graphql_name = \"skip\" , default = None )), ( \"item_types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueTimelineItemsItemType ) ), graphql_name = \"itemTypes\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) title_html = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"titleHTML\" ) tracked_in_issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"trackedInIssues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) tracked_issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"trackedIssues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) tracked_issues_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"trackedIssuesCount\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( TrackedIssueStates ), graphql_name = \"states\" , default = None , ), ), ) ), )","title":"Issue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueClosedStateReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 633 634 635 636 637 638 639 class IssueClosedStateReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMPLETED\" , \"NOT_PLANNED\" )","title":"IssueClosedStateReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueComment","text":"Bases: sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24501 24502 24503 24504 24505 24506 24507 24508 24509 24510 24511 24512 24513 24514 24515 24516 24517 24518 24519 24520 24521 24522 24523 class IssueComment ( sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue\" , \"pull_request\" , \"resource_path\" , \"url\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"IssueComment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueCommentConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11447 11448 11449 11450 11451 11452 11453 11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 class IssueCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"IssueCommentConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueCommentEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11466 11467 11468 11469 11470 11471 11472 11473 11474 class IssueCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"IssueComment\" , graphql_name = \"node\" )","title":"IssueCommentEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueCommentOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 class IssueCommentOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( IssueCommentOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"IssueCommentOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueCommentOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 642 643 644 645 646 647 648 class IssueCommentOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"UPDATED_AT\" ,)","title":"IssueCommentOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11477 11478 11479 11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 class IssueConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Issue\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"IssueConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueContributionsByRepository","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 11519 11520 11521 11522 11523 11524 11525 11526 class IssueContributionsByRepository ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contributions\" , \"repository\" ) contributions = sgqlc . types . Field ( sgqlc . types . non_null ( CreatedIssueContributionConnection ), graphql_name = \"contributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"IssueContributionsByRepository"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11529 11530 11531 11532 11533 11534 11535 11536 11537 class IssueEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Issue\" , graphql_name = \"node\" )","title":"IssueEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueFilters","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 class IssueFilters ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignee\" , \"created_by\" , \"labels\" , \"mentioned\" , \"milestone\" , \"milestone_number\" , \"since\" , \"states\" , \"viewer_subscribed\" , ) assignee = sgqlc . types . Field ( String , graphql_name = \"assignee\" ) created_by = sgqlc . types . Field ( String , graphql_name = \"createdBy\" ) labels = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" ) mentioned = sgqlc . types . Field ( String , graphql_name = \"mentioned\" ) milestone = sgqlc . types . Field ( String , graphql_name = \"milestone\" ) milestone_number = sgqlc . types . Field ( String , graphql_name = \"milestoneNumber\" ) since = sgqlc . types . Field ( DateTime , graphql_name = \"since\" ) states = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" ) viewer_subscribed = sgqlc . types . Field ( Boolean , graphql_name = \"viewerSubscribed\" )","title":"IssueFilters"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueOrPullRequest","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32457 32458 32459 32460 32461 32462 32463 class IssueOrPullRequest ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest )","title":"IssueOrPullRequest"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199 class IssueOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( IssueOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"IssueOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 651 652 653 654 655 656 657 class IssueOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMENTS\" , \"CREATED_AT\" , \"UPDATED_AT\" )","title":"IssueOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 660 661 662 663 664 665 666 class IssueState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" )","title":"IssueState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueStateReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 669 670 671 672 673 674 675 class IssueStateReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMPLETED\" , \"NOT_PLANNED\" , \"REOPENED\" )","title":"IssueStateReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTemplate","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11540 11541 11542 11543 11544 11545 11546 11547 11548 11549 11550 class IssueTemplate ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"about\" , \"body\" , \"name\" , \"title\" ) about = sgqlc . types . Field ( String , graphql_name = \"about\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" )","title":"IssueTemplate"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11553 11554 11555 11556 11557 11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 11571 class IssueTimelineConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueTimelineItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueTimelineItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"IssueTimelineConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItem","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32466 32467 32468 32469 32470 32471 32472 32473 32474 32475 32476 32477 32478 32479 32480 32481 32482 32483 32484 32485 32486 32487 32488 32489 32490 32491 32492 class IssueTimelineItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( AssignedEvent , ClosedEvent , Commit , CrossReferencedEvent , DemilestonedEvent , IssueComment , LabeledEvent , LockedEvent , MilestonedEvent , ReferencedEvent , RenamedTitleEvent , ReopenedEvent , SubscribedEvent , TransferredEvent , UnassignedEvent , UnlabeledEvent , UnlockedEvent , UnsubscribedEvent , UserBlockedEvent , )","title":"IssueTimelineItem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItemEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11574 11575 11576 11577 11578 11579 11580 11581 11582 class IssueTimelineItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"IssueTimelineItem\" , graphql_name = \"node\" )","title":"IssueTimelineItemEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItems","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32495 32496 32497 32498 32499 32500 32501 32502 32503 32504 32505 32506 32507 32508 32509 32510 32511 32512 32513 32514 32515 32516 32517 32518 32519 32520 32521 32522 32523 32524 32525 32526 32527 32528 32529 32530 32531 32532 32533 class IssueTimelineItems ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( AddedToProjectEvent , AssignedEvent , ClosedEvent , CommentDeletedEvent , ConnectedEvent , ConvertedNoteToIssueEvent , ConvertedToDiscussionEvent , CrossReferencedEvent , DemilestonedEvent , DisconnectedEvent , IssueComment , LabeledEvent , LockedEvent , MarkedAsDuplicateEvent , MentionedEvent , MilestonedEvent , MovedColumnsInProjectEvent , PinnedEvent , ReferencedEvent , RemovedFromProjectEvent , RenamedTitleEvent , ReopenedEvent , SubscribedEvent , TransferredEvent , UnassignedEvent , UnlabeledEvent , UnlockedEvent , UnmarkedAsDuplicateEvent , UnpinnedEvent , UnsubscribedEvent , UserBlockedEvent , )","title":"IssueTimelineItems"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItemsConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 11610 11611 11612 11613 11614 11615 11616 11617 11618 class IssueTimelineItemsConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"filtered_count\" , \"nodes\" , \"page_count\" , \"page_info\" , \"total_count\" , \"updated_at\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueTimelineItemsEdge\" ), graphql_name = \"edges\" ) filtered_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"filteredCount\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"IssueTimelineItems\" ), graphql_name = \"nodes\" ) page_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"pageCount\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"IssueTimelineItemsConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItemsEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11621 11622 11623 11624 11625 11626 11627 11628 11629 class IssueTimelineItemsEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"IssueTimelineItems\" , graphql_name = \"node\" )","title":"IssueTimelineItemsEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.IssueTimelineItemsItemType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 class IssueTimelineItemsItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADDED_TO_PROJECT_EVENT\" , \"ASSIGNED_EVENT\" , \"CLOSED_EVENT\" , \"COMMENT_DELETED_EVENT\" , \"CONNECTED_EVENT\" , \"CONVERTED_NOTE_TO_ISSUE_EVENT\" , \"CONVERTED_TO_DISCUSSION_EVENT\" , \"CROSS_REFERENCED_EVENT\" , \"DEMILESTONED_EVENT\" , \"DISCONNECTED_EVENT\" , \"ISSUE_COMMENT\" , \"LABELED_EVENT\" , \"LOCKED_EVENT\" , \"MARKED_AS_DUPLICATE_EVENT\" , \"MENTIONED_EVENT\" , \"MILESTONED_EVENT\" , \"MOVED_COLUMNS_IN_PROJECT_EVENT\" , \"PINNED_EVENT\" , \"REFERENCED_EVENT\" , \"REMOVED_FROM_PROJECT_EVENT\" , \"RENAMED_TITLE_EVENT\" , \"REOPENED_EVENT\" , \"SUBSCRIBED_EVENT\" , \"TRANSFERRED_EVENT\" , \"UNASSIGNED_EVENT\" , \"UNLABELED_EVENT\" , \"UNLOCKED_EVENT\" , \"UNMARKED_AS_DUPLICATE_EVENT\" , \"UNPINNED_EVENT\" , \"UNSUBSCRIBED_EVENT\" , \"USER_BLOCKED_EVENT\" , )","title":"IssueTimelineItemsItemType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.JoinedGitHubContribution","text":"Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24526 24527 24528 24529 24530 24531 24532 class JoinedGitHubContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"JoinedGitHubContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Label","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Label ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"color\" , \"created_at\" , \"description\" , \"is_default\" , \"issues\" , \"name\" , \"pull_requests\" , \"repository\" , \"resource_path\" , \"updated_at\" , \"url\" , ) color = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"color\" ) created_at = sgqlc . types . Field ( DateTime , graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) is_default = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDefault\" ) issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"issues\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" , default = None , ), ), ( \"filter_by\" , sgqlc . types . Arg ( IssueFilters , graphql_name = \"filterBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) updated_at = sgqlc . types . Field ( DateTime , graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"Label"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabelConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11632 11633 11634 11635 11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 class LabelConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"LabelEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Label\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"LabelConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabelEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11649 11650 11651 11652 11653 11654 11655 11656 11657 class LabelEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Label\" , graphql_name = \"node\" )","title":"LabelEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabelOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 class LabelOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( LabelOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"LabelOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabelOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 719 720 721 722 723 724 725 class LabelOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" )","title":"LabelOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Labelable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11660 11661 11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 11688 11689 class Labelable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"labels\" ,) labels = sgqlc . types . Field ( LabelConnection , graphql_name = \"labels\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( LabelOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"Labelable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LabeledEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24655 24656 24657 24658 24659 24660 24661 24662 24663 24664 24665 24666 24667 24668 24669 class LabeledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"label\" , \"labelable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) label = sgqlc . types . Field ( sgqlc . types . non_null ( Label ), graphql_name = \"label\" ) labelable = sgqlc . types . Field ( sgqlc . types . non_null ( Labelable ), graphql_name = \"labelable\" )","title":"LabeledEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Language","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24672 24673 24674 24675 24676 24677 24678 24679 24680 class Language ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"color\" , \"name\" ) color = sgqlc . types . Field ( String , graphql_name = \"color\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" )","title":"Language"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LanguageConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11692 11693 11694 11695 11696 11697 11698 11699 11700 11701 11702 11703 11704 11705 11706 11707 class LanguageConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"total_size\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"LanguageEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Language\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) total_size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalSize\" )","title":"LanguageConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LanguageEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11710 11711 11712 11713 11714 11715 11716 11717 11718 11719 class LanguageEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"size\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"Language\" ), graphql_name = \"node\" ) size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"size\" )","title":"LanguageEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LanguageOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 class LanguageOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( LanguageOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"LanguageOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LanguageOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 728 729 730 731 732 733 734 class LanguageOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SIZE\" ,)","title":"LanguageOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.License","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24683 24684 24685 24686 24687 24688 24689 24690 24691 24692 24693 24694 24695 24696 24697 24698 24699 24700 24701 24702 24703 24704 24705 24706 24707 24708 24709 24710 24711 24712 24713 24714 24715 24716 24717 24718 24719 24720 24721 24722 24723 24724 24725 24726 24727 24728 24729 class License ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"conditions\" , \"description\" , \"featured\" , \"hidden\" , \"implementation\" , \"key\" , \"limitations\" , \"name\" , \"nickname\" , \"permissions\" , \"pseudo_license\" , \"spdx_id\" , \"url\" , ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) conditions = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( LicenseRule )), graphql_name = \"conditions\" , ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) featured = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"featured\" ) hidden = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hidden\" ) implementation = sgqlc . types . Field ( String , graphql_name = \"implementation\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) limitations = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( LicenseRule )), graphql_name = \"limitations\" , ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) nickname = sgqlc . types . Field ( String , graphql_name = \"nickname\" ) permissions = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( LicenseRule )), graphql_name = \"permissions\" , ) pseudo_license = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"pseudoLicense\" ) spdx_id = sgqlc . types . Field ( String , graphql_name = \"spdxId\" ) url = sgqlc . types . Field ( URI , graphql_name = \"url\" )","title":"License"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LicenseRule","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11722 11723 11724 11725 11726 11727 11728 11729 11730 11731 11732 11733 class LicenseRule ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"description\" , \"key\" , \"label\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) label = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"label\" )","title":"LicenseRule"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LinkRepositoryToProjectInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 class LinkRepositoryToProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"repository_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"LinkRepositoryToProjectInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LinkRepositoryToProjectPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11736 11737 11738 11739 11740 11741 11742 11743 11744 11745 class LinkRepositoryToProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"LinkRepositoryToProjectPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LockLockableInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 class LockLockableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"lockable_id\" , \"lock_reason\" , \"client_mutation_id\" ) lockable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"lockableId\" ) lock_reason = sgqlc . types . Field ( LockReason , graphql_name = \"lockReason\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"LockLockableInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LockLockablePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11748 11749 11750 11751 11752 11753 11754 11755 11756 11757 class LockLockablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"locked_record\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) locked_record = sgqlc . types . Field ( \"Lockable\" , graphql_name = \"lockedRecord\" )","title":"LockLockablePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LockReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 737 738 739 740 741 742 743 class LockReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"OFF_TOPIC\" , \"RESOLVED\" , \"SPAM\" , \"TOO_HEATED\" )","title":"LockReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Lockable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11760 11761 11762 11763 11764 11765 11766 11767 11768 class Lockable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"active_lock_reason\" , \"locked\" ) active_lock_reason = sgqlc . types . Field ( LockReason , graphql_name = \"activeLockReason\" ) locked = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"locked\" )","title":"Lockable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.LockedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24732 24733 24734 24735 24736 24737 24738 24739 24740 24741 24742 24743 24744 24745 24746 class LockedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"lock_reason\" , \"lockable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) lock_reason = sgqlc . types . Field ( LockReason , graphql_name = \"lockReason\" ) lockable = sgqlc . types . Field ( sgqlc . types . non_null ( Lockable ), graphql_name = \"lockable\" )","title":"LockedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Mannequin","text":"Bases: sgqlc . types . Type , Node , Actor , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24749 24750 24751 24752 24753 24754 24755 24756 24757 24758 24759 24760 24761 24762 24763 24764 class Mannequin ( sgqlc . types . Type , Node , Actor , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"claimant\" , \"created_at\" , \"database_id\" , \"email\" , \"updated_at\" ) claimant = sgqlc . types . Field ( \"User\" , graphql_name = \"claimant\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"Mannequin"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkDiscussionCommentAsAnswerInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4258 4259 4260 4261 4262 4263 4264 4265 4266 class MarkDiscussionCommentAsAnswerInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MarkDiscussionCommentAsAnswerInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkDiscussionCommentAsAnswerPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11771 11772 11773 11774 11775 11776 11777 11778 11779 class MarkDiscussionCommentAsAnswerPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" )","title":"MarkDiscussionCommentAsAnswerPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkFileAsViewedInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 class MarkFileAsViewedInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"path\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MarkFileAsViewedInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkFileAsViewedPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11782 11783 11784 11785 11786 11787 11788 11789 11790 class MarkFileAsViewedPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"MarkFileAsViewedPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkPullRequestReadyForReviewInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 class MarkPullRequestReadyForReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MarkPullRequestReadyForReviewInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkPullRequestReadyForReviewPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11793 11794 11795 11796 11797 11798 11799 11800 11801 class MarkPullRequestReadyForReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"MarkPullRequestReadyForReviewPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarkedAsDuplicateEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24767 24768 24769 24770 24771 24772 24773 24774 24775 24776 24777 24778 24779 24780 24781 24782 24783 24784 24785 24786 24787 24788 class MarkedAsDuplicateEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"canonical\" , \"created_at\" , \"duplicate\" , \"is_cross_repository\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) canonical = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"canonical\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) duplicate = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"duplicate\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" )","title":"MarkedAsDuplicateEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarketplaceCategory","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 24791 24792 24793 24794 24795 24796 24797 24798 24799 24800 24801 24802 24803 24804 24805 24806 24807 24808 24809 24810 24811 24812 24813 24814 24815 24816 24817 24818 24819 24820 class MarketplaceCategory ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"description\" , \"how_it_works\" , \"name\" , \"primary_listing_count\" , \"resource_path\" , \"secondary_listing_count\" , \"slug\" , \"url\" , ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) how_it_works = sgqlc . types . Field ( String , graphql_name = \"howItWorks\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) primary_listing_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"primaryListingCount\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) secondary_listing_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"secondaryListingCount\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"MarketplaceCategory"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarketplaceListing","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass MarketplaceListing ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app\" , \"company_url\" , \"configuration_resource_path\" , \"configuration_url\" , \"documentation_url\" , \"extended_description\" , \"extended_description_html\" , \"full_description\" , \"full_description_html\" , \"has_published_free_trial_plans\" , \"has_terms_of_service\" , \"has_verified_owner\" , \"how_it_works\" , \"how_it_works_html\" , \"installation_url\" , \"installed_for_viewer\" , \"is_archived\" , \"is_draft\" , \"is_paid\" , \"is_public\" , \"is_rejected\" , \"is_unverified\" , \"is_unverified_pending\" , \"is_verification_pending_from_draft\" , \"is_verification_pending_from_unverified\" , \"is_verified\" , \"logo_background_color\" , \"logo_url\" , \"name\" , \"normalized_short_description\" , \"pricing_url\" , \"primary_category\" , \"privacy_policy_url\" , \"resource_path\" , \"screenshot_urls\" , \"secondary_category\" , \"short_description\" , \"slug\" , \"status_url\" , \"support_email\" , \"support_url\" , \"terms_of_service_url\" , \"url\" , \"viewer_can_add_plans\" , \"viewer_can_approve\" , \"viewer_can_delist\" , \"viewer_can_edit\" , \"viewer_can_edit_categories\" , \"viewer_can_edit_plans\" , \"viewer_can_redraft\" , \"viewer_can_reject\" , \"viewer_can_request_approval\" , \"viewer_has_purchased\" , \"viewer_has_purchased_for_all_organizations\" , \"viewer_is_listing_admin\" , ) app = sgqlc . types . Field ( App , graphql_name = \"app\" ) company_url = sgqlc . types . Field ( URI , graphql_name = \"companyUrl\" ) configuration_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"configurationResourcePath\" ) configuration_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"configurationUrl\" ) documentation_url = sgqlc . types . Field ( URI , graphql_name = \"documentationUrl\" ) extended_description = sgqlc . types . Field ( String , graphql_name = \"extendedDescription\" ) extended_description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"extendedDescriptionHTML\" ) full_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"fullDescription\" ) full_description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"fullDescriptionHTML\" ) has_published_free_trial_plans = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasPublishedFreeTrialPlans\" ) has_terms_of_service = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasTermsOfService\" ) has_verified_owner = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasVerifiedOwner\" ) how_it_works = sgqlc . types . Field ( String , graphql_name = \"howItWorks\" ) how_it_works_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"howItWorksHTML\" ) installation_url = sgqlc . types . Field ( URI , graphql_name = \"installationUrl\" ) installed_for_viewer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"installedForViewer\" ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) is_draft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDraft\" ) is_paid = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPaid\" ) is_public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPublic\" ) is_rejected = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isRejected\" ) is_unverified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUnverified\" ) is_unverified_pending = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUnverifiedPending\" ) is_verification_pending_from_draft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerificationPendingFromDraft\" ) is_verification_pending_from_unverified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerificationPendingFromUnverified\" , ) is_verified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerified\" ) logo_background_color = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"logoBackgroundColor\" ) logo_url = sgqlc . types . Field ( URI , graphql_name = \"logoUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = 400 )),) ), ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) normalized_short_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"normalizedShortDescription\" ) pricing_url = sgqlc . types . Field ( URI , graphql_name = \"pricingUrl\" ) primary_category = sgqlc . types . Field ( sgqlc . types . non_null ( MarketplaceCategory ), graphql_name = \"primaryCategory\" ) privacy_policy_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"privacyPolicyUrl\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) screenshot_urls = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( String )), graphql_name = \"screenshotUrls\" ) secondary_category = sgqlc . types . Field ( MarketplaceCategory , graphql_name = \"secondaryCategory\" ) short_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"shortDescription\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) status_url = sgqlc . types . Field ( URI , graphql_name = \"statusUrl\" ) support_email = sgqlc . types . Field ( String , graphql_name = \"supportEmail\" ) support_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"supportUrl\" ) terms_of_service_url = sgqlc . types . Field ( URI , graphql_name = \"termsOfServiceUrl\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) viewer_can_add_plans = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanAddPlans\" ) viewer_can_approve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanApprove\" ) viewer_can_delist = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanDelist\" ) viewer_can_edit = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEdit\" ) viewer_can_edit_categories = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEditCategories\" ) viewer_can_edit_plans = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEditPlans\" ) viewer_can_redraft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanRedraft\" ) viewer_can_reject = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanReject\" ) viewer_can_request_approval = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanRequestApproval\" ) viewer_has_purchased = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasPurchased\" ) viewer_has_purchased_for_all_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasPurchasedForAllOrganizations\" , ) viewer_is_listing_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsListingAdmin\" )","title":"MarketplaceListing"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarketplaceListingConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11804 11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 11818 11819 11820 11821 11822 class MarketplaceListingConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"MarketplaceListingEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"MarketplaceListing\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"MarketplaceListingConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MarketplaceListingEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11825 11826 11827 11828 11829 11830 11831 11832 11833 class MarketplaceListingEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"MarketplaceListing\" , graphql_name = \"node\" )","title":"MarketplaceListingEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MemberStatusable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11836 11837 11838 11839 11840 11841 11842 11843 11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 11857 11858 11859 11860 11861 11862 11863 11864 11865 class MemberStatusable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"member_statuses\" ,) member_statuses = sgqlc . types . Field ( sgqlc . types . non_null ( \"UserStatusConnection\" ), graphql_name = \"memberStatuses\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( UserStatusOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), )","title":"MemberStatusable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MembersCanDeleteReposClearAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25029 25030 25031 25032 25033 25034 25035 25036 25037 25038 25039 25040 25041 class MembersCanDeleteReposClearAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"MembersCanDeleteReposClearAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MembersCanDeleteReposDisableAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25044 25045 25046 25047 25048 25049 25050 25051 25052 25053 25054 25055 25056 class MembersCanDeleteReposDisableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"MembersCanDeleteReposDisableAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MembersCanDeleteReposEnableAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25059 25060 25061 25062 25063 25064 25065 25066 25067 25068 25069 25070 25071 class MembersCanDeleteReposEnableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"MembersCanDeleteReposEnableAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MentionedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25074 25075 25076 25077 25078 25079 25080 25081 25082 25083 25084 25085 class MentionedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" )","title":"MentionedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeBranchInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4296 4297 4298 4299 4300 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 class MergeBranchInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"base\" , \"head\" , \"commit_message\" , \"author_email\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) base = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"base\" ) head = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"head\" ) commit_message = sgqlc . types . Field ( String , graphql_name = \"commitMessage\" ) author_email = sgqlc . types . Field ( String , graphql_name = \"authorEmail\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MergeBranchInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeBranchPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11868 11869 11870 11871 11872 11873 11874 11875 11876 class MergeBranchPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"merge_commit\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) merge_commit = sgqlc . types . Field ( \"Commit\" , graphql_name = \"mergeCommit\" )","title":"MergeBranchPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeCommitMessage","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 746 747 748 749 750 751 752 class MergeCommitMessage ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BLANK\" , \"PR_BODY\" , \"PR_TITLE\" )","title":"MergeCommitMessage"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeCommitTitle","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 755 756 757 758 759 760 761 class MergeCommitTitle ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MERGE_MESSAGE\" , \"PR_TITLE\" )","title":"MergeCommitTitle"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergePullRequestInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4320 4321 4322 4323 4324 4325 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 class MergePullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"commit_headline\" , \"commit_body\" , \"expected_head_oid\" , \"merge_method\" , \"author_email\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) commit_headline = sgqlc . types . Field ( String , graphql_name = \"commitHeadline\" ) commit_body = sgqlc . types . Field ( String , graphql_name = \"commitBody\" ) expected_head_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"expectedHeadOid\" ) merge_method = sgqlc . types . Field ( PullRequestMergeMethod , graphql_name = \"mergeMethod\" ) author_email = sgqlc . types . Field ( String , graphql_name = \"authorEmail\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MergePullRequestInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergePullRequestPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11879 11880 11881 11882 11883 11884 11885 11886 11887 11888 class MergePullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"MergePullRequestPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergeableState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 764 765 766 767 768 769 770 class MergeableState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CONFLICTING\" , \"MERGEABLE\" , \"UNKNOWN\" )","title":"MergeableState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MergedEvent","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25088 25089 25090 25091 25092 25093 25094 25095 25096 25097 25098 25099 25100 25101 25102 25103 25104 25105 25106 25107 25108 25109 25110 25111 25112 25113 class MergedEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"commit\" , \"created_at\" , \"merge_ref\" , \"merge_ref_name\" , \"pull_request\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) merge_ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"mergeRef\" ) merge_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"mergeRefName\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"MergedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Migration","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11891 11892 11893 11894 11895 11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 11922 11923 11924 11925 11926 11927 11928 class Migration ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"continue_on_error\" , \"created_at\" , \"database_id\" , \"failure_reason\" , \"id\" , \"migration_log_url\" , \"migration_source\" , \"repository_name\" , \"source_url\" , \"state\" , ) continue_on_error = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"continueOnError\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( String , graphql_name = \"databaseId\" ) failure_reason = sgqlc . types . Field ( String , graphql_name = \"failureReason\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) migration_log_url = sgqlc . types . Field ( URI , graphql_name = \"migrationLogUrl\" ) migration_source = sgqlc . types . Field ( sgqlc . types . non_null ( \"MigrationSource\" ), graphql_name = \"migrationSource\" ) repository_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"repositoryName\" ) source_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"sourceUrl\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( MigrationState ), graphql_name = \"state\" )","title":"Migration"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MigrationSource","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25116 25117 25118 25119 25120 25121 25122 25123 25124 25125 25126 25127 class MigrationSource ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"type\" , \"url\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( MigrationSourceType ), graphql_name = \"type\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"MigrationSource"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MigrationSourceType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 773 774 775 776 777 778 779 class MigrationSourceType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"AZURE_DEVOPS\" , \"BITBUCKET_SERVER\" , \"GITHUB_ARCHIVE\" )","title":"MigrationSourceType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MigrationState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 class MigrationState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"FAILED\" , \"FAILED_VALIDATION\" , \"IN_PROGRESS\" , \"NOT_STARTED\" , \"PENDING_VALIDATION\" , \"QUEUED\" , \"SUCCEEDED\" , )","title":"MigrationState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Milestone","text":"Bases: sgqlc . types . Type , Node , Closable , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Milestone ( sgqlc . types . Type , Node , Closable , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"description\" , \"due_on\" , \"issues\" , \"number\" , \"progress_percentage\" , \"pull_requests\" , \"repository\" , \"state\" , \"title\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) due_on = sgqlc . types . Field ( DateTime , graphql_name = \"dueOn\" ) issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"issues\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" , default = None , ), ), ( \"filter_by\" , sgqlc . types . Arg ( IssueFilters , graphql_name = \"filterBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) progress_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"progressPercentage\" ) pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( MilestoneState ), graphql_name = \"state\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"Milestone"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11931 11932 11933 11934 11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 class MilestoneConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"MilestoneEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Milestone\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"MilestoneConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11950 11951 11952 11953 11954 11955 11956 11957 11958 class MilestoneEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Milestone\" , graphql_name = \"node\" )","title":"MilestoneEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneItem","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32536 32537 32538 32539 32540 32541 32542 class MilestoneItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest )","title":"MilestoneItem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4346 4347 4348 4349 4350 4351 4352 4353 4354 4355 4356 4357 4358 class MilestoneOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( MilestoneOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"MilestoneOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 799 800 801 802 803 804 805 class MilestoneOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"DUE_DATE\" , \"NUMBER\" , \"UPDATED_AT\" )","title":"MilestoneOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestoneState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 808 809 810 811 812 813 814 class MilestoneState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" )","title":"MilestoneState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MilestonedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25256 25257 25258 25259 25260 25261 25262 25263 25264 25265 25266 25267 25268 25269 25270 25271 25272 class MilestonedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"milestone_title\" , \"subject\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) milestone_title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"milestoneTitle\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"MilestoneItem\" ), graphql_name = \"subject\" )","title":"MilestonedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Minimizable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 11974 class Minimizable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_minimized\" , \"minimized_reason\" , \"viewer_can_minimize\" ) is_minimized = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isMinimized\" ) minimized_reason = sgqlc . types . Field ( String , graphql_name = \"minimizedReason\" ) viewer_can_minimize = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanMinimize\" )","title":"Minimizable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MinimizeCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 class MinimizeCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"classifier\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) classifier = sgqlc . types . Field ( sgqlc . types . non_null ( ReportedContentClassifiers ), graphql_name = \"classifier\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MinimizeCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MinimizeCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11977 11978 11979 11980 11981 11982 11983 11984 11985 class MinimizeCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"minimized_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) minimized_comment = sgqlc . types . Field ( Minimizable , graphql_name = \"minimizedComment\" )","title":"MinimizeCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MoveProjectCardInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 class MoveProjectCardInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"card_id\" , \"column_id\" , \"after_card_id\" , \"client_mutation_id\" ) card_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"cardId\" ) column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"columnId\" ) after_card_id = sgqlc . types . Field ( ID , graphql_name = \"afterCardId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MoveProjectCardInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MoveProjectCardPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11988 11989 11990 11991 11992 11993 11994 11995 11996 class MoveProjectCardPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"card_edge\" , \"client_mutation_id\" ) card_edge = sgqlc . types . Field ( \"ProjectCardEdge\" , graphql_name = \"cardEdge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MoveProjectCardPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MoveProjectColumnInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 class MoveProjectColumnInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column_id\" , \"after_column_id\" , \"client_mutation_id\" ) column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"columnId\" ) after_column_id = sgqlc . types . Field ( ID , graphql_name = \"afterColumnId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"MoveProjectColumnInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MoveProjectColumnPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 11999 12000 12001 12002 12003 12004 12005 12006 12007 class MoveProjectColumnPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"column_edge\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) column_edge = sgqlc . types . Field ( \"ProjectColumnEdge\" , graphql_name = \"columnEdge\" )","title":"MoveProjectColumnPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.MovedColumnsInProjectEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25275 25276 25277 25278 25279 25280 25281 25282 25283 25284 25285 25286 class MovedColumnsInProjectEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" )","title":"MovedColumnsInProjectEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Mutation","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Mutation ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"abort_queued_migrations\" , \"accept_enterprise_administrator_invitation\" , \"accept_topic_suggestion\" , \"add_assignees_to_assignable\" , \"add_comment\" , \"add_discussion_comment\" , \"add_discussion_poll_vote\" , \"add_enterprise_support_entitlement\" , \"add_labels_to_labelable\" , \"add_project_card\" , \"add_project_column\" , \"add_project_draft_issue\" , \"add_project_next_item\" , \"add_project_v2_draft_issue\" , \"add_project_v2_item_by_id\" , \"add_pull_request_review\" , \"add_pull_request_review_comment\" , \"add_pull_request_review_thread\" , \"add_reaction\" , \"add_star\" , \"add_upvote\" , \"add_verifiable_domain\" , \"approve_deployments\" , \"approve_verifiable_domain\" , \"archive_repository\" , \"cancel_enterprise_admin_invitation\" , \"cancel_sponsorship\" , \"change_user_status\" , \"clear_labels_from_labelable\" , \"clear_project_v2_item_field_value\" , \"clone_project\" , \"clone_template_repository\" , \"close_issue\" , \"close_pull_request\" , \"convert_project_card_note_to_issue\" , \"convert_pull_request_to_draft\" , \"create_branch_protection_rule\" , \"create_check_run\" , \"create_check_suite\" , \"create_commit_on_branch\" , \"create_discussion\" , \"create_enterprise_organization\" , \"create_environment\" , \"create_ip_allow_list_entry\" , \"create_issue\" , \"create_migration_source\" , \"create_project\" , \"create_project_v2\" , \"create_pull_request\" , \"create_ref\" , \"create_repository\" , \"create_sponsors_tier\" , \"create_sponsorship\" , \"create_team_discussion\" , \"create_team_discussion_comment\" , \"decline_topic_suggestion\" , \"delete_branch_protection_rule\" , \"delete_deployment\" , \"delete_discussion\" , \"delete_discussion_comment\" , \"delete_environment\" , \"delete_ip_allow_list_entry\" , \"delete_issue\" , \"delete_issue_comment\" , \"delete_project\" , \"delete_project_card\" , \"delete_project_column\" , \"delete_project_next_item\" , \"delete_project_v2_item\" , \"delete_pull_request_review\" , \"delete_pull_request_review_comment\" , \"delete_ref\" , \"delete_team_discussion\" , \"delete_team_discussion_comment\" , \"delete_verifiable_domain\" , \"disable_pull_request_auto_merge\" , \"dismiss_pull_request_review\" , \"dismiss_repository_vulnerability_alert\" , \"enable_pull_request_auto_merge\" , \"follow_organization\" , \"follow_user\" , \"grant_enterprise_organizations_migrator_role\" , \"grant_migrator_role\" , \"invite_enterprise_admin\" , \"link_repository_to_project\" , \"lock_lockable\" , \"mark_discussion_comment_as_answer\" , \"mark_file_as_viewed\" , \"mark_pull_request_ready_for_review\" , \"merge_branch\" , \"merge_pull_request\" , \"minimize_comment\" , \"move_project_card\" , \"move_project_column\" , \"pin_issue\" , \"regenerate_enterprise_identity_provider_recovery_codes\" , \"regenerate_verifiable_domain_token\" , \"reject_deployments\" , \"remove_assignees_from_assignable\" , \"remove_enterprise_admin\" , \"remove_enterprise_identity_provider\" , \"remove_enterprise_organization\" , \"remove_enterprise_support_entitlement\" , \"remove_labels_from_labelable\" , \"remove_outside_collaborator\" , \"remove_reaction\" , \"remove_star\" , \"remove_upvote\" , \"reopen_issue\" , \"reopen_pull_request\" , \"request_reviews\" , \"rerequest_check_suite\" , \"resolve_review_thread\" , \"revoke_enterprise_organizations_migrator_role\" , \"revoke_migrator_role\" , \"set_enterprise_identity_provider\" , \"set_organization_interaction_limit\" , \"set_repository_interaction_limit\" , \"set_user_interaction_limit\" , \"start_repository_migration\" , \"submit_pull_request_review\" , \"transfer_issue\" , \"unarchive_repository\" , \"unfollow_organization\" , \"unfollow_user\" , \"unlink_repository_from_project\" , \"unlock_lockable\" , \"unmark_discussion_comment_as_answer\" , \"unmark_file_as_viewed\" , \"unmark_issue_as_duplicate\" , \"unminimize_comment\" , \"unpin_issue\" , \"unresolve_review_thread\" , \"update_branch_protection_rule\" , \"update_check_run\" , \"update_check_suite_preferences\" , \"update_discussion\" , \"update_discussion_comment\" , \"update_enterprise_administrator_role\" , \"update_enterprise_allow_private_repository_forking_setting\" , \"update_enterprise_default_repository_permission_setting\" , \"update_enterprise_members_can_change_repository_visibility_setting\" , \"update_enterprise_members_can_create_repositories_setting\" , \"update_enterprise_members_can_delete_issues_setting\" , \"update_enterprise_members_can_delete_repositories_setting\" , \"update_enterprise_members_can_invite_collaborators_setting\" , \"update_enterprise_members_can_make_purchases_setting\" , \"update_enterprise_members_can_update_protected_branches_setting\" , \"update_enterprise_members_can_view_dependency_insights_setting\" , \"update_enterprise_organization_projects_setting\" , \"update_enterprise_owner_organization_role\" , \"update_enterprise_profile\" , \"update_enterprise_repository_projects_setting\" , \"update_enterprise_team_discussions_setting\" , \"update_enterprise_two_factor_authentication_required_setting\" , \"update_environment\" , \"update_ip_allow_list_enabled_setting\" , \"update_ip_allow_list_entry\" , \"update_ip_allow_list_for_installed_apps_enabled_setting\" , \"update_issue\" , \"update_issue_comment\" , \"update_notification_restriction_setting\" , \"update_organization_allow_private_repository_forking_setting\" , \"update_organization_web_commit_signoff_setting\" , \"update_project\" , \"update_project_card\" , \"update_project_column\" , \"update_project_draft_issue\" , \"update_project_next\" , \"update_project_next_item_field\" , \"update_project_v2\" , \"update_project_v2_draft_issue\" , \"update_project_v2_item_field_value\" , \"update_project_v2_item_position\" , \"update_pull_request\" , \"update_pull_request_branch\" , \"update_pull_request_review\" , \"update_pull_request_review_comment\" , \"update_ref\" , \"update_repository\" , \"update_repository_web_commit_signoff_setting\" , \"update_sponsorship_preferences\" , \"update_subscription\" , \"update_team_discussion\" , \"update_team_discussion_comment\" , \"update_teams_repository\" , \"update_topics\" , \"verify_verifiable_domain\" , ) abort_queued_migrations = sgqlc . types . Field ( AbortQueuedMigrationsPayload , graphql_name = \"abortQueuedMigrations\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AbortQueuedMigrationsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) accept_enterprise_administrator_invitation = sgqlc . types . Field ( AcceptEnterpriseAdministratorInvitationPayload , graphql_name = \"acceptEnterpriseAdministratorInvitation\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AcceptEnterpriseAdministratorInvitationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) accept_topic_suggestion = sgqlc . types . Field ( AcceptTopicSuggestionPayload , graphql_name = \"acceptTopicSuggestion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AcceptTopicSuggestionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_assignees_to_assignable = sgqlc . types . Field ( AddAssigneesToAssignablePayload , graphql_name = \"addAssigneesToAssignable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddAssigneesToAssignableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_comment = sgqlc . types . Field ( AddCommentPayload , graphql_name = \"addComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_discussion_comment = sgqlc . types . Field ( AddDiscussionCommentPayload , graphql_name = \"addDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_discussion_poll_vote = sgqlc . types . Field ( AddDiscussionPollVotePayload , graphql_name = \"addDiscussionPollVote\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddDiscussionPollVoteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_enterprise_support_entitlement = sgqlc . types . Field ( AddEnterpriseSupportEntitlementPayload , graphql_name = \"addEnterpriseSupportEntitlement\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddEnterpriseSupportEntitlementInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_labels_to_labelable = sgqlc . types . Field ( AddLabelsToLabelablePayload , graphql_name = \"addLabelsToLabelable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddLabelsToLabelableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_card = sgqlc . types . Field ( AddProjectCardPayload , graphql_name = \"addProjectCard\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectCardInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_column = sgqlc . types . Field ( AddProjectColumnPayload , graphql_name = \"addProjectColumn\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectColumnInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_draft_issue = sgqlc . types . Field ( AddProjectDraftIssuePayload , graphql_name = \"addProjectDraftIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectDraftIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_next_item = sgqlc . types . Field ( AddProjectNextItemPayload , graphql_name = \"addProjectNextItem\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectNextItemInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_v2_draft_issue = sgqlc . types . Field ( AddProjectV2DraftIssuePayload , graphql_name = \"addProjectV2DraftIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectV2DraftIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_project_v2_item_by_id = sgqlc . types . Field ( AddProjectV2ItemByIdPayload , graphql_name = \"addProjectV2ItemById\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddProjectV2ItemByIdInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_pull_request_review = sgqlc . types . Field ( AddPullRequestReviewPayload , graphql_name = \"addPullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddPullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_pull_request_review_comment = sgqlc . types . Field ( AddPullRequestReviewCommentPayload , graphql_name = \"addPullRequestReviewComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddPullRequestReviewCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_pull_request_review_thread = sgqlc . types . Field ( AddPullRequestReviewThreadPayload , graphql_name = \"addPullRequestReviewThread\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddPullRequestReviewThreadInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_reaction = sgqlc . types . Field ( AddReactionPayload , graphql_name = \"addReaction\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddReactionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_star = sgqlc . types . Field ( AddStarPayload , graphql_name = \"addStar\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddStarInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_upvote = sgqlc . types . Field ( AddUpvotePayload , graphql_name = \"addUpvote\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddUpvoteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) add_verifiable_domain = sgqlc . types . Field ( AddVerifiableDomainPayload , graphql_name = \"addVerifiableDomain\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( AddVerifiableDomainInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) approve_deployments = sgqlc . types . Field ( ApproveDeploymentsPayload , graphql_name = \"approveDeployments\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ApproveDeploymentsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) approve_verifiable_domain = sgqlc . types . Field ( ApproveVerifiableDomainPayload , graphql_name = \"approveVerifiableDomain\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ApproveVerifiableDomainInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) archive_repository = sgqlc . types . Field ( ArchiveRepositoryPayload , graphql_name = \"archiveRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ArchiveRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) cancel_enterprise_admin_invitation = sgqlc . types . Field ( CancelEnterpriseAdminInvitationPayload , graphql_name = \"cancelEnterpriseAdminInvitation\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CancelEnterpriseAdminInvitationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) cancel_sponsorship = sgqlc . types . Field ( CancelSponsorshipPayload , graphql_name = \"cancelSponsorship\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CancelSponsorshipInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) change_user_status = sgqlc . types . Field ( ChangeUserStatusPayload , graphql_name = \"changeUserStatus\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ChangeUserStatusInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) clear_labels_from_labelable = sgqlc . types . Field ( ClearLabelsFromLabelablePayload , graphql_name = \"clearLabelsFromLabelable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ClearLabelsFromLabelableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) clear_project_v2_item_field_value = sgqlc . types . Field ( ClearProjectV2ItemFieldValuePayload , graphql_name = \"clearProjectV2ItemFieldValue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ClearProjectV2ItemFieldValueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) clone_project = sgqlc . types . Field ( CloneProjectPayload , graphql_name = \"cloneProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CloneProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) clone_template_repository = sgqlc . types . Field ( CloneTemplateRepositoryPayload , graphql_name = \"cloneTemplateRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CloneTemplateRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) close_issue = sgqlc . types . Field ( CloseIssuePayload , graphql_name = \"closeIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CloseIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) close_pull_request = sgqlc . types . Field ( ClosePullRequestPayload , graphql_name = \"closePullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ClosePullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) convert_project_card_note_to_issue = sgqlc . types . Field ( ConvertProjectCardNoteToIssuePayload , graphql_name = \"convertProjectCardNoteToIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ConvertProjectCardNoteToIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) convert_pull_request_to_draft = sgqlc . types . Field ( ConvertPullRequestToDraftPayload , graphql_name = \"convertPullRequestToDraft\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ConvertPullRequestToDraftInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_branch_protection_rule = sgqlc . types . Field ( CreateBranchProtectionRulePayload , graphql_name = \"createBranchProtectionRule\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateBranchProtectionRuleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_check_run = sgqlc . types . Field ( CreateCheckRunPayload , graphql_name = \"createCheckRun\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateCheckRunInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_check_suite = sgqlc . types . Field ( CreateCheckSuitePayload , graphql_name = \"createCheckSuite\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateCheckSuiteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_commit_on_branch = sgqlc . types . Field ( CreateCommitOnBranchPayload , graphql_name = \"createCommitOnBranch\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateCommitOnBranchInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_discussion = sgqlc . types . Field ( CreateDiscussionPayload , graphql_name = \"createDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_enterprise_organization = sgqlc . types . Field ( CreateEnterpriseOrganizationPayload , graphql_name = \"createEnterpriseOrganization\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateEnterpriseOrganizationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_environment = sgqlc . types . Field ( CreateEnvironmentPayload , graphql_name = \"createEnvironment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateEnvironmentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_ip_allow_list_entry = sgqlc . types . Field ( CreateIpAllowListEntryPayload , graphql_name = \"createIpAllowListEntry\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateIpAllowListEntryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_issue = sgqlc . types . Field ( CreateIssuePayload , graphql_name = \"createIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_migration_source = sgqlc . types . Field ( CreateMigrationSourcePayload , graphql_name = \"createMigrationSource\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateMigrationSourceInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_project = sgqlc . types . Field ( CreateProjectPayload , graphql_name = \"createProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_project_v2 = sgqlc . types . Field ( CreateProjectV2Payload , graphql_name = \"createProjectV2\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateProjectV2Input ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_pull_request = sgqlc . types . Field ( CreatePullRequestPayload , graphql_name = \"createPullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreatePullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_ref = sgqlc . types . Field ( CreateRefPayload , graphql_name = \"createRef\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateRefInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_repository = sgqlc . types . Field ( CreateRepositoryPayload , graphql_name = \"createRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_sponsors_tier = sgqlc . types . Field ( CreateSponsorsTierPayload , graphql_name = \"createSponsorsTier\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateSponsorsTierInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_sponsorship = sgqlc . types . Field ( CreateSponsorshipPayload , graphql_name = \"createSponsorship\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateSponsorshipInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_team_discussion = sgqlc . types . Field ( CreateTeamDiscussionPayload , graphql_name = \"createTeamDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateTeamDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) create_team_discussion_comment = sgqlc . types . Field ( CreateTeamDiscussionCommentPayload , graphql_name = \"createTeamDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( CreateTeamDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) decline_topic_suggestion = sgqlc . types . Field ( DeclineTopicSuggestionPayload , graphql_name = \"declineTopicSuggestion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeclineTopicSuggestionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_branch_protection_rule = sgqlc . types . Field ( DeleteBranchProtectionRulePayload , graphql_name = \"deleteBranchProtectionRule\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteBranchProtectionRuleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_deployment = sgqlc . types . Field ( DeleteDeploymentPayload , graphql_name = \"deleteDeployment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteDeploymentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_discussion = sgqlc . types . Field ( DeleteDiscussionPayload , graphql_name = \"deleteDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_discussion_comment = sgqlc . types . Field ( DeleteDiscussionCommentPayload , graphql_name = \"deleteDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_environment = sgqlc . types . Field ( DeleteEnvironmentPayload , graphql_name = \"deleteEnvironment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteEnvironmentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_ip_allow_list_entry = sgqlc . types . Field ( DeleteIpAllowListEntryPayload , graphql_name = \"deleteIpAllowListEntry\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteIpAllowListEntryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_issue = sgqlc . types . Field ( DeleteIssuePayload , graphql_name = \"deleteIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_issue_comment = sgqlc . types . Field ( DeleteIssueCommentPayload , graphql_name = \"deleteIssueComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteIssueCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project = sgqlc . types . Field ( DeleteProjectPayload , graphql_name = \"deleteProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project_card = sgqlc . types . Field ( DeleteProjectCardPayload , graphql_name = \"deleteProjectCard\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectCardInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project_column = sgqlc . types . Field ( DeleteProjectColumnPayload , graphql_name = \"deleteProjectColumn\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectColumnInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project_next_item = sgqlc . types . Field ( DeleteProjectNextItemPayload , graphql_name = \"deleteProjectNextItem\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectNextItemInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_project_v2_item = sgqlc . types . Field ( DeleteProjectV2ItemPayload , graphql_name = \"deleteProjectV2Item\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteProjectV2ItemInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_pull_request_review = sgqlc . types . Field ( DeletePullRequestReviewPayload , graphql_name = \"deletePullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeletePullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_pull_request_review_comment = sgqlc . types . Field ( DeletePullRequestReviewCommentPayload , graphql_name = \"deletePullRequestReviewComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeletePullRequestReviewCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_ref = sgqlc . types . Field ( DeleteRefPayload , graphql_name = \"deleteRef\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteRefInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_team_discussion = sgqlc . types . Field ( DeleteTeamDiscussionPayload , graphql_name = \"deleteTeamDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteTeamDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_team_discussion_comment = sgqlc . types . Field ( DeleteTeamDiscussionCommentPayload , graphql_name = \"deleteTeamDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteTeamDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) delete_verifiable_domain = sgqlc . types . Field ( DeleteVerifiableDomainPayload , graphql_name = \"deleteVerifiableDomain\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DeleteVerifiableDomainInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) disable_pull_request_auto_merge = sgqlc . types . Field ( DisablePullRequestAutoMergePayload , graphql_name = \"disablePullRequestAutoMerge\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DisablePullRequestAutoMergeInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) dismiss_pull_request_review = sgqlc . types . Field ( DismissPullRequestReviewPayload , graphql_name = \"dismissPullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DismissPullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) dismiss_repository_vulnerability_alert = sgqlc . types . Field ( DismissRepositoryVulnerabilityAlertPayload , graphql_name = \"dismissRepositoryVulnerabilityAlert\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( DismissRepositoryVulnerabilityAlertInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) enable_pull_request_auto_merge = sgqlc . types . Field ( EnablePullRequestAutoMergePayload , graphql_name = \"enablePullRequestAutoMerge\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( EnablePullRequestAutoMergeInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) follow_organization = sgqlc . types . Field ( FollowOrganizationPayload , graphql_name = \"followOrganization\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( FollowOrganizationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) follow_user = sgqlc . types . Field ( FollowUserPayload , graphql_name = \"followUser\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( FollowUserInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) grant_enterprise_organizations_migrator_role = sgqlc . types . Field ( GrantEnterpriseOrganizationsMigratorRolePayload , graphql_name = \"grantEnterpriseOrganizationsMigratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( GrantEnterpriseOrganizationsMigratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) grant_migrator_role = sgqlc . types . Field ( GrantMigratorRolePayload , graphql_name = \"grantMigratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( GrantMigratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) invite_enterprise_admin = sgqlc . types . Field ( InviteEnterpriseAdminPayload , graphql_name = \"inviteEnterpriseAdmin\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( InviteEnterpriseAdminInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) link_repository_to_project = sgqlc . types . Field ( LinkRepositoryToProjectPayload , graphql_name = \"linkRepositoryToProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( LinkRepositoryToProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) lock_lockable = sgqlc . types . Field ( LockLockablePayload , graphql_name = \"lockLockable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( LockLockableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) mark_discussion_comment_as_answer = sgqlc . types . Field ( MarkDiscussionCommentAsAnswerPayload , graphql_name = \"markDiscussionCommentAsAnswer\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MarkDiscussionCommentAsAnswerInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) mark_file_as_viewed = sgqlc . types . Field ( MarkFileAsViewedPayload , graphql_name = \"markFileAsViewed\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MarkFileAsViewedInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) mark_pull_request_ready_for_review = sgqlc . types . Field ( MarkPullRequestReadyForReviewPayload , graphql_name = \"markPullRequestReadyForReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MarkPullRequestReadyForReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) merge_branch = sgqlc . types . Field ( MergeBranchPayload , graphql_name = \"mergeBranch\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MergeBranchInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) merge_pull_request = sgqlc . types . Field ( MergePullRequestPayload , graphql_name = \"mergePullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MergePullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) minimize_comment = sgqlc . types . Field ( MinimizeCommentPayload , graphql_name = \"minimizeComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MinimizeCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) move_project_card = sgqlc . types . Field ( MoveProjectCardPayload , graphql_name = \"moveProjectCard\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MoveProjectCardInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) move_project_column = sgqlc . types . Field ( MoveProjectColumnPayload , graphql_name = \"moveProjectColumn\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( MoveProjectColumnInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) pin_issue = sgqlc . types . Field ( \"PinIssuePayload\" , graphql_name = \"pinIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( PinIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) regenerate_enterprise_identity_provider_recovery_codes = sgqlc . types . Field ( \"RegenerateEnterpriseIdentityProviderRecoveryCodesPayload\" , graphql_name = \"regenerateEnterpriseIdentityProviderRecoveryCodes\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RegenerateEnterpriseIdentityProviderRecoveryCodesInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) regenerate_verifiable_domain_token = sgqlc . types . Field ( \"RegenerateVerifiableDomainTokenPayload\" , graphql_name = \"regenerateVerifiableDomainToken\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RegenerateVerifiableDomainTokenInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) reject_deployments = sgqlc . types . Field ( \"RejectDeploymentsPayload\" , graphql_name = \"rejectDeployments\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RejectDeploymentsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_assignees_from_assignable = sgqlc . types . Field ( \"RemoveAssigneesFromAssignablePayload\" , graphql_name = \"removeAssigneesFromAssignable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveAssigneesFromAssignableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_enterprise_admin = sgqlc . types . Field ( \"RemoveEnterpriseAdminPayload\" , graphql_name = \"removeEnterpriseAdmin\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveEnterpriseAdminInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_enterprise_identity_provider = sgqlc . types . Field ( \"RemoveEnterpriseIdentityProviderPayload\" , graphql_name = \"removeEnterpriseIdentityProvider\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveEnterpriseIdentityProviderInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_enterprise_organization = sgqlc . types . Field ( \"RemoveEnterpriseOrganizationPayload\" , graphql_name = \"removeEnterpriseOrganization\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveEnterpriseOrganizationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_enterprise_support_entitlement = sgqlc . types . Field ( \"RemoveEnterpriseSupportEntitlementPayload\" , graphql_name = \"removeEnterpriseSupportEntitlement\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveEnterpriseSupportEntitlementInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_labels_from_labelable = sgqlc . types . Field ( \"RemoveLabelsFromLabelablePayload\" , graphql_name = \"removeLabelsFromLabelable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveLabelsFromLabelableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_outside_collaborator = sgqlc . types . Field ( \"RemoveOutsideCollaboratorPayload\" , graphql_name = \"removeOutsideCollaborator\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveOutsideCollaboratorInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_reaction = sgqlc . types . Field ( \"RemoveReactionPayload\" , graphql_name = \"removeReaction\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveReactionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_star = sgqlc . types . Field ( \"RemoveStarPayload\" , graphql_name = \"removeStar\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveStarInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) remove_upvote = sgqlc . types . Field ( \"RemoveUpvotePayload\" , graphql_name = \"removeUpvote\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RemoveUpvoteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) reopen_issue = sgqlc . types . Field ( \"ReopenIssuePayload\" , graphql_name = \"reopenIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ReopenIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) reopen_pull_request = sgqlc . types . Field ( \"ReopenPullRequestPayload\" , graphql_name = \"reopenPullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ReopenPullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) request_reviews = sgqlc . types . Field ( \"RequestReviewsPayload\" , graphql_name = \"requestReviews\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RequestReviewsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) rerequest_check_suite = sgqlc . types . Field ( \"RerequestCheckSuitePayload\" , graphql_name = \"rerequestCheckSuite\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RerequestCheckSuiteInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) resolve_review_thread = sgqlc . types . Field ( \"ResolveReviewThreadPayload\" , graphql_name = \"resolveReviewThread\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ResolveReviewThreadInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) revoke_enterprise_organizations_migrator_role = sgqlc . types . Field ( \"RevokeEnterpriseOrganizationsMigratorRolePayload\" , graphql_name = \"revokeEnterpriseOrganizationsMigratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RevokeEnterpriseOrganizationsMigratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) revoke_migrator_role = sgqlc . types . Field ( \"RevokeMigratorRolePayload\" , graphql_name = \"revokeMigratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RevokeMigratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) set_enterprise_identity_provider = sgqlc . types . Field ( \"SetEnterpriseIdentityProviderPayload\" , graphql_name = \"setEnterpriseIdentityProvider\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SetEnterpriseIdentityProviderInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) set_organization_interaction_limit = sgqlc . types . Field ( \"SetOrganizationInteractionLimitPayload\" , graphql_name = \"setOrganizationInteractionLimit\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SetOrganizationInteractionLimitInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) set_repository_interaction_limit = sgqlc . types . Field ( \"SetRepositoryInteractionLimitPayload\" , graphql_name = \"setRepositoryInteractionLimit\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SetRepositoryInteractionLimitInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) set_user_interaction_limit = sgqlc . types . Field ( \"SetUserInteractionLimitPayload\" , graphql_name = \"setUserInteractionLimit\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SetUserInteractionLimitInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) start_repository_migration = sgqlc . types . Field ( \"StartRepositoryMigrationPayload\" , graphql_name = \"startRepositoryMigration\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( StartRepositoryMigrationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) submit_pull_request_review = sgqlc . types . Field ( \"SubmitPullRequestReviewPayload\" , graphql_name = \"submitPullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SubmitPullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) transfer_issue = sgqlc . types . Field ( \"TransferIssuePayload\" , graphql_name = \"transferIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( TransferIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unarchive_repository = sgqlc . types . Field ( \"UnarchiveRepositoryPayload\" , graphql_name = \"unarchiveRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnarchiveRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unfollow_organization = sgqlc . types . Field ( \"UnfollowOrganizationPayload\" , graphql_name = \"unfollowOrganization\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnfollowOrganizationInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unfollow_user = sgqlc . types . Field ( \"UnfollowUserPayload\" , graphql_name = \"unfollowUser\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnfollowUserInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unlink_repository_from_project = sgqlc . types . Field ( \"UnlinkRepositoryFromProjectPayload\" , graphql_name = \"unlinkRepositoryFromProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnlinkRepositoryFromProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unlock_lockable = sgqlc . types . Field ( \"UnlockLockablePayload\" , graphql_name = \"unlockLockable\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnlockLockableInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unmark_discussion_comment_as_answer = sgqlc . types . Field ( \"UnmarkDiscussionCommentAsAnswerPayload\" , graphql_name = \"unmarkDiscussionCommentAsAnswer\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnmarkDiscussionCommentAsAnswerInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unmark_file_as_viewed = sgqlc . types . Field ( \"UnmarkFileAsViewedPayload\" , graphql_name = \"unmarkFileAsViewed\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnmarkFileAsViewedInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unmark_issue_as_duplicate = sgqlc . types . Field ( \"UnmarkIssueAsDuplicatePayload\" , graphql_name = \"unmarkIssueAsDuplicate\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnmarkIssueAsDuplicateInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unminimize_comment = sgqlc . types . Field ( \"UnminimizeCommentPayload\" , graphql_name = \"unminimizeComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnminimizeCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unpin_issue = sgqlc . types . Field ( \"UnpinIssuePayload\" , graphql_name = \"unpinIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnpinIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) unresolve_review_thread = sgqlc . types . Field ( \"UnresolveReviewThreadPayload\" , graphql_name = \"unresolveReviewThread\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UnresolveReviewThreadInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_branch_protection_rule = sgqlc . types . Field ( \"UpdateBranchProtectionRulePayload\" , graphql_name = \"updateBranchProtectionRule\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateBranchProtectionRuleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_check_run = sgqlc . types . Field ( \"UpdateCheckRunPayload\" , graphql_name = \"updateCheckRun\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateCheckRunInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_check_suite_preferences = sgqlc . types . Field ( \"UpdateCheckSuitePreferencesPayload\" , graphql_name = \"updateCheckSuitePreferences\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateCheckSuitePreferencesInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_discussion = sgqlc . types . Field ( \"UpdateDiscussionPayload\" , graphql_name = \"updateDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_discussion_comment = sgqlc . types . Field ( \"UpdateDiscussionCommentPayload\" , graphql_name = \"updateDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_administrator_role = sgqlc . types . Field ( \"UpdateEnterpriseAdministratorRolePayload\" , graphql_name = \"updateEnterpriseAdministratorRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseAdministratorRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_allow_private_repository_forking_setting = sgqlc . types . Field ( \"UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload\" , graphql_name = \"updateEnterpriseAllowPrivateRepositoryForkingSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_default_repository_permission_setting = sgqlc . types . Field ( \"UpdateEnterpriseDefaultRepositoryPermissionSettingPayload\" , graphql_name = \"updateEnterpriseDefaultRepositoryPermissionSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseDefaultRepositoryPermissionSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_change_repository_visibility_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload\" , graphql_name = \"updateEnterpriseMembersCanChangeRepositoryVisibilitySetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_create_repositories_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanCreateRepositoriesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanCreateRepositoriesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_delete_issues_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanDeleteIssuesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanDeleteIssuesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanDeleteIssuesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_delete_repositories_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanDeleteRepositoriesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_invite_collaborators_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanInviteCollaboratorsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_make_purchases_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanMakePurchasesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanMakePurchasesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanMakePurchasesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_update_protected_branches_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanUpdateProtectedBranchesSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_members_can_view_dependency_insights_setting = sgqlc . types . Field ( \"UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload\" , graphql_name = \"updateEnterpriseMembersCanViewDependencyInsightsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_organization_projects_setting = sgqlc . types . Field ( \"UpdateEnterpriseOrganizationProjectsSettingPayload\" , graphql_name = \"updateEnterpriseOrganizationProjectsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseOrganizationProjectsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_owner_organization_role = sgqlc . types . Field ( \"UpdateEnterpriseOwnerOrganizationRolePayload\" , graphql_name = \"updateEnterpriseOwnerOrganizationRole\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseOwnerOrganizationRoleInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_profile = sgqlc . types . Field ( \"UpdateEnterpriseProfilePayload\" , graphql_name = \"updateEnterpriseProfile\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseProfileInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_repository_projects_setting = sgqlc . types . Field ( \"UpdateEnterpriseRepositoryProjectsSettingPayload\" , graphql_name = \"updateEnterpriseRepositoryProjectsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseRepositoryProjectsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_team_discussions_setting = sgqlc . types . Field ( \"UpdateEnterpriseTeamDiscussionsSettingPayload\" , graphql_name = \"updateEnterpriseTeamDiscussionsSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseTeamDiscussionsSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_enterprise_two_factor_authentication_required_setting = sgqlc . types . Field ( \"UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload\" , graphql_name = \"updateEnterpriseTwoFactorAuthenticationRequiredSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_environment = sgqlc . types . Field ( \"UpdateEnvironmentPayload\" , graphql_name = \"updateEnvironment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateEnvironmentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_ip_allow_list_enabled_setting = sgqlc . types . Field ( \"UpdateIpAllowListEnabledSettingPayload\" , graphql_name = \"updateIpAllowListEnabledSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIpAllowListEnabledSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_ip_allow_list_entry = sgqlc . types . Field ( \"UpdateIpAllowListEntryPayload\" , graphql_name = \"updateIpAllowListEntry\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIpAllowListEntryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_ip_allow_list_for_installed_apps_enabled_setting = sgqlc . types . Field ( \"UpdateIpAllowListForInstalledAppsEnabledSettingPayload\" , graphql_name = \"updateIpAllowListForInstalledAppsEnabledSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIpAllowListForInstalledAppsEnabledSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_issue = sgqlc . types . Field ( \"UpdateIssuePayload\" , graphql_name = \"updateIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_issue_comment = sgqlc . types . Field ( \"UpdateIssueCommentPayload\" , graphql_name = \"updateIssueComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateIssueCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_notification_restriction_setting = sgqlc . types . Field ( \"UpdateNotificationRestrictionSettingPayload\" , graphql_name = \"updateNotificationRestrictionSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateNotificationRestrictionSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_organization_allow_private_repository_forking_setting = sgqlc . types . Field ( \"UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload\" , graphql_name = \"updateOrganizationAllowPrivateRepositoryForkingSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateOrganizationAllowPrivateRepositoryForkingSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_organization_web_commit_signoff_setting = sgqlc . types . Field ( \"UpdateOrganizationWebCommitSignoffSettingPayload\" , graphql_name = \"updateOrganizationWebCommitSignoffSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateOrganizationWebCommitSignoffSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project = sgqlc . types . Field ( \"UpdateProjectPayload\" , graphql_name = \"updateProject\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_card = sgqlc . types . Field ( \"UpdateProjectCardPayload\" , graphql_name = \"updateProjectCard\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectCardInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_column = sgqlc . types . Field ( \"UpdateProjectColumnPayload\" , graphql_name = \"updateProjectColumn\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectColumnInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_draft_issue = sgqlc . types . Field ( \"UpdateProjectDraftIssuePayload\" , graphql_name = \"updateProjectDraftIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectDraftIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_next = sgqlc . types . Field ( \"UpdateProjectNextPayload\" , graphql_name = \"updateProjectNext\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectNextInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_next_item_field = sgqlc . types . Field ( \"UpdateProjectNextItemFieldPayload\" , graphql_name = \"updateProjectNextItemField\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectNextItemFieldInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_v2 = sgqlc . types . Field ( \"UpdateProjectV2Payload\" , graphql_name = \"updateProjectV2\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectV2Input ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_v2_draft_issue = sgqlc . types . Field ( \"UpdateProjectV2DraftIssuePayload\" , graphql_name = \"updateProjectV2DraftIssue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectV2DraftIssueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_v2_item_field_value = sgqlc . types . Field ( \"UpdateProjectV2ItemFieldValuePayload\" , graphql_name = \"updateProjectV2ItemFieldValue\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectV2ItemFieldValueInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_project_v2_item_position = sgqlc . types . Field ( \"UpdateProjectV2ItemPositionPayload\" , graphql_name = \"updateProjectV2ItemPosition\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateProjectV2ItemPositionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_pull_request = sgqlc . types . Field ( \"UpdatePullRequestPayload\" , graphql_name = \"updatePullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdatePullRequestInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_pull_request_branch = sgqlc . types . Field ( \"UpdatePullRequestBranchPayload\" , graphql_name = \"updatePullRequestBranch\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdatePullRequestBranchInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_pull_request_review = sgqlc . types . Field ( \"UpdatePullRequestReviewPayload\" , graphql_name = \"updatePullRequestReview\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdatePullRequestReviewInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_pull_request_review_comment = sgqlc . types . Field ( \"UpdatePullRequestReviewCommentPayload\" , graphql_name = \"updatePullRequestReviewComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdatePullRequestReviewCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_ref = sgqlc . types . Field ( \"UpdateRefPayload\" , graphql_name = \"updateRef\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateRefInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_repository = sgqlc . types . Field ( \"UpdateRepositoryPayload\" , graphql_name = \"updateRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_repository_web_commit_signoff_setting = sgqlc . types . Field ( \"UpdateRepositoryWebCommitSignoffSettingPayload\" , graphql_name = \"updateRepositoryWebCommitSignoffSetting\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateRepositoryWebCommitSignoffSettingInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_sponsorship_preferences = sgqlc . types . Field ( \"UpdateSponsorshipPreferencesPayload\" , graphql_name = \"updateSponsorshipPreferences\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateSponsorshipPreferencesInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_subscription = sgqlc . types . Field ( \"UpdateSubscriptionPayload\" , graphql_name = \"updateSubscription\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateSubscriptionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_team_discussion = sgqlc . types . Field ( \"UpdateTeamDiscussionPayload\" , graphql_name = \"updateTeamDiscussion\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateTeamDiscussionInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_team_discussion_comment = sgqlc . types . Field ( \"UpdateTeamDiscussionCommentPayload\" , graphql_name = \"updateTeamDiscussionComment\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateTeamDiscussionCommentInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_teams_repository = sgqlc . types . Field ( \"UpdateTeamsRepositoryPayload\" , graphql_name = \"updateTeamsRepository\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateTeamsRepositoryInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) update_topics = sgqlc . types . Field ( \"UpdateTopicsPayload\" , graphql_name = \"updateTopics\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( UpdateTopicsInput ), graphql_name = \"input\" , default = None , ), ), ) ), ) verify_verifiable_domain = sgqlc . types . Field ( \"VerifyVerifiableDomainPayload\" , graphql_name = \"verifyVerifiableDomain\" , args = sgqlc . types . ArgDict ( ( ( \"input\" , sgqlc . types . Arg ( sgqlc . types . non_null ( VerifyVerifiableDomainInput ), graphql_name = \"input\" , default = None , ), ), ) ), )","title":"Mutation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Node","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15262 15263 15264 15265 15266 15267 15268 15269 class Node ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" ,) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" )","title":"Node"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.NotificationRestrictionSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 817 818 819 820 821 822 823 class NotificationRestrictionSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISABLED\" , \"ENABLED\" )","title":"NotificationRestrictionSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OIDCProvider","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25289 25290 25291 25292 25293 25294 25295 25296 25297 25298 25299 25300 25301 25302 25303 25304 25305 25306 25307 25308 25309 25310 25311 25312 25313 25314 25315 25316 25317 25318 25319 25320 25321 25322 25323 25324 25325 25326 25327 25328 25329 class OIDCProvider ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise\" , \"external_identities\" , \"provider_type\" , \"tenant_id\" , ) enterprise = sgqlc . types . Field ( Enterprise , graphql_name = \"enterprise\" ) external_identities = sgqlc . types . Field ( sgqlc . types . non_null ( ExternalIdentityConnection ), graphql_name = \"externalIdentities\" , args = sgqlc . types . ArgDict ( ( ( \"members_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"membersOnly\" , default = None ), ), ( \"login\" , sgqlc . types . Arg ( String , graphql_name = \"login\" , default = None )), ( \"user_name\" , sgqlc . types . Arg ( String , graphql_name = \"userName\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) provider_type = sgqlc . types . Field ( sgqlc . types . non_null ( OIDCProviderType ), graphql_name = \"providerType\" ) tenant_id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"tenantId\" )","title":"OIDCProvider"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OIDCProviderType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 826 827 828 829 830 831 832 class OIDCProviderType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"AAD\" ,)","title":"OIDCProviderType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OauthApplicationAuditEntryData","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15272 15273 15274 15275 15276 15277 15278 15279 15280 15281 15282 15283 15284 15285 15286 15287 15288 15289 class OauthApplicationAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"oauth_application_name\" , \"oauth_application_resource_path\" , \"oauth_application_url\" , ) oauth_application_name = sgqlc . types . Field ( String , graphql_name = \"oauthApplicationName\" ) oauth_application_resource_path = sgqlc . types . Field ( URI , graphql_name = \"oauthApplicationResourcePath\" ) oauth_application_url = sgqlc . types . Field ( URI , graphql_name = \"oauthApplicationUrl\" )","title":"OauthApplicationAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OauthApplicationCreateAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25332 25333 25334 25335 25336 25337 25338 25339 25340 25341 25342 25343 25344 25345 25346 25347 25348 25349 25350 class OauthApplicationCreateAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"application_url\" , \"callback_url\" , \"rate_limit\" , \"state\" ) application_url = sgqlc . types . Field ( URI , graphql_name = \"applicationUrl\" ) callback_url = sgqlc . types . Field ( URI , graphql_name = \"callbackUrl\" ) rate_limit = sgqlc . types . Field ( Int , graphql_name = \"rateLimit\" ) state = sgqlc . types . Field ( OauthApplicationCreateAuditEntryState , graphql_name = \"state\" )","title":"OauthApplicationCreateAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OauthApplicationCreateAuditEntryState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 835 836 837 838 839 840 841 class OauthApplicationCreateAuditEntryState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTIVE\" , \"PENDING_DELETION\" , \"SUSPENDED\" )","title":"OauthApplicationCreateAuditEntryState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OperationType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 class OperationType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACCESS\" , \"AUTHENTICATION\" , \"CREATE\" , \"MODIFY\" , \"REMOVE\" , \"RESTORE\" , \"TRANSFER\" , )","title":"OperationType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrderDirection","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 861 862 863 864 865 866 867 class OrderDirection ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ASC\" , \"DESC\" )","title":"OrderDirection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgAddBillingManagerAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25353 25354 25355 25356 25357 25358 25359 25360 25361 25362 class OrgAddBillingManagerAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"invitation_email\" ,) invitation_email = sgqlc . types . Field ( String , graphql_name = \"invitationEmail\" )","title":"OrgAddBillingManagerAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgAddMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25365 25366 25367 25368 25369 25370 25371 25372 25373 25374 25375 25376 class OrgAddMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"permission\" ,) permission = sgqlc . types . Field ( OrgAddMemberAuditEntryPermission , graphql_name = \"permission\" )","title":"OrgAddMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgAddMemberAuditEntryPermission","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 870 871 872 873 874 875 876 class OrgAddMemberAuditEntryPermission ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"READ\" )","title":"OrgAddMemberAuditEntryPermission"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgBlockUserAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25379 25380 25381 25382 25383 25384 25385 25386 25387 25388 25389 25390 25391 25392 25393 25394 25395 25396 25397 25398 class OrgBlockUserAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"blocked_user\" , \"blocked_user_name\" , \"blocked_user_resource_path\" , \"blocked_user_url\" , ) blocked_user = sgqlc . types . Field ( \"User\" , graphql_name = \"blockedUser\" ) blocked_user_name = sgqlc . types . Field ( String , graphql_name = \"blockedUserName\" ) blocked_user_resource_path = sgqlc . types . Field ( URI , graphql_name = \"blockedUserResourcePath\" ) blocked_user_url = sgqlc . types . Field ( URI , graphql_name = \"blockedUserUrl\" )","title":"OrgBlockUserAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgConfigDisableCollaboratorsOnlyAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25401 25402 25403 25404 25405 25406 25407 25408 25409 class OrgConfigDisableCollaboratorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgConfigDisableCollaboratorsOnlyAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgConfigEnableCollaboratorsOnlyAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25412 25413 25414 25415 25416 25417 25418 25419 25420 class OrgConfigEnableCollaboratorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgConfigEnableCollaboratorsOnlyAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgCreateAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25423 25424 25425 25426 25427 25428 25429 25430 25431 25432 25433 25434 class OrgCreateAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"billing_plan\" ,) billing_plan = sgqlc . types . Field ( OrgCreateAuditEntryBillingPlan , graphql_name = \"billingPlan\" )","title":"OrgCreateAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgCreateAuditEntryBillingPlan","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 879 880 881 882 883 884 885 class OrgCreateAuditEntryBillingPlan ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BUSINESS\" , \"BUSINESS_PLUS\" , \"FREE\" , \"TIERED_PER_SEAT\" , \"UNLIMITED\" )","title":"OrgCreateAuditEntryBillingPlan"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgDisableOauthAppRestrictionsAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25437 25438 25439 25440 25441 25442 25443 25444 25445 class OrgDisableOauthAppRestrictionsAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgDisableOauthAppRestrictionsAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgDisableSamlAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25448 25449 25450 25451 25452 25453 25454 25455 25456 25457 25458 25459 25460 25461 25462 25463 25464 25465 class OrgDisableSamlAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"digest_method_url\" , \"issuer_url\" , \"signature_method_url\" , \"single_sign_on_url\" , ) digest_method_url = sgqlc . types . Field ( URI , graphql_name = \"digestMethodUrl\" ) issuer_url = sgqlc . types . Field ( URI , graphql_name = \"issuerUrl\" ) signature_method_url = sgqlc . types . Field ( URI , graphql_name = \"signatureMethodUrl\" ) single_sign_on_url = sgqlc . types . Field ( URI , graphql_name = \"singleSignOnUrl\" )","title":"OrgDisableSamlAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgDisableTwoFactorRequirementAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25468 25469 25470 25471 25472 25473 25474 25475 25476 class OrgDisableTwoFactorRequirementAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgDisableTwoFactorRequirementAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnableOauthAppRestrictionsAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25479 25480 25481 25482 25483 25484 25485 25486 25487 class OrgEnableOauthAppRestrictionsAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgEnableOauthAppRestrictionsAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnableSamlAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25490 25491 25492 25493 25494 25495 25496 25497 25498 25499 25500 25501 25502 25503 25504 25505 25506 25507 class OrgEnableSamlAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"digest_method_url\" , \"issuer_url\" , \"signature_method_url\" , \"single_sign_on_url\" , ) digest_method_url = sgqlc . types . Field ( URI , graphql_name = \"digestMethodUrl\" ) issuer_url = sgqlc . types . Field ( URI , graphql_name = \"issuerUrl\" ) signature_method_url = sgqlc . types . Field ( URI , graphql_name = \"signatureMethodUrl\" ) single_sign_on_url = sgqlc . types . Field ( URI , graphql_name = \"singleSignOnUrl\" )","title":"OrgEnableSamlAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnableTwoFactorRequirementAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25510 25511 25512 25513 25514 25515 25516 25517 25518 class OrgEnableTwoFactorRequirementAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgEnableTwoFactorRequirementAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnterpriseOwnerOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 class OrgEnterpriseOwnerOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( OrgEnterpriseOwnerOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"OrgEnterpriseOwnerOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgEnterpriseOwnerOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 888 889 890 891 892 893 894 class OrgEnterpriseOwnerOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LOGIN\" ,)","title":"OrgEnterpriseOwnerOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgInviteMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25521 25522 25523 25524 25525 25526 25527 25528 25529 25530 25531 25532 25533 class OrgInviteMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"email\" , \"organization_invitation\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) organization_invitation = sgqlc . types . Field ( \"OrganizationInvitation\" , graphql_name = \"organizationInvitation\" )","title":"OrgInviteMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgInviteToBusinessAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25536 25537 25538 25539 25540 25541 25542 25543 25544 25545 25546 25547 25548 class OrgInviteToBusinessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgInviteToBusinessAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgOauthAppAccessApprovedAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25551 25552 25553 25554 25555 25556 25557 25558 25559 25560 25561 25562 25563 class OrgOauthAppAccessApprovedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgOauthAppAccessApprovedAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgOauthAppAccessDeniedAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25566 25567 25568 25569 25570 25571 25572 25573 25574 25575 25576 25577 25578 class OrgOauthAppAccessDeniedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgOauthAppAccessDeniedAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgOauthAppAccessRequestedAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25581 25582 25583 25584 25585 25586 25587 25588 25589 25590 25591 25592 25593 class OrgOauthAppAccessRequestedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OauthApplicationAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgOauthAppAccessRequestedAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveBillingManagerAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25596 25597 25598 25599 25600 25601 25602 25603 25604 25605 25606 25607 class OrgRemoveBillingManagerAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"reason\" ,) reason = sgqlc . types . Field ( OrgRemoveBillingManagerAuditEntryReason , graphql_name = \"reason\" )","title":"OrgRemoveBillingManagerAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveBillingManagerAuditEntryReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 897 898 899 900 901 902 903 904 905 906 907 class OrgRemoveBillingManagerAuditEntryReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SAML_EXTERNAL_IDENTITY_MISSING\" , \"SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY\" , \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\" , )","title":"OrgRemoveBillingManagerAuditEntryReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25610 25611 25612 25613 25614 25615 25616 25617 25618 25619 25620 25621 25622 25623 25624 25625 class OrgRemoveMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"membership_types\" , \"reason\" ) membership_types = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( OrgRemoveMemberAuditEntryMembershipType ) ), graphql_name = \"membershipTypes\" , ) reason = sgqlc . types . Field ( OrgRemoveMemberAuditEntryReason , graphql_name = \"reason\" )","title":"OrgRemoveMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveMemberAuditEntryMembershipType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 910 911 912 913 914 915 916 917 918 919 920 921 922 923 class OrgRemoveMemberAuditEntryMembershipType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"BILLING_MANAGER\" , \"DIRECT_MEMBER\" , \"OUTSIDE_COLLABORATOR\" , \"SUSPENDED\" , \"UNAFFILIATED\" , )","title":"OrgRemoveMemberAuditEntryMembershipType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveMemberAuditEntryReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 926 927 928 929 930 931 932 933 934 935 936 937 938 class OrgRemoveMemberAuditEntryReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SAML_EXTERNAL_IDENTITY_MISSING\" , \"SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY\" , \"TWO_FACTOR_ACCOUNT_RECOVERY\" , \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\" , \"USER_ACCOUNT_DELETED\" , )","title":"OrgRemoveMemberAuditEntryReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveOutsideCollaboratorAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25628 25629 25630 25631 25632 25633 25634 25635 25636 25637 25638 25639 25640 25641 25642 25643 25644 25645 class OrgRemoveOutsideCollaboratorAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"membership_types\" , \"reason\" ) membership_types = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( OrgRemoveOutsideCollaboratorAuditEntryMembershipType ) ), graphql_name = \"membershipTypes\" , ) reason = sgqlc . types . Field ( OrgRemoveOutsideCollaboratorAuditEntryReason , graphql_name = \"reason\" )","title":"OrgRemoveOutsideCollaboratorAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveOutsideCollaboratorAuditEntryMembershipType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 941 942 943 944 945 946 947 class OrgRemoveOutsideCollaboratorAuditEntryMembershipType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BILLING_MANAGER\" , \"OUTSIDE_COLLABORATOR\" , \"UNAFFILIATED\" )","title":"OrgRemoveOutsideCollaboratorAuditEntryMembershipType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRemoveOutsideCollaboratorAuditEntryReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 950 951 952 953 954 955 956 957 958 959 class OrgRemoveOutsideCollaboratorAuditEntryReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SAML_EXTERNAL_IDENTITY_MISSING\" , \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\" , )","title":"OrgRemoveOutsideCollaboratorAuditEntryReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25648 25649 25650 25651 25652 25653 25654 25655 25656 25657 25658 25659 25660 25661 25662 25663 25664 25665 25666 25667 25668 25669 25670 25671 25672 25673 25674 25675 25676 25677 25678 25679 25680 25681 25682 25683 25684 25685 25686 25687 25688 class OrgRestoreMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"restored_custom_email_routings_count\" , \"restored_issue_assignments_count\" , \"restored_memberships\" , \"restored_memberships_count\" , \"restored_repositories_count\" , \"restored_repository_stars_count\" , \"restored_repository_watches_count\" , ) restored_custom_email_routings_count = sgqlc . types . Field ( Int , graphql_name = \"restoredCustomEmailRoutingsCount\" ) restored_issue_assignments_count = sgqlc . types . Field ( Int , graphql_name = \"restoredIssueAssignmentsCount\" ) restored_memberships = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"OrgRestoreMemberAuditEntryMembership\" ) ), graphql_name = \"restoredMemberships\" , ) restored_memberships_count = sgqlc . types . Field ( Int , graphql_name = \"restoredMembershipsCount\" ) restored_repositories_count = sgqlc . types . Field ( Int , graphql_name = \"restoredRepositoriesCount\" ) restored_repository_stars_count = sgqlc . types . Field ( Int , graphql_name = \"restoredRepositoryStarsCount\" ) restored_repository_watches_count = sgqlc . types . Field ( Int , graphql_name = \"restoredRepositoryWatchesCount\" )","title":"OrgRestoreMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberAuditEntryMembership","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32545 32546 32547 32548 32549 32550 32551 32552 32553 32554 32555 class OrgRestoreMemberAuditEntryMembership ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( OrgRestoreMemberMembershipOrganizationAuditEntryData , OrgRestoreMemberMembershipRepositoryAuditEntryData , OrgRestoreMemberMembershipTeamAuditEntryData , )","title":"OrgRestoreMemberAuditEntryMembership"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberMembershipOrganizationAuditEntryData","text":"Bases: sgqlc . types . Type , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25691 25692 25693 25694 25695 25696 25697 25698 25699 class OrgRestoreMemberMembershipOrganizationAuditEntryData ( sgqlc . types . Type , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgRestoreMemberMembershipOrganizationAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberMembershipRepositoryAuditEntryData","text":"Bases: sgqlc . types . Type , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25702 25703 25704 25705 25706 25707 25708 25709 25710 class OrgRestoreMemberMembershipRepositoryAuditEntryData ( sgqlc . types . Type , RepositoryAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgRestoreMemberMembershipRepositoryAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgRestoreMemberMembershipTeamAuditEntryData","text":"Bases: sgqlc . types . Type , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25713 25714 25715 25716 25717 25718 25719 25720 25721 class OrgRestoreMemberMembershipTeamAuditEntryData ( sgqlc . types . Type , TeamAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"OrgRestoreMemberMembershipTeamAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUnblockUserAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25724 25725 25726 25727 25728 25729 25730 25731 25732 25733 25734 25735 25736 25737 25738 25739 25740 25741 25742 25743 class OrgUnblockUserAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"blocked_user\" , \"blocked_user_name\" , \"blocked_user_resource_path\" , \"blocked_user_url\" , ) blocked_user = sgqlc . types . Field ( \"User\" , graphql_name = \"blockedUser\" ) blocked_user_name = sgqlc . types . Field ( String , graphql_name = \"blockedUserName\" ) blocked_user_resource_path = sgqlc . types . Field ( URI , graphql_name = \"blockedUserResourcePath\" ) blocked_user_url = sgqlc . types . Field ( URI , graphql_name = \"blockedUserUrl\" )","title":"OrgUnblockUserAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateDefaultRepositoryPermissionAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25746 25747 25748 25749 25750 25751 25752 25753 25754 25755 25756 25757 25758 25759 25760 25761 25762 class OrgUpdateDefaultRepositoryPermissionAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"permission\" , \"permission_was\" ) permission = sgqlc . types . Field ( OrgUpdateDefaultRepositoryPermissionAuditEntryPermission , graphql_name = \"permission\" , ) permission_was = sgqlc . types . Field ( OrgUpdateDefaultRepositoryPermissionAuditEntryPermission , graphql_name = \"permissionWas\" , )","title":"OrgUpdateDefaultRepositoryPermissionAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateDefaultRepositoryPermissionAuditEntryPermission","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 962 963 964 965 966 967 968 class OrgUpdateDefaultRepositoryPermissionAuditEntryPermission ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"NONE\" , \"READ\" , \"WRITE\" )","title":"OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25765 25766 25767 25768 25769 25770 25771 25772 25773 25774 25775 25776 25777 25778 25779 class OrgUpdateMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"permission\" , \"permission_was\" ) permission = sgqlc . types . Field ( OrgUpdateMemberAuditEntryPermission , graphql_name = \"permission\" ) permission_was = sgqlc . types . Field ( OrgUpdateMemberAuditEntryPermission , graphql_name = \"permissionWas\" )","title":"OrgUpdateMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberAuditEntryPermission","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 971 972 973 974 975 976 977 class OrgUpdateMemberAuditEntryPermission ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"READ\" )","title":"OrgUpdateMemberAuditEntryPermission"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberRepositoryCreationPermissionAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25782 25783 25784 25785 25786 25787 25788 25789 25790 25791 25792 25793 25794 25795 25796 25797 class OrgUpdateMemberRepositoryCreationPermissionAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"can_create_repositories\" , \"visibility\" ) can_create_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"canCreateRepositories\" ) visibility = sgqlc . types . Field ( OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility , graphql_name = \"visibility\" , )","title":"OrgUpdateMemberRepositoryCreationPermissionAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 class OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"INTERNAL\" , \"NONE\" , \"PRIVATE\" , \"PRIVATE_INTERNAL\" , \"PUBLIC\" , \"PUBLIC_INTERNAL\" , \"PUBLIC_PRIVATE\" , )","title":"OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrgUpdateMemberRepositoryInvitationPermissionAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25800 25801 25802 25803 25804 25805 25806 25807 25808 25809 25810 25811 class OrgUpdateMemberRepositoryInvitationPermissionAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"can_invite_outside_collaborators_to_repositories\" ,) can_invite_outside_collaborators_to_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"canInviteOutsideCollaboratorsToRepositories\" )","title":"OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Organization","text":"Bases: sgqlc . types . Type , Node , Actor , PackageOwner , ProjectOwner , ProjectNextOwner , ProjectV2Owner , ProjectV2Recent , RepositoryDiscussionAuthor , RepositoryDiscussionCommentAuthor , RepositoryOwner , UniformResourceLocatable , MemberStatusable , ProfileOwner , Sponsorable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 25814 25815 25816 25817 25818 25819 25820 25821 25822 25823 25824 25825 25826 25827 25828 25829 25830 25831 25832 25833 25834 25835 25836 25837 25838 25839 25840 25841 25842 25843 25844 25845 25846 25847 25848 25849 25850 25851 25852 25853 25854 25855 25856 25857 25858 25859 25860 25861 25862 25863 25864 25865 25866 25867 25868 25869 25870 25871 25872 25873 25874 25875 25876 25877 25878 25879 25880 25881 25882 25883 25884 25885 25886 25887 25888 25889 25890 25891 25892 25893 25894 25895 25896 25897 25898 25899 25900 25901 25902 25903 25904 25905 25906 25907 25908 25909 25910 25911 25912 25913 25914 25915 25916 25917 25918 25919 25920 25921 25922 25923 25924 25925 25926 25927 25928 25929 25930 25931 25932 25933 25934 25935 25936 25937 25938 25939 25940 25941 25942 25943 25944 25945 25946 25947 25948 25949 25950 25951 25952 25953 25954 25955 25956 25957 25958 25959 25960 25961 25962 25963 25964 25965 25966 25967 25968 25969 25970 25971 25972 25973 25974 25975 25976 25977 25978 25979 25980 25981 25982 25983 25984 25985 25986 25987 25988 25989 25990 25991 25992 25993 25994 25995 25996 25997 25998 25999 26000 26001 26002 26003 26004 26005 26006 26007 26008 26009 26010 26011 26012 26013 26014 26015 26016 26017 26018 26019 26020 26021 26022 26023 26024 26025 26026 26027 26028 26029 26030 26031 26032 26033 26034 26035 26036 26037 26038 26039 26040 26041 26042 26043 26044 26045 26046 26047 26048 26049 26050 26051 26052 26053 26054 26055 26056 26057 26058 26059 26060 26061 26062 26063 26064 26065 26066 26067 26068 26069 26070 26071 26072 26073 26074 26075 26076 26077 26078 26079 26080 26081 26082 26083 26084 26085 26086 26087 26088 26089 26090 26091 26092 26093 26094 26095 26096 26097 26098 26099 26100 26101 26102 26103 26104 26105 26106 26107 26108 26109 26110 26111 26112 26113 26114 26115 26116 26117 26118 26119 26120 26121 26122 26123 26124 26125 26126 26127 26128 26129 26130 26131 26132 26133 26134 26135 26136 26137 26138 26139 26140 26141 26142 26143 26144 26145 26146 26147 26148 26149 26150 26151 26152 26153 26154 26155 26156 26157 26158 26159 26160 26161 26162 26163 26164 26165 26166 26167 26168 26169 class Organization ( sgqlc . types . Type , Node , Actor , PackageOwner , ProjectOwner , ProjectNextOwner , ProjectV2Owner , ProjectV2Recent , RepositoryDiscussionAuthor , RepositoryDiscussionCommentAuthor , RepositoryOwner , UniformResourceLocatable , MemberStatusable , ProfileOwner , Sponsorable , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"audit_log\" , \"created_at\" , \"database_id\" , \"description\" , \"description_html\" , \"domains\" , \"enterprise_owners\" , \"interaction_ability\" , \"ip_allow_list_enabled_setting\" , \"ip_allow_list_entries\" , \"ip_allow_list_for_installed_apps_enabled_setting\" , \"is_verified\" , \"members_can_fork_private_repositories\" , \"members_with_role\" , \"new_team_resource_path\" , \"new_team_url\" , \"notification_delivery_restriction_enabled_setting\" , \"organization_billing_email\" , \"pending_members\" , \"repository_migrations\" , \"requires_two_factor_authentication\" , \"saml_identity_provider\" , \"team\" , \"teams\" , \"teams_resource_path\" , \"teams_url\" , \"twitter_username\" , \"updated_at\" , \"viewer_can_administer\" , \"viewer_can_create_repositories\" , \"viewer_can_create_teams\" , \"viewer_is_amember\" , \"viewer_is_following\" , \"web_commit_signoff_required\" , ) audit_log = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationAuditEntryConnection ), graphql_name = \"auditLog\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( AuditLogOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) description_html = sgqlc . types . Field ( String , graphql_name = \"descriptionHTML\" ) domains = sgqlc . types . Field ( VerifiableDomainConnection , graphql_name = \"domains\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"is_verified\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isVerified\" , default = None ), ), ( \"is_approved\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isApproved\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( VerifiableDomainOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"DOMAIN\" , \"direction\" : \"ASC\" }, ), ), ) ), ) enterprise_owners = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationEnterpriseOwnerConnection ), graphql_name = \"enterpriseOwners\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"organization_role\" , sgqlc . types . Arg ( RoleInOrganization , graphql_name = \"organizationRole\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( OrgEnterpriseOwnerOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) interaction_ability = sgqlc . types . Field ( RepositoryInteractionAbility , graphql_name = \"interactionAbility\" ) ip_allow_list_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEnabledSettingValue ), graphql_name = \"ipAllowListEnabledSetting\" , ) ip_allow_list_entries = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEntryConnection ), graphql_name = \"ipAllowListEntries\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( IpAllowListEntryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"ALLOW_LIST_VALUE\" , \"direction\" : \"ASC\" }, ), ), ) ), ) ip_allow_list_for_installed_apps_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListForInstalledAppsEnabledSettingValue ), graphql_name = \"ipAllowListForInstalledAppsEnabledSetting\" , ) is_verified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerified\" ) members_can_fork_private_repositories = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"membersCanForkPrivateRepositories\" ) members_with_role = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationMemberConnection ), graphql_name = \"membersWithRole\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) new_team_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"newTeamResourcePath\" ) new_team_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"newTeamUrl\" ) notification_delivery_restriction_enabled_setting = sgqlc . types . Field ( sgqlc . types . non_null ( NotificationRestrictionSettingValue ), graphql_name = \"notificationDeliveryRestrictionEnabledSetting\" , ) organization_billing_email = sgqlc . types . Field ( String , graphql_name = \"organizationBillingEmail\" ) pending_members = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"pendingMembers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repository_migrations = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryMigrationConnection ), graphql_name = \"repositoryMigrations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"state\" , sgqlc . types . Arg ( MigrationState , graphql_name = \"state\" , default = None ), ), ( \"repository_name\" , sgqlc . types . Arg ( String , graphql_name = \"repositoryName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryMigrationOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ) ), ) requires_two_factor_authentication = sgqlc . types . Field ( Boolean , graphql_name = \"requiresTwoFactorAuthentication\" ) saml_identity_provider = sgqlc . types . Field ( \"OrganizationIdentityProvider\" , graphql_name = \"samlIdentityProvider\" ) team = sgqlc . types . Field ( \"Team\" , graphql_name = \"team\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ) ), ) teams = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"teams\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( TeamPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"role\" , sgqlc . types . Arg ( TeamRole , graphql_name = \"role\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"user_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"userLogins\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( TeamOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"ldap_mapped\" , sgqlc . types . Arg ( Boolean , graphql_name = \"ldapMapped\" , default = None ), ), ( \"root_teams_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"rootTeamsOnly\" , default = False ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) teams_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsResourcePath\" ) teams_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsUrl\" ) twitter_username = sgqlc . types . Field ( String , graphql_name = \"twitterUsername\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) viewer_can_administer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanAdminister\" ) viewer_can_create_repositories = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanCreateRepositories\" ) viewer_can_create_teams = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanCreateTeams\" ) viewer_is_amember = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsAMember\" ) viewer_is_following = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsFollowing\" ) web_commit_signoff_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"webCommitSignoffRequired\" )","title":"Organization"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationAuditEntry","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32558 32559 32560 32561 32562 32563 32564 32565 32566 32567 32568 32569 32570 32571 32572 32573 32574 32575 32576 32577 32578 32579 32580 32581 32582 32583 32584 32585 32586 32587 32588 32589 32590 32591 32592 32593 32594 32595 32596 32597 32598 32599 32600 32601 32602 32603 32604 32605 32606 32607 32608 32609 32610 32611 32612 32613 32614 32615 32616 32617 32618 32619 32620 32621 32622 32623 class OrganizationAuditEntry ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( MembersCanDeleteReposClearAuditEntry , MembersCanDeleteReposDisableAuditEntry , MembersCanDeleteReposEnableAuditEntry , OauthApplicationCreateAuditEntry , OrgAddBillingManagerAuditEntry , OrgAddMemberAuditEntry , OrgBlockUserAuditEntry , OrgConfigDisableCollaboratorsOnlyAuditEntry , OrgConfigEnableCollaboratorsOnlyAuditEntry , OrgCreateAuditEntry , OrgDisableOauthAppRestrictionsAuditEntry , OrgDisableSamlAuditEntry , OrgDisableTwoFactorRequirementAuditEntry , OrgEnableOauthAppRestrictionsAuditEntry , OrgEnableSamlAuditEntry , OrgEnableTwoFactorRequirementAuditEntry , OrgInviteMemberAuditEntry , OrgInviteToBusinessAuditEntry , OrgOauthAppAccessApprovedAuditEntry , OrgOauthAppAccessDeniedAuditEntry , OrgOauthAppAccessRequestedAuditEntry , OrgRemoveBillingManagerAuditEntry , OrgRemoveMemberAuditEntry , OrgRemoveOutsideCollaboratorAuditEntry , OrgRestoreMemberAuditEntry , OrgUnblockUserAuditEntry , OrgUpdateDefaultRepositoryPermissionAuditEntry , OrgUpdateMemberAuditEntry , OrgUpdateMemberRepositoryCreationPermissionAuditEntry , OrgUpdateMemberRepositoryInvitationPermissionAuditEntry , PrivateRepositoryForkingDisableAuditEntry , PrivateRepositoryForkingEnableAuditEntry , RepoAccessAuditEntry , RepoAddMemberAuditEntry , RepoAddTopicAuditEntry , RepoArchivedAuditEntry , RepoChangeMergeSettingAuditEntry , RepoConfigDisableAnonymousGitAccessAuditEntry , RepoConfigDisableCollaboratorsOnlyAuditEntry , RepoConfigDisableContributorsOnlyAuditEntry , RepoConfigDisableSockpuppetDisallowedAuditEntry , RepoConfigEnableAnonymousGitAccessAuditEntry , RepoConfigEnableCollaboratorsOnlyAuditEntry , RepoConfigEnableContributorsOnlyAuditEntry , RepoConfigEnableSockpuppetDisallowedAuditEntry , RepoConfigLockAnonymousGitAccessAuditEntry , RepoConfigUnlockAnonymousGitAccessAuditEntry , RepoCreateAuditEntry , RepoDestroyAuditEntry , RepoRemoveMemberAuditEntry , RepoRemoveTopicAuditEntry , RepositoryVisibilityChangeDisableAuditEntry , RepositoryVisibilityChangeEnableAuditEntry , TeamAddMemberAuditEntry , TeamAddRepositoryAuditEntry , TeamChangeParentTeamAuditEntry , TeamRemoveMemberAuditEntry , TeamRemoveRepositoryAuditEntry , )","title":"OrganizationAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationAuditEntryConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15292 15293 15294 15295 15296 15297 15298 15299 15300 15301 15302 15303 15304 15305 15306 15307 15308 15309 15310 class OrganizationAuditEntryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationAuditEntryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationAuditEntry\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"OrganizationAuditEntryConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationAuditEntryData","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15313 15314 15315 15316 15317 15318 15319 15320 15321 15322 15323 15324 15325 15326 15327 15328 15329 15330 class OrganizationAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization\" , \"organization_name\" , \"organization_resource_path\" , \"organization_url\" , ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) organization_name = sgqlc . types . Field ( String , graphql_name = \"organizationName\" ) organization_resource_path = sgqlc . types . Field ( URI , graphql_name = \"organizationResourcePath\" ) organization_url = sgqlc . types . Field ( URI , graphql_name = \"organizationUrl\" )","title":"OrganizationAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationAuditEntryEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15333 15334 15335 15336 15337 15338 15339 15340 15341 class OrganizationAuditEntryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"OrganizationAuditEntry\" , graphql_name = \"node\" )","title":"OrganizationAuditEntryEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15344 15345 15346 15347 15348 15349 15350 15351 15352 15353 15354 15355 15356 15357 15358 15359 15360 class OrganizationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Organization\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"OrganizationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15363 15364 15365 15366 15367 15368 15369 15370 15371 class OrganizationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Organization\" , graphql_name = \"node\" )","title":"OrganizationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationEnterpriseOwnerConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15374 15375 15376 15377 15378 15379 15380 15381 15382 15383 15384 15385 15386 15387 15388 15389 15390 class OrganizationEnterpriseOwnerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationEnterpriseOwnerEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"OrganizationEnterpriseOwnerConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationEnterpriseOwnerEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15393 15394 15395 15396 15397 15398 15399 15400 15401 15402 15403 15404 class OrganizationEnterpriseOwnerEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"organization_role\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) organization_role = sgqlc . types . Field ( sgqlc . types . non_null ( RoleInOrganization ), graphql_name = \"organizationRole\" )","title":"OrganizationEnterpriseOwnerEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationIdentityProvider","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26172 26173 26174 26175 26176 26177 26178 26179 26180 26181 26182 26183 26184 26185 26186 26187 26188 26189 26190 26191 26192 26193 26194 26195 26196 26197 26198 26199 26200 26201 26202 26203 26204 26205 26206 26207 26208 26209 26210 26211 26212 26213 26214 26215 26216 class OrganizationIdentityProvider ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"digest_method\" , \"external_identities\" , \"idp_certificate\" , \"issuer\" , \"organization\" , \"signature_method\" , \"sso_url\" , ) digest_method = sgqlc . types . Field ( URI , graphql_name = \"digestMethod\" ) external_identities = sgqlc . types . Field ( sgqlc . types . non_null ( ExternalIdentityConnection ), graphql_name = \"externalIdentities\" , args = sgqlc . types . ArgDict ( ( ( \"members_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"membersOnly\" , default = None ), ), ( \"login\" , sgqlc . types . Arg ( String , graphql_name = \"login\" , default = None )), ( \"user_name\" , sgqlc . types . Arg ( String , graphql_name = \"userName\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) idp_certificate = sgqlc . types . Field ( X509Certificate , graphql_name = \"idpCertificate\" ) issuer = sgqlc . types . Field ( String , graphql_name = \"issuer\" ) organization = sgqlc . types . Field ( Organization , graphql_name = \"organization\" ) signature_method = sgqlc . types . Field ( URI , graphql_name = \"signatureMethod\" ) sso_url = sgqlc . types . Field ( URI , graphql_name = \"ssoUrl\" )","title":"OrganizationIdentityProvider"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitation","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26219 26220 26221 26222 26223 26224 26225 26226 26227 26228 26229 26230 26231 26232 26233 26234 26235 26236 26237 26238 26239 26240 26241 26242 26243 26244 26245 26246 26247 26248 class OrganizationInvitation ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"email\" , \"invitation_type\" , \"invitee\" , \"inviter\" , \"organization\" , \"role\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) invitation_type = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationInvitationType ), graphql_name = \"invitationType\" ) invitee = sgqlc . types . Field ( \"User\" , graphql_name = \"invitee\" ) inviter = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"inviter\" ) organization = sgqlc . types . Field ( sgqlc . types . non_null ( Organization ), graphql_name = \"organization\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationInvitationRole ), graphql_name = \"role\" )","title":"OrganizationInvitation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15407 15408 15409 15410 15411 15412 15413 15414 15415 15416 15417 15418 15419 15420 15421 15422 15423 15424 15425 class OrganizationInvitationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationInvitationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationInvitation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"OrganizationInvitationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15428 15429 15430 15431 15432 15433 15434 15435 15436 class OrganizationInvitationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"OrganizationInvitation\" , graphql_name = \"node\" )","title":"OrganizationInvitationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitationRole","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 998 999 1000 1001 1002 1003 1004 class OrganizationInvitationRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"BILLING_MANAGER\" , \"DIRECT_MEMBER\" , \"REINSTATE\" )","title":"OrganizationInvitationRole"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationInvitationType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1007 1008 1009 1010 1011 1012 1013 class OrganizationInvitationType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"EMAIL\" , \"USER\" )","title":"OrganizationInvitationType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationMemberConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15439 15440 15441 15442 15443 15444 15445 15446 15447 15448 15449 15450 15451 15452 15453 15454 15455 class OrganizationMemberConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"OrganizationMemberEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"OrganizationMemberConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationMemberEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15458 15459 15460 15461 15462 15463 15464 15465 15466 15467 15468 15469 15470 class OrganizationMemberEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"has_two_factor_enabled\" , \"node\" , \"role\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) has_two_factor_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasTwoFactorEnabled\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" ) role = sgqlc . types . Field ( OrganizationMemberRole , graphql_name = \"role\" )","title":"OrganizationMemberEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationMemberRole","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1016 1017 1018 1019 1020 1021 1022 class OrganizationMemberRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"MEMBER\" )","title":"OrganizationMemberRole"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationMembersCanCreateRepositoriesSettingValue","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1025 1026 1027 1028 1029 1030 1031 class OrganizationMembersCanCreateRepositoriesSettingValue ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"DISABLED\" , \"INTERNAL\" , \"PRIVATE\" )","title":"OrganizationMembersCanCreateRepositoriesSettingValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationOrUser","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32626 32627 32628 32629 32630 32631 32632 class OrganizationOrUser ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Organization , User )","title":"OrganizationOrUser"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 class OrganizationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"OrganizationOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1034 1035 1036 1037 1038 1039 1040 class OrganizationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"LOGIN\" )","title":"OrganizationOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationTeamsHovercardContext","text":"Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26251 26252 26253 26254 26255 26256 26257 26258 26259 26260 26261 26262 26263 26264 26265 26266 26267 26268 26269 26270 26271 26272 26273 26274 26275 26276 26277 26278 26279 26280 26281 26282 26283 26284 class OrganizationTeamsHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"relevant_teams\" , \"teams_resource_path\" , \"teams_url\" , \"total_team_count\" , ) relevant_teams = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"relevantTeams\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) teams_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsResourcePath\" ) teams_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsUrl\" ) total_team_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalTeamCount\" )","title":"OrganizationTeamsHovercardContext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.OrganizationsHovercardContext","text":"Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26287 26288 26289 26290 26291 26292 26293 26294 26295 26296 26297 26298 26299 26300 26301 26302 26303 26304 26305 26306 26307 26308 26309 26310 26311 class OrganizationsHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"relevant_organizations\" , \"total_organization_count\" ) relevant_organizations = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationConnection ), graphql_name = \"relevantOrganizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) total_organization_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalOrganizationCount\" )","title":"OrganizationsHovercardContext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Package","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26314 26315 26316 26317 26318 26319 26320 26321 26322 26323 26324 26325 26326 26327 26328 26329 26330 26331 26332 26333 26334 26335 26336 26337 26338 26339 26340 26341 26342 26343 26344 26345 26346 26347 26348 26349 26350 26351 26352 26353 26354 26355 26356 26357 26358 26359 26360 26361 26362 26363 26364 26365 26366 26367 26368 26369 26370 26371 26372 26373 26374 class Package ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"latest_version\" , \"name\" , \"package_type\" , \"repository\" , \"statistics\" , \"version\" , \"versions\" , ) latest_version = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"latestVersion\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) package_type = sgqlc . types . Field ( sgqlc . types . non_null ( PackageType ), graphql_name = \"packageType\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) statistics = sgqlc . types . Field ( PackageStatistics , graphql_name = \"statistics\" ) version = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"version\" , args = sgqlc . types . ArgDict ( ( ( \"version\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"version\" , default = None , ), ), ) ), ) versions = sgqlc . types . Field ( sgqlc . types . non_null ( PackageVersionConnection ), graphql_name = \"versions\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( PackageVersionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"Package"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15473 15474 15475 15476 15477 15478 15479 15480 15481 15482 15483 15484 15485 15486 15487 class PackageConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Package\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PackageConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15490 15491 15492 15493 15494 15495 15496 15497 15498 class PackageEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Package\" , graphql_name = \"node\" )","title":"PackageEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFile","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26377 26378 26379 26380 26381 26382 26383 26384 26385 26386 26387 26388 26389 26390 26391 26392 26393 26394 26395 26396 26397 26398 26399 26400 26401 26402 class PackageFile ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"md5\" , \"name\" , \"package_version\" , \"sha1\" , \"sha256\" , \"size\" , \"updated_at\" , \"url\" , ) md5 = sgqlc . types . Field ( String , graphql_name = \"md5\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) package_version = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"packageVersion\" ) sha1 = sgqlc . types . Field ( String , graphql_name = \"sha1\" ) sha256 = sgqlc . types . Field ( String , graphql_name = \"sha256\" ) size = sgqlc . types . Field ( Int , graphql_name = \"size\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( URI , graphql_name = \"url\" )","title":"PackageFile"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFileConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15501 15502 15503 15504 15505 15506 15507 15508 15509 15510 15511 15512 15513 15514 15515 15516 15517 class PackageFileConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageFileEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageFile\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PackageFileConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFileEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15520 15521 15522 15523 15524 15525 15526 15527 15528 class PackageFileEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PackageFile\" , graphql_name = \"node\" )","title":"PackageFileEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFileOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4430 4431 4432 4433 4434 4435 4436 4437 4438 class PackageFileOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( PackageFileOrderField , graphql_name = \"field\" ) direction = sgqlc . types . Field ( OrderDirection , graphql_name = \"direction\" )","title":"PackageFileOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageFileOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1043 1044 1045 1046 1047 1048 1049 class PackageFileOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"PackageFileOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4441 4442 4443 4444 4445 4446 4447 4448 4449 class PackageOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( PackageOrderField , graphql_name = \"field\" ) direction = sgqlc . types . Field ( OrderDirection , graphql_name = \"direction\" )","title":"PackageOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1052 1053 1054 1055 1056 1057 1058 class PackageOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"PackageOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageOwner","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15531 15532 15533 15534 15535 15536 15537 15538 15539 15540 15541 15542 15543 15544 15545 15546 15547 15548 15549 15550 15551 15552 15553 15554 15555 15556 15557 15558 15559 15560 15561 15562 15563 15564 15565 15566 15567 15568 15569 15570 15571 15572 15573 15574 15575 15576 15577 class PackageOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"packages\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) packages = sgqlc . types . Field ( sgqlc . types . non_null ( PackageConnection ), graphql_name = \"packages\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"names\" , sgqlc . types . Arg ( sgqlc . types . list_of ( String ), graphql_name = \"names\" , default = None ), ), ( \"repository_id\" , sgqlc . types . Arg ( ID , graphql_name = \"repositoryId\" , default = None ), ), ( \"package_type\" , sgqlc . types . Arg ( PackageType , graphql_name = \"packageType\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( PackageOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), )","title":"PackageOwner"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageStatistics","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15580 15581 15582 15583 15584 15585 15586 15587 15588 15589 class PackageStatistics ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"downloads_total_count\" ,) downloads_total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"downloadsTotalCount\" )","title":"PackageStatistics"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageTag","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26405 26406 26407 26408 26409 26410 26411 26412 26413 class PackageTag ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"version\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) version = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"version\" )","title":"PackageTag"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1061 1062 1063 1064 1065 1066 1067 class PackageType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DEBIAN\" , \"DOCKER\" , \"MAVEN\" , \"NPM\" , \"NUGET\" , \"PYPI\" , \"RUBYGEMS\" )","title":"PackageType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersion","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26416 26417 26418 26419 26420 26421 26422 26423 26424 26425 26426 26427 26428 26429 26430 26431 26432 26433 26434 26435 26436 26437 26438 26439 26440 26441 26442 26443 26444 26445 26446 26447 26448 26449 26450 26451 26452 26453 26454 26455 26456 26457 26458 26459 26460 26461 26462 26463 26464 26465 class PackageVersion ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"files\" , \"package\" , \"platform\" , \"pre_release\" , \"readme\" , \"release\" , \"statistics\" , \"summary\" , \"version\" , ) files = sgqlc . types . Field ( sgqlc . types . non_null ( PackageFileConnection ), graphql_name = \"files\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( PackageFileOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) package = sgqlc . types . Field ( Package , graphql_name = \"package\" ) platform = sgqlc . types . Field ( String , graphql_name = \"platform\" ) pre_release = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"preRelease\" ) readme = sgqlc . types . Field ( String , graphql_name = \"readme\" ) release = sgqlc . types . Field ( \"Release\" , graphql_name = \"release\" ) statistics = sgqlc . types . Field ( PackageVersionStatistics , graphql_name = \"statistics\" ) summary = sgqlc . types . Field ( String , graphql_name = \"summary\" ) version = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"version\" )","title":"PackageVersion"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15592 15593 15594 15595 15596 15597 15598 15599 15600 15601 15602 15603 15604 15605 15606 15607 15608 15609 15610 class PackageVersionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageVersionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PackageVersion\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( \"PageInfo\" ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PackageVersionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15613 15614 15615 15616 15617 15618 15619 15620 15621 class PackageVersionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PackageVersion\" , graphql_name = \"node\" )","title":"PackageVersionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4452 4453 4454 4455 4456 4457 4458 4459 4460 class PackageVersionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( PackageVersionOrderField , graphql_name = \"field\" ) direction = sgqlc . types . Field ( OrderDirection , graphql_name = \"direction\" )","title":"PackageVersionOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1070 1071 1072 1073 1074 1075 1076 class PackageVersionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"PackageVersionOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PackageVersionStatistics","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15624 15625 15626 15627 15628 15629 15630 15631 15632 15633 class PackageVersionStatistics ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"downloads_total_count\" ,) downloads_total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"downloadsTotalCount\" )","title":"PackageVersionStatistics"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PageInfo","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15636 15637 15638 15639 15640 15641 15642 15643 15644 15645 15646 15647 15648 15649 15650 15651 15652 15653 15654 15655 class PageInfo ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"end_cursor\" , \"has_next_page\" , \"has_previous_page\" , \"start_cursor\" , ) end_cursor = sgqlc . types . Field ( String , graphql_name = \"endCursor\" ) has_next_page = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasNextPage\" ) has_previous_page = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasPreviousPage\" ) start_cursor = sgqlc . types . Field ( String , graphql_name = \"startCursor\" )","title":"PageInfo"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PatchStatus","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1079 1080 1081 1082 1083 1084 1085 class PatchStatus ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADDED\" , \"CHANGED\" , \"COPIED\" , \"DELETED\" , \"MODIFIED\" , \"RENAMED\" )","title":"PatchStatus"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PermissionGranter","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32635 32636 32637 32638 32639 32640 32641 class PermissionGranter ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Organization , Repository , Team )","title":"PermissionGranter"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PermissionSource","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15658 15659 15660 15661 15662 15663 15664 15665 15666 15667 15668 15669 15670 15671 15672 15673 15674 class PermissionSource ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization\" , \"permission\" , \"source\" ) organization = sgqlc . types . Field ( sgqlc . types . non_null ( \"Organization\" ), graphql_name = \"organization\" ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( DefaultRepositoryPermissionField ), graphql_name = \"permission\" , ) source = sgqlc . types . Field ( sgqlc . types . non_null ( \"PermissionGranter\" ), graphql_name = \"source\" )","title":"PermissionSource"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4463 4464 4465 4466 4467 4468 4469 4470 4471 class PinIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"PinIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15677 15678 15679 15680 15681 15682 15683 15684 15685 class PinIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" )","title":"PinIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnableItem","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32644 32645 32646 32647 32648 32649 32650 class PinnableItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Gist , Repository )","title":"PinnableItem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnableItemConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15688 15689 15690 15691 15692 15693 15694 15695 15696 15697 15698 15699 15700 15701 15702 15703 15704 class PinnableItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnableItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnableItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PinnableItemConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnableItemEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15707 15708 15709 15710 15711 15712 15713 15714 15715 class PinnableItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PinnableItem\" , graphql_name = \"node\" )","title":"PinnableItemEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnableItemType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 class PinnableItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"GIST\" , \"ISSUE\" , \"ORGANIZATION\" , \"PROJECT\" , \"PULL_REQUEST\" , \"REPOSITORY\" , \"TEAM\" , \"USER\" , )","title":"PinnableItemType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussion","text":"Bases: sgqlc . types . Type , Node , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26468 26469 26470 26471 26472 26473 26474 26475 26476 26477 26478 26479 26480 26481 26482 26483 26484 26485 26486 26487 26488 26489 26490 26491 26492 26493 26494 26495 26496 26497 26498 26499 26500 26501 26502 26503 26504 class PinnedDiscussion ( sgqlc . types . Type , Node , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"discussion\" , \"gradient_stop_colors\" , \"pattern\" , \"pinned_by\" , \"preconfigured_gradient\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) discussion = sgqlc . types . Field ( sgqlc . types . non_null ( Discussion ), graphql_name = \"discussion\" ) gradient_stop_colors = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"gradientStopColors\" , ) pattern = sgqlc . types . Field ( sgqlc . types . non_null ( PinnedDiscussionPattern ), graphql_name = \"pattern\" ) pinned_by = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"pinnedBy\" ) preconfigured_gradient = sgqlc . types . Field ( PinnedDiscussionGradient , graphql_name = \"preconfiguredGradient\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"PinnedDiscussion"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15718 15719 15720 15721 15722 15723 15724 15725 15726 15727 15728 15729 15730 15731 15732 15733 15734 15735 15736 class PinnedDiscussionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnedDiscussionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnedDiscussion\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PinnedDiscussionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15739 15740 15741 15742 15743 15744 15745 15746 15747 class PinnedDiscussionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PinnedDiscussion\" , graphql_name = \"node\" )","title":"PinnedDiscussionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussionGradient","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 class PinnedDiscussionGradient ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BLUE_MINT\" , \"BLUE_PURPLE\" , \"PINK_BLUE\" , \"PURPLE_CORAL\" , \"RED_ORANGE\" , )","title":"PinnedDiscussionGradient"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedDiscussionPattern","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1121 1122 1123 1124 1125 1126 1127 class PinnedDiscussionPattern ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CHEVRON_UP\" , \"DOT\" , \"DOT_FILL\" , \"HEART_FILL\" , \"PLUS\" , \"ZAP\" )","title":"PinnedDiscussionPattern"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26507 26508 26509 26510 26511 26512 26513 26514 26515 26516 26517 26518 class PinnedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"issue\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" )","title":"PinnedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedIssue","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26521 26522 26523 26524 26525 26526 26527 26528 26529 26530 26531 26532 26533 class PinnedIssue ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"issue\" , \"pinned_by\" , \"repository\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" ) pinned_by = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"pinnedBy\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"PinnedIssue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedIssueConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15750 15751 15752 15753 15754 15755 15756 15757 15758 15759 15760 15761 15762 15763 15764 15765 15766 class PinnedIssueConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnedIssueEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PinnedIssue\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PinnedIssueConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PinnedIssueEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15769 15770 15771 15772 15773 15774 15775 15776 15777 class PinnedIssueEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PinnedIssue\" , graphql_name = \"node\" )","title":"PinnedIssueEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PreciseDateTime","text":"Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1130 1131 1132 1133 1134 1135 class PreciseDateTime ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"PreciseDateTime"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PrivateRepositoryForkingDisableAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26536 26537 26538 26539 26540 26541 26542 26543 26544 26545 26546 26547 26548 26549 class PrivateRepositoryForkingDisableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"PrivateRepositoryForkingDisableAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PrivateRepositoryForkingEnableAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26552 26553 26554 26555 26556 26557 26558 26559 26560 26561 26562 26563 26564 26565 class PrivateRepositoryForkingEnableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"PrivateRepositoryForkingEnableAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProfileItemShowcase","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15780 15781 15782 15783 15784 15785 15786 15787 15788 15789 15790 15791 15792 15793 15794 15795 15796 15797 15798 15799 15800 15801 15802 15803 15804 class ProfileItemShowcase ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"has_pinned_items\" , \"items\" ) has_pinned_items = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasPinnedItems\" ) items = sgqlc . types . Field ( sgqlc . types . non_null ( PinnableItemConnection ), graphql_name = \"items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"ProfileItemShowcase"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProfileOwner","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ProfileOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"any_pinnable_items\" , \"email\" , \"id\" , \"item_showcase\" , \"location\" , \"login\" , \"name\" , \"pinnable_items\" , \"pinned_items\" , \"pinned_items_remaining\" , \"viewer_can_change_pinned_items\" , \"website_url\" , ) any_pinnable_items = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"anyPinnableItems\" , args = sgqlc . types . ArgDict ( ( ( \"type\" , sgqlc . types . Arg ( PinnableItemType , graphql_name = \"type\" , default = None ), ), ) ), ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) item_showcase = sgqlc . types . Field ( sgqlc . types . non_null ( ProfileItemShowcase ), graphql_name = \"itemShowcase\" ) location = sgqlc . types . Field ( String , graphql_name = \"location\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) pinnable_items = sgqlc . types . Field ( sgqlc . types . non_null ( PinnableItemConnection ), graphql_name = \"pinnableItems\" , args = sgqlc . types . ArgDict ( ( ( \"types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PinnableItemType )), graphql_name = \"types\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pinned_items = sgqlc . types . Field ( sgqlc . types . non_null ( PinnableItemConnection ), graphql_name = \"pinnedItems\" , args = sgqlc . types . ArgDict ( ( ( \"types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PinnableItemType )), graphql_name = \"types\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pinned_items_remaining = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"pinnedItemsRemaining\" ) viewer_can_change_pinned_items = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanChangePinnedItems\" ) website_url = sgqlc . types . Field ( URI , graphql_name = \"websiteUrl\" )","title":"ProfileOwner"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Project","text":"Bases: sgqlc . types . Type , Node , Closable , Updatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26568 26569 26570 26571 26572 26573 26574 26575 26576 26577 26578 26579 26580 26581 26582 26583 26584 26585 26586 26587 26588 26589 26590 26591 26592 26593 26594 26595 26596 26597 26598 26599 26600 26601 26602 26603 26604 26605 26606 26607 26608 26609 26610 26611 26612 26613 26614 26615 26616 26617 26618 26619 26620 26621 26622 26623 26624 26625 26626 26627 26628 26629 26630 26631 26632 26633 26634 26635 26636 26637 26638 26639 26640 26641 26642 26643 26644 26645 26646 26647 26648 26649 class Project ( sgqlc . types . Type , Node , Closable , Updatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"body_html\" , \"columns\" , \"created_at\" , \"creator\" , \"database_id\" , \"name\" , \"number\" , \"owner\" , \"pending_cards\" , \"progress\" , \"resource_path\" , \"state\" , \"updated_at\" , \"url\" , ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bodyHTML\" ) columns = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectColumnConnection ), graphql_name = \"columns\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectOwner ), graphql_name = \"owner\" ) pending_cards = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectCardConnection ), graphql_name = \"pendingCards\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"archived_states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( ProjectCardArchivedState ), graphql_name = \"archivedStates\" , default = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ), ), ), ) ), ) progress = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectProgress ), graphql_name = \"progress\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectState ), graphql_name = \"state\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"Project"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCard","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26652 26653 26654 26655 26656 26657 26658 26659 26660 26661 26662 26663 26664 26665 26666 26667 26668 26669 26670 26671 26672 26673 26674 26675 26676 26677 26678 26679 26680 26681 26682 26683 26684 26685 26686 26687 26688 26689 26690 26691 class ProjectCard ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column\" , \"content\" , \"created_at\" , \"creator\" , \"database_id\" , \"is_archived\" , \"note\" , \"project\" , \"resource_path\" , \"state\" , \"updated_at\" , \"url\" , ) column = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"column\" ) content = sgqlc . types . Field ( \"ProjectCardItem\" , graphql_name = \"content\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) note = sgqlc . types . Field ( String , graphql_name = \"note\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( Project ), graphql_name = \"project\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) state = sgqlc . types . Field ( ProjectCardState , graphql_name = \"state\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"ProjectCard"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardArchivedState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1138 1139 1140 1141 1142 1143 1144 class ProjectCardArchivedState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" )","title":"ProjectCardArchivedState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15904 15905 15906 15907 15908 15909 15910 15911 15912 15913 15914 15915 15916 15917 15918 15919 15920 class ProjectCardConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectCardEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectCard\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectCardConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15923 15924 15925 15926 15927 15928 15929 15930 15931 class ProjectCardEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectCard\" , graphql_name = \"node\" )","title":"ProjectCardEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardItem","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32653 32654 32655 32656 32657 32658 32659 class ProjectCardItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest )","title":"ProjectCardItem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectCardState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1147 1148 1149 1150 1151 1152 1153 class ProjectCardState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CONTENT_ONLY\" , \"NOTE_ONLY\" , \"REDACTED\" )","title":"ProjectCardState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectColumn","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26694 26695 26696 26697 26698 26699 26700 26701 26702 26703 26704 26705 26706 26707 26708 26709 26710 26711 26712 26713 26714 26715 26716 26717 26718 26719 26720 26721 26722 26723 26724 26725 26726 26727 26728 26729 26730 26731 26732 26733 26734 26735 26736 26737 26738 26739 26740 26741 26742 26743 26744 26745 26746 26747 class ProjectColumn ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cards\" , \"created_at\" , \"database_id\" , \"name\" , \"project\" , \"purpose\" , \"resource_path\" , \"updated_at\" , \"url\" , ) cards = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectCardConnection ), graphql_name = \"cards\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"archived_states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( ProjectCardArchivedState ), graphql_name = \"archivedStates\" , default = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ), ), ), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( Project ), graphql_name = \"project\" ) purpose = sgqlc . types . Field ( ProjectColumnPurpose , graphql_name = \"purpose\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"ProjectColumn"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectColumnConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15934 15935 15936 15937 15938 15939 15940 15941 15942 15943 15944 15945 15946 15947 15948 15949 15950 15951 15952 class ProjectColumnConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectColumnEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectColumn\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectColumnConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectColumnEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15955 15956 15957 15958 15959 15960 15961 15962 15963 class ProjectColumnEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"node\" )","title":"ProjectColumnEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectColumnPurpose","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1156 1157 1158 1159 1160 1161 1162 class ProjectColumnPurpose ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DONE\" , \"IN_PROGRESS\" , \"TODO\" )","title":"ProjectColumnPurpose"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15966 15967 15968 15969 15970 15971 15972 15973 15974 15975 15976 15977 15978 15979 15980 class ProjectConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Project\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15983 15984 15985 15986 15987 15988 15989 15990 15991 class ProjectEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Project\" , graphql_name = \"node\" )","title":"ProjectEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectItemType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1165 1166 1167 1168 1169 1170 1171 class ProjectItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DRAFT_ISSUE\" , \"ISSUE\" , \"PULL_REQUEST\" , \"REDACTED\" )","title":"ProjectItemType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNext","text":"Bases: sgqlc . types . Type , Node , Closable , Updatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ProjectNext ( sgqlc . types . Type , Node , Closable , Updatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"database_id\" , \"description\" , \"fields\" , \"items\" , \"number\" , \"owner\" , \"public\" , \"repositories\" , \"resource_path\" , \"short_description\" , \"title\" , \"updated_at\" , \"url\" , \"views\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) fields = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextFieldConnection ), graphql_name = \"fields\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItemConnection ), graphql_name = \"items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextOwner ), graphql_name = \"owner\" ) public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"public\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) short_description = sgqlc . types . Field ( String , graphql_name = \"shortDescription\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) views = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectViewConnection ), graphql_name = \"views\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"ProjectNext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 15994 15995 15996 15997 15998 15999 16000 16001 16002 16003 16004 16005 16006 16007 16008 16009 16010 class ProjectNextConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNext\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectNextConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16013 16014 16015 16016 16017 16018 16019 16020 16021 class ProjectNextEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectNext\" , graphql_name = \"node\" )","title":"ProjectNextEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextField","text":"Bases: sgqlc . types . Type , ProjectNextFieldCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26856 26857 26858 26859 26860 26861 26862 class ProjectNextField ( sgqlc . types . Type , ProjectNextFieldCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"ProjectNextField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextFieldCommon","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16024 16025 16026 16027 16028 16029 16030 16031 16032 16033 16034 16035 16036 16037 16038 16039 16040 16041 16042 16043 16044 16045 16046 16047 16048 16049 16050 16051 16052 16053 16054 16055 class ProjectNextFieldCommon ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"data_type\" , \"database_id\" , \"id\" , \"name\" , \"project\" , \"settings\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) data_type = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextFieldType ), graphql_name = \"dataType\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectNext\" ), graphql_name = \"project\" ) settings = sgqlc . types . Field ( String , graphql_name = \"settings\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"ProjectNextFieldCommon"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextFieldConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16058 16059 16060 16061 16062 16063 16064 16065 16066 16067 16068 16069 16070 16071 16072 16073 16074 16075 16076 class ProjectNextFieldConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextFieldEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextField\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectNextFieldConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextFieldEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16079 16080 16081 16082 16083 16084 16085 16086 16087 class ProjectNextFieldEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectNextField\" , graphql_name = \"node\" )","title":"ProjectNextFieldEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextFieldType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 class ProjectNextFieldType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ASSIGNEES\" , \"DATE\" , \"ITERATION\" , \"LABELS\" , \"LINKED_PULL_REQUESTS\" , \"MILESTONE\" , \"NUMBER\" , \"REPOSITORY\" , \"REVIEWERS\" , \"SINGLE_SELECT\" , \"TEXT\" , \"TITLE\" , \"TRACKS\" , )","title":"ProjectNextFieldType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItem","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26865 26866 26867 26868 26869 26870 26871 26872 26873 26874 26875 26876 26877 26878 26879 26880 26881 26882 26883 26884 26885 26886 26887 26888 26889 26890 26891 26892 26893 26894 26895 26896 26897 26898 26899 26900 26901 26902 26903 26904 26905 26906 26907 26908 26909 26910 26911 26912 26913 26914 class ProjectNextItem ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content\" , \"created_at\" , \"creator\" , \"database_id\" , \"field_values\" , \"is_archived\" , \"project\" , \"title\" , \"type\" , \"updated_at\" , ) content = sgqlc . types . Field ( \"ProjectNextItemContent\" , graphql_name = \"content\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) field_values = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItemFieldValueConnection ), graphql_name = \"fieldValues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNext ), graphql_name = \"project\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectItemType ), graphql_name = \"type\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"ProjectNextItem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16090 16091 16092 16093 16094 16095 16096 16097 16098 16099 16100 16101 16102 16103 16104 16105 16106 16107 16108 class ProjectNextItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectNextItemConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemContent","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32662 32663 32664 32665 32666 32667 32668 class ProjectNextItemContent ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( DraftIssue , Issue , PullRequest )","title":"ProjectNextItemContent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16111 16112 16113 16114 16115 16116 16117 16118 16119 class ProjectNextItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectNextItem\" , graphql_name = \"node\" )","title":"ProjectNextItemEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemFieldValue","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 26917 26918 26919 26920 26921 26922 26923 26924 26925 26926 26927 26928 26929 26930 26931 26932 26933 26934 26935 26936 26937 26938 26939 26940 26941 26942 26943 26944 26945 26946 class ProjectNextItemFieldValue ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"database_id\" , \"project_field\" , \"project_item\" , \"updated_at\" , \"value\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) project_field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextField ), graphql_name = \"projectField\" ) project_item = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItem ), graphql_name = \"projectItem\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) value = sgqlc . types . Field ( String , graphql_name = \"value\" )","title":"ProjectNextItemFieldValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemFieldValueConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16122 16123 16124 16125 16126 16127 16128 16129 16130 16131 16132 16133 16134 16135 16136 16137 16138 16139 16140 class ProjectNextItemFieldValueConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextItemFieldValueEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectNextItemFieldValue\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectNextItemFieldValueConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextItemFieldValueEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16143 16144 16145 16146 16147 16148 16149 16150 16151 class ProjectNextItemFieldValueEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectNextItemFieldValue\" , graphql_name = \"node\" )","title":"ProjectNextItemFieldValueEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1197 1198 1199 1200 1201 1202 1203 class ProjectNextOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NUMBER\" , \"TITLE\" , \"UPDATED_AT\" )","title":"ProjectNextOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectNextOwner","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16154 16155 16156 16157 16158 16159 16160 16161 16162 16163 16164 16165 16166 16167 16168 16169 16170 16171 16172 16173 16174 16175 16176 16177 16178 16179 16180 16181 16182 16183 16184 16185 16186 16187 16188 16189 16190 16191 16192 16193 16194 16195 16196 16197 class ProjectNextOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"project_next\" , \"projects_next\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) project_next = sgqlc . types . Field ( \"ProjectNext\" , graphql_name = \"projectNext\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) projects_next = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextConnection ), graphql_name = \"projectsNext\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"sort_by\" , sgqlc . types . Arg ( ProjectNextOrderField , graphql_name = \"sortBy\" , default = \"TITLE\" ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"ProjectNextOwner"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 class ProjectOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ProjectOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1206 1207 1208 1209 1210 1211 1212 class ProjectOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"UPDATED_AT\" )","title":"ProjectOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectOwner","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16200 16201 16202 16203 16204 16205 16206 16207 16208 16209 16210 16211 16212 16213 16214 16215 16216 16217 16218 16219 16220 16221 16222 16223 16224 16225 16226 16227 16228 16229 16230 16231 16232 16233 16234 16235 16236 16237 16238 16239 16240 16241 16242 16243 16244 16245 16246 16247 16248 16249 16250 16251 16252 16253 16254 16255 16256 16257 16258 16259 16260 16261 16262 16263 16264 16265 16266 16267 16268 class ProjectOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"project\" , \"projects\" , \"projects_resource_path\" , \"projects_url\" , \"viewer_can_create_projects\" , ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) projects = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectConnection ), graphql_name = \"projects\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( ProjectOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"search\" , sgqlc . types . Arg ( String , graphql_name = \"search\" , default = None ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( ProjectState )), graphql_name = \"states\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) projects_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"projectsResourcePath\" ) projects_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"projectsUrl\" ) viewer_can_create_projects = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanCreateProjects\" )","title":"ProjectOwner"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectProgress","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16271 16272 16273 16274 16275 16276 16277 16278 16279 16280 16281 16282 16283 16284 16285 16286 16287 16288 16289 16290 16291 16292 16293 16294 16295 16296 16297 16298 16299 16300 class ProjectProgress ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"done_count\" , \"done_percentage\" , \"enabled\" , \"in_progress_count\" , \"in_progress_percentage\" , \"todo_count\" , \"todo_percentage\" , ) done_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"doneCount\" ) done_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"donePercentage\" ) enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"enabled\" ) in_progress_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"inProgressCount\" ) in_progress_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"inProgressPercentage\" ) todo_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"todoCount\" ) todo_percentage = sgqlc . types . Field ( sgqlc . types . non_null ( Float ), graphql_name = \"todoPercentage\" )","title":"ProjectProgress"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1215 1216 1217 1218 1219 1220 1221 class ProjectState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" )","title":"ProjectState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectTemplate","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 class ProjectTemplate ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"AUTOMATED_KANBAN_V2\" , \"AUTOMATED_REVIEWS_KANBAN\" , \"BASIC_KANBAN\" , \"BUG_TRIAGE\" , )","title":"ProjectTemplate"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2","text":"Bases: sgqlc . types . Type , Closable , Updatable , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ProjectV2 ( sgqlc . types . Type , Closable , Updatable , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"database_id\" , \"field\" , \"fields\" , \"items\" , \"number\" , \"owner\" , \"public\" , \"readme\" , \"repositories\" , \"resource_path\" , \"short_description\" , \"title\" , \"updated_at\" , \"url\" , \"view\" , \"views\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) field = sgqlc . types . Field ( \"ProjectV2FieldConfiguration\" , graphql_name = \"field\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) fields = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2FieldConfigurationConnection ), graphql_name = \"fields\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemConnection ), graphql_name = \"items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2ItemOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Owner ), graphql_name = \"owner\" ) public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"public\" ) readme = sgqlc . types . Field ( String , graphql_name = \"readme\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) short_description = sgqlc . types . Field ( String , graphql_name = \"shortDescription\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) view = sgqlc . types . Field ( \"ProjectV2View\" , graphql_name = \"view\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) views = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ViewConnection ), graphql_name = \"views\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2ViewOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), )","title":"ProjectV2"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Connection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16303 16304 16305 16306 16307 16308 16309 16310 16311 16312 16313 16314 16315 16316 16317 16318 16319 class ProjectV2Connection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2Edge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectV2Connection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Edge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16322 16323 16324 16325 16326 16327 16328 16329 16330 class ProjectV2Edge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2\" , graphql_name = \"node\" )","title":"ProjectV2Edge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Field","text":"Bases: sgqlc . types . Type , ProjectV2FieldCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27117 27118 27119 27120 27121 27122 27123 class ProjectV2Field ( sgqlc . types . Type , ProjectV2FieldCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"ProjectV2Field"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldCommon","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16333 16334 16335 16336 16337 16338 16339 16340 16341 16342 16343 16344 16345 16346 16347 16348 16349 16350 16351 16352 16353 16354 16355 16356 16357 16358 16359 16360 16361 16362 class ProjectV2FieldCommon ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"data_type\" , \"database_id\" , \"id\" , \"name\" , \"project\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) data_type = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2FieldType ), graphql_name = \"dataType\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2\" ), graphql_name = \"project\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"ProjectV2FieldCommon"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldConfiguration","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32671 32672 32673 32674 32675 32676 32677 class ProjectV2FieldConfiguration ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( ProjectV2Field , ProjectV2IterationField , ProjectV2SingleSelectField )","title":"ProjectV2FieldConfiguration"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldConfigurationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16365 16366 16367 16368 16369 16370 16371 16372 16373 16374 16375 16376 16377 16378 16379 16380 16381 16382 16383 class ProjectV2FieldConfigurationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2FieldConfigurationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectV2FieldConfigurationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldConfigurationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16386 16387 16388 16389 16390 16391 16392 16393 16394 class ProjectV2FieldConfigurationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2FieldConfiguration\" , graphql_name = \"node\" )","title":"ProjectV2FieldConfigurationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16397 16398 16399 16400 16401 16402 16403 16404 16405 16406 16407 16408 16409 16410 16411 16412 16413 16414 16415 class ProjectV2FieldConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2FieldEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2Field\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectV2FieldConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16418 16419 16420 16421 16422 16423 16424 16425 16426 class ProjectV2FieldEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2Field\" , graphql_name = \"node\" )","title":"ProjectV2FieldEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 4500 4501 class ProjectV2FieldOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2FieldOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ProjectV2FieldOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1238 1239 1240 1241 1242 1243 1244 class ProjectV2FieldOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"POSITION\" )","title":"ProjectV2FieldOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 class ProjectV2FieldType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ASSIGNEES\" , \"DATE\" , \"ITERATION\" , \"LABELS\" , \"LINKED_PULL_REQUESTS\" , \"MILESTONE\" , \"NUMBER\" , \"REPOSITORY\" , \"REVIEWERS\" , \"SINGLE_SELECT\" , \"TEXT\" , \"TITLE\" , \"TRACKS\" , )","title":"ProjectV2FieldType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2FieldValue","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 class ProjectV2FieldValue ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"text\" , \"number\" , \"date\" , \"single_select_option_id\" , \"iteration_id\" , ) text = sgqlc . types . Field ( String , graphql_name = \"text\" ) number = sgqlc . types . Field ( Float , graphql_name = \"number\" ) date = sgqlc . types . Field ( Date , graphql_name = \"date\" ) single_select_option_id = sgqlc . types . Field ( String , graphql_name = \"singleSelectOptionId\" ) iteration_id = sgqlc . types . Field ( String , graphql_name = \"iterationId\" )","title":"ProjectV2FieldValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Item","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27126 27127 27128 27129 27130 27131 27132 27133 27134 27135 27136 27137 27138 27139 27140 27141 27142 27143 27144 27145 27146 27147 27148 27149 27150 27151 27152 27153 27154 27155 27156 27157 27158 27159 27160 27161 27162 27163 27164 27165 27166 27167 27168 27169 27170 27171 27172 27173 27174 27175 27176 27177 27178 27179 27180 27181 27182 27183 27184 27185 27186 27187 27188 27189 27190 27191 27192 27193 27194 27195 27196 class ProjectV2Item ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content\" , \"created_at\" , \"creator\" , \"database_id\" , \"field_value_by_name\" , \"field_values\" , \"is_archived\" , \"project\" , \"type\" , \"updated_at\" , ) content = sgqlc . types . Field ( \"ProjectV2ItemContent\" , graphql_name = \"content\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) field_value_by_name = sgqlc . types . Field ( \"ProjectV2ItemFieldValue\" , graphql_name = \"fieldValueByName\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) field_values = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemFieldValueConnection ), graphql_name = \"fieldValues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2ItemFieldValueOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2 ), graphql_name = \"project\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemType ), graphql_name = \"type\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"ProjectV2Item"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16429 16430 16431 16432 16433 16434 16435 16436 16437 16438 16439 16440 16441 16442 16443 16444 16445 16446 16447 class ProjectV2ItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2ItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2Item\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectV2ItemConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemContent","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32680 32681 32682 32683 32684 32685 32686 class ProjectV2ItemContent ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( DraftIssue , Issue , PullRequest )","title":"ProjectV2ItemContent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16450 16451 16452 16453 16454 16455 16456 16457 16458 class ProjectV2ItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"node\" )","title":"ProjectV2ItemEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldDateValue","text":"Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27199 27200 27201 27202 27203 27204 27205 27206 27207 27208 class ProjectV2ItemFieldDateValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"date\" ,) date = sgqlc . types . Field ( Date , graphql_name = \"date\" )","title":"ProjectV2ItemFieldDateValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldIterationValue","text":"Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27211 27212 27213 27214 27215 27216 27217 27218 27219 27220 27221 27222 27223 27224 27225 27226 27227 27228 class ProjectV2ItemFieldIterationValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"duration\" , \"iteration_id\" , \"start_date\" , \"title\" , \"title_html\" ) duration = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"duration\" ) iteration_id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"iterationId\" ) start_date = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"startDate\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) title_html = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"titleHTML\" )","title":"ProjectV2ItemFieldIterationValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldLabelValue","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16461 16462 16463 16464 16465 16466 16467 16468 16469 16470 16471 16472 16473 16474 16475 16476 16477 16478 16479 16480 16481 16482 16483 16484 16485 class ProjectV2ItemFieldLabelValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"labels\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) labels = sgqlc . types . Field ( LabelConnection , graphql_name = \"labels\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"ProjectV2ItemFieldLabelValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldMilestoneValue","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16488 16489 16490 16491 16492 16493 16494 16495 16496 16497 16498 class ProjectV2ItemFieldMilestoneValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"milestone\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) milestone = sgqlc . types . Field ( \"Milestone\" , graphql_name = \"milestone\" )","title":"ProjectV2ItemFieldMilestoneValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldNumberValue","text":"Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27231 27232 27233 27234 27235 27236 27237 27238 27239 27240 class ProjectV2ItemFieldNumberValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"number\" ,) number = sgqlc . types . Field ( Float , graphql_name = \"number\" )","title":"ProjectV2ItemFieldNumberValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldPullRequestValue","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16501 16502 16503 16504 16505 16506 16507 16508 16509 16510 16511 16512 16513 16514 16515 16516 16517 16518 16519 16520 16521 16522 16523 16524 16525 16526 16527 16528 16529 16530 16531 16532 16533 class ProjectV2ItemFieldPullRequestValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"pull_requests\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) pull_requests = sgqlc . types . Field ( \"PullRequestConnection\" , graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( PullRequestOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ) ), )","title":"ProjectV2ItemFieldPullRequestValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldRepositoryValue","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16536 16537 16538 16539 16540 16541 16542 16543 16544 16545 16546 class ProjectV2ItemFieldRepositoryValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"repository\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"ProjectV2ItemFieldRepositoryValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldReviewerValue","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16549 16550 16551 16552 16553 16554 16555 16556 16557 16558 16559 16560 16561 16562 16563 16564 16565 16566 16567 16568 16569 16570 16571 16572 16573 class ProjectV2ItemFieldReviewerValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"reviewers\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) reviewers = sgqlc . types . Field ( \"RequestedReviewerConnection\" , graphql_name = \"reviewers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"ProjectV2ItemFieldReviewerValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldSingleSelectValue","text":"Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27243 27244 27245 27246 27247 27248 27249 27250 27251 27252 27253 27254 class ProjectV2ItemFieldSingleSelectValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"name_html\" , \"option_id\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) name_html = sgqlc . types . Field ( String , graphql_name = \"nameHTML\" ) option_id = sgqlc . types . Field ( String , graphql_name = \"optionId\" )","title":"ProjectV2ItemFieldSingleSelectValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldTextValue","text":"Bases: sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27257 27258 27259 27260 27261 27262 27263 27264 27265 27266 class ProjectV2ItemFieldTextValue ( sgqlc . types . Type , ProjectV2ItemFieldValueCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"text\" ,) text = sgqlc . types . Field ( String , graphql_name = \"text\" )","title":"ProjectV2ItemFieldTextValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldUserValue","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16576 16577 16578 16579 16580 16581 16582 16583 16584 16585 16586 16587 16588 16589 16590 16591 16592 16593 16594 16595 16596 16597 16598 16599 16600 class ProjectV2ItemFieldUserValue ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"users\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) users = sgqlc . types . Field ( \"UserConnection\" , graphql_name = \"users\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"ProjectV2ItemFieldUserValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValue","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32689 32690 32691 32692 32693 32694 32695 32696 32697 32698 32699 32700 32701 32702 32703 32704 32705 32706 32707 class ProjectV2ItemFieldValue ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( ProjectV2ItemFieldDateValue , ProjectV2ItemFieldIterationValue , ProjectV2ItemFieldLabelValue , ProjectV2ItemFieldMilestoneValue , ProjectV2ItemFieldNumberValue , ProjectV2ItemFieldPullRequestValue , ProjectV2ItemFieldRepositoryValue , ProjectV2ItemFieldReviewerValue , ProjectV2ItemFieldSingleSelectValue , ProjectV2ItemFieldTextValue , ProjectV2ItemFieldUserValue , )","title":"ProjectV2ItemFieldValue"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueCommon","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16603 16604 16605 16606 16607 16608 16609 16610 16611 16612 16613 16614 16615 16616 16617 16618 16619 16620 16621 16622 16623 16624 16625 16626 16627 16628 16629 16630 class ProjectV2ItemFieldValueCommon ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"creator\" , \"database_id\" , \"field\" , \"id\" , \"item\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2FieldConfiguration\" ), graphql_name = \"field\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) item = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2Item\" ), graphql_name = \"item\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"ProjectV2ItemFieldValueCommon"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16633 16634 16635 16636 16637 16638 16639 16640 16641 16642 16643 16644 16645 16646 16647 16648 16649 16650 16651 class ProjectV2ItemFieldValueConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2ItemFieldValueEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2ItemFieldValue\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectV2ItemFieldValueConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16654 16655 16656 16657 16658 16659 16660 16661 16662 class ProjectV2ItemFieldValueEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2ItemFieldValue\" , graphql_name = \"node\" )","title":"ProjectV2ItemFieldValueEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 class ProjectV2ItemFieldValueOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemFieldValueOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ProjectV2ItemFieldValueOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemFieldValueOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1270 1271 1272 1273 1274 1275 1276 class ProjectV2ItemFieldValueOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"POSITION\" ,)","title":"ProjectV2ItemFieldValueOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 class ProjectV2ItemOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ProjectV2ItemOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1279 1280 1281 1282 1283 1284 1285 class ProjectV2ItemOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"POSITION\" ,)","title":"ProjectV2ItemOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ItemType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1288 1289 1290 1291 1292 1293 1294 class ProjectV2ItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DRAFT_ISSUE\" , \"ISSUE\" , \"PULL_REQUEST\" , \"REDACTED\" )","title":"ProjectV2ItemType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2IterationField","text":"Bases: sgqlc . types . Type , ProjectV2FieldCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27269 27270 27271 27272 27273 27274 27275 27276 27277 27278 27279 class ProjectV2IterationField ( sgqlc . types . Type , ProjectV2FieldCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"configuration\" ,) configuration = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2IterationFieldConfiguration ), graphql_name = \"configuration\" , )","title":"ProjectV2IterationField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2IterationFieldConfiguration","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16665 16666 16667 16668 16669 16670 16671 16672 16673 16674 16675 16676 16677 16678 16679 16680 16681 16682 16683 16684 16685 16686 16687 16688 16689 class ProjectV2IterationFieldConfiguration ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"completed_iterations\" , \"duration\" , \"iterations\" , \"start_day\" ) completed_iterations = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ProjectV2IterationFieldIteration\" ) ) ), graphql_name = \"completedIterations\" , ) duration = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"duration\" ) iterations = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ProjectV2IterationFieldIteration\" ) ) ), graphql_name = \"iterations\" , ) start_day = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"startDay\" )","title":"ProjectV2IterationFieldConfiguration"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2IterationFieldIteration","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16692 16693 16694 16695 16696 16697 16698 16699 16700 16701 16702 16703 16704 16705 class ProjectV2IterationFieldIteration ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"duration\" , \"id\" , \"start_date\" , \"title\" , \"title_html\" ) duration = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"duration\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"id\" ) start_date = sgqlc . types . Field ( sgqlc . types . non_null ( Date ), graphql_name = \"startDate\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) title_html = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"titleHTML\" )","title":"ProjectV2IterationFieldIteration"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Order","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 class ProjectV2Order ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2OrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ProjectV2Order"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2OrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1297 1298 1299 1300 1301 1302 1303 class ProjectV2OrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NUMBER\" , \"TITLE\" , \"UPDATED_AT\" )","title":"ProjectV2OrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Owner","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16708 16709 16710 16711 16712 16713 16714 16715 16716 16717 16718 16719 16720 16721 16722 16723 16724 16725 16726 16727 16728 16729 16730 16731 16732 16733 16734 16735 16736 16737 16738 16739 16740 16741 16742 16743 16744 16745 16746 16747 16748 16749 16750 16751 16752 16753 class ProjectV2Owner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"project_v2\" , \"projects_v2\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) project_v2 = sgqlc . types . Field ( \"ProjectV2\" , graphql_name = \"projectV2\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) projects_v2 = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Connection ), graphql_name = \"projectsV2\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2Order , graphql_name = \"orderBy\" , default = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"ProjectV2Owner"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2Recent","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16756 16757 16758 16759 16760 16761 16762 16763 16764 16765 16766 16767 16768 16769 16770 16771 16772 16773 16774 16775 16776 16777 class ProjectV2Recent ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"recent_projects\" ,) recent_projects = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Connection ), graphql_name = \"recentProjects\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"ProjectV2Recent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SingleSelectField","text":"Bases: sgqlc . types . Type , ProjectV2FieldCommon , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27282 27283 27284 27285 27286 27287 27288 27289 27290 27291 27292 27293 27294 class ProjectV2SingleSelectField ( sgqlc . types . Type , ProjectV2FieldCommon , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"options\" ,) options = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ProjectV2SingleSelectFieldOption )) ), graphql_name = \"options\" , )","title":"ProjectV2SingleSelectField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SingleSelectFieldOption","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16780 16781 16782 16783 16784 16785 16786 16787 16788 16789 class ProjectV2SingleSelectFieldOption ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"name\" , \"name_html\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"id\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) name_html = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"nameHTML\" )","title":"ProjectV2SingleSelectFieldOption"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SortBy","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16792 16793 16794 16795 16796 16797 16798 16799 16800 16801 16802 16803 16804 class ProjectV2SortBy ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"direction\" , \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( \"ProjectV2Field\" ), graphql_name = \"field\" )","title":"ProjectV2SortBy"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SortByConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16807 16808 16809 16810 16811 16812 16813 16814 16815 16816 16817 16818 16819 16820 16821 16822 16823 16824 16825 class ProjectV2SortByConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2SortByEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( ProjectV2SortBy ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectV2SortByConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2SortByEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16828 16829 16830 16831 16832 16833 16834 16835 16836 class ProjectV2SortByEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( ProjectV2SortBy , graphql_name = \"node\" )","title":"ProjectV2SortByEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2View","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass ProjectV2View ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"fields\" , \"filter\" , \"group_by\" , \"layout\" , \"name\" , \"number\" , \"project\" , \"sort_by\" , \"updated_at\" , \"vertical_group_by\" , \"visible_fields\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) fields = sgqlc . types . Field ( ProjectV2FieldConfigurationConnection , graphql_name = \"fields\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) filter = sgqlc . types . Field ( String , graphql_name = \"filter\" ) group_by = sgqlc . types . Field ( ProjectV2FieldConnection , graphql_name = \"groupBy\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) layout = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ViewLayout ), graphql_name = \"layout\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2 ), graphql_name = \"project\" ) sort_by = sgqlc . types . Field ( ProjectV2SortByConnection , graphql_name = \"sortBy\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) vertical_group_by = sgqlc . types . Field ( ProjectV2FieldConnection , graphql_name = \"verticalGroupBy\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), ) visible_fields = sgqlc . types . Field ( ProjectV2FieldConnection , graphql_name = \"visibleFields\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2FieldOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"POSITION\" , \"direction\" : \"ASC\" }, ), ), ) ), )","title":"ProjectV2View"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16839 16840 16841 16842 16843 16844 16845 16846 16847 16848 16849 16850 16851 16852 16853 16854 16855 16856 16857 class ProjectV2ViewConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2ViewEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectV2View\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectV2ViewConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16860 16861 16862 16863 16864 16865 16866 16867 16868 class ProjectV2ViewEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectV2View\" , graphql_name = \"node\" )","title":"ProjectV2ViewEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewLayout","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1306 1307 1308 1309 1310 1311 1312 class ProjectV2ViewLayout ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BOARD_LAYOUT\" , \"TABLE_LAYOUT\" )","title":"ProjectV2ViewLayout"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 class ProjectV2ViewOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ViewOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ProjectV2ViewOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectV2ViewOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1315 1316 1317 1318 1319 1320 1321 class ProjectV2ViewOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"POSITION\" )","title":"ProjectV2ViewOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectView","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27441 27442 27443 27444 27445 27446 27447 27448 27449 27450 27451 27452 27453 27454 27455 27456 27457 27458 27459 27460 27461 27462 27463 27464 27465 27466 27467 27468 27469 27470 27471 27472 27473 27474 27475 27476 27477 27478 27479 27480 27481 27482 27483 27484 27485 27486 27487 27488 class ProjectView ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"filter\" , \"group_by\" , \"layout\" , \"name\" , \"number\" , \"project\" , \"sort_by\" , \"updated_at\" , \"vertical_group_by\" , \"visible_fields\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) filter = sgqlc . types . Field ( String , graphql_name = \"filter\" ) group_by = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( Int )), graphql_name = \"groupBy\" ) layout = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectViewLayout ), graphql_name = \"layout\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) project = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNext ), graphql_name = \"project\" ) sort_by = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( SortBy )), graphql_name = \"sortBy\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) vertical_group_by = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( Int )), graphql_name = \"verticalGroupBy\" ) visible_fields = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( Int )), graphql_name = \"visibleFields\" )","title":"ProjectView"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectViewConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16871 16872 16873 16874 16875 16876 16877 16878 16879 16880 16881 16882 16883 16884 16885 16886 16887 class ProjectViewConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectViewEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ProjectView\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ProjectViewConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectViewEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16890 16891 16892 16893 16894 16895 16896 16897 16898 class ProjectViewEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ProjectView\" , graphql_name = \"node\" )","title":"ProjectViewEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ProjectViewLayout","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1324 1325 1326 1327 1328 1329 1330 class ProjectViewLayout ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BOARD_LAYOUT\" , \"TABLE_LAYOUT\" )","title":"ProjectViewLayout"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PublicKey","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 27491 27492 27493 27494 27495 27496 27497 27498 27499 27500 27501 27502 27503 27504 27505 27506 27507 27508 27509 27510 27511 27512 class PublicKey ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"accessed_at\" , \"created_at\" , \"fingerprint\" , \"is_read_only\" , \"key\" , \"updated_at\" , ) accessed_at = sgqlc . types . Field ( DateTime , graphql_name = \"accessedAt\" ) created_at = sgqlc . types . Field ( DateTime , graphql_name = \"createdAt\" ) fingerprint = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"fingerprint\" ) is_read_only = sgqlc . types . Field ( Boolean , graphql_name = \"isReadOnly\" ) key = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"key\" ) updated_at = sgqlc . types . Field ( DateTime , graphql_name = \"updatedAt\" )","title":"PublicKey"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PublicKeyConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16901 16902 16903 16904 16905 16906 16907 16908 16909 16910 16911 16912 16913 16914 16915 16916 16917 class PublicKeyConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PublicKeyEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PublicKey\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PublicKeyConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PublicKeyEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16920 16921 16922 16923 16924 16925 16926 16927 16928 class PublicKeyEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PublicKey\" , graphql_name = \"node\" )","title":"PublicKeyEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequest","text":"Bases: sgqlc . types . Type , Node , Assignable , Closable , Comment , Updatable , UpdatableComment , Labelable , Lockable , Reactable , RepositoryNode , Subscribable , UniformResourceLocatable , ProjectNextOwner , ProjectV2Owner See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass PullRequest ( sgqlc . types . Type , Node , Assignable , Closable , Comment , Updatable , UpdatableComment , Labelable , Lockable , Reactable , RepositoryNode , Subscribable , UniformResourceLocatable , ProjectNextOwner , ProjectV2Owner , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"additions\" , \"auto_merge_request\" , \"base_ref\" , \"base_ref_name\" , \"base_ref_oid\" , \"base_repository\" , \"changed_files\" , \"checks_resource_path\" , \"checks_url\" , \"closing_issues_references\" , \"comments\" , \"commits\" , \"deletions\" , \"files\" , \"head_ref\" , \"head_ref_name\" , \"head_ref_oid\" , \"head_repository\" , \"head_repository_owner\" , \"hovercard\" , \"is_cross_repository\" , \"is_draft\" , \"is_read_by_viewer\" , \"latest_opinionated_reviews\" , \"latest_reviews\" , \"maintainer_can_modify\" , \"merge_commit\" , \"mergeable\" , \"merged\" , \"merged_at\" , \"merged_by\" , \"milestone\" , \"number\" , \"participants\" , \"permalink\" , \"potential_merge_commit\" , \"project_cards\" , \"project_items\" , \"project_next_items\" , \"revert_resource_path\" , \"revert_url\" , \"review_decision\" , \"review_requests\" , \"review_threads\" , \"reviews\" , \"state\" , \"suggested_reviewers\" , \"timeline\" , \"timeline_items\" , \"title\" , \"title_html\" , \"viewer_can_apply_suggestion\" , \"viewer_can_delete_head_ref\" , \"viewer_can_disable_auto_merge\" , \"viewer_can_edit_files\" , \"viewer_can_enable_auto_merge\" , \"viewer_can_merge_as_admin\" , \"viewer_latest_review\" , \"viewer_latest_review_request\" , \"viewer_merge_body_text\" , \"viewer_merge_headline_text\" , ) additions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"additions\" ) auto_merge_request = sgqlc . types . Field ( AutoMergeRequest , graphql_name = \"autoMergeRequest\" ) base_ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"baseRef\" ) base_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"baseRefName\" ) base_ref_oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"baseRefOid\" ) base_repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"baseRepository\" ) changed_files = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"changedFiles\" ) checks_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"checksResourcePath\" ) checks_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"checksUrl\" ) closing_issues_references = sgqlc . types . Field ( IssueConnection , graphql_name = \"closingIssuesReferences\" , args = sgqlc . types . ArgDict ( ( ( \"user_linked_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"userLinkedOnly\" , default = False ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( IssueCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueCommentOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commits = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestCommitConnection ), graphql_name = \"commits\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"deletions\" ) files = sgqlc . types . Field ( PullRequestChangedFileConnection , graphql_name = \"files\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) head_ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"headRef\" ) head_ref_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"headRefName\" ) head_ref_oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"headRefOid\" ) head_repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"headRepository\" ) head_repository_owner = sgqlc . types . Field ( RepositoryOwner , graphql_name = \"headRepositoryOwner\" ) hovercard = sgqlc . types . Field ( sgqlc . types . non_null ( Hovercard ), graphql_name = \"hovercard\" , args = sgqlc . types . ArgDict ( ( ( \"include_notification_contexts\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeNotificationContexts\" , default = True , ), ), ) ), ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) is_draft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDraft\" ) is_read_by_viewer = sgqlc . types . Field ( Boolean , graphql_name = \"isReadByViewer\" ) latest_opinionated_reviews = sgqlc . types . Field ( PullRequestReviewConnection , graphql_name = \"latestOpinionatedReviews\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"writers_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"writersOnly\" , default = False ), ), ) ), ) latest_reviews = sgqlc . types . Field ( PullRequestReviewConnection , graphql_name = \"latestReviews\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) maintainer_can_modify = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"maintainerCanModify\" ) merge_commit = sgqlc . types . Field ( Commit , graphql_name = \"mergeCommit\" ) mergeable = sgqlc . types . Field ( sgqlc . types . non_null ( MergeableState ), graphql_name = \"mergeable\" ) merged = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"merged\" ) merged_at = sgqlc . types . Field ( DateTime , graphql_name = \"mergedAt\" ) merged_by = sgqlc . types . Field ( Actor , graphql_name = \"mergedBy\" ) milestone = sgqlc . types . Field ( Milestone , graphql_name = \"milestone\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) participants = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"participants\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) permalink = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"permalink\" ) potential_merge_commit = sgqlc . types . Field ( Commit , graphql_name = \"potentialMergeCommit\" ) project_cards = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectCardConnection ), graphql_name = \"projectCards\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"archived_states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( ProjectCardArchivedState ), graphql_name = \"archivedStates\" , default = ( \"ARCHIVED\" , \"NOT_ARCHIVED\" ), ), ), ) ), ) project_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2ItemConnection ), graphql_name = \"projectItems\" , args = sgqlc . types . ArgDict ( ( ( \"include_archived\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeArchived\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) project_next_items = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextItemConnection ), graphql_name = \"projectNextItems\" , args = sgqlc . types . ArgDict ( ( ( \"include_archived\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeArchived\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) revert_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"revertResourcePath\" ) revert_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"revertUrl\" ) review_decision = sgqlc . types . Field ( PullRequestReviewDecision , graphql_name = \"reviewDecision\" ) review_requests = sgqlc . types . Field ( ReviewRequestConnection , graphql_name = \"reviewRequests\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) review_threads = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewThreadConnection ), graphql_name = \"reviewThreads\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) reviews = sgqlc . types . Field ( PullRequestReviewConnection , graphql_name = \"reviews\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestReviewState ) ), graphql_name = \"states\" , default = None , ), ), ( \"author\" , sgqlc . types . Arg ( String , graphql_name = \"author\" , default = None ), ), ) ), ) state = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestState ), graphql_name = \"state\" ) suggested_reviewers = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( SuggestedReviewer )), graphql_name = \"suggestedReviewers\" , ) timeline = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestTimelineConnection ), graphql_name = \"timeline\" , args = sgqlc . types . ArgDict ( ( ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) timeline_items = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestTimelineItemsConnection ), graphql_name = \"timelineItems\" , args = sgqlc . types . ArgDict ( ( ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ( \"skip\" , sgqlc . types . Arg ( Int , graphql_name = \"skip\" , default = None )), ( \"item_types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestTimelineItemsItemType ) ), graphql_name = \"itemTypes\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) title_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"titleHTML\" ) viewer_can_apply_suggestion = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanApplySuggestion\" ) viewer_can_delete_head_ref = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanDeleteHeadRef\" ) viewer_can_disable_auto_merge = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanDisableAutoMerge\" ) viewer_can_edit_files = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEditFiles\" ) viewer_can_enable_auto_merge = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanEnableAutoMerge\" ) viewer_can_merge_as_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanMergeAsAdmin\" ) viewer_latest_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"viewerLatestReview\" ) viewer_latest_review_request = sgqlc . types . Field ( \"ReviewRequest\" , graphql_name = \"viewerLatestReviewRequest\" ) viewer_merge_body_text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"viewerMergeBodyText\" , args = sgqlc . types . ArgDict ( ( ( \"merge_type\" , sgqlc . types . Arg ( PullRequestMergeMethod , graphql_name = \"mergeType\" , default = None ), ), ) ), ) viewer_merge_headline_text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"viewerMergeHeadlineText\" , args = sgqlc . types . ArgDict ( ( ( \"merge_type\" , sgqlc . types . Arg ( PullRequestMergeMethod , graphql_name = \"mergeType\" , default = None ), ), ) ), )","title":"PullRequest"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestChangedFile","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16931 16932 16933 16934 16935 16936 16937 16938 16939 16940 16941 16942 16943 16944 16945 16946 16947 16948 16949 16950 16951 16952 class PullRequestChangedFile ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"additions\" , \"change_type\" , \"deletions\" , \"path\" , \"viewer_viewed_state\" , ) additions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"additions\" ) change_type = sgqlc . types . Field ( sgqlc . types . non_null ( PatchStatus ), graphql_name = \"changeType\" ) deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"deletions\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) viewer_viewed_state = sgqlc . types . Field ( sgqlc . types . non_null ( FileViewedState ), graphql_name = \"viewerViewedState\" )","title":"PullRequestChangedFile"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestChangedFileConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16955 16956 16957 16958 16959 16960 16961 16962 16963 16964 16965 16966 16967 16968 16969 16970 16971 16972 16973 class PullRequestChangedFileConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestChangedFileEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( PullRequestChangedFile ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PullRequestChangedFileConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestChangedFileEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16976 16977 16978 16979 16980 16981 16982 16983 16984 class PullRequestChangedFileEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( PullRequestChangedFile , graphql_name = \"node\" )","title":"PullRequestChangedFileEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestCommit","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28036 28037 28038 28039 28040 28041 28042 28043 28044 28045 28046 class PullRequestCommit ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"pull_request\" ) commit = sgqlc . types . Field ( sgqlc . types . non_null ( Commit ), graphql_name = \"commit\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" )","title":"PullRequestCommit"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestCommitCommentThread","text":"Bases: sgqlc . types . Type , RepositoryNode , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28049 28050 28051 28052 28053 28054 28055 28056 28057 28058 28059 28060 28061 28062 28063 28064 28065 28066 28067 28068 28069 28070 28071 28072 28073 28074 28075 28076 class PullRequestCommitCommentThread ( sgqlc . types . Type , RepositoryNode , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"commit\" , \"path\" , \"position\" , \"pull_request\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit = sgqlc . types . Field ( sgqlc . types . non_null ( Commit ), graphql_name = \"commit\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" )","title":"PullRequestCommitCommentThread"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestCommitConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 16987 16988 16989 16990 16991 16992 16993 16994 16995 16996 16997 16998 16999 17000 17001 17002 17003 17004 17005 class PullRequestCommitConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestCommitEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestCommit\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PullRequestCommitConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestCommitEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17008 17009 17010 17011 17012 17013 17014 17015 17016 class PullRequestCommitEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestCommit\" , graphql_name = \"node\" )","title":"PullRequestCommitEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17019 17020 17021 17022 17023 17024 17025 17026 17027 17028 17029 17030 17031 17032 17033 17034 17035 class PullRequestConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequest\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PullRequestConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestContributionsByRepository","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17038 17039 17040 17041 17042 17043 17044 17045 17046 17047 17048 17049 17050 17051 17052 17053 17054 17055 17056 17057 17058 17059 17060 17061 17062 17063 17064 17065 17066 17067 17068 17069 17070 class PullRequestContributionsByRepository ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contributions\" , \"repository\" ) contributions = sgqlc . types . Field ( sgqlc . types . non_null ( CreatedPullRequestContributionConnection ), graphql_name = \"contributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"PullRequestContributionsByRepository"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17073 17074 17075 17076 17077 17078 17079 17080 17081 class PullRequestEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"node\" )","title":"PullRequestEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestMergeMethod","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1333 1334 1335 1336 1337 1338 1339 class PullRequestMergeMethod ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MERGE\" , \"REBASE\" , \"SQUASH\" )","title":"PullRequestMergeMethod"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 class PullRequestOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"PullRequestOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1342 1343 1344 1345 1346 1347 1348 class PullRequestOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"UPDATED_AT\" )","title":"PullRequestOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReview","text":"Bases: sgqlc . types . Type , Node , Comment , Deletable , Updatable , UpdatableComment , Reactable , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28079 28080 28081 28082 28083 28084 28085 28086 28087 28088 28089 28090 28091 28092 28093 28094 28095 28096 28097 28098 28099 28100 28101 28102 28103 28104 28105 28106 28107 28108 28109 28110 28111 28112 28113 28114 28115 28116 28117 28118 28119 28120 28121 28122 28123 28124 28125 28126 28127 28128 28129 28130 28131 28132 28133 28134 28135 28136 28137 28138 28139 28140 28141 28142 28143 28144 28145 28146 28147 28148 28149 class PullRequestReview ( sgqlc . types . Type , Node , Comment , Deletable , Updatable , UpdatableComment , Reactable , RepositoryNode , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"author_can_push_to_repository\" , \"comments\" , \"commit\" , \"on_behalf_of\" , \"pull_request\" , \"resource_path\" , \"state\" , \"submitted_at\" , \"url\" , ) author_can_push_to_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"authorCanPushToRepository\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) on_behalf_of = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"onBehalfOf\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewState ), graphql_name = \"state\" ) submitted_at = sgqlc . types . Field ( DateTime , graphql_name = \"submittedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"PullRequestReview"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewComment","text":"Bases: sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28152 28153 28154 28155 28156 28157 28158 28159 28160 28161 28162 28163 28164 28165 28166 28167 28168 28169 28170 28171 28172 28173 28174 28175 28176 28177 28178 28179 28180 28181 28182 28183 28184 28185 28186 28187 28188 28189 28190 28191 28192 28193 28194 28195 28196 28197 28198 28199 28200 28201 28202 28203 28204 28205 28206 28207 28208 28209 class PullRequestReviewComment ( sgqlc . types . Type , Node , Comment , Deletable , Minimizable , Updatable , UpdatableComment , Reactable , RepositoryNode , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"diff_hunk\" , \"drafted_at\" , \"original_commit\" , \"original_position\" , \"outdated\" , \"path\" , \"position\" , \"pull_request\" , \"pull_request_review\" , \"reply_to\" , \"resource_path\" , \"state\" , \"url\" , ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) diff_hunk = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"diffHunk\" ) drafted_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"draftedAt\" ) original_commit = sgqlc . types . Field ( Commit , graphql_name = \"originalCommit\" ) original_position = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"originalPosition\" ) outdated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"outdated\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) position = sgqlc . types . Field ( Int , graphql_name = \"position\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) pull_request_review = sgqlc . types . Field ( PullRequestReview , graphql_name = \"pullRequestReview\" ) reply_to = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"replyTo\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewCommentState ), graphql_name = \"state\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"PullRequestReviewComment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewCommentConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17084 17085 17086 17087 17088 17089 17090 17091 17092 17093 17094 17095 17096 17097 17098 17099 17100 17101 17102 class PullRequestReviewCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PullRequestReviewCommentConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewCommentEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17105 17106 17107 17108 17109 17110 17111 17112 17113 class PullRequestReviewCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"node\" )","title":"PullRequestReviewCommentEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewCommentState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1351 1352 1353 1354 1355 1356 1357 class PullRequestReviewCommentState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"PENDING\" , \"SUBMITTED\" )","title":"PullRequestReviewCommentState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17116 17117 17118 17119 17120 17121 17122 17123 17124 17125 17126 17127 17128 17129 17130 17131 17132 17133 17134 class PullRequestReviewConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReview\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PullRequestReviewConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewContributionsByRepository","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17137 17138 17139 17140 17141 17142 17143 17144 17145 17146 17147 17148 17149 17150 17151 17152 17153 17154 17155 17156 17157 17158 17159 17160 17161 17162 17163 17164 17165 17166 17167 17168 17169 class PullRequestReviewContributionsByRepository ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"contributions\" , \"repository\" ) contributions = sgqlc . types . Field ( sgqlc . types . non_null ( CreatedPullRequestReviewContributionConnection ), graphql_name = \"contributions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ContributionOrder , graphql_name = \"orderBy\" , default = { \"direction\" : \"DESC\" }, ), ), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"PullRequestReviewContributionsByRepository"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewDecision","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1360 1361 1362 1363 1364 1365 1366 class PullRequestReviewDecision ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"APPROVED\" , \"CHANGES_REQUESTED\" , \"REVIEW_REQUIRED\" )","title":"PullRequestReviewDecision"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17172 17173 17174 17175 17176 17177 17178 17179 17180 class PullRequestReviewEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"node\" )","title":"PullRequestReviewEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewEvent","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1369 1370 1371 1372 1373 1374 1375 class PullRequestReviewEvent ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"APPROVE\" , \"COMMENT\" , \"DISMISS\" , \"REQUEST_CHANGES\" )","title":"PullRequestReviewEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1378 1379 1380 1381 1382 1383 1384 class PullRequestReviewState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"APPROVED\" , \"CHANGES_REQUESTED\" , \"COMMENTED\" , \"DISMISSED\" , \"PENDING\" )","title":"PullRequestReviewState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewThread","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28212 28213 28214 28215 28216 28217 28218 28219 28220 28221 28222 28223 28224 28225 28226 28227 28228 28229 28230 28231 28232 28233 28234 28235 28236 28237 28238 28239 28240 28241 28242 28243 28244 28245 28246 28247 28248 28249 28250 28251 28252 28253 28254 28255 28256 28257 28258 28259 28260 28261 28262 28263 28264 28265 28266 28267 28268 28269 28270 28271 28272 28273 28274 28275 28276 28277 28278 28279 28280 28281 28282 28283 28284 28285 28286 class PullRequestReviewThread ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"diff_side\" , \"is_collapsed\" , \"is_outdated\" , \"is_resolved\" , \"line\" , \"original_line\" , \"original_start_line\" , \"path\" , \"pull_request\" , \"repository\" , \"resolved_by\" , \"start_diff_side\" , \"start_line\" , \"viewer_can_reply\" , \"viewer_can_resolve\" , \"viewer_can_unresolve\" , ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"skip\" , sgqlc . types . Arg ( Int , graphql_name = \"skip\" , default = None )), ) ), ) diff_side = sgqlc . types . Field ( sgqlc . types . non_null ( DiffSide ), graphql_name = \"diffSide\" ) is_collapsed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCollapsed\" ) is_outdated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOutdated\" ) is_resolved = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isResolved\" ) line = sgqlc . types . Field ( Int , graphql_name = \"line\" ) original_line = sgqlc . types . Field ( Int , graphql_name = \"originalLine\" ) original_start_line = sgqlc . types . Field ( Int , graphql_name = \"originalStartLine\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resolved_by = sgqlc . types . Field ( \"User\" , graphql_name = \"resolvedBy\" ) start_diff_side = sgqlc . types . Field ( DiffSide , graphql_name = \"startDiffSide\" ) start_line = sgqlc . types . Field ( Int , graphql_name = \"startLine\" ) viewer_can_reply = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanReply\" ) viewer_can_resolve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanResolve\" ) viewer_can_unresolve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUnresolve\" )","title":"PullRequestReviewThread"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewThreadConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17183 17184 17185 17186 17187 17188 17189 17190 17191 17192 17193 17194 17195 17196 17197 17198 17199 17200 17201 class PullRequestReviewThreadConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewThreadEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestReviewThread\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PullRequestReviewThreadConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestReviewThreadEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17204 17205 17206 17207 17208 17209 17210 17211 17212 class PullRequestReviewThreadEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestReviewThread\" , graphql_name = \"node\" )","title":"PullRequestReviewThreadEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestRevisionMarker","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17215 17216 17217 17218 17219 17220 17221 17222 17223 17224 17225 17226 17227 17228 17229 17230 class PullRequestRevisionMarker ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"last_seen_commit\" , \"pull_request\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) last_seen_commit = sgqlc . types . Field ( sgqlc . types . non_null ( \"Commit\" ), graphql_name = \"lastSeenCommit\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( \"PullRequest\" ), graphql_name = \"pullRequest\" )","title":"PullRequestRevisionMarker"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1387 1388 1389 1390 1391 1392 1393 class PullRequestState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"MERGED\" , \"OPEN\" )","title":"PullRequestState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTemplate","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17233 17234 17235 17236 17237 17238 17239 17240 17241 17242 17243 17244 class PullRequestTemplate ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"filename\" , \"repository\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) filename = sgqlc . types . Field ( String , graphql_name = \"filename\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"PullRequestTemplate"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestThread","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28289 28290 28291 28292 28293 28294 28295 28296 28297 28298 28299 28300 28301 28302 28303 28304 28305 28306 28307 28308 28309 28310 28311 28312 28313 28314 28315 28316 28317 28318 28319 28320 28321 28322 28323 28324 28325 28326 28327 28328 28329 28330 28331 28332 28333 28334 28335 28336 28337 28338 28339 28340 28341 28342 28343 28344 28345 28346 28347 28348 28349 28350 28351 28352 28353 28354 28355 28356 28357 class PullRequestThread ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comments\" , \"diff_side\" , \"is_collapsed\" , \"is_outdated\" , \"is_resolved\" , \"line\" , \"pull_request\" , \"repository\" , \"resolved_by\" , \"start_diff_side\" , \"start_line\" , \"viewer_can_reply\" , \"viewer_can_resolve\" , \"viewer_can_unresolve\" , ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"skip\" , sgqlc . types . Arg ( Int , graphql_name = \"skip\" , default = None )), ) ), ) diff_side = sgqlc . types . Field ( sgqlc . types . non_null ( DiffSide ), graphql_name = \"diffSide\" ) is_collapsed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCollapsed\" ) is_outdated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOutdated\" ) is_resolved = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isResolved\" ) line = sgqlc . types . Field ( Int , graphql_name = \"line\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) resolved_by = sgqlc . types . Field ( \"User\" , graphql_name = \"resolvedBy\" ) start_diff_side = sgqlc . types . Field ( DiffSide , graphql_name = \"startDiffSide\" ) start_line = sgqlc . types . Field ( Int , graphql_name = \"startLine\" ) viewer_can_reply = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanReply\" ) viewer_can_resolve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanResolve\" ) viewer_can_unresolve = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUnresolve\" )","title":"PullRequestThread"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17247 17248 17249 17250 17251 17252 17253 17254 17255 17256 17257 17258 17259 17260 17261 17262 17263 17264 17265 class PullRequestTimelineConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestTimelineItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestTimelineItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PullRequestTimelineConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItem","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32710 32711 32712 32713 32714 32715 32716 32717 32718 32719 32720 32721 32722 32723 32724 32725 32726 32727 32728 32729 32730 32731 32732 32733 32734 32735 32736 32737 32738 32739 32740 32741 32742 32743 32744 32745 32746 32747 32748 32749 32750 class PullRequestTimelineItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( AssignedEvent , BaseRefDeletedEvent , BaseRefForcePushedEvent , ClosedEvent , Commit , CommitCommentThread , CrossReferencedEvent , DemilestonedEvent , DeployedEvent , DeploymentEnvironmentChangedEvent , HeadRefDeletedEvent , HeadRefForcePushedEvent , HeadRefRestoredEvent , IssueComment , LabeledEvent , LockedEvent , MergedEvent , MilestonedEvent , PullRequestReview , PullRequestReviewComment , PullRequestReviewThread , ReferencedEvent , RenamedTitleEvent , ReopenedEvent , ReviewDismissedEvent , ReviewRequestRemovedEvent , ReviewRequestedEvent , SubscribedEvent , UnassignedEvent , UnlabeledEvent , UnlockedEvent , UnsubscribedEvent , UserBlockedEvent , )","title":"PullRequestTimelineItem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItemEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17268 17269 17270 17271 17272 17273 17274 17275 17276 class PullRequestTimelineItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestTimelineItem\" , graphql_name = \"node\" )","title":"PullRequestTimelineItemEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItems","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32753 32754 32755 32756 32757 32758 32759 32760 32761 32762 32763 32764 32765 32766 32767 32768 32769 32770 32771 32772 32773 32774 32775 32776 32777 32778 32779 32780 32781 32782 32783 32784 32785 32786 32787 32788 32789 32790 32791 32792 32793 32794 32795 32796 32797 32798 32799 32800 32801 32802 32803 32804 32805 32806 32807 32808 32809 32810 32811 32812 32813 32814 32815 32816 class PullRequestTimelineItems ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( AddedToProjectEvent , AssignedEvent , AutoMergeDisabledEvent , AutoMergeEnabledEvent , AutoRebaseEnabledEvent , AutoSquashEnabledEvent , AutomaticBaseChangeFailedEvent , AutomaticBaseChangeSucceededEvent , BaseRefChangedEvent , BaseRefDeletedEvent , BaseRefForcePushedEvent , ClosedEvent , CommentDeletedEvent , ConnectedEvent , ConvertToDraftEvent , ConvertedNoteToIssueEvent , ConvertedToDiscussionEvent , CrossReferencedEvent , DemilestonedEvent , DeployedEvent , DeploymentEnvironmentChangedEvent , DisconnectedEvent , HeadRefDeletedEvent , HeadRefForcePushedEvent , HeadRefRestoredEvent , IssueComment , LabeledEvent , LockedEvent , MarkedAsDuplicateEvent , MentionedEvent , MergedEvent , MilestonedEvent , MovedColumnsInProjectEvent , PinnedEvent , PullRequestCommit , PullRequestCommitCommentThread , PullRequestReview , PullRequestReviewThread , PullRequestRevisionMarker , ReadyForReviewEvent , ReferencedEvent , RemovedFromProjectEvent , RenamedTitleEvent , ReopenedEvent , ReviewDismissedEvent , ReviewRequestRemovedEvent , ReviewRequestedEvent , SubscribedEvent , TransferredEvent , UnassignedEvent , UnlabeledEvent , UnlockedEvent , UnmarkedAsDuplicateEvent , UnpinnedEvent , UnsubscribedEvent , UserBlockedEvent , )","title":"PullRequestTimelineItems"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItemsConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17279 17280 17281 17282 17283 17284 17285 17286 17287 17288 17289 17290 17291 17292 17293 17294 17295 17296 17297 17298 17299 17300 17301 17302 17303 17304 17305 17306 17307 17308 17309 17310 17311 17312 class PullRequestTimelineItemsConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"filtered_count\" , \"nodes\" , \"page_count\" , \"page_info\" , \"total_count\" , \"updated_at\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestTimelineItemsEdge\" ), graphql_name = \"edges\" ) filtered_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"filteredCount\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PullRequestTimelineItems\" ), graphql_name = \"nodes\" ) page_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"pageCount\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"PullRequestTimelineItemsConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItemsEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17315 17316 17317 17318 17319 17320 17321 17322 17323 class PullRequestTimelineItemsEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PullRequestTimelineItems\" , graphql_name = \"node\" )","title":"PullRequestTimelineItemsEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestTimelineItemsItemType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 class PullRequestTimelineItemsItemType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADDED_TO_MERGE_QUEUE_EVENT\" , \"ADDED_TO_PROJECT_EVENT\" , \"ASSIGNED_EVENT\" , \"AUTOMATIC_BASE_CHANGE_FAILED_EVENT\" , \"AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT\" , \"AUTO_MERGE_DISABLED_EVENT\" , \"AUTO_MERGE_ENABLED_EVENT\" , \"AUTO_REBASE_ENABLED_EVENT\" , \"AUTO_SQUASH_ENABLED_EVENT\" , \"BASE_REF_CHANGED_EVENT\" , \"BASE_REF_DELETED_EVENT\" , \"BASE_REF_FORCE_PUSHED_EVENT\" , \"CLOSED_EVENT\" , \"COMMENT_DELETED_EVENT\" , \"CONNECTED_EVENT\" , \"CONVERTED_NOTE_TO_ISSUE_EVENT\" , \"CONVERTED_TO_DISCUSSION_EVENT\" , \"CONVERT_TO_DRAFT_EVENT\" , \"CROSS_REFERENCED_EVENT\" , \"DEMILESTONED_EVENT\" , \"DEPLOYED_EVENT\" , \"DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT\" , \"DISCONNECTED_EVENT\" , \"HEAD_REF_DELETED_EVENT\" , \"HEAD_REF_FORCE_PUSHED_EVENT\" , \"HEAD_REF_RESTORED_EVENT\" , \"ISSUE_COMMENT\" , \"LABELED_EVENT\" , \"LOCKED_EVENT\" , \"MARKED_AS_DUPLICATE_EVENT\" , \"MENTIONED_EVENT\" , \"MERGED_EVENT\" , \"MILESTONED_EVENT\" , \"MOVED_COLUMNS_IN_PROJECT_EVENT\" , \"PINNED_EVENT\" , \"PULL_REQUEST_COMMIT\" , \"PULL_REQUEST_COMMIT_COMMENT_THREAD\" , \"PULL_REQUEST_REVIEW\" , \"PULL_REQUEST_REVIEW_THREAD\" , \"PULL_REQUEST_REVISION_MARKER\" , \"READY_FOR_REVIEW_EVENT\" , \"REFERENCED_EVENT\" , \"REMOVED_FROM_MERGE_QUEUE_EVENT\" , \"REMOVED_FROM_PROJECT_EVENT\" , \"RENAMED_TITLE_EVENT\" , \"REOPENED_EVENT\" , \"REVIEW_DISMISSED_EVENT\" , \"REVIEW_REQUESTED_EVENT\" , \"REVIEW_REQUEST_REMOVED_EVENT\" , \"SUBSCRIBED_EVENT\" , \"TRANSFERRED_EVENT\" , \"UNASSIGNED_EVENT\" , \"UNLABELED_EVENT\" , \"UNLOCKED_EVENT\" , \"UNMARKED_AS_DUPLICATE_EVENT\" , \"UNPINNED_EVENT\" , \"UNSUBSCRIBED_EVENT\" , \"USER_BLOCKED_EVENT\" , )","title":"PullRequestTimelineItemsItemType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PullRequestUpdateState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1464 1465 1466 1467 1468 1469 1470 class PullRequestUpdateState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" )","title":"PullRequestUpdateState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Push","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28360 28361 28362 28363 28364 28365 28366 28367 28368 28369 28370 28371 28372 28373 class Push ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"next_sha\" , \"permalink\" , \"previous_sha\" , \"pusher\" , \"repository\" ) next_sha = sgqlc . types . Field ( GitObjectID , graphql_name = \"nextSha\" ) permalink = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"permalink\" ) previous_sha = sgqlc . types . Field ( GitObjectID , graphql_name = \"previousSha\" ) pusher = sgqlc . types . Field ( sgqlc . types . non_null ( Actor ), graphql_name = \"pusher\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"Push"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PushAllowance","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28376 28377 28378 28379 28380 28381 28382 28383 28384 28385 28386 class PushAllowance ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"branch_protection_rule\" ) actor = sgqlc . types . Field ( \"PushAllowanceActor\" , graphql_name = \"actor\" ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" )","title":"PushAllowance"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PushAllowanceActor","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32819 32820 32821 32822 32823 32824 32825 class PushAllowanceActor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Team , User )","title":"PushAllowanceActor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PushAllowanceConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17326 17327 17328 17329 17330 17331 17332 17333 17334 17335 17336 17337 17338 17339 17340 17341 17342 17343 17344 class PushAllowanceConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"PushAllowanceEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"PushAllowance\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"PushAllowanceConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.PushAllowanceEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17347 17348 17349 17350 17351 17352 17353 17354 17355 class PushAllowanceEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"PushAllowance\" , graphql_name = \"node\" )","title":"PushAllowanceEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Query","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Query ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"code_of_conduct\" , \"codes_of_conduct\" , \"enterprise\" , \"enterprise_administrator_invitation\" , \"enterprise_administrator_invitation_by_token\" , \"license\" , \"licenses\" , \"marketplace_categories\" , \"marketplace_category\" , \"marketplace_listing\" , \"marketplace_listings\" , \"meta\" , \"node\" , \"nodes\" , \"organization\" , \"rate_limit\" , \"relay\" , \"repository\" , \"repository_owner\" , \"resource\" , \"search\" , \"security_advisories\" , \"security_advisory\" , \"security_vulnerabilities\" , \"sponsorables\" , \"topic\" , \"user\" , \"viewer\" , ) code_of_conduct = sgqlc . types . Field ( \"CodeOfConduct\" , graphql_name = \"codeOfConduct\" , args = sgqlc . types . ArgDict ( ( ( \"key\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"key\" , default = None ), ), ) ), ) codes_of_conduct = sgqlc . types . Field ( sgqlc . types . list_of ( \"CodeOfConduct\" ), graphql_name = \"codesOfConduct\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ( \"invitation_token\" , sgqlc . types . Arg ( String , graphql_name = \"invitationToken\" , default = None ), ), ) ), ) enterprise_administrator_invitation = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"enterpriseAdministratorInvitation\" , args = sgqlc . types . ArgDict ( ( ( \"user_login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"userLogin\" , default = None , ), ), ( \"enterprise_slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"enterpriseSlug\" , default = None , ), ), ( \"role\" , sgqlc . types . Arg ( sgqlc . types . non_null ( EnterpriseAdministratorRole ), graphql_name = \"role\" , default = None , ), ), ) ), ) enterprise_administrator_invitation_by_token = sgqlc . types . Field ( \"EnterpriseAdministratorInvitation\" , graphql_name = \"enterpriseAdministratorInvitationByToken\" , args = sgqlc . types . ArgDict ( ( ( \"invitation_token\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"invitationToken\" , default = None , ), ), ) ), ) license = sgqlc . types . Field ( \"License\" , graphql_name = \"license\" , args = sgqlc . types . ArgDict ( ( ( \"key\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"key\" , default = None ), ), ) ), ) licenses = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( \"License\" )), graphql_name = \"licenses\" ) marketplace_categories = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"MarketplaceCategory\" )) ), graphql_name = \"marketplaceCategories\" , args = sgqlc . types . ArgDict ( ( ( \"include_categories\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"includeCategories\" , default = None , ), ), ( \"exclude_empty\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeEmpty\" , default = None ), ), ( \"exclude_subcategories\" , sgqlc . types . Arg ( Boolean , graphql_name = \"excludeSubcategories\" , default = None ), ), ) ), ) marketplace_category = sgqlc . types . Field ( \"MarketplaceCategory\" , graphql_name = \"marketplaceCategory\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ( \"use_topic_aliases\" , sgqlc . types . Arg ( Boolean , graphql_name = \"useTopicAliases\" , default = None ), ), ) ), ) marketplace_listing = sgqlc . types . Field ( \"MarketplaceListing\" , graphql_name = \"marketplaceListing\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ) ), ) marketplace_listings = sgqlc . types . Field ( sgqlc . types . non_null ( MarketplaceListingConnection ), graphql_name = \"marketplaceListings\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"category_slug\" , sgqlc . types . Arg ( String , graphql_name = \"categorySlug\" , default = None ), ), ( \"use_topic_aliases\" , sgqlc . types . Arg ( Boolean , graphql_name = \"useTopicAliases\" , default = None ), ), ( \"viewer_can_admin\" , sgqlc . types . Arg ( Boolean , graphql_name = \"viewerCanAdmin\" , default = None ), ), ( \"admin_id\" , sgqlc . types . Arg ( ID , graphql_name = \"adminId\" , default = None )), ( \"organization_id\" , sgqlc . types . Arg ( ID , graphql_name = \"organizationId\" , default = None ), ), ( \"all_states\" , sgqlc . types . Arg ( Boolean , graphql_name = \"allStates\" , default = None ), ), ( \"slugs\" , sgqlc . types . Arg ( sgqlc . types . list_of ( String ), graphql_name = \"slugs\" , default = None ), ), ( \"primary_category_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"primaryCategoryOnly\" , default = False ), ), ( \"with_free_trials_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"withFreeTrialsOnly\" , default = False ), ), ) ), ) meta = sgqlc . types . Field ( sgqlc . types . non_null ( GitHubMetadata ), graphql_name = \"meta\" ) node = sgqlc . types . Field ( Node , graphql_name = \"node\" , args = sgqlc . types . ArgDict ( ( ( \"id\" , sgqlc . types . Arg ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" , default = None ), ), ) ), ) nodes = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( Node )), graphql_name = \"nodes\" , args = sgqlc . types . ArgDict ( ( ( \"ids\" , sgqlc . types . Arg ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )) ), graphql_name = \"ids\" , default = None , ), ), ) ), ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) rate_limit = sgqlc . types . Field ( \"RateLimit\" , graphql_name = \"rateLimit\" , args = sgqlc . types . ArgDict ( ( ( \"dry_run\" , sgqlc . types . Arg ( Boolean , graphql_name = \"dryRun\" , default = False ), ), ) ), ) relay = sgqlc . types . Field ( sgqlc . types . non_null ( \"Query\" ), graphql_name = \"relay\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" , args = sgqlc . types . ArgDict ( ( ( \"owner\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"owner\" , default = None ), ), ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ( \"follow_renames\" , sgqlc . types . Arg ( Boolean , graphql_name = \"followRenames\" , default = True ), ), ) ), ) repository_owner = sgqlc . types . Field ( \"RepositoryOwner\" , graphql_name = \"repositoryOwner\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) resource = sgqlc . types . Field ( \"UniformResourceLocatable\" , graphql_name = \"resource\" , args = sgqlc . types . ArgDict ( ( ( \"url\" , sgqlc . types . Arg ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" , default = None ), ), ) ), ) search = sgqlc . types . Field ( sgqlc . types . non_null ( \"SearchResultItemConnection\" ), graphql_name = \"search\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"query\" , default = None ), ), ( \"type\" , sgqlc . types . Arg ( sgqlc . types . non_null ( SearchType ), graphql_name = \"type\" , default = None , ), ), ) ), ) security_advisories = sgqlc . types . Field ( sgqlc . types . non_null ( \"SecurityAdvisoryConnection\" ), graphql_name = \"securityAdvisories\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( SecurityAdvisoryOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"identifier\" , sgqlc . types . Arg ( SecurityAdvisoryIdentifierFilter , graphql_name = \"identifier\" , default = None , ), ), ( \"published_since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"publishedSince\" , default = None ), ), ( \"updated_since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"updatedSince\" , default = None ), ), ( \"classifications\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryClassification ) ), graphql_name = \"classifications\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) security_advisory = sgqlc . types . Field ( \"SecurityAdvisory\" , graphql_name = \"securityAdvisory\" , args = sgqlc . types . ArgDict ( ( ( \"ghsa_id\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"ghsaId\" , default = None , ), ), ) ), ) security_vulnerabilities = sgqlc . types . Field ( sgqlc . types . non_null ( \"SecurityVulnerabilityConnection\" ), graphql_name = \"securityVulnerabilities\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( SecurityVulnerabilityOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"ecosystem\" , sgqlc . types . Arg ( SecurityAdvisoryEcosystem , graphql_name = \"ecosystem\" , default = None , ), ), ( \"package\" , sgqlc . types . Arg ( String , graphql_name = \"package\" , default = None ), ), ( \"severities\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisorySeverity ) ), graphql_name = \"severities\" , default = None , ), ), ( \"classifications\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryClassification ) ), graphql_name = \"classifications\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) sponsorables = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorableItemConnection\" ), graphql_name = \"sponsorables\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorableOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"LOGIN\" , \"direction\" : \"ASC\" }, ), ), ( \"only_dependencies\" , sgqlc . types . Arg ( Boolean , graphql_name = \"onlyDependencies\" , default = False ), ), ( \"org_login_for_dependencies\" , sgqlc . types . Arg ( String , graphql_name = \"orgLoginForDependencies\" , default = None ), ), ( \"dependency_ecosystem\" , sgqlc . types . Arg ( SecurityAdvisoryEcosystem , graphql_name = \"dependencyEcosystem\" , default = None , ), ), ( \"ecosystem\" , sgqlc . types . Arg ( DependencyGraphEcosystem , graphql_name = \"ecosystem\" , default = None ), ), ) ), ) topic = sgqlc . types . Field ( \"Topic\" , graphql_name = \"topic\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) viewer = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"viewer\" )","title":"Query"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RateLimit","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17963 17964 17965 17966 17967 17968 17969 17970 17971 17972 17973 17974 17975 class RateLimit ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cost\" , \"limit\" , \"node_count\" , \"remaining\" , \"reset_at\" , \"used\" ) cost = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"cost\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"limit\" ) node_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"nodeCount\" ) remaining = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"remaining\" ) reset_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"resetAt\" ) used = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"used\" )","title":"RateLimit"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Reactable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 17978 17979 17980 17981 17982 17983 17984 17985 17986 17987 17988 17989 17990 17991 17992 17993 17994 17995 17996 17997 17998 17999 18000 18001 18002 18003 18004 18005 18006 18007 18008 18009 18010 18011 18012 18013 18014 18015 18016 18017 18018 18019 18020 18021 18022 18023 18024 18025 18026 class Reactable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"database_id\" , \"id\" , \"reaction_groups\" , \"reactions\" , \"viewer_can_react\" , ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) reaction_groups = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"ReactionGroup\" )), graphql_name = \"reactionGroups\" , ) reactions = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReactionConnection\" ), graphql_name = \"reactions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"content\" , sgqlc . types . Arg ( ReactionContent , graphql_name = \"content\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( ReactionOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) viewer_can_react = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanReact\" )","title":"Reactable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactingUserConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18029 18030 18031 18032 18033 18034 18035 18036 18037 18038 18039 18040 18041 18042 18043 18044 18045 class ReactingUserConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReactingUserEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ReactingUserConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactingUserEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18048 18049 18050 18051 18052 18053 18054 18055 18056 18057 18058 18059 class ReactingUserEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"reacted_at\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"node\" ) reacted_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"reactedAt\" )","title":"ReactingUserEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Reaction","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28389 28390 28391 28392 28393 28394 28395 28396 28397 28398 28399 28400 28401 28402 28403 28404 28405 28406 class Reaction ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content\" , \"created_at\" , \"database_id\" , \"reactable\" , \"user\" ) content = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionContent ), graphql_name = \"content\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) reactable = sgqlc . types . Field ( sgqlc . types . non_null ( Reactable ), graphql_name = \"reactable\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"Reaction"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18062 18063 18064 18065 18066 18067 18068 18069 18070 18071 18072 18073 18074 18075 18076 18077 18078 18079 18080 18081 18082 18083 18084 18085 class ReactionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"viewer_has_reacted\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReactionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Reaction\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) viewer_has_reacted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasReacted\" )","title":"ReactionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionContent","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 class ReactionContent ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CONFUSED\" , \"EYES\" , \"HEART\" , \"HOORAY\" , \"LAUGH\" , \"ROCKET\" , \"THUMBS_DOWN\" , \"THUMBS_UP\" , )","title":"ReactionContent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18088 18089 18090 18091 18092 18093 18094 18095 18096 class ReactionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Reaction\" , graphql_name = \"node\" )","title":"ReactionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionGroup","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18099 18100 18101 18102 18103 18104 18105 18106 18107 18108 18109 18110 18111 18112 18113 18114 18115 18116 18117 18118 18119 18120 18121 18122 18123 18124 18125 18126 18127 18128 18129 18130 18131 18132 18133 18134 18135 18136 18137 18138 18139 18140 18141 18142 18143 18144 18145 18146 18147 18148 18149 18150 class ReactionGroup ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content\" , \"created_at\" , \"reactors\" , \"subject\" , \"users\" , \"viewer_has_reacted\" , ) content = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionContent ), graphql_name = \"content\" ) created_at = sgqlc . types . Field ( DateTime , graphql_name = \"createdAt\" ) reactors = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReactorConnection\" ), graphql_name = \"reactors\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( Reactable ), graphql_name = \"subject\" ) users = sgqlc . types . Field ( sgqlc . types . non_null ( ReactingUserConnection ), graphql_name = \"users\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) viewer_has_reacted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasReacted\" )","title":"ReactionGroup"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 class ReactionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ReactionOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactionOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1491 1492 1493 1494 1495 1496 1497 class ReactionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"ReactionOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Reactor","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32828 32829 32830 32831 32832 32833 32834 class Reactor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Bot , Mannequin , Organization , User )","title":"Reactor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactorConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18153 18154 18155 18156 18157 18158 18159 18160 18161 18162 18163 18164 18165 18166 18167 class ReactorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReactorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Reactor\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ReactorConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReactorEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18170 18171 18172 18173 18174 18175 18176 18177 18178 18179 18180 18181 class ReactorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"reacted_at\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"Reactor\" ), graphql_name = \"node\" ) reacted_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"reactedAt\" )","title":"ReactorEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReadyForReviewEvent","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28409 28410 28411 28412 28413 28414 28415 28416 28417 28418 28419 28420 28421 28422 class ReadyForReviewEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" )","title":"ReadyForReviewEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Ref","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28425 28426 28427 28428 28429 28430 28431 28432 28433 28434 28435 28436 28437 28438 28439 28440 28441 28442 28443 28444 28445 28446 28447 28448 28449 28450 28451 28452 28453 28454 28455 28456 28457 28458 28459 28460 28461 28462 28463 28464 28465 28466 28467 28468 28469 28470 28471 28472 28473 28474 28475 28476 28477 28478 28479 28480 28481 28482 28483 28484 28485 28486 28487 28488 28489 28490 28491 28492 class Ref ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"associated_pull_requests\" , \"branch_protection_rule\" , \"name\" , \"prefix\" , \"ref_update_rule\" , \"repository\" , \"target\" , ) associated_pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"associatedPullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) prefix = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"prefix\" ) ref_update_rule = sgqlc . types . Field ( RefUpdateRule , graphql_name = \"refUpdateRule\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) target = sgqlc . types . Field ( GitObject , graphql_name = \"target\" )","title":"Ref"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18184 18185 18186 18187 18188 18189 18190 18191 18192 18193 18194 18195 18196 18197 18198 class RefConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RefEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Ref\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"RefConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18201 18202 18203 18204 18205 18206 18207 18208 18209 class RefEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Ref\" , graphql_name = \"node\" )","title":"RefEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4616 4617 4618 4619 4620 4621 4622 4623 4624 4625 4626 class RefOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( RefOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"RefOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1500 1501 1502 1503 1504 1505 1506 class RefOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALPHABETICAL\" , \"TAG_COMMIT_DATE\" )","title":"RefOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RefUpdateRule","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18212 18213 18214 18215 18216 18217 18218 18219 18220 18221 18222 18223 18224 18225 18226 18227 18228 18229 18230 18231 18232 18233 18234 18235 18236 18237 18238 18239 18240 18241 18242 18243 18244 18245 18246 18247 18248 18249 18250 18251 18252 18253 18254 18255 18256 18257 18258 18259 18260 18261 18262 18263 18264 18265 class RefUpdateRule ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"allows_deletions\" , \"allows_force_pushes\" , \"blocks_creations\" , \"pattern\" , \"required_approving_review_count\" , \"required_status_check_contexts\" , \"requires_code_owner_reviews\" , \"requires_conversation_resolution\" , \"requires_linear_history\" , \"requires_signatures\" , \"viewer_allowed_to_dismiss_reviews\" , \"viewer_can_push\" , ) allows_deletions = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowsDeletions\" ) allows_force_pushes = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowsForcePushes\" ) blocks_creations = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"blocksCreations\" ) pattern = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"pattern\" ) required_approving_review_count = sgqlc . types . Field ( Int , graphql_name = \"requiredApprovingReviewCount\" ) required_status_check_contexts = sgqlc . types . Field ( sgqlc . types . list_of ( String ), graphql_name = \"requiredStatusCheckContexts\" ) requires_code_owner_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresCodeOwnerReviews\" ) requires_conversation_resolution = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresConversationResolution\" ) requires_linear_history = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresLinearHistory\" ) requires_signatures = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"requiresSignatures\" ) viewer_allowed_to_dismiss_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerAllowedToDismissReviews\" ) viewer_can_push = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanPush\" )","title":"RefUpdateRule"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReferencedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28495 28496 28497 28498 28499 28500 28501 28502 28503 28504 28505 28506 28507 28508 28509 28510 28511 28512 28513 28514 28515 28516 28517 28518 28519 28520 28521 28522 28523 28524 28525 28526 class ReferencedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"commit\" , \"commit_repository\" , \"created_at\" , \"is_cross_repository\" , \"is_direct_reference\" , \"subject\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) commit_repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"commitRepository\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" ) is_direct_reference = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDirectReference\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"ReferencedSubject\" ), graphql_name = \"subject\" )","title":"ReferencedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReferencedSubject","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32837 32838 32839 32840 32841 32842 32843 class ReferencedSubject ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest )","title":"ReferencedSubject"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RegenerateEnterpriseIdentityProviderRecoveryCodesInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4629 4630 4631 4632 4633 4634 4635 4636 4637 4638 4639 class RegenerateEnterpriseIdentityProviderRecoveryCodesInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RegenerateEnterpriseIdentityProviderRecoveryCodesInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RegenerateEnterpriseIdentityProviderRecoveryCodesPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18268 18269 18270 18271 18272 18273 18274 18275 18276 18277 18278 class RegenerateEnterpriseIdentityProviderRecoveryCodesPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"identity_provider\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) identity_provider = sgqlc . types . Field ( \"EnterpriseIdentityProvider\" , graphql_name = \"identityProvider\" )","title":"RegenerateEnterpriseIdentityProviderRecoveryCodesPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RegenerateVerifiableDomainTokenInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4642 4643 4644 4645 4646 4647 4648 4649 4650 class RegenerateVerifiableDomainTokenInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RegenerateVerifiableDomainTokenInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RegenerateVerifiableDomainTokenPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18281 18282 18283 18284 18285 18286 18287 18288 18289 class RegenerateVerifiableDomainTokenPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"verification_token\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) verification_token = sgqlc . types . Field ( String , graphql_name = \"verificationToken\" )","title":"RegenerateVerifiableDomainTokenPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RejectDeploymentsInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 class RejectDeploymentsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"workflow_run_id\" , \"environment_ids\" , \"comment\" , \"client_mutation_id\" , ) workflow_run_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"workflowRunId\" ) environment_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"environmentIds\" , ) comment = sgqlc . types . Field ( String , graphql_name = \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RejectDeploymentsInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RejectDeploymentsPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18292 18293 18294 18295 18296 18297 18298 18299 18300 18301 18302 18303 class RejectDeploymentsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"deployments\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) deployments = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"Deployment\" )), graphql_name = \"deployments\" , )","title":"RejectDeploymentsPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Release","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable , Reactable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Release ( sgqlc . types . Type , Node , UniformResourceLocatable , Reactable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"author\" , \"created_at\" , \"description\" , \"description_html\" , \"is_draft\" , \"is_latest\" , \"is_prerelease\" , \"mentions\" , \"name\" , \"published_at\" , \"release_assets\" , \"repository\" , \"short_description_html\" , \"tag\" , \"tag_commit\" , \"tag_name\" , \"updated_at\" , ) author = sgqlc . types . Field ( \"User\" , graphql_name = \"author\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) description_html = sgqlc . types . Field ( HTML , graphql_name = \"descriptionHTML\" ) is_draft = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDraft\" ) is_latest = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isLatest\" ) is_prerelease = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrerelease\" ) mentions = sgqlc . types . Field ( UserConnection , graphql_name = \"mentions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) published_at = sgqlc . types . Field ( DateTime , graphql_name = \"publishedAt\" ) release_assets = sgqlc . types . Field ( sgqlc . types . non_null ( ReleaseAssetConnection ), graphql_name = \"releaseAssets\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"name\" , sgqlc . types . Arg ( String , graphql_name = \"name\" , default = None )), ) ), ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) short_description_html = sgqlc . types . Field ( HTML , graphql_name = \"shortDescriptionHTML\" , args = sgqlc . types . ArgDict ( (( \"limit\" , sgqlc . types . Arg ( Int , graphql_name = \"limit\" , default = 200 )),) ), ) tag = sgqlc . types . Field ( Ref , graphql_name = \"tag\" ) tag_commit = sgqlc . types . Field ( Commit , graphql_name = \"tagCommit\" ) tag_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"tagName\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"Release"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseAsset","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28618 28619 28620 28621 28622 28623 28624 28625 28626 28627 28628 28629 28630 28631 28632 28633 28634 28635 28636 28637 28638 28639 28640 28641 28642 28643 28644 28645 28646 28647 28648 28649 28650 28651 28652 28653 28654 28655 28656 28657 class ReleaseAsset ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"content_type\" , \"created_at\" , \"download_count\" , \"download_url\" , \"name\" , \"release\" , \"size\" , \"updated_at\" , \"uploaded_by\" , \"url\" , ) content_type = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"contentType\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) download_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"downloadCount\" ) download_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"downloadUrl\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) release = sgqlc . types . Field ( Release , graphql_name = \"release\" ) size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"size\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) uploaded_by = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"uploadedBy\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"ReleaseAsset"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseAssetConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18306 18307 18308 18309 18310 18311 18312 18313 18314 18315 18316 18317 18318 18319 18320 18321 18322 class ReleaseAssetConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReleaseAssetEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReleaseAsset\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ReleaseAssetConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseAssetEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18325 18326 18327 18328 18329 18330 18331 18332 18333 class ReleaseAssetEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ReleaseAsset\" , graphql_name = \"node\" )","title":"ReleaseAssetEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18336 18337 18338 18339 18340 18341 18342 18343 18344 18345 18346 18347 18348 18349 18350 class ReleaseConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReleaseEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Release\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ReleaseConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18353 18354 18355 18356 18357 18358 18359 18360 18361 class ReleaseEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Release\" , graphql_name = \"node\" )","title":"ReleaseEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4676 4677 4678 4679 4680 4681 4682 4683 4684 4685 4686 4687 4688 class ReleaseOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( ReleaseOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"ReleaseOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReleaseOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1509 1510 1511 1512 1513 1514 1515 class ReleaseOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" )","title":"ReleaseOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveAssigneesFromAssignableInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4691 4692 4693 4694 4695 4696 4697 4698 4699 4700 4701 4702 4703 4704 4705 class RemoveAssigneesFromAssignableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignable_id\" , \"assignee_ids\" , \"client_mutation_id\" ) assignable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"assignableId\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"assigneeIds\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveAssigneesFromAssignableInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveAssigneesFromAssignablePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18364 18365 18366 18367 18368 18369 18370 18371 18372 class RemoveAssigneesFromAssignablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"assignable\" , \"client_mutation_id\" ) assignable = sgqlc . types . Field ( Assignable , graphql_name = \"assignable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveAssigneesFromAssignablePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseAdminInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4708 4709 4710 4711 4712 4713 4714 4715 4716 4717 4718 4719 class RemoveEnterpriseAdminInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveEnterpriseAdminInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseAdminPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18375 18376 18377 18378 18379 18380 18381 18382 18383 18384 18385 18386 class RemoveEnterpriseAdminPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"admin\" , \"client_mutation_id\" , \"enterprise\" , \"message\" , \"viewer\" ) admin = sgqlc . types . Field ( \"User\" , graphql_name = \"admin\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) viewer = sgqlc . types . Field ( \"User\" , graphql_name = \"viewer\" )","title":"RemoveEnterpriseAdminPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseIdentityProviderInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 4732 class RemoveEnterpriseIdentityProviderInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveEnterpriseIdentityProviderInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseIdentityProviderPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18389 18390 18391 18392 18393 18394 18395 18396 18397 18398 18399 class RemoveEnterpriseIdentityProviderPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"identity_provider\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) identity_provider = sgqlc . types . Field ( \"EnterpriseIdentityProvider\" , graphql_name = \"identityProvider\" )","title":"RemoveEnterpriseIdentityProviderPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseOrganizationInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 class RemoveEnterpriseOrganizationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"organization_id\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveEnterpriseOrganizationInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseOrganizationPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18402 18403 18404 18405 18406 18407 18408 18409 18410 18411 18412 class RemoveEnterpriseOrganizationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"organization\" , \"viewer\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" ) viewer = sgqlc . types . Field ( \"User\" , graphql_name = \"viewer\" )","title":"RemoveEnterpriseOrganizationPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseSupportEntitlementInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 class RemoveEnterpriseSupportEntitlementInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveEnterpriseSupportEntitlementInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveEnterpriseSupportEntitlementPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18415 18416 18417 18418 18419 18420 18421 18422 18423 class RemoveEnterpriseSupportEntitlementPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"RemoveEnterpriseSupportEntitlementPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveLabelsFromLabelableInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4765 4766 4767 4768 4769 4770 4771 4772 4773 4774 4775 4776 4777 4778 4779 class RemoveLabelsFromLabelableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"labelable_id\" , \"label_ids\" , \"client_mutation_id\" ) labelable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"labelableId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"labelIds\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveLabelsFromLabelableInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveLabelsFromLabelablePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18426 18427 18428 18429 18430 18431 18432 18433 18434 class RemoveLabelsFromLabelablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"labelable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) labelable = sgqlc . types . Field ( Labelable , graphql_name = \"labelable\" )","title":"RemoveLabelsFromLabelablePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveOutsideCollaboratorInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 class RemoveOutsideCollaboratorInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"user_id\" , \"organization_id\" , \"client_mutation_id\" ) user_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"userId\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveOutsideCollaboratorInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveOutsideCollaboratorPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18437 18438 18439 18440 18441 18442 18443 18444 18445 class RemoveOutsideCollaboratorPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"removed_user\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) removed_user = sgqlc . types . Field ( \"User\" , graphql_name = \"removedUser\" )","title":"RemoveOutsideCollaboratorPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveReactionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4796 4797 4798 4799 4800 4801 4802 4803 4804 4805 4806 4807 class RemoveReactionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"content\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) content = sgqlc . types . Field ( sgqlc . types . non_null ( ReactionContent ), graphql_name = \"content\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveReactionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveReactionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18448 18449 18450 18451 18452 18453 18454 18455 18456 18457 class RemoveReactionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"reaction\" , \"subject\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) reaction = sgqlc . types . Field ( \"Reaction\" , graphql_name = \"reaction\" ) subject = sgqlc . types . Field ( Reactable , graphql_name = \"subject\" )","title":"RemoveReactionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveStarInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 class RemoveStarInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"starrable_id\" , \"client_mutation_id\" ) starrable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"starrableId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveStarInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveStarPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18460 18461 18462 18463 18464 18465 18466 18467 18468 class RemoveStarPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"starrable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) starrable = sgqlc . types . Field ( \"Starrable\" , graphql_name = \"starrable\" )","title":"RemoveStarPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveUpvoteInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4823 4824 4825 4826 4827 4828 4829 4830 4831 class RemoveUpvoteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RemoveUpvoteInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemoveUpvotePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18471 18472 18473 18474 18475 18476 18477 18478 18479 class RemoveUpvotePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"subject\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) subject = sgqlc . types . Field ( \"Votable\" , graphql_name = \"subject\" )","title":"RemoveUpvotePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RemovedFromProjectEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28660 28661 28662 28663 28664 28665 28666 28667 28668 28669 28670 28671 class RemovedFromProjectEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" )","title":"RemovedFromProjectEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RenamedTitleEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28674 28675 28676 28677 28678 28679 28680 28681 28682 28683 28684 28685 28686 28687 28688 28689 28690 28691 28692 28693 28694 28695 28696 28697 28698 28699 class RenamedTitleEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"current_title\" , \"previous_title\" , \"subject\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) current_title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"currentTitle\" ) previous_title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"previousTitle\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( \"RenamedTitleSubject\" ), graphql_name = \"subject\" )","title":"RenamedTitleEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RenamedTitleSubject","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32846 32847 32848 32849 32850 32851 32852 class RenamedTitleSubject ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Issue , PullRequest )","title":"RenamedTitleSubject"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4834 4835 4836 4837 4838 4839 4840 4841 4842 class ReopenIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ReopenIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18482 18483 18484 18485 18486 18487 18488 18489 18490 class ReopenIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" )","title":"ReopenIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenPullRequestInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 class ReopenPullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ReopenPullRequestInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenPullRequestPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18493 18494 18495 18496 18497 18498 18499 18500 18501 class ReopenPullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"ReopenPullRequestPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReopenedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28702 28703 28704 28705 28706 28707 28708 28709 28710 28711 28712 28713 28714 28715 28716 class ReopenedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"closable\" , \"created_at\" , \"state_reason\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) closable = sgqlc . types . Field ( sgqlc . types . non_null ( Closable ), graphql_name = \"closable\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) state_reason = sgqlc . types . Field ( IssueStateReason , graphql_name = \"stateReason\" )","title":"ReopenedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAccessAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28719 28720 28721 28722 28723 28724 28725 28726 28727 28728 28729 28730 28731 28732 28733 28734 class RepoAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoAccessAuditEntryVisibility , graphql_name = \"visibility\" )","title":"RepoAccessAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAccessAuditEntryVisibility","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1518 1519 1520 1521 1522 1523 1524 class RepoAccessAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" )","title":"RepoAccessAuditEntryVisibility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAddMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28737 28738 28739 28740 28741 28742 28743 28744 28745 28746 28747 28748 28749 28750 28751 28752 class RepoAddMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoAddMemberAuditEntryVisibility , graphql_name = \"visibility\" )","title":"RepoAddMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAddMemberAuditEntryVisibility","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1527 1528 1529 1530 1531 1532 1533 class RepoAddMemberAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" )","title":"RepoAddMemberAuditEntryVisibility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoAddTopicAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , TopicAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28755 28756 28757 28758 28759 28760 28761 28762 28763 28764 28765 28766 28767 28768 class RepoAddTopicAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , TopicAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoAddTopicAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoArchivedAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28771 28772 28773 28774 28775 28776 28777 28778 28779 28780 28781 28782 28783 28784 28785 28786 class RepoArchivedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoArchivedAuditEntryVisibility , graphql_name = \"visibility\" )","title":"RepoArchivedAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoArchivedAuditEntryVisibility","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1536 1537 1538 1539 1540 1541 1542 class RepoArchivedAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" )","title":"RepoArchivedAuditEntryVisibility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoChangeMergeSettingAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28789 28790 28791 28792 28793 28794 28795 28796 28797 28798 28799 28800 28801 28802 28803 28804 28805 class RepoChangeMergeSettingAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_enabled\" , \"merge_type\" ) is_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"isEnabled\" ) merge_type = sgqlc . types . Field ( RepoChangeMergeSettingAuditEntryMergeType , graphql_name = \"mergeType\" )","title":"RepoChangeMergeSettingAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoChangeMergeSettingAuditEntryMergeType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1545 1546 1547 1548 1549 1550 1551 class RepoChangeMergeSettingAuditEntryMergeType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MERGE\" , \"REBASE\" , \"SQUASH\" )","title":"RepoChangeMergeSettingAuditEntryMergeType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigDisableAnonymousGitAccessAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28808 28809 28810 28811 28812 28813 28814 28815 28816 28817 28818 28819 28820 class RepoConfigDisableAnonymousGitAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigDisableAnonymousGitAccessAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigDisableCollaboratorsOnlyAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28823 28824 28825 28826 28827 28828 28829 28830 28831 28832 28833 28834 28835 class RepoConfigDisableCollaboratorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigDisableCollaboratorsOnlyAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigDisableContributorsOnlyAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28838 28839 28840 28841 28842 28843 28844 28845 28846 28847 28848 28849 28850 class RepoConfigDisableContributorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigDisableContributorsOnlyAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigDisableSockpuppetDisallowedAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28853 28854 28855 28856 28857 28858 28859 28860 28861 28862 28863 28864 28865 class RepoConfigDisableSockpuppetDisallowedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigDisableSockpuppetDisallowedAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigEnableAnonymousGitAccessAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28868 28869 28870 28871 28872 28873 28874 28875 28876 28877 28878 28879 28880 class RepoConfigEnableAnonymousGitAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigEnableAnonymousGitAccessAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigEnableCollaboratorsOnlyAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28883 28884 28885 28886 28887 28888 28889 28890 28891 28892 28893 28894 28895 class RepoConfigEnableCollaboratorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigEnableCollaboratorsOnlyAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigEnableContributorsOnlyAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28898 28899 28900 28901 28902 28903 28904 28905 28906 28907 28908 28909 28910 class RepoConfigEnableContributorsOnlyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigEnableContributorsOnlyAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigEnableSockpuppetDisallowedAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28913 28914 28915 28916 28917 28918 28919 28920 28921 28922 28923 28924 28925 class RepoConfigEnableSockpuppetDisallowedAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigEnableSockpuppetDisallowedAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigLockAnonymousGitAccessAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28928 28929 28930 28931 28932 28933 28934 28935 28936 28937 28938 28939 28940 class RepoConfigLockAnonymousGitAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigLockAnonymousGitAccessAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoConfigUnlockAnonymousGitAccessAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28943 28944 28945 28946 28947 28948 28949 28950 28951 28952 28953 28954 28955 class RepoConfigUnlockAnonymousGitAccessAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoConfigUnlockAnonymousGitAccessAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoCreateAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28958 28959 28960 28961 28962 28963 28964 28965 28966 28967 28968 28969 28970 28971 28972 28973 28974 28975 class RepoCreateAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"fork_parent_name\" , \"fork_source_name\" , \"visibility\" ) fork_parent_name = sgqlc . types . Field ( String , graphql_name = \"forkParentName\" ) fork_source_name = sgqlc . types . Field ( String , graphql_name = \"forkSourceName\" ) visibility = sgqlc . types . Field ( RepoCreateAuditEntryVisibility , graphql_name = \"visibility\" )","title":"RepoCreateAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoCreateAuditEntryVisibility","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1554 1555 1556 1557 1558 1559 1560 class RepoCreateAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" )","title":"RepoCreateAuditEntryVisibility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoDestroyAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28978 28979 28980 28981 28982 28983 28984 28985 28986 28987 28988 28989 28990 28991 28992 28993 class RepoDestroyAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoDestroyAuditEntryVisibility , graphql_name = \"visibility\" )","title":"RepoDestroyAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoDestroyAuditEntryVisibility","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1563 1564 1565 1566 1567 1568 1569 class RepoDestroyAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" )","title":"RepoDestroyAuditEntryVisibility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoRemoveMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 28996 28997 28998 28999 29000 29001 29002 29003 29004 29005 29006 29007 29008 29009 29010 29011 class RepoRemoveMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"visibility\" ,) visibility = sgqlc . types . Field ( RepoRemoveMemberAuditEntryVisibility , graphql_name = \"visibility\" )","title":"RepoRemoveMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoRemoveMemberAuditEntryVisibility","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1572 1573 1574 1575 1576 1577 1578 class RepoRemoveMemberAuditEntryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" )","title":"RepoRemoveMemberAuditEntryVisibility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepoRemoveTopicAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , TopicAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 29014 29015 29016 29017 29018 29019 29020 29021 29022 29023 29024 29025 29026 29027 class RepoRemoveTopicAuditEntry ( sgqlc . types . Type , Node , AuditEntry , RepositoryAuditEntryData , OrganizationAuditEntryData , TopicAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepoRemoveTopicAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReportedContentClassifiers","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1581 1582 1583 1584 1585 1586 1587 class ReportedContentClassifiers ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ABUSE\" , \"DUPLICATE\" , \"OFF_TOPIC\" , \"OUTDATED\" , \"RESOLVED\" , \"SPAM\" )","title":"ReportedContentClassifiers"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Repository","text":"Bases: sgqlc . types . Type , Node , ProjectV2Recent , ProjectOwner , PackageOwner , Subscribable , Starrable , UniformResourceLocatable , RepositoryInfo See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Repository ( sgqlc . types . Type , Node , ProjectV2Recent , ProjectOwner , PackageOwner , Subscribable , Starrable , UniformResourceLocatable , RepositoryInfo , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"allow_update_branch\" , \"assignable_users\" , \"auto_merge_allowed\" , \"branch_protection_rules\" , \"code_of_conduct\" , \"codeowners\" , \"collaborators\" , \"commit_comments\" , \"contact_links\" , \"database_id\" , \"default_branch_ref\" , \"delete_branch_on_merge\" , \"deploy_keys\" , \"deployments\" , \"discussion\" , \"discussion_categories\" , \"discussion_category\" , \"discussions\" , \"disk_usage\" , \"environment\" , \"environments\" , \"forking_allowed\" , \"forks\" , \"funding_links\" , \"interaction_ability\" , \"is_blank_issues_enabled\" , \"is_disabled\" , \"is_empty\" , \"is_security_policy_enabled\" , \"is_user_configuration_repository\" , \"issue\" , \"issue_or_pull_request\" , \"issue_templates\" , \"issues\" , \"label\" , \"labels\" , \"languages\" , \"latest_release\" , \"mentionable_users\" , \"merge_commit_allowed\" , \"merge_commit_message\" , \"merge_commit_title\" , \"milestone\" , \"milestones\" , \"object\" , \"parent\" , \"pinned_discussions\" , \"pinned_issues\" , \"primary_language\" , \"project_next\" , \"project_v2\" , \"projects_next\" , \"projects_v2\" , \"pull_request\" , \"pull_request_templates\" , \"pull_requests\" , \"rebase_merge_allowed\" , \"ref\" , \"refs\" , \"release\" , \"releases\" , \"repository_topics\" , \"security_policy_url\" , \"squash_merge_allowed\" , \"squash_merge_commit_message\" , \"squash_merge_commit_title\" , \"squash_pr_title_used_as_default\" , \"ssh_url\" , \"submodules\" , \"temp_clone_token\" , \"template_repository\" , \"viewer_can_administer\" , \"viewer_can_update_topics\" , \"viewer_default_commit_email\" , \"viewer_default_merge_method\" , \"viewer_permission\" , \"viewer_possible_commit_emails\" , \"vulnerability_alerts\" , \"watchers\" , \"web_commit_signoff_required\" , ) allow_update_branch = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"allowUpdateBranch\" ) assignable_users = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"assignableUsers\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) auto_merge_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"autoMergeAllowed\" ) branch_protection_rules = sgqlc . types . Field ( sgqlc . types . non_null ( BranchProtectionRuleConnection ), graphql_name = \"branchProtectionRules\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) code_of_conduct = sgqlc . types . Field ( CodeOfConduct , graphql_name = \"codeOfConduct\" ) codeowners = sgqlc . types . Field ( RepositoryCodeowners , graphql_name = \"codeowners\" , args = sgqlc . types . ArgDict ( ( ( \"ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"refName\" , default = None ), ), ) ), ) collaborators = sgqlc . types . Field ( RepositoryCollaboratorConnection , graphql_name = \"collaborators\" , args = sgqlc . types . ArgDict ( ( ( \"affiliation\" , sgqlc . types . Arg ( CollaboratorAffiliation , graphql_name = \"affiliation\" , default = None , ), ), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit_comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"commitComments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) contact_links = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( RepositoryContactLink )), graphql_name = \"contactLinks\" , ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) default_branch_ref = sgqlc . types . Field ( Ref , graphql_name = \"defaultBranchRef\" ) delete_branch_on_merge = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"deleteBranchOnMerge\" ) deploy_keys = sgqlc . types . Field ( sgqlc . types . non_null ( DeployKeyConnection ), graphql_name = \"deployKeys\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) deployments = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentConnection ), graphql_name = \"deployments\" , args = sgqlc . types . ArgDict ( ( ( \"environments\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"environments\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( DeploymentOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) discussion = sgqlc . types . Field ( Discussion , graphql_name = \"discussion\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) discussion_categories = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionCategoryConnection ), graphql_name = \"discussionCategories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"filter_by_assignable\" , sgqlc . types . Arg ( Boolean , graphql_name = \"filterByAssignable\" , default = False ), ), ) ), ) discussion_category = sgqlc . types . Field ( DiscussionCategory , graphql_name = \"discussionCategory\" , args = sgqlc . types . ArgDict ( ( ( \"slug\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" , default = None ), ), ) ), ) discussions = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionConnection ), graphql_name = \"discussions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"category_id\" , sgqlc . types . Arg ( ID , graphql_name = \"categoryId\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( DiscussionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) disk_usage = sgqlc . types . Field ( Int , graphql_name = \"diskUsage\" ) environment = sgqlc . types . Field ( Environment , graphql_name = \"environment\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) environments = sgqlc . types . Field ( sgqlc . types . non_null ( EnvironmentConnection ), graphql_name = \"environments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) forking_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"forkingAllowed\" ) forks = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"forks\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"affiliations\" , default = None , ), ), ( \"owner_affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"ownerAffiliations\" , default = ( \"OWNER\" , \"COLLABORATOR\" ), ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) funding_links = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( FundingLink ))), graphql_name = \"fundingLinks\" , ) interaction_ability = sgqlc . types . Field ( RepositoryInteractionAbility , graphql_name = \"interactionAbility\" ) is_blank_issues_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isBlankIssuesEnabled\" ) is_disabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDisabled\" ) is_empty = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isEmpty\" ) is_security_policy_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"isSecurityPolicyEnabled\" ) is_user_configuration_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isUserConfigurationRepository\" ) issue = sgqlc . types . Field ( Issue , graphql_name = \"issue\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) issue_or_pull_request = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"issueOrPullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) issue_templates = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueTemplate )), graphql_name = \"issueTemplates\" , ) issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"issues\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" , default = None , ), ), ( \"filter_by\" , sgqlc . types . Arg ( IssueFilters , graphql_name = \"filterBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) label = sgqlc . types . Field ( Label , graphql_name = \"label\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) labels = sgqlc . types . Field ( LabelConnection , graphql_name = \"labels\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( LabelOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"ASC\" }, ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ) ), ) languages = sgqlc . types . Field ( LanguageConnection , graphql_name = \"languages\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( LanguageOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) latest_release = sgqlc . types . Field ( Release , graphql_name = \"latestRelease\" ) mentionable_users = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"mentionableUsers\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) merge_commit_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"mergeCommitAllowed\" ) merge_commit_message = sgqlc . types . Field ( sgqlc . types . non_null ( MergeCommitMessage ), graphql_name = \"mergeCommitMessage\" ) merge_commit_title = sgqlc . types . Field ( sgqlc . types . non_null ( MergeCommitTitle ), graphql_name = \"mergeCommitTitle\" ) milestone = sgqlc . types . Field ( Milestone , graphql_name = \"milestone\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) milestones = sgqlc . types . Field ( MilestoneConnection , graphql_name = \"milestones\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( MilestoneState )), graphql_name = \"states\" , default = None , ), ), ( \"order_by\" , sgqlc . types . Arg ( MilestoneOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ) ), ) object = sgqlc . types . Field ( GitObject , graphql_name = \"object\" , args = sgqlc . types . ArgDict ( ( ( \"oid\" , sgqlc . types . Arg ( GitObjectID , graphql_name = \"oid\" , default = None )), ( \"expression\" , sgqlc . types . Arg ( String , graphql_name = \"expression\" , default = None ), ), ) ), ) parent = sgqlc . types . Field ( \"Repository\" , graphql_name = \"parent\" ) pinned_discussions = sgqlc . types . Field ( sgqlc . types . non_null ( PinnedDiscussionConnection ), graphql_name = \"pinnedDiscussions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pinned_issues = sgqlc . types . Field ( PinnedIssueConnection , graphql_name = \"pinnedIssues\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) primary_language = sgqlc . types . Field ( Language , graphql_name = \"primaryLanguage\" ) project_next = sgqlc . types . Field ( ProjectNext , graphql_name = \"projectNext\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) project_v2 = sgqlc . types . Field ( ProjectV2 , graphql_name = \"projectV2\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) projects_next = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectNextConnection ), graphql_name = \"projectsNext\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"sort_by\" , sgqlc . types . Arg ( ProjectNextOrderField , graphql_name = \"sortBy\" , default = \"TITLE\" ), ), ) ), ) projects_v2 = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2Connection ), graphql_name = \"projectsV2\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ProjectV2Order , graphql_name = \"orderBy\" , default = { \"field\" : \"NUMBER\" , \"direction\" : \"DESC\" }, ), ), ) ), ) pull_request = sgqlc . types . Field ( PullRequest , graphql_name = \"pullRequest\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) pull_request_templates = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestTemplate )), graphql_name = \"pullRequestTemplates\" , ) pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) rebase_merge_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"rebaseMergeAllowed\" ) ref = sgqlc . types . Field ( Ref , graphql_name = \"ref\" , args = sgqlc . types . ArgDict ( ( ( \"qualified_name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"qualifiedName\" , default = None , ), ), ) ), ) refs = sgqlc . types . Field ( RefConnection , graphql_name = \"refs\" , args = sgqlc . types . ArgDict ( ( ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"ref_prefix\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"refPrefix\" , default = None , ), ), ( \"direction\" , sgqlc . types . Arg ( OrderDirection , graphql_name = \"direction\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RefOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) release = sgqlc . types . Field ( Release , graphql_name = \"release\" , args = sgqlc . types . ArgDict ( ( ( \"tag_name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"tagName\" , default = None , ), ), ) ), ) releases = sgqlc . types . Field ( sgqlc . types . non_null ( ReleaseConnection ), graphql_name = \"releases\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( ReleaseOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) repository_topics = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryTopicConnection ), graphql_name = \"repositoryTopics\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) security_policy_url = sgqlc . types . Field ( URI , graphql_name = \"securityPolicyUrl\" ) squash_merge_allowed = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"squashMergeAllowed\" ) squash_merge_commit_message = sgqlc . types . Field ( sgqlc . types . non_null ( SquashMergeCommitMessage ), graphql_name = \"squashMergeCommitMessage\" , ) squash_merge_commit_title = sgqlc . types . Field ( sgqlc . types . non_null ( SquashMergeCommitTitle ), graphql_name = \"squashMergeCommitTitle\" , ) squash_pr_title_used_as_default = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"squashPrTitleUsedAsDefault\" ) ssh_url = sgqlc . types . Field ( sgqlc . types . non_null ( GitSSHRemote ), graphql_name = \"sshUrl\" ) submodules = sgqlc . types . Field ( sgqlc . types . non_null ( SubmoduleConnection ), graphql_name = \"submodules\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) temp_clone_token = sgqlc . types . Field ( String , graphql_name = \"tempCloneToken\" ) template_repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"templateRepository\" ) viewer_can_administer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanAdminister\" ) viewer_can_update_topics = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUpdateTopics\" ) viewer_default_commit_email = sgqlc . types . Field ( String , graphql_name = \"viewerDefaultCommitEmail\" ) viewer_default_merge_method = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestMergeMethod ), graphql_name = \"viewerDefaultMergeMethod\" , ) viewer_permission = sgqlc . types . Field ( RepositoryPermission , graphql_name = \"viewerPermission\" ) viewer_possible_commit_emails = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"viewerPossibleCommitEmails\" , ) vulnerability_alerts = sgqlc . types . Field ( RepositoryVulnerabilityAlertConnection , graphql_name = \"vulnerabilityAlerts\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( RepositoryVulnerabilityAlertState ) ), graphql_name = \"states\" , default = None , ), ), ( \"dependency_scopes\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( RepositoryVulnerabilityAlertDependencyScope ) ), graphql_name = \"dependencyScopes\" , default = None , ), ), ) ), ) watchers = sgqlc . types . Field ( sgqlc . types . non_null ( UserConnection ), graphql_name = \"watchers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) web_commit_signoff_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"webCommitSignoffRequired\" )","title":"Repository"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryAffiliation","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1590 1591 1592 1593 1594 1595 1596 class RepositoryAffiliation ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COLLABORATOR\" , \"ORGANIZATION_MEMBER\" , \"OWNER\" )","title":"RepositoryAffiliation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryAuditEntryData","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18504 18505 18506 18507 18508 18509 18510 18511 18512 18513 18514 18515 18516 18517 18518 18519 18520 18521 class RepositoryAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository\" , \"repository_name\" , \"repository_resource_path\" , \"repository_url\" , ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) repository_name = sgqlc . types . Field ( String , graphql_name = \"repositoryName\" ) repository_resource_path = sgqlc . types . Field ( URI , graphql_name = \"repositoryResourcePath\" ) repository_url = sgqlc . types . Field ( URI , graphql_name = \"repositoryUrl\" )","title":"RepositoryAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryCodeowners","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18524 18525 18526 18527 18528 18529 18530 18531 18532 18533 18534 18535 18536 class RepositoryCodeowners ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"errors\" ,) errors = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"RepositoryCodeownersError\" )) ), graphql_name = \"errors\" , )","title":"RepositoryCodeowners"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryCodeownersError","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18539 18540 18541 18542 18543 18544 18545 18546 18547 18548 18549 18550 18551 18552 18553 18554 18555 18556 18557 18558 18559 18560 class RepositoryCodeownersError ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"column\" , \"kind\" , \"line\" , \"message\" , \"path\" , \"source\" , \"suggestion\" , ) column = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"column\" ) kind = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"kind\" ) line = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"line\" ) message = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"message\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) source = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"source\" ) suggestion = sgqlc . types . Field ( String , graphql_name = \"suggestion\" )","title":"RepositoryCodeownersError"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryCollaboratorConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18563 18564 18565 18566 18567 18568 18569 18570 18571 18572 18573 18574 18575 18576 18577 18578 18579 class RepositoryCollaboratorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryCollaboratorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"RepositoryCollaboratorConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryCollaboratorEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18582 18583 18584 18585 18586 18587 18588 18589 18590 18591 18592 18593 18594 18595 18596 18597 class RepositoryCollaboratorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"permission\" , \"permission_sources\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"node\" ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryPermission ), graphql_name = \"permission\" ) permission_sources = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( PermissionSource )), graphql_name = \"permissionSources\" , )","title":"RepositoryCollaboratorEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18600 18601 18602 18603 18604 18605 18606 18607 18608 18609 18610 18611 18612 18613 18614 18615 18616 18617 18618 18619 class RepositoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"total_disk_usage\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Repository\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) total_disk_usage = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalDiskUsage\" )","title":"RepositoryConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryContactLink","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18622 18623 18624 18625 18626 18627 18628 18629 18630 18631 class RepositoryContactLink ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"about\" , \"name\" , \"url\" ) about = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"about\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"RepositoryContactLink"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryContributionType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 class RepositoryContributionType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMIT\" , \"ISSUE\" , \"PULL_REQUEST\" , \"PULL_REQUEST_REVIEW\" , \"REPOSITORY\" , )","title":"RepositoryContributionType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryDiscussionAuthor","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18634 18635 18636 18637 18638 18639 18640 18641 18642 18643 18644 18645 18646 18647 18648 18649 18650 18651 18652 18653 18654 18655 18656 18657 18658 18659 18660 18661 18662 18663 18664 18665 18666 18667 18668 18669 18670 18671 class RepositoryDiscussionAuthor ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_discussions\" ,) repository_discussions = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionConnection ), graphql_name = \"repositoryDiscussions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( DiscussionOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"repository_id\" , sgqlc . types . Arg ( ID , graphql_name = \"repositoryId\" , default = None ), ), ( \"answered\" , sgqlc . types . Arg ( Boolean , graphql_name = \"answered\" , default = None ), ), ) ), )","title":"RepositoryDiscussionAuthor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryDiscussionCommentAuthor","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18674 18675 18676 18677 18678 18679 18680 18681 18682 18683 18684 18685 18686 18687 18688 18689 18690 18691 18692 18693 18694 18695 18696 18697 18698 18699 18700 18701 18702 18703 class RepositoryDiscussionCommentAuthor ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_discussion_comments\" ,) repository_discussion_comments = sgqlc . types . Field ( sgqlc . types . non_null ( DiscussionCommentConnection ), graphql_name = \"repositoryDiscussionComments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"repository_id\" , sgqlc . types . Arg ( ID , graphql_name = \"repositoryId\" , default = None ), ), ( \"only_answers\" , sgqlc . types . Arg ( Boolean , graphql_name = \"onlyAnswers\" , default = False ), ), ) ), )","title":"RepositoryDiscussionCommentAuthor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18706 18707 18708 18709 18710 18711 18712 18713 18714 class RepositoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Repository\" , graphql_name = \"node\" )","title":"RepositoryEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInfo","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass RepositoryInfo ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"description\" , \"description_html\" , \"fork_count\" , \"has_issues_enabled\" , \"has_projects_enabled\" , \"has_wiki_enabled\" , \"homepage_url\" , \"is_archived\" , \"is_fork\" , \"is_in_organization\" , \"is_locked\" , \"is_mirror\" , \"is_private\" , \"is_template\" , \"license_info\" , \"lock_reason\" , \"mirror_url\" , \"name\" , \"name_with_owner\" , \"open_graph_image_url\" , \"owner\" , \"pushed_at\" , \"resource_path\" , \"short_description_html\" , \"updated_at\" , \"url\" , \"uses_custom_open_graph_image\" , \"visibility\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"descriptionHTML\" ) fork_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"forkCount\" ) has_issues_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasIssuesEnabled\" ) has_projects_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasProjectsEnabled\" ) has_wiki_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasWikiEnabled\" ) homepage_url = sgqlc . types . Field ( URI , graphql_name = \"homepageUrl\" ) is_archived = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isArchived\" ) is_fork = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isFork\" ) is_in_organization = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isInOrganization\" ) is_locked = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isLocked\" ) is_mirror = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isMirror\" ) is_private = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrivate\" ) is_template = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isTemplate\" ) license_info = sgqlc . types . Field ( \"License\" , graphql_name = \"licenseInfo\" ) lock_reason = sgqlc . types . Field ( RepositoryLockReason , graphql_name = \"lockReason\" ) mirror_url = sgqlc . types . Field ( URI , graphql_name = \"mirrorUrl\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) name_with_owner = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"nameWithOwner\" ) open_graph_image_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"openGraphImageUrl\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( \"RepositoryOwner\" ), graphql_name = \"owner\" ) pushed_at = sgqlc . types . Field ( DateTime , graphql_name = \"pushedAt\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) short_description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"shortDescriptionHTML\" , args = sgqlc . types . ArgDict ( (( \"limit\" , sgqlc . types . Arg ( Int , graphql_name = \"limit\" , default = 200 )),) ), ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) uses_custom_open_graph_image = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"usesCustomOpenGraphImage\" ) visibility = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryVisibility ), graphql_name = \"visibility\" )","title":"RepositoryInfo"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInteractionAbility","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18827 18828 18829 18830 18831 18832 18833 18834 18835 18836 18837 18838 18839 18840 class RepositoryInteractionAbility ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"expires_at\" , \"limit\" , \"origin\" ) expires_at = sgqlc . types . Field ( DateTime , graphql_name = \"expiresAt\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimit ), graphql_name = \"limit\" ) origin = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimitOrigin ), graphql_name = \"origin\" )","title":"RepositoryInteractionAbility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInteractionLimit","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 class RepositoryInteractionLimit ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COLLABORATORS_ONLY\" , \"CONTRIBUTORS_ONLY\" , \"EXISTING_USERS\" , \"NO_LIMIT\" , )","title":"RepositoryInteractionLimit"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInteractionLimitExpiry","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1628 1629 1630 1631 1632 1633 1634 class RepositoryInteractionLimitExpiry ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ONE_DAY\" , \"ONE_MONTH\" , \"ONE_WEEK\" , \"SIX_MONTHS\" , \"THREE_DAYS\" )","title":"RepositoryInteractionLimitExpiry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInteractionLimitOrigin","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1637 1638 1639 1640 1641 1642 1643 class RepositoryInteractionLimitOrigin ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ORGANIZATION\" , \"REPOSITORY\" , \"USER\" )","title":"RepositoryInteractionLimitOrigin"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitation","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30047 30048 30049 30050 30051 30052 30053 30054 30055 30056 30057 30058 30059 30060 30061 30062 30063 30064 30065 30066 30067 30068 class RepositoryInvitation ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"email\" , \"invitee\" , \"inviter\" , \"permalink\" , \"permission\" , \"repository\" , ) email = sgqlc . types . Field ( String , graphql_name = \"email\" ) invitee = sgqlc . types . Field ( \"User\" , graphql_name = \"invitee\" ) inviter = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"inviter\" ) permalink = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"permalink\" ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryPermission ), graphql_name = \"permission\" ) repository = sgqlc . types . Field ( RepositoryInfo , graphql_name = \"repository\" )","title":"RepositoryInvitation"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18843 18844 18845 18846 18847 18848 18849 18850 18851 18852 18853 18854 18855 18856 18857 18858 18859 18860 18861 class RepositoryInvitationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryInvitationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryInvitation\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"RepositoryInvitationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18864 18865 18866 18867 18868 18869 18870 18871 18872 class RepositoryInvitationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RepositoryInvitation\" , graphql_name = \"node\" )","title":"RepositoryInvitationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitationOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 class RepositoryInvitationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInvitationOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"RepositoryInvitationOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryInvitationOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1646 1647 1648 1649 1650 1651 1652 class RepositoryInvitationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"RepositoryInvitationOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryLockReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1655 1656 1657 1658 1659 1660 1661 class RepositoryLockReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BILLING\" , \"MIGRATING\" , \"MOVING\" , \"RENAME\" )","title":"RepositoryLockReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigration","text":"Bases: sgqlc . types . Type , Node , Migration See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30071 30072 30073 30074 30075 30076 30077 class RepositoryMigration ( sgqlc . types . Type , Node , Migration ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepositoryMigration"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18875 18876 18877 18878 18879 18880 18881 18882 18883 18884 18885 18886 18887 18888 18889 18890 18891 18892 18893 class RepositoryMigrationConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryMigrationEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryMigration\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"RepositoryMigrationConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18896 18897 18898 18899 18900 18901 18902 18903 18904 class RepositoryMigrationEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RepositoryMigration\" , graphql_name = \"node\" )","title":"RepositoryMigrationEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 class RepositoryMigrationOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryMigrationOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryMigrationOrderDirection ), graphql_name = \"direction\" , )","title":"RepositoryMigrationOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationOrderDirection","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1664 1665 1666 1667 1668 1669 1670 class RepositoryMigrationOrderDirection ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ASC\" , \"DESC\" )","title":"RepositoryMigrationOrderDirection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryMigrationOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1673 1674 1675 1676 1677 1678 1679 class RepositoryMigrationOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"RepositoryMigrationOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryNode","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 18907 18908 18909 18910 18911 18912 18913 18914 18915 18916 class RepositoryNode ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository\" ,) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" )","title":"RepositoryNode"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4889 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899 4900 4901 class RepositoryOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"RepositoryOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1682 1683 1684 1685 1686 1687 1688 class RepositoryOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"PUSHED_AT\" , \"STARGAZERS\" , \"UPDATED_AT\" )","title":"RepositoryOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryOwner","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass RepositoryOwner ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"id\" , \"login\" , \"repositories\" , \"repository\" , \"resource_path\" , \"url\" , ) avatar_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = None )),) ), ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"affiliations\" , default = None , ), ), ( \"owner_affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"ownerAffiliations\" , default = ( \"OWNER\" , \"COLLABORATOR\" ), ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"is_fork\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isFork\" , default = None ), ), ) ), ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ( \"follow_renames\" , sgqlc . types . Arg ( Boolean , graphql_name = \"followRenames\" , default = True ), ), ) ), ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"RepositoryOwner"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryPermission","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1691 1692 1693 1694 1695 1696 1697 class RepositoryPermission ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"MAINTAIN\" , \"READ\" , \"TRIAGE\" , \"WRITE\" )","title":"RepositoryPermission"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryPrivacy","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1700 1701 1702 1703 1704 1705 1706 class RepositoryPrivacy ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"PRIVATE\" , \"PUBLIC\" )","title":"RepositoryPrivacy"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryTopic","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30080 30081 30082 30083 30084 30085 30086 30087 class RepositoryTopic ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"topic\" ,) topic = sgqlc . types . Field ( sgqlc . types . non_null ( \"Topic\" ), graphql_name = \"topic\" )","title":"RepositoryTopic"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryTopicConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19020 19021 19022 19023 19024 19025 19026 19027 19028 19029 19030 19031 19032 19033 19034 19035 19036 19037 19038 class RepositoryTopicConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryTopicEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryTopic\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"RepositoryTopicConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryTopicEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19041 19042 19043 19044 19045 19046 19047 19048 19049 class RepositoryTopicEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RepositoryTopic\" , graphql_name = \"node\" )","title":"RepositoryTopicEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVisibility","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1709 1710 1711 1712 1713 1714 1715 class RepositoryVisibility ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"INTERNAL\" , \"PRIVATE\" , \"PUBLIC\" )","title":"RepositoryVisibility"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVisibilityChangeDisableAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30090 30091 30092 30093 30094 30095 30096 30097 30098 30099 30100 30101 30102 class RepositoryVisibilityChangeDisableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepositoryVisibilityChangeDisableAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVisibilityChangeEnableAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30105 30106 30107 30108 30109 30110 30111 30112 30113 30114 30115 30116 30117 class RepositoryVisibilityChangeEnableAuditEntry ( sgqlc . types . Type , Node , AuditEntry , EnterpriseAuditEntryData , OrganizationAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RepositoryVisibilityChangeEnableAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlert","text":"Bases: sgqlc . types . Type , Node , RepositoryNode See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30120 30121 30122 30123 30124 30125 30126 30127 30128 30129 30130 30131 30132 30133 30134 30135 30136 30137 30138 30139 30140 30141 30142 30143 30144 30145 30146 30147 30148 30149 30150 30151 30152 30153 30154 30155 30156 30157 30158 30159 30160 30161 30162 30163 30164 30165 30166 30167 30168 30169 30170 30171 30172 30173 30174 30175 30176 30177 class RepositoryVulnerabilityAlert ( sgqlc . types . Type , Node , RepositoryNode ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"dependabot_update\" , \"dependency_scope\" , \"dismiss_comment\" , \"dismiss_reason\" , \"dismissed_at\" , \"dismisser\" , \"fix_reason\" , \"fixed_at\" , \"number\" , \"security_advisory\" , \"security_vulnerability\" , \"state\" , \"vulnerable_manifest_filename\" , \"vulnerable_manifest_path\" , \"vulnerable_requirements\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) dependabot_update = sgqlc . types . Field ( DependabotUpdate , graphql_name = \"dependabotUpdate\" ) dependency_scope = sgqlc . types . Field ( RepositoryVulnerabilityAlertDependencyScope , graphql_name = \"dependencyScope\" ) dismiss_comment = sgqlc . types . Field ( String , graphql_name = \"dismissComment\" ) dismiss_reason = sgqlc . types . Field ( String , graphql_name = \"dismissReason\" ) dismissed_at = sgqlc . types . Field ( DateTime , graphql_name = \"dismissedAt\" ) dismisser = sgqlc . types . Field ( \"User\" , graphql_name = \"dismisser\" ) fix_reason = sgqlc . types . Field ( String , graphql_name = \"fixReason\" ) fixed_at = sgqlc . types . Field ( DateTime , graphql_name = \"fixedAt\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) security_advisory = sgqlc . types . Field ( \"SecurityAdvisory\" , graphql_name = \"securityAdvisory\" ) security_vulnerability = sgqlc . types . Field ( SecurityVulnerability , graphql_name = \"securityVulnerability\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryVulnerabilityAlertState ), graphql_name = \"state\" ) vulnerable_manifest_filename = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"vulnerableManifestFilename\" ) vulnerable_manifest_path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"vulnerableManifestPath\" ) vulnerable_requirements = sgqlc . types . Field ( String , graphql_name = \"vulnerableRequirements\" )","title":"RepositoryVulnerabilityAlert"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19052 19053 19054 19055 19056 19057 19058 19059 19060 19061 19062 19063 19064 19065 19066 19067 19068 19069 19070 class RepositoryVulnerabilityAlertConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryVulnerabilityAlertEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RepositoryVulnerabilityAlert\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"RepositoryVulnerabilityAlertConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertDependencyScope","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1718 1719 1720 1721 1722 1723 1724 class RepositoryVulnerabilityAlertDependencyScope ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DEVELOPMENT\" , \"RUNTIME\" )","title":"RepositoryVulnerabilityAlertDependencyScope"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19073 19074 19075 19076 19077 19078 19079 19080 19081 class RepositoryVulnerabilityAlertEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RepositoryVulnerabilityAlert\" , graphql_name = \"node\" )","title":"RepositoryVulnerabilityAlertEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RepositoryVulnerabilityAlertState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1727 1728 1729 1730 1731 1732 1733 class RepositoryVulnerabilityAlertState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISMISSED\" , \"FIXED\" , \"OPEN\" )","title":"RepositoryVulnerabilityAlertState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestReviewsInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 class RequestReviewsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"user_ids\" , \"team_ids\" , \"union\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) user_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"userIds\" ) team_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"teamIds\" ) union = sgqlc . types . Field ( Boolean , graphql_name = \"union\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RequestReviewsInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestReviewsPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19084 19085 19086 19087 19088 19089 19090 19091 19092 19093 19094 19095 19096 19097 19098 19099 19100 19101 class RequestReviewsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" , \"requested_reviewers_edge\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" ) requested_reviewers_edge = sgqlc . types . Field ( \"UserEdge\" , graphql_name = \"requestedReviewersEdge\" )","title":"RequestReviewsPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestableCheckStatusState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1736 1737 1738 1739 1740 1741 1742 class RequestableCheckStatusState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMPLETED\" , \"IN_PROGRESS\" , \"PENDING\" , \"QUEUED\" , \"WAITING\" )","title":"RequestableCheckStatusState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestedReviewer","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32855 32856 32857 32858 32859 32860 32861 class RequestedReviewer ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Mannequin , Team , User )","title":"RequestedReviewer"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestedReviewerConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19104 19105 19106 19107 19108 19109 19110 19111 19112 19113 19114 19115 19116 19117 19118 19119 19120 19121 19122 class RequestedReviewerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"RequestedReviewerEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"RequestedReviewer\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"RequestedReviewerConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequestedReviewerEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19125 19126 19127 19128 19129 19130 19131 19132 19133 class RequestedReviewerEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"RequestedReviewer\" , graphql_name = \"node\" )","title":"RequestedReviewerEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequirableByPullRequest","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19136 19137 19138 19139 19140 19141 19142 19143 19144 19145 19146 19147 19148 19149 19150 19151 19152 19153 19154 19155 19156 19157 19158 19159 19160 class RequirableByPullRequest ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_required\" ,) is_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isRequired\" , args = sgqlc . types . ArgDict ( ( ( \"pull_request_id\" , sgqlc . types . Arg ( ID , graphql_name = \"pullRequestId\" , default = None ), ), ( \"pull_request_number\" , sgqlc . types . Arg ( Int , graphql_name = \"pullRequestNumber\" , default = None ), ), ) ), )","title":"RequirableByPullRequest"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequiredStatusCheckDescription","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19163 19164 19165 19166 19167 19168 19169 19170 19171 class RequiredStatusCheckDescription ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"app\" , \"context\" ) app = sgqlc . types . Field ( \"App\" , graphql_name = \"app\" ) context = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"context\" )","title":"RequiredStatusCheckDescription"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RequiredStatusCheckInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4930 4931 4932 4933 4934 4935 4936 4937 4938 class RequiredStatusCheckInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"context\" , \"app_id\" ) context = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"context\" ) app_id = sgqlc . types . Field ( ID , graphql_name = \"appId\" )","title":"RequiredStatusCheckInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RerequestCheckSuiteInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 class RerequestCheckSuiteInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"check_suite_id\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) check_suite_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"checkSuiteId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RerequestCheckSuiteInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RerequestCheckSuitePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19174 19175 19176 19177 19178 19179 19180 19181 19182 class RerequestCheckSuitePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_suite\" , \"client_mutation_id\" ) check_suite = sgqlc . types . Field ( \"CheckSuite\" , graphql_name = \"checkSuite\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RerequestCheckSuitePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ResolveReviewThreadInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4957 4958 4959 4960 4961 4962 4963 4964 4965 class ResolveReviewThreadInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"thread_id\" , \"client_mutation_id\" ) thread_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"threadId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"ResolveReviewThreadInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ResolveReviewThreadPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19185 19186 19187 19188 19189 19190 19191 19192 19193 class ResolveReviewThreadPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"thread\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) thread = sgqlc . types . Field ( \"PullRequestReviewThread\" , graphql_name = \"thread\" )","title":"ResolveReviewThreadPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RestrictedContribution","text":"Bases: sgqlc . types . Type , Contribution See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30180 30181 30182 30183 30184 30185 30186 class RestrictedContribution ( sgqlc . types . Type , Contribution ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"RestrictedContribution"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissalAllowance","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30189 30190 30191 30192 30193 30194 30195 30196 30197 30198 30199 class ReviewDismissalAllowance ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"branch_protection_rule\" ) actor = sgqlc . types . Field ( \"ReviewDismissalAllowanceActor\" , graphql_name = \"actor\" ) branch_protection_rule = sgqlc . types . Field ( BranchProtectionRule , graphql_name = \"branchProtectionRule\" )","title":"ReviewDismissalAllowance"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissalAllowanceActor","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32864 32865 32866 32867 32868 32869 32870 class ReviewDismissalAllowanceActor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Team , User )","title":"ReviewDismissalAllowanceActor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissalAllowanceConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19196 19197 19198 19199 19200 19201 19202 19203 19204 19205 19206 19207 19208 19209 19210 19211 19212 19213 19214 class ReviewDismissalAllowanceConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReviewDismissalAllowanceEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReviewDismissalAllowance\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ReviewDismissalAllowanceConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissalAllowanceEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19217 19218 19219 19220 19221 19222 19223 19224 19225 class ReviewDismissalAllowanceEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ReviewDismissalAllowance\" , graphql_name = \"node\" )","title":"ReviewDismissalAllowanceEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewDismissedEvent","text":"Bases: sgqlc . types . Type , Node , UniformResourceLocatable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30202 30203 30204 30205 30206 30207 30208 30209 30210 30211 30212 30213 30214 30215 30216 30217 30218 30219 30220 30221 30222 30223 30224 30225 30226 30227 30228 30229 30230 30231 30232 30233 30234 30235 30236 30237 class ReviewDismissedEvent ( sgqlc . types . Type , Node , UniformResourceLocatable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"database_id\" , \"dismissal_message\" , \"dismissal_message_html\" , \"previous_review_state\" , \"pull_request\" , \"pull_request_commit\" , \"review\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) dismissal_message = sgqlc . types . Field ( String , graphql_name = \"dismissalMessage\" ) dismissal_message_html = sgqlc . types . Field ( String , graphql_name = \"dismissalMessageHTML\" ) previous_review_state = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewState ), graphql_name = \"previousReviewState\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) pull_request_commit = sgqlc . types . Field ( PullRequestCommit , graphql_name = \"pullRequestCommit\" ) review = sgqlc . types . Field ( PullRequestReview , graphql_name = \"review\" )","title":"ReviewDismissedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequest","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30240 30241 30242 30243 30244 30245 30246 30247 30248 30249 30250 30251 30252 30253 30254 30255 30256 30257 30258 30259 30260 30261 class ReviewRequest ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"as_code_owner\" , \"database_id\" , \"pull_request\" , \"requested_reviewer\" , ) as_code_owner = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"asCodeOwner\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) requested_reviewer = sgqlc . types . Field ( \"RequestedReviewer\" , graphql_name = \"requestedReviewer\" )","title":"ReviewRequest"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequestConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19228 19229 19230 19231 19232 19233 19234 19235 19236 19237 19238 19239 19240 19241 19242 19243 19244 19245 19246 class ReviewRequestConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReviewRequestEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"ReviewRequest\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"ReviewRequestConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequestEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19249 19250 19251 19252 19253 19254 19255 19256 19257 class ReviewRequestEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"ReviewRequest\" , graphql_name = \"node\" )","title":"ReviewRequestEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequestRemovedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30264 30265 30266 30267 30268 30269 30270 30271 30272 30273 30274 30275 30276 30277 30278 30279 30280 class ReviewRequestRemovedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" , \"requested_reviewer\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) requested_reviewer = sgqlc . types . Field ( \"RequestedReviewer\" , graphql_name = \"requestedReviewer\" )","title":"ReviewRequestRemovedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewRequestedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30283 30284 30285 30286 30287 30288 30289 30290 30291 30292 30293 30294 30295 30296 30297 30298 30299 class ReviewRequestedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"pull_request\" , \"requested_reviewer\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) pull_request = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequest ), graphql_name = \"pullRequest\" ) requested_reviewer = sgqlc . types . Field ( \"RequestedReviewer\" , graphql_name = \"requestedReviewer\" )","title":"ReviewRequestedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ReviewStatusHovercardContext","text":"Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30302 30303 30304 30305 30306 30307 30308 30309 30310 30311 class ReviewStatusHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"review_decision\" ,) review_decision = sgqlc . types . Field ( PullRequestReviewDecision , graphql_name = \"reviewDecision\" )","title":"ReviewStatusHovercardContext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RevokeEnterpriseOrganizationsMigratorRoleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 class RevokeEnterpriseOrganizationsMigratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RevokeEnterpriseOrganizationsMigratorRoleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RevokeEnterpriseOrganizationsMigratorRolePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19260 19261 19262 19263 19264 19265 19266 19267 19268 19269 19270 19271 19272 19273 19274 19275 19276 19277 19278 19279 19280 19281 19282 class RevokeEnterpriseOrganizationsMigratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organizations\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organizations = sgqlc . types . Field ( OrganizationConnection , graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"RevokeEnterpriseOrganizationsMigratorRolePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RevokeMigratorRoleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4982 4983 4984 4985 4986 4987 4988 4989 4990 4991 4992 4993 4994 4995 4996 class RevokeMigratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"actor\" , \"actor_type\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) actor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"actor\" ) actor_type = sgqlc . types . Field ( sgqlc . types . non_null ( ActorType ), graphql_name = \"actorType\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"RevokeMigratorRoleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RevokeMigratorRolePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19285 19286 19287 19288 19289 19290 19291 19292 19293 class RevokeMigratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"success\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) success = sgqlc . types . Field ( Boolean , graphql_name = \"success\" )","title":"RevokeMigratorRolePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.RoleInOrganization","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1745 1746 1747 1748 1749 1750 1751 class RoleInOrganization ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DIRECT_MEMBER\" , \"OWNER\" , \"UNAFFILIATED\" )","title":"RoleInOrganization"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SamlDigestAlgorithm","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1754 1755 1756 1757 1758 1759 1760 class SamlDigestAlgorithm ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SHA1\" , \"SHA256\" , \"SHA384\" , \"SHA512\" )","title":"SamlDigestAlgorithm"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SamlSignatureAlgorithm","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1763 1764 1765 1766 1767 1768 1769 class SamlSignatureAlgorithm ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"RSA_SHA1\" , \"RSA_SHA256\" , \"RSA_SHA384\" , \"RSA_SHA512\" )","title":"SamlSignatureAlgorithm"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReply","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30314 30315 30316 30317 30318 30319 30320 30321 30322 30323 30324 30325 class SavedReply ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"body_html\" , \"database_id\" , \"title\" , \"user\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) body_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bodyHTML\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) user = sgqlc . types . Field ( Actor , graphql_name = \"user\" )","title":"SavedReply"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReplyConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19296 19297 19298 19299 19300 19301 19302 19303 19304 19305 19306 19307 19308 19309 19310 19311 19312 class SavedReplyConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SavedReplyEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SavedReply\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SavedReplyConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReplyEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19315 19316 19317 19318 19319 19320 19321 19322 19323 class SavedReplyEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SavedReply\" , graphql_name = \"node\" )","title":"SavedReplyEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReplyOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 4999 5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 class SavedReplyOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SavedReplyOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SavedReplyOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SavedReplyOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1772 1773 1774 1775 1776 1777 1778 class SavedReplyOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"UPDATED_AT\" ,)","title":"SavedReplyOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SearchResultItem","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32873 32874 32875 32876 32877 32878 32879 32880 32881 32882 32883 32884 32885 32886 32887 32888 class SearchResultItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( App , Discussion , Issue , MarketplaceListing , Organization , PullRequest , Repository , User , )","title":"SearchResultItem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SearchResultItemConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19326 19327 19328 19329 19330 19331 19332 19333 19334 19335 19336 19337 19338 19339 19340 19341 19342 19343 19344 19345 19346 19347 19348 19349 19350 19351 19352 19353 19354 19355 19356 19357 19358 19359 19360 19361 19362 19363 class SearchResultItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"code_count\" , \"discussion_count\" , \"edges\" , \"issue_count\" , \"nodes\" , \"page_info\" , \"repository_count\" , \"user_count\" , \"wiki_count\" , ) code_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"codeCount\" ) discussion_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"discussionCount\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SearchResultItemEdge\" ), graphql_name = \"edges\" ) issue_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"issueCount\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SearchResultItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) repository_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"repositoryCount\" ) user_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"userCount\" ) wiki_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"wikiCount\" )","title":"SearchResultItemConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SearchResultItemEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19366 19367 19368 19369 19370 19371 19372 19373 19374 19375 19376 19377 class SearchResultItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"text_matches\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SearchResultItem\" , graphql_name = \"node\" ) text_matches = sgqlc . types . Field ( sgqlc . types . list_of ( \"TextMatch\" ), graphql_name = \"textMatches\" )","title":"SearchResultItemEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SearchType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1781 1782 1783 1784 1785 1786 1787 class SearchType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"DISCUSSION\" , \"ISSUE\" , \"REPOSITORY\" , \"USER\" )","title":"SearchType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisory","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass SecurityAdvisory ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"classification\" , \"cvss\" , \"cwes\" , \"database_id\" , \"description\" , \"ghsa_id\" , \"identifiers\" , \"notifications_permalink\" , \"origin\" , \"permalink\" , \"published_at\" , \"references\" , \"severity\" , \"summary\" , \"updated_at\" , \"vulnerabilities\" , \"withdrawn_at\" , ) classification = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryClassification ), graphql_name = \"classification\" , ) cvss = sgqlc . types . Field ( sgqlc . types . non_null ( CVSS ), graphql_name = \"cvss\" ) cwes = sgqlc . types . Field ( sgqlc . types . non_null ( CWEConnection ), graphql_name = \"cwes\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) ghsa_id = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"ghsaId\" ) identifiers = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryIdentifier )) ), graphql_name = \"identifiers\" , ) notifications_permalink = sgqlc . types . Field ( URI , graphql_name = \"notificationsPermalink\" ) origin = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"origin\" ) permalink = sgqlc . types . Field ( URI , graphql_name = \"permalink\" ) published_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"publishedAt\" ) references = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryReference )) ), graphql_name = \"references\" , ) severity = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisorySeverity ), graphql_name = \"severity\" ) summary = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"summary\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) vulnerabilities = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityVulnerabilityConnection ), graphql_name = \"vulnerabilities\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( SecurityVulnerabilityOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ( \"ecosystem\" , sgqlc . types . Arg ( SecurityAdvisoryEcosystem , graphql_name = \"ecosystem\" , default = None , ), ), ( \"package\" , sgqlc . types . Arg ( String , graphql_name = \"package\" , default = None ), ), ( \"severities\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisorySeverity ) ), graphql_name = \"severities\" , default = None , ), ), ( \"classifications\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SecurityAdvisoryClassification ) ), graphql_name = \"classifications\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) withdrawn_at = sgqlc . types . Field ( DateTime , graphql_name = \"withdrawnAt\" )","title":"SecurityAdvisory"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryClassification","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1790 1791 1792 1793 1794 1795 1796 class SecurityAdvisoryClassification ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"GENERAL\" , \"MALWARE\" )","title":"SecurityAdvisoryClassification"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19380 19381 19382 19383 19384 19385 19386 19387 19388 19389 19390 19391 19392 19393 19394 19395 19396 19397 19398 class SecurityAdvisoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SecurityAdvisoryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SecurityAdvisory\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SecurityAdvisoryConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryEcosystem","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 class SecurityAdvisoryEcosystem ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ACTIONS\" , \"COMPOSER\" , \"ERLANG\" , \"GO\" , \"MAVEN\" , \"NPM\" , \"NUGET\" , \"PIP\" , \"RUBYGEMS\" , \"RUST\" , )","title":"SecurityAdvisoryEcosystem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19401 19402 19403 19404 19405 19406 19407 19408 19409 class SecurityAdvisoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SecurityAdvisory\" , graphql_name = \"node\" )","title":"SecurityAdvisoryEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryIdentifier","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19412 19413 19414 19415 19416 19417 19418 19419 19420 class SecurityAdvisoryIdentifier ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"type\" , \"value\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"type\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"value\" )","title":"SecurityAdvisoryIdentifier"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryIdentifierFilter","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 class SecurityAdvisoryIdentifierFilter ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"type\" , \"value\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryIdentifierType ), graphql_name = \"type\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"value\" )","title":"SecurityAdvisoryIdentifierFilter"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryIdentifierType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1819 1820 1821 1822 1823 1824 1825 class SecurityAdvisoryIdentifierType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CVE\" , \"GHSA\" )","title":"SecurityAdvisoryIdentifierType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5027 5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 class SecurityAdvisoryOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SecurityAdvisoryOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1828 1829 1830 1831 1832 1833 1834 class SecurityAdvisoryOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"PUBLISHED_AT\" , \"UPDATED_AT\" )","title":"SecurityAdvisoryOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryPackage","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19423 19424 19425 19426 19427 19428 19429 19430 19431 19432 19433 class SecurityAdvisoryPackage ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ecosystem\" , \"name\" ) ecosystem = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryEcosystem ), graphql_name = \"ecosystem\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" )","title":"SecurityAdvisoryPackage"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryPackageVersion","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19436 19437 19438 19439 19440 19441 19442 19443 19444 19445 class SecurityAdvisoryPackageVersion ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"identifier\" ,) identifier = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"identifier\" )","title":"SecurityAdvisoryPackageVersion"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisoryReference","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19448 19449 19450 19451 19452 19453 19454 19455 class SecurityAdvisoryReference ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"url\" ,) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"SecurityAdvisoryReference"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityAdvisorySeverity","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1837 1838 1839 1840 1841 1842 1843 class SecurityAdvisorySeverity ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CRITICAL\" , \"HIGH\" , \"LOW\" , \"MODERATE\" )","title":"SecurityAdvisorySeverity"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerability","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19458 19459 19460 19461 19462 19463 19464 19465 19466 19467 19468 19469 19470 19471 19472 19473 19474 19475 19476 19477 19478 19479 19480 19481 19482 19483 19484 19485 19486 19487 19488 19489 class SecurityVulnerability ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"advisory\" , \"first_patched_version\" , \"package\" , \"severity\" , \"updated_at\" , \"vulnerable_version_range\" , ) advisory = sgqlc . types . Field ( sgqlc . types . non_null ( \"SecurityAdvisory\" ), graphql_name = \"advisory\" ) first_patched_version = sgqlc . types . Field ( SecurityAdvisoryPackageVersion , graphql_name = \"firstPatchedVersion\" ) package = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisoryPackage ), graphql_name = \"package\" ) severity = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityAdvisorySeverity ), graphql_name = \"severity\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) vulnerable_version_range = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"vulnerableVersionRange\" )","title":"SecurityVulnerability"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerabilityConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19492 19493 19494 19495 19496 19497 19498 19499 19500 19501 19502 19503 19504 19505 19506 19507 19508 19509 19510 class SecurityVulnerabilityConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SecurityVulnerabilityEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( SecurityVulnerability ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SecurityVulnerabilityConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerabilityEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19513 19514 19515 19516 19517 19518 19519 19520 19521 class SecurityVulnerabilityEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( SecurityVulnerability , graphql_name = \"node\" )","title":"SecurityVulnerabilityEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerabilityOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 class SecurityVulnerabilityOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SecurityVulnerabilityOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SecurityVulnerabilityOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SecurityVulnerabilityOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1846 1847 1848 1849 1850 1851 1852 class SecurityVulnerabilityOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"UPDATED_AT\" ,)","title":"SecurityVulnerabilityOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetEnterpriseIdentityProviderInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069 5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083 5084 5085 5086 class SetEnterpriseIdentityProviderInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"sso_url\" , \"issuer\" , \"idp_certificate\" , \"signature_method\" , \"digest_method\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) sso_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"ssoUrl\" ) issuer = sgqlc . types . Field ( String , graphql_name = \"issuer\" ) idp_certificate = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"idpCertificate\" ) signature_method = sgqlc . types . Field ( sgqlc . types . non_null ( SamlSignatureAlgorithm ), graphql_name = \"signatureMethod\" ) digest_method = sgqlc . types . Field ( sgqlc . types . non_null ( SamlDigestAlgorithm ), graphql_name = \"digestMethod\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"SetEnterpriseIdentityProviderInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetEnterpriseIdentityProviderPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19524 19525 19526 19527 19528 19529 19530 19531 19532 19533 19534 class SetEnterpriseIdentityProviderPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"identity_provider\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) identity_provider = sgqlc . types . Field ( \"EnterpriseIdentityProvider\" , graphql_name = \"identityProvider\" )","title":"SetEnterpriseIdentityProviderPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetOrganizationInteractionLimitInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5089 5090 5091 5092 5093 5094 5095 5096 5097 5098 5099 5100 5101 5102 5103 class SetOrganizationInteractionLimitInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"limit\" , \"expiry\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimit ), graphql_name = \"limit\" ) expiry = sgqlc . types . Field ( RepositoryInteractionLimitExpiry , graphql_name = \"expiry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"SetOrganizationInteractionLimitInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetOrganizationInteractionLimitPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19537 19538 19539 19540 19541 19542 19543 19544 19545 class SetOrganizationInteractionLimitPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" )","title":"SetOrganizationInteractionLimitPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetRepositoryInteractionLimitInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5106 5107 5108 5109 5110 5111 5112 5113 5114 5115 5116 5117 5118 5119 5120 class SetRepositoryInteractionLimitInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"limit\" , \"expiry\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimit ), graphql_name = \"limit\" ) expiry = sgqlc . types . Field ( RepositoryInteractionLimitExpiry , graphql_name = \"expiry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"SetRepositoryInteractionLimitInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetRepositoryInteractionLimitPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19548 19549 19550 19551 19552 19553 19554 19555 19556 class SetRepositoryInteractionLimitPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"SetRepositoryInteractionLimitPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetUserInteractionLimitInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5123 5124 5125 5126 5127 5128 5129 5130 5131 5132 5133 5134 5135 class SetUserInteractionLimitInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"user_id\" , \"limit\" , \"expiry\" , \"client_mutation_id\" ) user_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"userId\" ) limit = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryInteractionLimit ), graphql_name = \"limit\" ) expiry = sgqlc . types . Field ( RepositoryInteractionLimitExpiry , graphql_name = \"expiry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"SetUserInteractionLimitInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SetUserInteractionLimitPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19559 19560 19561 19562 19563 19564 19565 19566 19567 class SetUserInteractionLimitPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"user\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"SetUserInteractionLimitPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SmimeSignature","text":"Bases: sgqlc . types . Type , GitSignature See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30463 30464 30465 30466 30467 30468 30469 class SmimeSignature ( sgqlc . types . Type , GitSignature ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"SmimeSignature"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SortBy","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19570 19571 19572 19573 19574 19575 19576 19577 19578 19579 19580 class SortBy ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"direction\" , \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"field\" )","title":"SortBy"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Sponsor","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32891 32892 32893 32894 32895 32896 32897 class Sponsor ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Organization , User )","title":"Sponsor"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19583 19584 19585 19586 19587 19588 19589 19590 19591 19592 19593 19594 19595 19596 19597 class SponsorConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Sponsor\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SponsorConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19600 19601 19602 19603 19604 19605 19606 19607 19608 class SponsorEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Sponsor\" , graphql_name = \"node\" )","title":"SponsorEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5138 5139 5140 5141 5142 5143 5144 5145 5146 5147 5148 5149 5150 class SponsorOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SponsorOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1855 1856 1857 1858 1859 1860 1861 class SponsorOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LOGIN\" , \"RELEVANCE\" )","title":"SponsorOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Sponsorable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Sponsorable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"estimated_next_sponsors_payout_in_cents\" , \"has_sponsors_listing\" , \"is_sponsored_by\" , \"is_sponsoring_viewer\" , \"monthly_estimated_sponsors_income_in_cents\" , \"sponsoring\" , \"sponsors\" , \"sponsors_activities\" , \"sponsors_listing\" , \"sponsorship_for_viewer_as_sponsor\" , \"sponsorship_for_viewer_as_sponsorable\" , \"sponsorship_newsletters\" , \"sponsorships_as_maintainer\" , \"sponsorships_as_sponsor\" , \"viewer_can_sponsor\" , \"viewer_is_sponsoring\" , ) estimated_next_sponsors_payout_in_cents = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"estimatedNextSponsorsPayoutInCents\" ) has_sponsors_listing = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasSponsorsListing\" ) is_sponsored_by = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSponsoredBy\" , args = sgqlc . types . ArgDict ( ( ( \"account_login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"accountLogin\" , default = None , ), ), ) ), ) is_sponsoring_viewer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSponsoringViewer\" ) monthly_estimated_sponsors_income_in_cents = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"monthlyEstimatedSponsorsIncomeInCents\" ) sponsoring = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorConnection ), graphql_name = \"sponsoring\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, ), ), ) ), ) sponsors = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorConnection ), graphql_name = \"sponsors\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"tier_id\" , sgqlc . types . Arg ( ID , graphql_name = \"tierId\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"RELEVANCE\" , \"direction\" : \"DESC\" }, ), ), ) ), ) sponsors_activities = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorsActivityConnection\" ), graphql_name = \"sponsorsActivities\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"period\" , sgqlc . types . Arg ( SponsorsActivityPeriod , graphql_name = \"period\" , default = \"MONTH\" ), ), ( \"order_by\" , sgqlc . types . Arg ( SponsorsActivityOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"TIMESTAMP\" , \"direction\" : \"DESC\" }, ), ), ( \"actions\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( SponsorsActivityAction ) ), graphql_name = \"actions\" , default = (), ), ), ) ), ) sponsors_listing = sgqlc . types . Field ( \"SponsorsListing\" , graphql_name = \"sponsorsListing\" ) sponsorship_for_viewer_as_sponsor = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"sponsorshipForViewerAsSponsor\" ) sponsorship_for_viewer_as_sponsorable = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"sponsorshipForViewerAsSponsorable\" ) sponsorship_newsletters = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorshipNewsletterConnection\" ), graphql_name = \"sponsorshipNewsletters\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorshipNewsletterOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) sponsorships_as_maintainer = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorshipConnection\" ), graphql_name = \"sponsorshipsAsMaintainer\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"include_private\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includePrivate\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( SponsorshipOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) sponsorships_as_sponsor = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorshipConnection\" ), graphql_name = \"sponsorshipsAsSponsor\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorshipOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) viewer_can_sponsor = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanSponsor\" ) viewer_is_sponsoring = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsSponsoring\" )","title":"Sponsorable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableItem","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32900 32901 32902 32903 32904 32905 32906 class SponsorableItem ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Organization , User )","title":"SponsorableItem"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableItemConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19837 19838 19839 19840 19841 19842 19843 19844 19845 19846 19847 19848 19849 19850 19851 19852 19853 19854 19855 class SponsorableItemConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorableItemEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorableItem\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SponsorableItemConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableItemEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19858 19859 19860 19861 19862 19863 19864 19865 19866 class SponsorableItemEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SponsorableItem\" , graphql_name = \"node\" )","title":"SponsorableItemEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5153 5154 5155 5156 5157 5158 5159 5160 5161 5162 5163 5164 5165 class SponsorableOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorableOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SponsorableOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorableOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1864 1865 1866 1867 1868 1869 1870 class SponsorableOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"LOGIN\" ,)","title":"SponsorableOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivity","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30472 30473 30474 30475 30476 30477 30478 30479 30480 30481 30482 30483 30484 30485 30486 30487 30488 30489 30490 30491 30492 30493 30494 30495 30496 30497 class SponsorsActivity ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"action\" , \"previous_sponsors_tier\" , \"sponsor\" , \"sponsorable\" , \"sponsors_tier\" , \"timestamp\" , ) action = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsActivityAction ), graphql_name = \"action\" ) previous_sponsors_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"previousSponsorsTier\" ) sponsor = sgqlc . types . Field ( \"Sponsor\" , graphql_name = \"sponsor\" ) sponsorable = sgqlc . types . Field ( sgqlc . types . non_null ( Sponsorable ), graphql_name = \"sponsorable\" ) sponsors_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"sponsorsTier\" ) timestamp = sgqlc . types . Field ( DateTime , graphql_name = \"timestamp\" )","title":"SponsorsActivity"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityAction","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 class SponsorsActivityAction ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CANCELLED_SPONSORSHIP\" , \"NEW_SPONSORSHIP\" , \"PENDING_CHANGE\" , \"REFUND\" , \"SPONSOR_MATCH_DISABLED\" , \"TIER_CHANGE\" , )","title":"SponsorsActivityAction"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19869 19870 19871 19872 19873 19874 19875 19876 19877 19878 19879 19880 19881 19882 19883 19884 19885 19886 19887 class SponsorsActivityConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorsActivityEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorsActivity\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SponsorsActivityConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19890 19891 19892 19893 19894 19895 19896 19897 19898 class SponsorsActivityEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SponsorsActivity\" , graphql_name = \"node\" )","title":"SponsorsActivityEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5168 5169 5170 5171 5172 5173 5174 5175 5176 5177 5178 5179 5180 class SponsorsActivityOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsActivityOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SponsorsActivityOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1889 1890 1891 1892 1893 1894 1895 class SponsorsActivityOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"TIMESTAMP\" ,)","title":"SponsorsActivityOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsActivityPeriod","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1898 1899 1900 1901 1902 1903 1904 class SponsorsActivityPeriod ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"DAY\" , \"MONTH\" , \"WEEK\" )","title":"SponsorsActivityPeriod"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsGoal","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19901 19902 19903 19904 19905 19906 19907 19908 19909 19910 19911 19912 19913 19914 19915 19916 19917 19918 19919 19920 19921 19922 19923 19924 class SponsorsGoal ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"description\" , \"kind\" , \"percent_complete\" , \"target_value\" , \"title\" , ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) kind = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsGoalKind ), graphql_name = \"kind\" ) percent_complete = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"percentComplete\" ) target_value = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"targetValue\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" )","title":"SponsorsGoal"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsGoalKind","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1907 1908 1909 1910 1911 1912 1913 class SponsorsGoalKind ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MONTHLY_SPONSORSHIP_AMOUNT\" , \"TOTAL_SPONSORS_COUNT\" )","title":"SponsorsGoalKind"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsListing","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30500 30501 30502 30503 30504 30505 30506 30507 30508 30509 30510 30511 30512 30513 30514 30515 30516 30517 30518 30519 30520 30521 30522 30523 30524 30525 30526 30527 30528 30529 30530 30531 30532 30533 30534 30535 30536 30537 30538 30539 30540 30541 30542 30543 30544 30545 30546 30547 30548 30549 30550 30551 30552 30553 30554 30555 30556 30557 30558 30559 30560 30561 30562 30563 30564 30565 30566 30567 30568 30569 30570 30571 30572 30573 30574 30575 30576 30577 class SponsorsListing ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"active_goal\" , \"created_at\" , \"dashboard_resource_path\" , \"dashboard_url\" , \"full_description\" , \"full_description_html\" , \"is_public\" , \"name\" , \"next_payout_date\" , \"resource_path\" , \"short_description\" , \"slug\" , \"sponsorable\" , \"tiers\" , \"url\" , ) active_goal = sgqlc . types . Field ( SponsorsGoal , graphql_name = \"activeGoal\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) dashboard_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"dashboardResourcePath\" ) dashboard_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"dashboardUrl\" ) full_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"fullDescription\" ) full_description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"fullDescriptionHTML\" ) is_public = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPublic\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) next_payout_date = sgqlc . types . Field ( Date , graphql_name = \"nextPayoutDate\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) short_description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"shortDescription\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) sponsorable = sgqlc . types . Field ( sgqlc . types . non_null ( Sponsorable ), graphql_name = \"sponsorable\" ) tiers = sgqlc . types . Field ( SponsorsTierConnection , graphql_name = \"tiers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SponsorsTierOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"MONTHLY_PRICE_IN_CENTS\" , \"direction\" : \"ASC\" }, ), ), ) ), ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"SponsorsListing"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTier","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30580 30581 30582 30583 30584 30585 30586 30587 30588 30589 30590 30591 30592 30593 30594 30595 30596 30597 30598 30599 30600 30601 30602 30603 30604 30605 30606 30607 30608 30609 30610 30611 30612 30613 30614 30615 30616 30617 30618 30619 30620 30621 30622 30623 30624 30625 30626 30627 30628 30629 30630 30631 class SponsorsTier ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"admin_info\" , \"closest_lesser_value_tier\" , \"created_at\" , \"description\" , \"description_html\" , \"is_custom_amount\" , \"is_one_time\" , \"monthly_price_in_cents\" , \"monthly_price_in_dollars\" , \"name\" , \"sponsors_listing\" , \"updated_at\" , ) admin_info = sgqlc . types . Field ( SponsorsTierAdminInfo , graphql_name = \"adminInfo\" ) closest_lesser_value_tier = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"closestLesserValueTier\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) description = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"description\" ) description_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"descriptionHTML\" ) is_custom_amount = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCustomAmount\" ) is_one_time = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOneTime\" ) monthly_price_in_cents = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"monthlyPriceInCents\" ) monthly_price_in_dollars = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"monthlyPriceInDollars\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) sponsors_listing = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsListing ), graphql_name = \"sponsorsListing\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"SponsorsTier"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierAdminInfo","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19927 19928 19929 19930 19931 19932 19933 19934 19935 19936 19937 19938 19939 19940 19941 19942 19943 19944 19945 19946 19947 19948 19949 19950 19951 19952 19953 19954 19955 19956 19957 19958 19959 19960 class SponsorsTierAdminInfo ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsorships\" ,) sponsorships = sgqlc . types . Field ( sgqlc . types . non_null ( \"SponsorshipConnection\" ), graphql_name = \"sponsorships\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"include_private\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includePrivate\" , default = False ), ), ( \"order_by\" , sgqlc . types . Arg ( SponsorshipOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), )","title":"SponsorsTierAdminInfo"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19963 19964 19965 19966 19967 19968 19969 19970 19971 19972 19973 19974 19975 19976 19977 19978 19979 class SponsorsTierConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorsTierEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorsTier\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SponsorsTierConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19982 19983 19984 19985 19986 19987 19988 19989 19990 class SponsorsTierEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SponsorsTier\" , graphql_name = \"node\" )","title":"SponsorsTierEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5183 5184 5185 5186 5187 5188 5189 5190 5191 5192 5193 5194 5195 class SponsorsTierOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorsTierOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SponsorsTierOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorsTierOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1916 1917 1918 1919 1920 1921 1922 class SponsorsTierOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"MONTHLY_PRICE_IN_CENTS\" )","title":"SponsorsTierOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Sponsorship","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30634 30635 30636 30637 30638 30639 30640 30641 30642 30643 30644 30645 30646 30647 30648 30649 30650 30651 30652 30653 30654 30655 30656 30657 30658 30659 30660 30661 30662 30663 30664 30665 30666 30667 30668 30669 30670 30671 30672 30673 class Sponsorship ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"is_one_time_payment\" , \"is_sponsor_opted_into_email\" , \"maintainer\" , \"privacy_level\" , \"sponsor\" , \"sponsor_entity\" , \"sponsorable\" , \"tier\" , \"tier_selected_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_one_time_payment = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOneTimePayment\" ) is_sponsor_opted_into_email = sgqlc . types . Field ( Boolean , graphql_name = \"isSponsorOptedIntoEmail\" ) maintainer = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"maintainer\" ) privacy_level = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorshipPrivacy ), graphql_name = \"privacyLevel\" ) sponsor = sgqlc . types . Field ( \"User\" , graphql_name = \"sponsor\" ) sponsor_entity = sgqlc . types . Field ( \"Sponsor\" , graphql_name = \"sponsorEntity\" ) sponsorable = sgqlc . types . Field ( sgqlc . types . non_null ( Sponsorable ), graphql_name = \"sponsorable\" ) tier = sgqlc . types . Field ( SponsorsTier , graphql_name = \"tier\" ) tier_selected_at = sgqlc . types . Field ( DateTime , graphql_name = \"tierSelectedAt\" )","title":"Sponsorship"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 19993 19994 19995 19996 19997 19998 19999 20000 20001 20002 20003 20004 20005 20006 20007 20008 20009 20010 20011 20012 20013 20014 20015 20016 20017 20018 20019 20020 20021 20022 class SponsorshipConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" , \"total_recurring_monthly_price_in_cents\" , \"total_recurring_monthly_price_in_dollars\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorshipEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Sponsorship\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" ) total_recurring_monthly_price_in_cents = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRecurringMonthlyPriceInCents\" ) total_recurring_monthly_price_in_dollars = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalRecurringMonthlyPriceInDollars\" )","title":"SponsorshipConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20025 20026 20027 20028 20029 20030 20031 20032 20033 class SponsorshipEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"node\" )","title":"SponsorshipEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletter","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30676 30677 30678 30679 30680 30681 30682 30683 30684 30685 30686 30687 30688 30689 30690 30691 30692 30693 30694 30695 30696 30697 30698 30699 30700 30701 30702 30703 class SponsorshipNewsletter ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body\" , \"created_at\" , \"is_published\" , \"sponsorable\" , \"subject\" , \"updated_at\" , ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) is_published = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPublished\" ) sponsorable = sgqlc . types . Field ( sgqlc . types . non_null ( Sponsorable ), graphql_name = \"sponsorable\" ) subject = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"subject\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"SponsorshipNewsletter"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletterConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20036 20037 20038 20039 20040 20041 20042 20043 20044 20045 20046 20047 20048 20049 20050 20051 20052 20053 20054 class SponsorshipNewsletterConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorshipNewsletterEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"SponsorshipNewsletter\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SponsorshipNewsletterConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletterEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20057 20058 20059 20060 20061 20062 20063 20064 20065 class SponsorshipNewsletterEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"SponsorshipNewsletter\" , graphql_name = \"node\" )","title":"SponsorshipNewsletterEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletterOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5198 5199 5200 5201 5202 5203 5204 5205 5206 5207 5208 5209 5210 class SponsorshipNewsletterOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorshipNewsletterOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SponsorshipNewsletterOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipNewsletterOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1925 1926 1927 1928 1929 1930 1931 class SponsorshipNewsletterOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"SponsorshipNewsletterOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5213 5214 5215 5216 5217 5218 5219 5220 5221 5222 5223 5224 5225 class SponsorshipOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( SponsorshipOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"SponsorshipOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1934 1935 1936 1937 1938 1939 1940 class SponsorshipOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"SponsorshipOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SponsorshipPrivacy","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1943 1944 1945 1946 1947 1948 1949 class SponsorshipPrivacy ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"PRIVATE\" , \"PUBLIC\" )","title":"SponsorshipPrivacy"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SquashMergeCommitMessage","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1952 1953 1954 1955 1956 1957 1958 class SquashMergeCommitMessage ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"BLANK\" , \"COMMIT_MESSAGES\" , \"PR_BODY\" )","title":"SquashMergeCommitMessage"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SquashMergeCommitTitle","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1961 1962 1963 1964 1965 1966 1967 class SquashMergeCommitTitle ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"COMMIT_OR_PR_TITLE\" , \"PR_TITLE\" )","title":"SquashMergeCommitTitle"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SshSignature","text":"Bases: sgqlc . types . Type , GitSignature See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30706 30707 30708 30709 30710 30711 30712 30713 class SshSignature ( sgqlc . types . Type , GitSignature ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"key_fingerprint\" ,) key_fingerprint = sgqlc . types . Field ( String , graphql_name = \"keyFingerprint\" )","title":"SshSignature"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StarOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5228 5229 5230 5231 5232 5233 5234 5235 5236 5237 5238 5239 5240 class StarOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( StarOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"StarOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StarOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1970 1971 1972 1973 1974 1975 1976 class StarOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"STARRED_AT\" ,)","title":"StarOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StargazerConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20068 20069 20070 20071 20072 20073 20074 20075 20076 20077 20078 20079 20080 20081 20082 20083 20084 class StargazerConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"StargazerEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"StargazerConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StargazerEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20087 20088 20089 20090 20091 20092 20093 20094 20095 20096 20097 20098 class StargazerEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"starred_at\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"node\" ) starred_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"starredAt\" )","title":"StargazerEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Starrable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20101 20102 20103 20104 20105 20106 20107 20108 20109 20110 20111 20112 20113 20114 20115 20116 20117 20118 20119 20120 20121 20122 20123 20124 20125 20126 20127 20128 20129 20130 20131 20132 20133 class Starrable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"stargazer_count\" , \"stargazers\" , \"viewer_has_starred\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) stargazer_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"stargazerCount\" ) stargazers = sgqlc . types . Field ( sgqlc . types . non_null ( StargazerConnection ), graphql_name = \"stargazers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( StarOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) viewer_has_starred = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasStarred\" )","title":"Starrable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StarredRepositoryConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20136 20137 20138 20139 20140 20141 20142 20143 20144 20145 20146 20147 20148 20149 20150 20151 20152 20153 20154 20155 class StarredRepositoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"is_over_limit\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"StarredRepositoryEdge\" ), graphql_name = \"edges\" ) is_over_limit = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isOverLimit\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Repository\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"StarredRepositoryConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StarredRepositoryEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20158 20159 20160 20161 20162 20163 20164 20165 20166 20167 20168 20169 class StarredRepositoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"starred_at\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"node\" ) starred_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"starredAt\" )","title":"StarredRepositoryEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StartRepositoryMigrationInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5243 5244 5245 5246 5247 5248 5249 5250 5251 5252 5253 5254 5255 5256 5257 5258 5259 5260 5261 5262 5263 5264 5265 5266 5267 5268 5269 5270 5271 5272 5273 5274 5275 5276 5277 5278 5279 5280 5281 5282 5283 5284 class StartRepositoryMigrationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"source_id\" , \"owner_id\" , \"source_repository_url\" , \"repository_name\" , \"continue_on_error\" , \"git_archive_url\" , \"metadata_archive_url\" , \"access_token\" , \"github_pat\" , \"skip_releases\" , \"target_repo_visibility\" , \"lock_source\" , \"client_mutation_id\" , ) source_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"sourceId\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) source_repository_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"sourceRepositoryUrl\" ) repository_name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"repositoryName\" ) continue_on_error = sgqlc . types . Field ( Boolean , graphql_name = \"continueOnError\" ) git_archive_url = sgqlc . types . Field ( String , graphql_name = \"gitArchiveUrl\" ) metadata_archive_url = sgqlc . types . Field ( String , graphql_name = \"metadataArchiveUrl\" ) access_token = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"accessToken\" ) github_pat = sgqlc . types . Field ( String , graphql_name = \"githubPat\" ) skip_releases = sgqlc . types . Field ( Boolean , graphql_name = \"skipReleases\" ) target_repo_visibility = sgqlc . types . Field ( String , graphql_name = \"targetRepoVisibility\" ) lock_source = sgqlc . types . Field ( Boolean , graphql_name = \"lockSource\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"StartRepositoryMigrationInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StartRepositoryMigrationPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20172 20173 20174 20175 20176 20177 20178 20179 20180 20181 20182 class StartRepositoryMigrationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository_migration\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository_migration = sgqlc . types . Field ( \"RepositoryMigration\" , graphql_name = \"repositoryMigration\" )","title":"StartRepositoryMigrationPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Status","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30716 30717 30718 30719 30720 30721 30722 30723 30724 30725 30726 30727 30728 30729 30730 30731 30732 30733 30734 30735 30736 30737 30738 30739 30740 30741 30742 30743 30744 30745 30746 30747 30748 30749 30750 30751 30752 30753 30754 30755 30756 30757 30758 30759 class Status ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"combined_contexts\" , \"commit\" , \"context\" , \"contexts\" , \"state\" ) combined_contexts = sgqlc . types . Field ( sgqlc . types . non_null ( StatusCheckRollupContextConnection ), graphql_name = \"combinedContexts\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) context = sgqlc . types . Field ( \"StatusContext\" , graphql_name = \"context\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) contexts = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"StatusContext\" )) ), graphql_name = \"contexts\" , ) state = sgqlc . types . Field ( sgqlc . types . non_null ( StatusState ), graphql_name = \"state\" )","title":"Status"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusCheckRollup","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30762 30763 30764 30765 30766 30767 30768 30769 30770 30771 30772 30773 30774 30775 30776 30777 30778 30779 30780 30781 30782 30783 30784 30785 class StatusCheckRollup ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"commit\" , \"contexts\" , \"state\" ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) contexts = sgqlc . types . Field ( sgqlc . types . non_null ( StatusCheckRollupContextConnection ), graphql_name = \"contexts\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) state = sgqlc . types . Field ( sgqlc . types . non_null ( StatusState ), graphql_name = \"state\" )","title":"StatusCheckRollup"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusCheckRollupContext","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32909 32910 32911 32912 32913 32914 32915 class StatusCheckRollupContext ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( CheckRun , StatusContext )","title":"StatusCheckRollupContext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusCheckRollupContextConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20185 20186 20187 20188 20189 20190 20191 20192 20193 20194 20195 20196 20197 20198 20199 20200 20201 20202 20203 20204 20205 20206 20207 20208 20209 20210 20211 20212 20213 20214 20215 20216 20217 20218 20219 20220 20221 20222 20223 20224 20225 20226 class StatusCheckRollupContextConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_run_count\" , \"check_run_counts_by_state\" , \"edges\" , \"nodes\" , \"page_info\" , \"status_context_count\" , \"status_context_counts_by_state\" , \"total_count\" , ) check_run_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"checkRunCount\" ) check_run_counts_by_state = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckRunStateCount )), graphql_name = \"checkRunCountsByState\" , ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"StatusCheckRollupContextEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"StatusCheckRollupContext\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) status_context_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"statusContextCount\" ) status_context_counts_by_state = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"StatusContextStateCount\" )), graphql_name = \"statusContextCountsByState\" , ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"StatusCheckRollupContextConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusCheckRollupContextEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20229 20230 20231 20232 20233 20234 20235 20236 20237 class StatusCheckRollupContextEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"StatusCheckRollupContext\" , graphql_name = \"node\" )","title":"StatusCheckRollupContextEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusContext","text":"Bases: sgqlc . types . Type , RequirableByPullRequest , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30788 30789 30790 30791 30792 30793 30794 30795 30796 30797 30798 30799 30800 30801 30802 30803 30804 30805 30806 30807 30808 30809 30810 30811 30812 30813 30814 30815 30816 30817 30818 30819 class StatusContext ( sgqlc . types . Type , RequirableByPullRequest , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"avatar_url\" , \"commit\" , \"context\" , \"created_at\" , \"creator\" , \"description\" , \"state\" , \"target_url\" , ) avatar_url = sgqlc . types . Field ( URI , graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = 40 )),) ), ) commit = sgqlc . types . Field ( Commit , graphql_name = \"commit\" ) context = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"context\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) creator = sgqlc . types . Field ( Actor , graphql_name = \"creator\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( StatusState ), graphql_name = \"state\" ) target_url = sgqlc . types . Field ( URI , graphql_name = \"targetUrl\" )","title":"StatusContext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusContextStateCount","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20240 20241 20242 20243 20244 20245 20246 20247 20248 class StatusContextStateCount ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"count\" , \"state\" ) count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"count\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( StatusState ), graphql_name = \"state\" )","title":"StatusContextStateCount"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.StatusState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1979 1980 1981 1982 1983 1984 1985 class StatusState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ERROR\" , \"EXPECTED\" , \"FAILURE\" , \"PENDING\" , \"SUCCESS\" )","title":"StatusState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubmitPullRequestReviewInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5287 5288 5289 5290 5291 5292 5293 5294 5295 5296 5297 5298 5299 5300 5301 5302 5303 5304 5305 5306 class SubmitPullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"pull_request_review_id\" , \"event\" , \"body\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestId\" ) pull_request_review_id = sgqlc . types . Field ( ID , graphql_name = \"pullRequestReviewId\" ) event = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestReviewEvent ), graphql_name = \"event\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"SubmitPullRequestReviewInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubmitPullRequestReviewPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20251 20252 20253 20254 20255 20256 20257 20258 20259 20260 20261 class SubmitPullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" )","title":"SubmitPullRequestReviewPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Submodule","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20264 20265 20266 20267 20268 20269 20270 20271 20272 20273 20274 20275 20276 20277 class Submodule ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch\" , \"git_url\" , \"name\" , \"path\" , \"subproject_commit_oid\" ) branch = sgqlc . types . Field ( String , graphql_name = \"branch\" ) git_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"gitUrl\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) subproject_commit_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"subprojectCommitOid\" )","title":"Submodule"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubmoduleConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20280 20281 20282 20283 20284 20285 20286 20287 20288 20289 20290 20291 20292 20293 20294 20295 20296 class SubmoduleConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"SubmoduleEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( Submodule ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"SubmoduleConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubmoduleEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20299 20300 20301 20302 20303 20304 20305 20306 20307 class SubmoduleEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( Submodule , graphql_name = \"node\" )","title":"SubmoduleEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Subscribable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20310 20311 20312 20313 20314 20315 20316 20317 20318 20319 20320 20321 20322 20323 class Subscribable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"viewer_can_subscribe\" , \"viewer_subscription\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) viewer_can_subscribe = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanSubscribe\" ) viewer_subscription = sgqlc . types . Field ( SubscriptionState , graphql_name = \"viewerSubscription\" )","title":"Subscribable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubscribedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30822 30823 30824 30825 30826 30827 30828 30829 30830 30831 30832 30833 30834 30835 class SubscribedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"subscribable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) subscribable = sgqlc . types . Field ( sgqlc . types . non_null ( Subscribable ), graphql_name = \"subscribable\" )","title":"SubscribedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SubscriptionState","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 1991 1992 1993 1994 1995 1996 1997 class SubscriptionState ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"IGNORED\" , \"SUBSCRIBED\" , \"UNSUBSCRIBED\" )","title":"SubscriptionState"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.SuggestedReviewer","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20326 20327 20328 20329 20330 20331 20332 20333 20334 20335 20336 20337 20338 20339 class SuggestedReviewer ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_author\" , \"is_commenter\" , \"reviewer\" ) is_author = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isAuthor\" ) is_commenter = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCommenter\" ) reviewer = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"reviewer\" )","title":"SuggestedReviewer"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Tag","text":"Bases: sgqlc . types . Type , Node , GitObject See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 30838 30839 30840 30841 30842 30843 30844 30845 30846 30847 30848 class Tag ( sgqlc . types . Type , Node , GitObject ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"message\" , \"name\" , \"tagger\" , \"target\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) tagger = sgqlc . types . Field ( GitActor , graphql_name = \"tagger\" ) target = sgqlc . types . Field ( sgqlc . types . non_null ( GitObject ), graphql_name = \"target\" )","title":"Tag"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Team","text":"Bases: sgqlc . types . Type , Node , Subscribable , MemberStatusable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass Team ( sgqlc . types . Type , Node , Subscribable , MemberStatusable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ancestors\" , \"avatar_url\" , \"child_teams\" , \"combined_slug\" , \"created_at\" , \"database_id\" , \"description\" , \"discussion\" , \"discussions\" , \"discussions_resource_path\" , \"discussions_url\" , \"edit_team_resource_path\" , \"edit_team_url\" , \"invitations\" , \"members\" , \"members_resource_path\" , \"members_url\" , \"name\" , \"new_team_resource_path\" , \"new_team_url\" , \"organization\" , \"parent_team\" , \"privacy\" , \"repositories\" , \"repositories_resource_path\" , \"repositories_url\" , \"resource_path\" , \"slug\" , \"teams_resource_path\" , \"teams_url\" , \"updated_at\" , \"url\" , \"viewer_can_administer\" , ) ancestors = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"ancestors\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) avatar_url = sgqlc . types . Field ( URI , graphql_name = \"avatarUrl\" , args = sgqlc . types . ArgDict ( (( \"size\" , sgqlc . types . Arg ( Int , graphql_name = \"size\" , default = 400 )),) ), ) child_teams = sgqlc . types . Field ( sgqlc . types . non_null ( TeamConnection ), graphql_name = \"childTeams\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( TeamOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"user_logins\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"userLogins\" , default = None , ), ), ( \"immediate_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"immediateOnly\" , default = True ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) combined_slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"combinedSlug\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) discussion = sgqlc . types . Field ( \"TeamDiscussion\" , graphql_name = \"discussion\" , args = sgqlc . types . ArgDict ( ( ( \"number\" , sgqlc . types . Arg ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" , default = None ), ), ) ), ) discussions = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussionConnection ), graphql_name = \"discussions\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"is_pinned\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isPinned\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( TeamDiscussionOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) discussions_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"discussionsResourcePath\" ) discussions_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"discussionsUrl\" ) edit_team_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"editTeamResourcePath\" ) edit_team_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"editTeamUrl\" ) invitations = sgqlc . types . Field ( OrganizationInvitationConnection , graphql_name = \"invitations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) members = sgqlc . types . Field ( sgqlc . types . non_null ( TeamMemberConnection ), graphql_name = \"members\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"membership\" , sgqlc . types . Arg ( TeamMembershipType , graphql_name = \"membership\" , default = \"ALL\" ), ), ( \"role\" , sgqlc . types . Arg ( TeamMemberRole , graphql_name = \"role\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( TeamMemberOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) members_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"membersResourcePath\" ) members_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"membersUrl\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) new_team_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"newTeamResourcePath\" ) new_team_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"newTeamUrl\" ) organization = sgqlc . types . Field ( sgqlc . types . non_null ( Organization ), graphql_name = \"organization\" ) parent_team = sgqlc . types . Field ( \"Team\" , graphql_name = \"parentTeam\" ) privacy = sgqlc . types . Field ( sgqlc . types . non_null ( TeamPrivacy ), graphql_name = \"privacy\" ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( TeamRepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"query\" , sgqlc . types . Arg ( String , graphql_name = \"query\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( TeamRepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) repositories_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"repositoriesResourcePath\" ) repositories_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"repositoriesUrl\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) slug = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"slug\" ) teams_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsResourcePath\" ) teams_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"teamsUrl\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) viewer_can_administer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanAdminister\" )","title":"Team"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamAddMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31118 31119 31120 31121 31122 31123 31124 31125 31126 31127 class TeamAddMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" ,) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" )","title":"TeamAddMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamAddRepositoryAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31130 31131 31132 31133 31134 31135 31136 31137 31138 31139 31140 31141 31142 31143 31144 class TeamAddRepositoryAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , TeamAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" ,) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" )","title":"TeamAddRepositoryAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamAuditEntryData","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20342 20343 20344 20345 20346 20347 20348 20349 20350 20351 20352 class TeamAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"team\" , \"team_name\" , \"team_resource_path\" , \"team_url\" ) team = sgqlc . types . Field ( \"Team\" , graphql_name = \"team\" ) team_name = sgqlc . types . Field ( String , graphql_name = \"teamName\" ) team_resource_path = sgqlc . types . Field ( URI , graphql_name = \"teamResourcePath\" ) team_url = sgqlc . types . Field ( URI , graphql_name = \"teamUrl\" )","title":"TeamAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamChangeParentTeamAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31147 31148 31149 31150 31151 31152 31153 31154 31155 31156 31157 31158 31159 31160 31161 31162 31163 31164 31165 31166 31167 31168 31169 31170 31171 31172 31173 31174 31175 31176 31177 31178 class TeamChangeParentTeamAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" , \"parent_team\" , \"parent_team_name\" , \"parent_team_name_was\" , \"parent_team_resource_path\" , \"parent_team_url\" , \"parent_team_was\" , \"parent_team_was_resource_path\" , \"parent_team_was_url\" , ) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" ) parent_team = sgqlc . types . Field ( Team , graphql_name = \"parentTeam\" ) parent_team_name = sgqlc . types . Field ( String , graphql_name = \"parentTeamName\" ) parent_team_name_was = sgqlc . types . Field ( String , graphql_name = \"parentTeamNameWas\" ) parent_team_resource_path = sgqlc . types . Field ( URI , graphql_name = \"parentTeamResourcePath\" ) parent_team_url = sgqlc . types . Field ( URI , graphql_name = \"parentTeamUrl\" ) parent_team_was = sgqlc . types . Field ( Team , graphql_name = \"parentTeamWas\" ) parent_team_was_resource_path = sgqlc . types . Field ( URI , graphql_name = \"parentTeamWasResourcePath\" ) parent_team_was_url = sgqlc . types . Field ( URI , graphql_name = \"parentTeamWasUrl\" )","title":"TeamChangeParentTeamAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20355 20356 20357 20358 20359 20360 20361 20362 20363 20364 20365 20366 20367 20368 20369 class TeamConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Team\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"TeamConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussion","text":"Bases: sgqlc . types . Type , Node , Comment , Deletable , Reactable , Subscribable , UniformResourceLocatable , Updatable , UpdatableComment See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31181 31182 31183 31184 31185 31186 31187 31188 31189 31190 31191 31192 31193 31194 31195 31196 31197 31198 31199 31200 31201 31202 31203 31204 31205 31206 31207 31208 31209 31210 31211 31212 31213 31214 31215 31216 31217 31218 31219 31220 31221 31222 31223 31224 31225 31226 31227 31228 31229 31230 31231 31232 31233 31234 31235 31236 31237 31238 31239 31240 31241 31242 31243 31244 31245 31246 31247 31248 31249 31250 31251 31252 31253 31254 class TeamDiscussion ( sgqlc . types . Type , Node , Comment , Deletable , Reactable , Subscribable , UniformResourceLocatable , Updatable , UpdatableComment , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body_version\" , \"comments\" , \"comments_resource_path\" , \"comments_url\" , \"is_pinned\" , \"is_private\" , \"number\" , \"team\" , \"title\" , \"viewer_can_pin\" , ) body_version = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"bodyVersion\" ) comments = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussionCommentConnection ), graphql_name = \"comments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( TeamDiscussionCommentOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"from_comment\" , sgqlc . types . Arg ( Int , graphql_name = \"fromComment\" , default = None ), ), ) ), ) comments_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"commentsResourcePath\" ) comments_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"commentsUrl\" ) is_pinned = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPinned\" ) is_private = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isPrivate\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" ) team = sgqlc . types . Field ( sgqlc . types . non_null ( Team ), graphql_name = \"team\" ) title = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"title\" ) viewer_can_pin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanPin\" )","title":"TeamDiscussion"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionComment","text":"Bases: sgqlc . types . Type , Node , Comment , Deletable , Reactable , UniformResourceLocatable , Updatable , UpdatableComment See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31257 31258 31259 31260 31261 31262 31263 31264 31265 31266 31267 31268 31269 31270 31271 31272 31273 31274 31275 31276 31277 31278 31279 class TeamDiscussionComment ( sgqlc . types . Type , Node , Comment , Deletable , Reactable , UniformResourceLocatable , Updatable , UpdatableComment , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"body_version\" , \"discussion\" , \"number\" ) body_version = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"bodyVersion\" ) discussion = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussion ), graphql_name = \"discussion\" ) number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"number\" )","title":"TeamDiscussionComment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionCommentConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20372 20373 20374 20375 20376 20377 20378 20379 20380 20381 20382 20383 20384 20385 20386 20387 20388 20389 20390 class TeamDiscussionCommentConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamDiscussionCommentEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamDiscussionComment\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"TeamDiscussionCommentConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionCommentEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20393 20394 20395 20396 20397 20398 20399 20400 20401 class TeamDiscussionCommentEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"TeamDiscussionComment\" , graphql_name = \"node\" )","title":"TeamDiscussionCommentEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionCommentOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5309 5310 5311 5312 5313 5314 5315 5316 5317 5318 5319 5320 5321 class TeamDiscussionCommentOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussionCommentOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"TeamDiscussionCommentOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionCommentOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2000 2001 2002 2003 2004 2005 2006 class TeamDiscussionCommentOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"NUMBER\" ,)","title":"TeamDiscussionCommentOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20404 20405 20406 20407 20408 20409 20410 20411 20412 20413 20414 20415 20416 20417 20418 20419 20420 20421 20422 class TeamDiscussionConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamDiscussionEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamDiscussion\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"TeamDiscussionConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20425 20426 20427 20428 20429 20430 20431 20432 20433 class TeamDiscussionEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"TeamDiscussion\" , graphql_name = \"node\" )","title":"TeamDiscussionEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5324 5325 5326 5327 5328 5329 5330 5331 5332 5333 5334 5335 5336 class TeamDiscussionOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamDiscussionOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"TeamDiscussionOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamDiscussionOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2009 2010 2011 2012 2013 2014 2015 class TeamDiscussionOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"TeamDiscussionOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20436 20437 20438 20439 20440 20441 20442 20443 20444 class TeamEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"Team\" , graphql_name = \"node\" )","title":"TeamEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20447 20448 20449 20450 20451 20452 20453 20454 20455 20456 20457 20458 20459 20460 20461 20462 20463 class TeamMemberConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamMemberEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"TeamMemberConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20466 20467 20468 20469 20470 20471 20472 20473 20474 20475 20476 20477 20478 20479 20480 20481 20482 20483 20484 20485 20486 20487 class TeamMemberEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"member_access_resource_path\" , \"member_access_url\" , \"node\" , \"role\" , ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) member_access_resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"memberAccessResourcePath\" ) member_access_url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"memberAccessUrl\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"User\" ), graphql_name = \"node\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( TeamMemberRole ), graphql_name = \"role\" )","title":"TeamMemberEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5339 5340 5341 5342 5343 5344 5345 5346 5347 5348 5349 5350 5351 class TeamMemberOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamMemberOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"TeamMemberOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2018 2019 2020 2021 2022 2023 2024 class TeamMemberOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"LOGIN\" )","title":"TeamMemberOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMemberRole","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2027 2028 2029 2030 2031 2032 2033 class TeamMemberRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"MAINTAINER\" , \"MEMBER\" )","title":"TeamMemberRole"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamMembershipType","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2036 2037 2038 2039 2040 2041 2042 class TeamMembershipType ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ALL\" , \"CHILD_TEAM\" , \"IMMEDIATE\" )","title":"TeamMembershipType"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5354 5355 5356 5357 5358 5359 5360 5361 5362 5363 5364 5365 5366 class TeamOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"TeamOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2045 2046 2047 2048 2049 2050 2051 class TeamOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"NAME\" ,)","title":"TeamOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamPrivacy","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2054 2055 2056 2057 2058 2059 2060 class TeamPrivacy ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"SECRET\" , \"VISIBLE\" )","title":"TeamPrivacy"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRemoveMemberAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31282 31283 31284 31285 31286 31287 31288 31289 31290 31291 class TeamRemoveMemberAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , TeamAuditEntryData ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" ,) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" )","title":"TeamRemoveMemberAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRemoveRepositoryAuditEntry","text":"Bases: sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , TeamAuditEntryData See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31294 31295 31296 31297 31298 31299 31300 31301 31302 31303 31304 31305 31306 31307 31308 class TeamRemoveRepositoryAuditEntry ( sgqlc . types . Type , Node , AuditEntry , OrganizationAuditEntryData , RepositoryAuditEntryData , TeamAuditEntryData , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"is_ldap_mapped\" ,) is_ldap_mapped = sgqlc . types . Field ( Boolean , graphql_name = \"isLdapMapped\" )","title":"TeamRemoveRepositoryAuditEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRepositoryConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20490 20491 20492 20493 20494 20495 20496 20497 20498 20499 20500 20501 20502 20503 20504 20505 20506 class TeamRepositoryConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"TeamRepositoryEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"Repository\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"TeamRepositoryConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRepositoryEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20509 20510 20511 20512 20513 20514 20515 20516 20517 20518 20519 20520 class TeamRepositoryEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" , \"permission\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"node\" ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryPermission ), graphql_name = \"permission\" )","title":"TeamRepositoryEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRepositoryOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5369 5370 5371 5372 5373 5374 5375 5376 5377 5378 5379 5380 5381 class TeamRepositoryOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( TeamRepositoryOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"TeamRepositoryOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRepositoryOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 class TeamRepositoryOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"NAME\" , \"PERMISSION\" , \"PUSHED_AT\" , \"STARGAZERS\" , \"UPDATED_AT\" , )","title":"TeamRepositoryOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TeamRole","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2079 2080 2081 2082 2083 2084 2085 class TeamRole ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ADMIN\" , \"MEMBER\" )","title":"TeamRole"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TextMatch","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20523 20524 20525 20526 20527 20528 20529 20530 20531 20532 20533 20534 20535 20536 20537 class TextMatch ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"fragment\" , \"highlights\" , \"property\" ) fragment = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"fragment\" ) highlights = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"TextMatchHighlight\" )) ), graphql_name = \"highlights\" , ) property = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"property\" )","title":"TextMatch"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TextMatchHighlight","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20540 20541 20542 20543 20544 20545 20546 20547 20548 20549 20550 20551 class TextMatchHighlight ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"begin_indice\" , \"end_indice\" , \"text\" ) begin_indice = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"beginIndice\" ) end_indice = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"endIndice\" ) text = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"text\" )","title":"TextMatchHighlight"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Topic","text":"Bases: sgqlc . types . Type , Node , Starrable See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31311 31312 31313 31314 31315 31316 31317 31318 31319 31320 31321 31322 31323 31324 31325 31326 31327 31328 31329 31330 31331 31332 31333 31334 31335 31336 31337 31338 31339 31340 31341 31342 31343 31344 31345 31346 31347 31348 31349 31350 31351 31352 31353 31354 31355 31356 31357 31358 31359 31360 31361 31362 31363 31364 31365 31366 31367 31368 31369 31370 31371 31372 31373 31374 31375 31376 31377 31378 class Topic ( sgqlc . types . Type , Node , Starrable ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"name\" , \"related_topics\" , \"repositories\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) related_topics = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"Topic\" ))), graphql_name = \"relatedTopics\" , args = sgqlc . types . ArgDict ( (( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = 3 )),) ), ) repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositories\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"affiliations\" , default = None , ), ), ( \"owner_affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"ownerAffiliations\" , default = ( \"OWNER\" , \"COLLABORATOR\" ), ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"sponsorable_only\" , sgqlc . types . Arg ( Boolean , graphql_name = \"sponsorableOnly\" , default = False ), ), ) ), )","title":"Topic"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TopicAuditEntryData","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20554 20555 20556 20557 20558 20559 20560 20561 20562 class TopicAuditEntryData ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"topic\" , \"topic_name\" ) topic = sgqlc . types . Field ( \"Topic\" , graphql_name = \"topic\" ) topic_name = sgqlc . types . Field ( String , graphql_name = \"topicName\" )","title":"TopicAuditEntryData"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TopicSuggestionDeclineReason","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2088 2089 2090 2091 2092 2093 2094 class TopicSuggestionDeclineReason ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"NOT_RELEVANT\" , \"PERSONAL_PREFERENCE\" , \"TOO_GENERAL\" , \"TOO_SPECIFIC\" )","title":"TopicSuggestionDeclineReason"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TrackedIssueStates","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2097 2098 2099 2100 2101 2102 2103 class TrackedIssueStates ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CLOSED\" , \"OPEN\" )","title":"TrackedIssueStates"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TransferIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5384 5385 5386 5387 5388 5389 5390 5391 5392 5393 5394 5395 5396 5397 5398 5399 5400 5401 5402 5403 class TransferIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"repository_id\" , \"create_labels_if_missing\" , \"client_mutation_id\" , ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) create_labels_if_missing = sgqlc . types . Field ( Boolean , graphql_name = \"createLabelsIfMissing\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"TransferIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TransferIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20565 20566 20567 20568 20569 20570 20571 20572 20573 class TransferIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" )","title":"TransferIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TransferredEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31381 31382 31383 31384 31385 31386 31387 31388 31389 31390 31391 31392 31393 class TransferredEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"from_repository\" , \"issue\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) from_repository = sgqlc . types . Field ( Repository , graphql_name = \"fromRepository\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" )","title":"TransferredEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Tree","text":"Bases: sgqlc . types . Type , Node , GitObject See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31396 31397 31398 31399 31400 31401 31402 31403 31404 31405 class Tree ( sgqlc . types . Type , Node , GitObject ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"entries\" ,) entries = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( TreeEntry )), graphql_name = \"entries\" )","title":"Tree"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.TreeEntry","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20576 20577 20578 20579 20580 20581 20582 20583 20584 20585 20586 20587 20588 20589 20590 20591 20592 20593 20594 20595 20596 20597 20598 20599 20600 20601 20602 20603 20604 20605 20606 20607 20608 20609 20610 20611 class TreeEntry ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"extension\" , \"is_generated\" , \"line_count\" , \"mode\" , \"name\" , \"object\" , \"oid\" , \"path\" , \"repository\" , \"size\" , \"submodule\" , \"type\" , ) extension = sgqlc . types . Field ( String , graphql_name = \"extension\" ) is_generated = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isGenerated\" ) line_count = sgqlc . types . Field ( Int , graphql_name = \"lineCount\" ) mode = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"mode\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) object = sgqlc . types . Field ( GitObject , graphql_name = \"object\" ) oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"oid\" ) path = sgqlc . types . Field ( String , graphql_name = \"path\" ) repository = sgqlc . types . Field ( sgqlc . types . non_null ( \"Repository\" ), graphql_name = \"repository\" ) size = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"size\" ) submodule = sgqlc . types . Field ( Submodule , graphql_name = \"submodule\" ) type = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"type\" )","title":"TreeEntry"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.URI","text":"Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2106 2107 2108 2109 2110 2111 class URI ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"URI"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnarchiveRepositoryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5406 5407 5408 5409 5410 5411 5412 5413 5414 5415 5416 class UnarchiveRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnarchiveRepositoryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnarchiveRepositoryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20614 20615 20616 20617 20618 20619 20620 20621 20622 class UnarchiveRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"UnarchiveRepositoryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnassignedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31408 31409 31410 31411 31412 31413 31414 31415 31416 31417 31418 31419 31420 31421 31422 31423 class UnassignedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"assignable\" , \"assignee\" , \"created_at\" , \"user\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) assignable = sgqlc . types . Field ( sgqlc . types . non_null ( Assignable ), graphql_name = \"assignable\" ) assignee = sgqlc . types . Field ( \"Assignee\" , graphql_name = \"assignee\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"UnassignedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnfollowOrganizationInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5419 5420 5421 5422 5423 5424 5425 5426 5427 5428 5429 class UnfollowOrganizationInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnfollowOrganizationInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnfollowOrganizationPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20625 20626 20627 20628 20629 20630 20631 20632 20633 class UnfollowOrganizationPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" )","title":"UnfollowOrganizationPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnfollowUserInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5432 5433 5434 5435 5436 5437 5438 5439 5440 class UnfollowUserInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"user_id\" , \"client_mutation_id\" ) user_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"userId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnfollowUserInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnfollowUserPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20636 20637 20638 20639 20640 20641 20642 20643 20644 class UnfollowUserPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"user\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) user = sgqlc . types . Field ( \"User\" , graphql_name = \"user\" )","title":"UnfollowUserPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UniformResourceLocatable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20647 20648 20649 20650 20651 20652 20653 20654 20655 20656 20657 class UniformResourceLocatable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"resource_path\" , \"url\" ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" )","title":"UniformResourceLocatable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnknownSignature","text":"Bases: sgqlc . types . Type , GitSignature See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31426 31427 31428 31429 31430 31431 31432 class UnknownSignature ( sgqlc . types . Type , GitSignature ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ()","title":"UnknownSignature"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlabeledEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31435 31436 31437 31438 31439 31440 31441 31442 31443 31444 31445 31446 31447 31448 31449 class UnlabeledEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"label\" , \"labelable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) label = sgqlc . types . Field ( sgqlc . types . non_null ( Label ), graphql_name = \"label\" ) labelable = sgqlc . types . Field ( sgqlc . types . non_null ( Labelable ), graphql_name = \"labelable\" )","title":"UnlabeledEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlinkRepositoryFromProjectInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5443 5444 5445 5446 5447 5448 5449 5450 5451 5452 5453 5454 class UnlinkRepositoryFromProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"repository_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnlinkRepositoryFromProjectInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlinkRepositoryFromProjectPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20660 20661 20662 20663 20664 20665 20666 20667 20668 20669 class UnlinkRepositoryFromProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"UnlinkRepositoryFromProjectPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlockLockableInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5457 5458 5459 5460 5461 5462 5463 5464 5465 class UnlockLockableInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"lockable_id\" , \"client_mutation_id\" ) lockable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"lockableId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnlockLockableInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlockLockablePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20672 20673 20674 20675 20676 20677 20678 20679 20680 20681 class UnlockLockablePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"unlocked_record\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) unlocked_record = sgqlc . types . Field ( Lockable , graphql_name = \"unlockedRecord\" )","title":"UnlockLockablePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnlockedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31452 31453 31454 31455 31456 31457 31458 31459 31460 31461 31462 31463 31464 31465 class UnlockedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"lockable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) lockable = sgqlc . types . Field ( sgqlc . types . non_null ( Lockable ), graphql_name = \"lockable\" )","title":"UnlockedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkDiscussionCommentAsAnswerInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5468 5469 5470 5471 5472 5473 5474 5475 5476 class UnmarkDiscussionCommentAsAnswerInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnmarkDiscussionCommentAsAnswerInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkDiscussionCommentAsAnswerPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20684 20685 20686 20687 20688 20689 20690 20691 20692 class UnmarkDiscussionCommentAsAnswerPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" )","title":"UnmarkDiscussionCommentAsAnswerPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkFileAsViewedInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5479 5480 5481 5482 5483 5484 5485 5486 5487 5488 5489 5490 class UnmarkFileAsViewedInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"path\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) path = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"path\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnmarkFileAsViewedInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkFileAsViewedPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20695 20696 20697 20698 20699 20700 20701 20702 20703 class UnmarkFileAsViewedPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"UnmarkFileAsViewedPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkIssueAsDuplicateInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5493 5494 5495 5496 5497 5498 5499 5500 5501 5502 5503 5504 5505 5506 class UnmarkIssueAsDuplicateInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"duplicate_id\" , \"canonical_id\" , \"client_mutation_id\" ) duplicate_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"duplicateId\" ) canonical_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"canonicalId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnmarkIssueAsDuplicateInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkIssueAsDuplicatePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20706 20707 20708 20709 20710 20711 20712 20713 20714 class UnmarkIssueAsDuplicatePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"duplicate\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) duplicate = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"duplicate\" )","title":"UnmarkIssueAsDuplicatePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnmarkedAsDuplicateEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31468 31469 31470 31471 31472 31473 31474 31475 31476 31477 31478 31479 31480 31481 31482 31483 31484 31485 31486 31487 31488 31489 class UnmarkedAsDuplicateEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"canonical\" , \"created_at\" , \"duplicate\" , \"is_cross_repository\" , ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) canonical = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"canonical\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) duplicate = sgqlc . types . Field ( \"IssueOrPullRequest\" , graphql_name = \"duplicate\" ) is_cross_repository = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCrossRepository\" )","title":"UnmarkedAsDuplicateEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnminimizeCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5509 5510 5511 5512 5513 5514 5515 5516 5517 class UnminimizeCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subject_id\" , \"client_mutation_id\" ) subject_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subjectId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnminimizeCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnminimizeCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20717 20718 20719 20720 20721 20722 20723 20724 20725 20726 20727 class UnminimizeCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"unminimized_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) unminimized_comment = sgqlc . types . Field ( Minimizable , graphql_name = \"unminimizedComment\" )","title":"UnminimizeCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnpinIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5520 5521 5522 5523 5524 5525 5526 5527 5528 class UnpinIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"issue_id\" , \"client_mutation_id\" ) issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"issueId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnpinIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnpinIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20730 20731 20732 20733 20734 20735 20736 20737 20738 class UnpinIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" )","title":"UnpinIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnpinnedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31492 31493 31494 31495 31496 31497 31498 31499 31500 31501 31502 31503 class UnpinnedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"issue\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) issue = sgqlc . types . Field ( sgqlc . types . non_null ( Issue ), graphql_name = \"issue\" )","title":"UnpinnedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnresolveReviewThreadInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5531 5532 5533 5534 5535 5536 5537 5538 5539 class UnresolveReviewThreadInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"thread_id\" , \"client_mutation_id\" ) thread_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"threadId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UnresolveReviewThreadInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnresolveReviewThreadPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20741 20742 20743 20744 20745 20746 20747 20748 20749 class UnresolveReviewThreadPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"thread\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) thread = sgqlc . types . Field ( \"PullRequestReviewThread\" , graphql_name = \"thread\" )","title":"UnresolveReviewThreadPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UnsubscribedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 31506 31507 31508 31509 31510 31511 31512 31513 31514 31515 31516 31517 31518 31519 class UnsubscribedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"created_at\" , \"subscribable\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) subscribable = sgqlc . types . Field ( sgqlc . types . non_null ( Subscribable ), graphql_name = \"subscribable\" )","title":"UnsubscribedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Updatable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20752 20753 20754 20755 20756 20757 20758 20759 20760 20761 class Updatable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"viewer_can_update\" ,) viewer_can_update = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUpdate\" )","title":"Updatable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatableComment","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20764 20765 20766 20767 20768 20769 20770 20771 20772 20773 20774 20775 20776 class UpdatableComment ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"viewer_cannot_update_reasons\" ,) viewer_cannot_update_reasons = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( CommentCannotUpdateReason )) ), graphql_name = \"viewerCannotUpdateReasons\" , )","title":"UpdatableComment"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateBranchProtectionRuleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5542 5543 5544 5545 5546 5547 5548 5549 5550 5551 5552 5553 5554 5555 5556 5557 5558 5559 5560 5561 5562 5563 5564 5565 5566 5567 5568 5569 5570 5571 5572 5573 5574 5575 5576 5577 5578 5579 5580 5581 5582 5583 5584 5585 5586 5587 5588 5589 5590 5591 5592 5593 5594 5595 5596 5597 5598 5599 5600 5601 5602 5603 5604 5605 5606 5607 5608 5609 5610 5611 5612 5613 5614 5615 5616 5617 5618 5619 5620 5621 5622 5623 5624 5625 5626 5627 5628 5629 5630 5631 5632 5633 5634 5635 5636 class UpdateBranchProtectionRuleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule_id\" , \"pattern\" , \"requires_approving_reviews\" , \"required_approving_review_count\" , \"requires_commit_signatures\" , \"requires_linear_history\" , \"blocks_creations\" , \"allows_force_pushes\" , \"allows_deletions\" , \"is_admin_enforced\" , \"requires_status_checks\" , \"requires_strict_status_checks\" , \"requires_code_owner_reviews\" , \"dismisses_stale_reviews\" , \"restricts_review_dismissals\" , \"review_dismissal_actor_ids\" , \"bypass_pull_request_actor_ids\" , \"bypass_force_push_actor_ids\" , \"restricts_pushes\" , \"push_actor_ids\" , \"required_status_check_contexts\" , \"required_status_checks\" , \"requires_conversation_resolution\" , \"client_mutation_id\" , ) branch_protection_rule_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"branchProtectionRuleId\" ) pattern = sgqlc . types . Field ( String , graphql_name = \"pattern\" ) requires_approving_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"requiresApprovingReviews\" ) required_approving_review_count = sgqlc . types . Field ( Int , graphql_name = \"requiredApprovingReviewCount\" ) requires_commit_signatures = sgqlc . types . Field ( Boolean , graphql_name = \"requiresCommitSignatures\" ) requires_linear_history = sgqlc . types . Field ( Boolean , graphql_name = \"requiresLinearHistory\" ) blocks_creations = sgqlc . types . Field ( Boolean , graphql_name = \"blocksCreations\" ) allows_force_pushes = sgqlc . types . Field ( Boolean , graphql_name = \"allowsForcePushes\" ) allows_deletions = sgqlc . types . Field ( Boolean , graphql_name = \"allowsDeletions\" ) is_admin_enforced = sgqlc . types . Field ( Boolean , graphql_name = \"isAdminEnforced\" ) requires_status_checks = sgqlc . types . Field ( Boolean , graphql_name = \"requiresStatusChecks\" ) requires_strict_status_checks = sgqlc . types . Field ( Boolean , graphql_name = \"requiresStrictStatusChecks\" ) requires_code_owner_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"requiresCodeOwnerReviews\" ) dismisses_stale_reviews = sgqlc . types . Field ( Boolean , graphql_name = \"dismissesStaleReviews\" ) restricts_review_dismissals = sgqlc . types . Field ( Boolean , graphql_name = \"restrictsReviewDismissals\" ) review_dismissal_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"reviewDismissalActorIds\" , ) bypass_pull_request_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"bypassPullRequestActorIds\" , ) bypass_force_push_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"bypassForcePushActorIds\" , ) restricts_pushes = sgqlc . types . Field ( Boolean , graphql_name = \"restrictsPushes\" ) push_actor_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"pushActorIds\" ) required_status_check_contexts = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"requiredStatusCheckContexts\" , ) required_status_checks = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( RequiredStatusCheckInput )), graphql_name = \"requiredStatusChecks\" , ) requires_conversation_resolution = sgqlc . types . Field ( Boolean , graphql_name = \"requiresConversationResolution\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateBranchProtectionRuleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateBranchProtectionRulePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20779 20780 20781 20782 20783 20784 20785 20786 20787 20788 20789 class UpdateBranchProtectionRulePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"branch_protection_rule\" , \"client_mutation_id\" ) branch_protection_rule = sgqlc . types . Field ( \"BranchProtectionRule\" , graphql_name = \"branchProtectionRule\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateBranchProtectionRulePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateCheckRunInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5639 5640 5641 5642 5643 5644 5645 5646 5647 5648 5649 5650 5651 5652 5653 5654 5655 5656 5657 5658 5659 5660 5661 5662 5663 5664 5665 5666 5667 5668 5669 5670 5671 5672 5673 5674 5675 5676 5677 class UpdateCheckRunInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"check_run_id\" , \"name\" , \"details_url\" , \"external_id\" , \"status\" , \"started_at\" , \"conclusion\" , \"completed_at\" , \"output\" , \"actions\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) check_run_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"checkRunId\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) details_url = sgqlc . types . Field ( URI , graphql_name = \"detailsUrl\" ) external_id = sgqlc . types . Field ( String , graphql_name = \"externalId\" ) status = sgqlc . types . Field ( RequestableCheckStatusState , graphql_name = \"status\" ) started_at = sgqlc . types . Field ( DateTime , graphql_name = \"startedAt\" ) conclusion = sgqlc . types . Field ( CheckConclusionState , graphql_name = \"conclusion\" ) completed_at = sgqlc . types . Field ( DateTime , graphql_name = \"completedAt\" ) output = sgqlc . types . Field ( CheckRunOutput , graphql_name = \"output\" ) actions = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckRunAction )), graphql_name = \"actions\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateCheckRunInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateCheckRunPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20792 20793 20794 20795 20796 20797 20798 20799 20800 class UpdateCheckRunPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_run\" , \"client_mutation_id\" ) check_run = sgqlc . types . Field ( \"CheckRun\" , graphql_name = \"checkRun\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateCheckRunPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateCheckSuitePreferencesInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5680 5681 5682 5683 5684 5685 5686 5687 5688 5689 5690 5691 5692 5693 5694 5695 5696 5697 5698 5699 5700 class UpdateCheckSuitePreferencesInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"auto_trigger_preferences\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) auto_trigger_preferences = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( CheckSuiteAutoTriggerPreference )) ), graphql_name = \"autoTriggerPreferences\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateCheckSuitePreferencesInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateCheckSuitePreferencesPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20803 20804 20805 20806 20807 20808 20809 20810 20811 class UpdateCheckSuitePreferencesPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"UpdateCheckSuitePreferencesPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateDiscussionCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5703 5704 5705 5706 5707 5708 5709 5710 5711 5712 class UpdateDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"comment_id\" , \"body\" , \"client_mutation_id\" ) comment_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"commentId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateDiscussionCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateDiscussionCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20814 20815 20816 20817 20818 20819 20820 20821 20822 class UpdateDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) comment = sgqlc . types . Field ( \"DiscussionComment\" , graphql_name = \"comment\" )","title":"UpdateDiscussionCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateDiscussionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5715 5716 5717 5718 5719 5720 5721 5722 5723 5724 5725 5726 5727 5728 5729 5730 5731 5732 5733 5734 class UpdateDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"discussion_id\" , \"title\" , \"body\" , \"category_id\" , \"client_mutation_id\" , ) discussion_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"discussionId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) category_id = sgqlc . types . Field ( ID , graphql_name = \"categoryId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateDiscussionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateDiscussionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20825 20826 20827 20828 20829 20830 20831 20832 20833 class UpdateDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) discussion = sgqlc . types . Field ( \"Discussion\" , graphql_name = \"discussion\" )","title":"UpdateDiscussionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseAdministratorRoleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5737 5738 5739 5740 5741 5742 5743 5744 5745 5746 5747 5748 5749 5750 5751 class UpdateEnterpriseAdministratorRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"login\" , \"role\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) login = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"login\" ) role = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseAdministratorRole ), graphql_name = \"role\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseAdministratorRoleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseAdministratorRolePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20836 20837 20838 20839 20840 20841 20842 20843 20844 class UpdateEnterpriseAdministratorRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseAdministratorRolePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5754 5755 5756 5757 5758 5759 5760 5761 5762 5763 5764 5765 5766 5767 5768 5769 5770 5771 5772 5773 5774 5775 5776 class UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"policy_value\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) policy_value = sgqlc . types . Field ( EnterpriseAllowPrivateRepositoryForkingPolicyValue , graphql_name = \"policyValue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20847 20848 20849 20850 20851 20852 20853 20854 20855 20856 class UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseDefaultRepositoryPermissionSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5779 5780 5781 5782 5783 5784 5785 5786 5787 5788 5789 5790 5791 5792 5793 class UpdateEnterpriseDefaultRepositoryPermissionSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseDefaultRepositoryPermissionSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseDefaultRepositoryPermissionSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseDefaultRepositoryPermissionSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20859 20860 20861 20862 20863 20864 20865 20866 20867 20868 class UpdateEnterpriseDefaultRepositoryPermissionSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseDefaultRepositoryPermissionSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5796 5797 5798 5799 5800 5801 5802 5803 5804 5805 5806 5807 5808 5809 5810 5811 5812 class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20871 20872 20873 20874 20875 20876 20877 20878 20879 20880 20881 20882 class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanCreateRepositoriesSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5815 5816 5817 5818 5819 5820 5821 5822 5823 5824 5825 5826 5827 5828 5829 5830 5831 5832 5833 5834 5835 5836 5837 5838 5839 5840 5841 5842 5843 5844 5845 5846 5847 5848 class UpdateEnterpriseMembersCanCreateRepositoriesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"members_can_create_repositories_policy_enabled\" , \"members_can_create_public_repositories\" , \"members_can_create_private_repositories\" , \"members_can_create_internal_repositories\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( EnterpriseMembersCanCreateRepositoriesSettingValue , graphql_name = \"settingValue\" ) members_can_create_repositories_policy_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreateRepositoriesPolicyEnabled\" ) members_can_create_public_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreatePublicRepositories\" ) members_can_create_private_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreatePrivateRepositories\" ) members_can_create_internal_repositories = sgqlc . types . Field ( Boolean , graphql_name = \"membersCanCreateInternalRepositories\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20885 20886 20887 20888 20889 20890 20891 20892 20893 20894 class UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanDeleteIssuesSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5851 5852 5853 5854 5855 5856 5857 5858 5859 5860 5861 5862 5863 5864 5865 class UpdateEnterpriseMembersCanDeleteIssuesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseMembersCanDeleteIssuesSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanDeleteIssuesSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20897 20898 20899 20900 20901 20902 20903 20904 20905 20906 class UpdateEnterpriseMembersCanDeleteIssuesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseMembersCanDeleteIssuesSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5868 5869 5870 5871 5872 5873 5874 5875 5876 5877 5878 5879 5880 5881 5882 class UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20909 20910 20911 20912 20913 20914 20915 20916 20917 20918 class UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5885 5886 5887 5888 5889 5890 5891 5892 5893 5894 5895 5896 5897 5898 5899 class UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20921 20922 20923 20924 20925 20926 20927 20928 20929 20930 class UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanMakePurchasesSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5902 5903 5904 5905 5906 5907 5908 5909 5910 5911 5912 5913 5914 5915 5916 class UpdateEnterpriseMembersCanMakePurchasesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseMembersCanMakePurchasesSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseMembersCanMakePurchasesSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanMakePurchasesSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20933 20934 20935 20936 20937 20938 20939 20940 20941 20942 class UpdateEnterpriseMembersCanMakePurchasesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseMembersCanMakePurchasesSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5919 5920 5921 5922 5923 5924 5925 5926 5927 5928 5929 5930 5931 5932 5933 class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20945 20946 20947 20948 20949 20950 20951 20952 20953 20954 class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5936 5937 5938 5939 5940 5941 5942 5943 5944 5945 5946 5947 5948 5949 5950 class UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20957 20958 20959 20960 20961 20962 20963 20964 20965 20966 class UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseOrganizationProjectsSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5953 5954 5955 5956 5957 5958 5959 5960 5961 5962 5963 5964 5965 5966 5967 class UpdateEnterpriseOrganizationProjectsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseOrganizationProjectsSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseOrganizationProjectsSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20969 20970 20971 20972 20973 20974 20975 20976 20977 20978 class UpdateEnterpriseOrganizationProjectsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseOrganizationProjectsSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseOwnerOrganizationRoleInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5970 5971 5972 5973 5974 5975 5976 5977 5978 5979 5980 5981 5982 5983 5984 5985 5986 5987 5988 5989 5990 5991 class UpdateEnterpriseOwnerOrganizationRoleInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"organization_id\" , \"organization_role\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) organization_role = sgqlc . types . Field ( sgqlc . types . non_null ( RoleInOrganization ), graphql_name = \"organizationRole\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseOwnerOrganizationRoleInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseOwnerOrganizationRolePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20981 20982 20983 20984 20985 20986 20987 20988 20989 class UpdateEnterpriseOwnerOrganizationRolePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseOwnerOrganizationRolePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseProfileInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 5994 5995 5996 5997 5998 5999 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6010 6011 6012 6013 6014 6015 class UpdateEnterpriseProfileInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"name\" , \"description\" , \"website_url\" , \"location\" , \"client_mutation_id\" , ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) website_url = sgqlc . types . Field ( String , graphql_name = \"websiteUrl\" ) location = sgqlc . types . Field ( String , graphql_name = \"location\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseProfileInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseProfilePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 20992 20993 20994 20995 20996 20997 20998 20999 21000 class UpdateEnterpriseProfilePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" )","title":"UpdateEnterpriseProfilePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseRepositoryProjectsSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6018 6019 6020 6021 6022 6023 6024 6025 6026 6027 6028 6029 6030 6031 6032 class UpdateEnterpriseRepositoryProjectsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseRepositoryProjectsSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseRepositoryProjectsSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21003 21004 21005 21006 21007 21008 21009 21010 21011 21012 class UpdateEnterpriseRepositoryProjectsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseRepositoryProjectsSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseTeamDiscussionsSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6035 6036 6037 6038 6039 6040 6041 6042 6043 6044 6045 6046 6047 6048 6049 class UpdateEnterpriseTeamDiscussionsSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledDisabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseTeamDiscussionsSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseTeamDiscussionsSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21015 21016 21017 21018 21019 21020 21021 21022 21023 21024 class UpdateEnterpriseTeamDiscussionsSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseTeamDiscussionsSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6052 6053 6054 6055 6056 6057 6058 6059 6060 6061 6062 6063 6064 6065 class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"enterprise_id\" , \"setting_value\" , \"client_mutation_id\" ) enterprise_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"enterpriseId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( EnterpriseEnabledSettingValue ), graphql_name = \"settingValue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21027 21028 21029 21030 21031 21032 21033 21034 21035 21036 class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"enterprise\" , \"message\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) enterprise = sgqlc . types . Field ( \"Enterprise\" , graphql_name = \"enterprise\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" )","title":"UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnvironmentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6068 6069 6070 6071 6072 6073 6074 6075 6076 6077 6078 6079 6080 6081 6082 6083 6084 6085 6086 6087 class UpdateEnvironmentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"environment_id\" , \"wait_timer\" , \"reviewers\" , \"client_mutation_id\" , ) environment_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"environmentId\" ) wait_timer = sgqlc . types . Field ( Int , graphql_name = \"waitTimer\" ) reviewers = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"reviewers\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateEnvironmentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateEnvironmentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21039 21040 21041 21042 21043 21044 21045 21046 21047 class UpdateEnvironmentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"environment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) environment = sgqlc . types . Field ( \"Environment\" , graphql_name = \"environment\" )","title":"UpdateEnvironmentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListEnabledSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6090 6091 6092 6093 6094 6095 6096 6097 6098 6099 6100 6101 6102 class UpdateIpAllowListEnabledSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"setting_value\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListEnabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateIpAllowListEnabledSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListEnabledSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21050 21051 21052 21053 21054 21055 21056 21057 21058 class UpdateIpAllowListEnabledSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"IpAllowListOwner\" , graphql_name = \"owner\" )","title":"UpdateIpAllowListEnabledSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListEntryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6105 6106 6107 6108 6109 6110 6111 6112 6113 6114 6115 6116 6117 6118 6119 6120 6121 6122 6123 6124 6125 6126 6127 6128 class UpdateIpAllowListEntryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ip_allow_list_entry_id\" , \"allow_list_value\" , \"name\" , \"is_active\" , \"client_mutation_id\" , ) ip_allow_list_entry_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ipAllowListEntryId\" ) allow_list_value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"allowListValue\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) is_active = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isActive\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateIpAllowListEntryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListEntryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21061 21062 21063 21064 21065 21066 21067 21068 21069 21070 21071 class UpdateIpAllowListEntryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ip_allow_list_entry\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ip_allow_list_entry = sgqlc . types . Field ( \"IpAllowListEntry\" , graphql_name = \"ipAllowListEntry\" )","title":"UpdateIpAllowListEntryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListForInstalledAppsEnabledSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6131 6132 6133 6134 6135 6136 6137 6138 6139 6140 6141 6142 6143 class UpdateIpAllowListForInstalledAppsEnabledSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"setting_value\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( IpAllowListForInstalledAppsEnabledSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateIpAllowListForInstalledAppsEnabledSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIpAllowListForInstalledAppsEnabledSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21074 21075 21076 21077 21078 21079 21080 21081 21082 class UpdateIpAllowListForInstalledAppsEnabledSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"IpAllowListOwner\" , graphql_name = \"owner\" )","title":"UpdateIpAllowListForInstalledAppsEnabledSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIssueCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6146 6147 6148 6149 6150 6151 6152 6153 6154 6155 class UpdateIssueCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"body\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateIssueCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIssueCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21085 21086 21087 21088 21089 21090 21091 21092 21093 class UpdateIssueCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"issue_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue_comment = sgqlc . types . Field ( \"IssueComment\" , graphql_name = \"issueComment\" )","title":"UpdateIssueCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6158 6159 6160 6161 6162 6163 6164 6165 6166 6167 6168 6169 6170 6171 6172 6173 6174 6175 6176 6177 6178 6179 6180 6181 6182 6183 6184 6185 6186 6187 6188 6189 class UpdateIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"title\" , \"body\" , \"assignee_ids\" , \"milestone_id\" , \"label_ids\" , \"state\" , \"project_ids\" , \"client_mutation_id\" , ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) milestone_id = sgqlc . types . Field ( ID , graphql_name = \"milestoneId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"labelIds\" ) state = sgqlc . types . Field ( IssueState , graphql_name = \"state\" ) project_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"projectIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21096 21097 21098 21099 21100 21101 21102 21103 21104 21105 class UpdateIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"issue\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) issue = sgqlc . types . Field ( \"Issue\" , graphql_name = \"issue\" )","title":"UpdateIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateNotificationRestrictionSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6192 6193 6194 6195 6196 6197 6198 6199 6200 6201 6202 6203 6204 class UpdateNotificationRestrictionSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"owner_id\" , \"setting_value\" , \"client_mutation_id\" ) owner_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"ownerId\" ) setting_value = sgqlc . types . Field ( sgqlc . types . non_null ( NotificationRestrictionSettingValue ), graphql_name = \"settingValue\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateNotificationRestrictionSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateNotificationRestrictionSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21108 21109 21110 21111 21112 21113 21114 21115 21116 class UpdateNotificationRestrictionSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"owner\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) owner = sgqlc . types . Field ( \"VerifiableDomainOwner\" , graphql_name = \"owner\" )","title":"UpdateNotificationRestrictionSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateOrganizationAllowPrivateRepositoryForkingSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6207 6208 6209 6210 6211 6212 6213 6214 6215 6216 6217 6218 6219 6220 class UpdateOrganizationAllowPrivateRepositoryForkingSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"forking_enabled\" , \"client_mutation_id\" ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) forking_enabled = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"forkingEnabled\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateOrganizationAllowPrivateRepositoryForkingSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21119 21120 21121 21122 21123 21124 21125 21126 21127 21128 class UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" )","title":"UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateOrganizationWebCommitSignoffSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6223 6224 6225 6226 6227 6228 6229 6230 6231 6232 6233 6234 6235 6236 6237 6238 6239 6240 class UpdateOrganizationWebCommitSignoffSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"organization_id\" , \"web_commit_signoff_required\" , \"client_mutation_id\" , ) organization_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"organizationId\" ) web_commit_signoff_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"webCommitSignoffRequired\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateOrganizationWebCommitSignoffSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateOrganizationWebCommitSignoffSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21131 21132 21133 21134 21135 21136 21137 21138 21139 21140 class UpdateOrganizationWebCommitSignoffSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" , \"organization\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) organization = sgqlc . types . Field ( \"Organization\" , graphql_name = \"organization\" )","title":"UpdateOrganizationWebCommitSignoffSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectCardInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6243 6244 6245 6246 6247 6248 6249 6250 6251 6252 6253 6254 6255 class UpdateProjectCardInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_card_id\" , \"is_archived\" , \"note\" , \"client_mutation_id\" ) project_card_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectCardId\" ) is_archived = sgqlc . types . Field ( Boolean , graphql_name = \"isArchived\" ) note = sgqlc . types . Field ( String , graphql_name = \"note\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectCardInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectCardPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21143 21144 21145 21146 21147 21148 21149 21150 21151 class UpdateProjectCardPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_card\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_card = sgqlc . types . Field ( \"ProjectCard\" , graphql_name = \"projectCard\" )","title":"UpdateProjectCardPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectColumnInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6258 6259 6260 6261 6262 6263 6264 6265 6266 6267 6268 6269 class UpdateProjectColumnInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_column_id\" , \"name\" , \"client_mutation_id\" ) project_column_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectColumnId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectColumnInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectColumnPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21154 21155 21156 21157 21158 21159 21160 21161 21162 class UpdateProjectColumnPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_column\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_column = sgqlc . types . Field ( \"ProjectColumn\" , graphql_name = \"projectColumn\" )","title":"UpdateProjectColumnPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectDraftIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6272 6273 6274 6275 6276 6277 6278 6279 6280 6281 6282 6283 6284 6285 6286 6287 6288 6289 6290 6291 6292 6293 class UpdateProjectDraftIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"draft_issue_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"client_mutation_id\" , ) draft_issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"draftIssueId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectDraftIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectDraftIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21165 21166 21167 21168 21169 21170 21171 21172 21173 class UpdateProjectDraftIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"draft_issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) draft_issue = sgqlc . types . Field ( \"DraftIssue\" , graphql_name = \"draftIssue\" )","title":"UpdateProjectDraftIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6296 6297 6298 6299 6300 6301 6302 6303 6304 6305 6306 6307 6308 6309 6310 6311 6312 6313 6314 6315 class UpdateProjectInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"name\" , \"body\" , \"state\" , \"public\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) state = sgqlc . types . Field ( ProjectState , graphql_name = \"state\" ) public = sgqlc . types . Field ( Boolean , graphql_name = \"public\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectNextInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6318 6319 6320 6321 6322 6323 6324 6325 6326 6327 6328 6329 6330 6331 6332 6333 6334 6335 6336 6337 6338 6339 class UpdateProjectNextInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"title\" , \"description\" , \"short_description\" , \"closed\" , \"public\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) short_description = sgqlc . types . Field ( String , graphql_name = \"shortDescription\" ) closed = sgqlc . types . Field ( Boolean , graphql_name = \"closed\" ) public = sgqlc . types . Field ( Boolean , graphql_name = \"public\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectNextInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectNextItemFieldInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6342 6343 6344 6345 6346 6347 6348 6349 6350 6351 6352 6353 6354 6355 6356 6357 6358 6359 class UpdateProjectNextItemFieldInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"field_id\" , \"value\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( ID , graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( ID , graphql_name = \"itemId\" ) field_id = sgqlc . types . Field ( ID , graphql_name = \"fieldId\" ) value = sgqlc . types . Field ( String , graphql_name = \"value\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectNextItemFieldInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectNextItemFieldPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21176 21177 21178 21179 21180 21181 21182 21183 21184 21185 21186 class UpdateProjectNextItemFieldPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_next_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_next_item = sgqlc . types . Field ( \"ProjectNextItem\" , graphql_name = \"projectNextItem\" )","title":"UpdateProjectNextItemFieldPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectNextPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21189 21190 21191 21192 21193 21194 21195 21196 21197 class UpdateProjectNextPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_next\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_next = sgqlc . types . Field ( \"ProjectNext\" , graphql_name = \"projectNext\" )","title":"UpdateProjectNextPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21200 21201 21202 21203 21204 21205 21206 21207 21208 class UpdateProjectPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project = sgqlc . types . Field ( \"Project\" , graphql_name = \"project\" )","title":"UpdateProjectPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2DraftIssueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6362 6363 6364 6365 6366 6367 6368 6369 6370 6371 6372 6373 6374 6375 6376 6377 6378 6379 6380 6381 6382 6383 class UpdateProjectV2DraftIssueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"draft_issue_id\" , \"title\" , \"body\" , \"assignee_ids\" , \"client_mutation_id\" , ) draft_issue_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"draftIssueId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectV2DraftIssueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2DraftIssuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21211 21212 21213 21214 21215 21216 21217 21218 21219 class UpdateProjectV2DraftIssuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"draft_issue\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) draft_issue = sgqlc . types . Field ( \"DraftIssue\" , graphql_name = \"draftIssue\" )","title":"UpdateProjectV2DraftIssuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2Input","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6386 6387 6388 6389 6390 6391 6392 6393 6394 6395 6396 6397 6398 6399 6400 6401 6402 6403 6404 6405 6406 6407 class UpdateProjectV2Input ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"title\" , \"short_description\" , \"readme\" , \"closed\" , \"public\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) short_description = sgqlc . types . Field ( String , graphql_name = \"shortDescription\" ) readme = sgqlc . types . Field ( String , graphql_name = \"readme\" ) closed = sgqlc . types . Field ( Boolean , graphql_name = \"closed\" ) public = sgqlc . types . Field ( Boolean , graphql_name = \"public\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectV2Input"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2ItemFieldValueInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6410 6411 6412 6413 6414 6415 6416 6417 6418 6419 6420 6421 6422 6423 6424 6425 6426 6427 6428 6429 class UpdateProjectV2ItemFieldValueInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"field_id\" , \"value\" , \"client_mutation_id\" , ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"itemId\" ) field_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"fieldId\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( ProjectV2FieldValue ), graphql_name = \"value\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectV2ItemFieldValueInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2ItemFieldValuePayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21222 21223 21224 21225 21226 21227 21228 21229 21230 class UpdateProjectV2ItemFieldValuePayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_v2_item\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_v2_item = sgqlc . types . Field ( \"ProjectV2Item\" , graphql_name = \"projectV2Item\" )","title":"UpdateProjectV2ItemFieldValuePayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2ItemPositionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6432 6433 6434 6435 6436 6437 6438 6439 6440 6441 6442 class UpdateProjectV2ItemPositionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"project_id\" , \"item_id\" , \"after_id\" , \"client_mutation_id\" ) project_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"projectId\" ) item_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"itemId\" ) after_id = sgqlc . types . Field ( ID , graphql_name = \"afterId\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateProjectV2ItemPositionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2ItemPositionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21233 21234 21235 21236 21237 21238 21239 21240 21241 21242 21243 21244 21245 21246 21247 21248 21249 21250 21251 21252 21253 21254 21255 class UpdateProjectV2ItemPositionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"items\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) items = sgqlc . types . Field ( ProjectV2ItemConnection , graphql_name = \"items\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"UpdateProjectV2ItemPositionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateProjectV2Payload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21258 21259 21260 21261 21262 21263 21264 21265 21266 class UpdateProjectV2Payload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"project_v2\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) project_v2 = sgqlc . types . Field ( \"ProjectV2\" , graphql_name = \"projectV2\" )","title":"UpdateProjectV2Payload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestBranchInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6445 6446 6447 6448 6449 6450 6451 6452 6453 6454 6455 6456 class UpdatePullRequestBranchInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"expected_head_oid\" , \"client_mutation_id\" ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) expected_head_oid = sgqlc . types . Field ( GitObjectID , graphql_name = \"expectedHeadOid\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdatePullRequestBranchInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestBranchPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21269 21270 21271 21272 21273 21274 21275 21276 21277 class UpdatePullRequestBranchPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"UpdatePullRequestBranchPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6459 6460 6461 6462 6463 6464 6465 6466 6467 6468 6469 6470 6471 6472 6473 6474 6475 6476 6477 6478 6479 6480 6481 6482 6483 6484 6485 6486 6487 6488 6489 6490 6491 6492 6493 6494 6495 6496 6497 6498 class UpdatePullRequestInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_id\" , \"base_ref_name\" , \"title\" , \"body\" , \"state\" , \"maintainer_can_modify\" , \"assignee_ids\" , \"milestone_id\" , \"label_ids\" , \"project_ids\" , \"client_mutation_id\" , ) pull_request_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestId\" ) base_ref_name = sgqlc . types . Field ( String , graphql_name = \"baseRefName\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) state = sgqlc . types . Field ( PullRequestUpdateState , graphql_name = \"state\" ) maintainer_can_modify = sgqlc . types . Field ( Boolean , graphql_name = \"maintainerCanModify\" ) assignee_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"assigneeIds\" ) milestone_id = sgqlc . types . Field ( ID , graphql_name = \"milestoneId\" ) label_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"labelIds\" ) project_ids = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID )), graphql_name = \"projectIds\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdatePullRequestInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21280 21281 21282 21283 21284 21285 21286 21287 21288 21289 class UpdatePullRequestPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"client_mutation_id\" , \"pull_request\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request = sgqlc . types . Field ( \"PullRequest\" , graphql_name = \"pullRequest\" )","title":"UpdatePullRequestPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestReviewCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6501 6502 6503 6504 6505 6506 6507 6508 6509 6510 6511 6512 class UpdatePullRequestReviewCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_review_comment_id\" , \"body\" , \"client_mutation_id\" ) pull_request_review_comment_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestReviewCommentId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdatePullRequestReviewCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestReviewCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21292 21293 21294 21295 21296 21297 21298 21299 21300 21301 21302 class UpdatePullRequestReviewCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review_comment = sgqlc . types . Field ( \"PullRequestReviewComment\" , graphql_name = \"pullRequestReviewComment\" )","title":"UpdatePullRequestReviewCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestReviewInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6515 6516 6517 6518 6519 6520 6521 6522 6523 6524 6525 6526 class UpdatePullRequestReviewInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"pull_request_review_id\" , \"body\" , \"client_mutation_id\" ) pull_request_review_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"pullRequestReviewId\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdatePullRequestReviewInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdatePullRequestReviewPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21305 21306 21307 21308 21309 21310 21311 21312 21313 21314 21315 class UpdatePullRequestReviewPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"pull_request_review\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) pull_request_review = sgqlc . types . Field ( \"PullRequestReview\" , graphql_name = \"pullRequestReview\" )","title":"UpdatePullRequestReviewPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRefInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6529 6530 6531 6532 6533 6534 6535 6536 6537 6538 6539 class UpdateRefInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"ref_id\" , \"oid\" , \"force\" , \"client_mutation_id\" ) ref_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"refId\" ) oid = sgqlc . types . Field ( sgqlc . types . non_null ( GitObjectID ), graphql_name = \"oid\" ) force = sgqlc . types . Field ( Boolean , graphql_name = \"force\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateRefInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRefPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21318 21319 21320 21321 21322 21323 21324 21325 21326 class UpdateRefPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"ref\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) ref = sgqlc . types . Field ( \"Ref\" , graphql_name = \"ref\" )","title":"UpdateRefPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRepositoryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6542 6543 6544 6545 6546 6547 6548 6549 6550 6551 6552 6553 6554 6555 6556 6557 6558 6559 6560 6561 6562 6563 6564 6565 6566 6567 6568 6569 class UpdateRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"name\" , \"description\" , \"template\" , \"homepage_url\" , \"has_wiki_enabled\" , \"has_issues_enabled\" , \"has_projects_enabled\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) name = sgqlc . types . Field ( String , graphql_name = \"name\" ) description = sgqlc . types . Field ( String , graphql_name = \"description\" ) template = sgqlc . types . Field ( Boolean , graphql_name = \"template\" ) homepage_url = sgqlc . types . Field ( URI , graphql_name = \"homepageUrl\" ) has_wiki_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasWikiEnabled\" ) has_issues_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasIssuesEnabled\" ) has_projects_enabled = sgqlc . types . Field ( Boolean , graphql_name = \"hasProjectsEnabled\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateRepositoryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRepositoryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21329 21330 21331 21332 21333 21334 21335 21336 21337 class UpdateRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"UpdateRepositoryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRepositoryWebCommitSignoffSettingInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6572 6573 6574 6575 6576 6577 6578 6579 6580 6581 6582 6583 6584 6585 6586 6587 6588 6589 class UpdateRepositoryWebCommitSignoffSettingInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"web_commit_signoff_required\" , \"client_mutation_id\" , ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) web_commit_signoff_required = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"webCommitSignoffRequired\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateRepositoryWebCommitSignoffSettingInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateRepositoryWebCommitSignoffSettingPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21340 21341 21342 21343 21344 21345 21346 21347 21348 21349 class UpdateRepositoryWebCommitSignoffSettingPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"message\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"UpdateRepositoryWebCommitSignoffSettingPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateSponsorshipPreferencesInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6592 6593 6594 6595 6596 6597 6598 6599 6600 6601 6602 6603 6604 6605 6606 6607 6608 6609 6610 6611 6612 6613 class UpdateSponsorshipPreferencesInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"sponsor_id\" , \"sponsor_login\" , \"sponsorable_id\" , \"sponsorable_login\" , \"receive_emails\" , \"privacy_level\" , \"client_mutation_id\" , ) sponsor_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorId\" ) sponsor_login = sgqlc . types . Field ( String , graphql_name = \"sponsorLogin\" ) sponsorable_id = sgqlc . types . Field ( ID , graphql_name = \"sponsorableId\" ) sponsorable_login = sgqlc . types . Field ( String , graphql_name = \"sponsorableLogin\" ) receive_emails = sgqlc . types . Field ( Boolean , graphql_name = \"receiveEmails\" ) privacy_level = sgqlc . types . Field ( SponsorshipPrivacy , graphql_name = \"privacyLevel\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateSponsorshipPreferencesInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateSponsorshipPreferencesPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21352 21353 21354 21355 21356 21357 21358 21359 21360 class UpdateSponsorshipPreferencesPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"sponsorship\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) sponsorship = sgqlc . types . Field ( \"Sponsorship\" , graphql_name = \"sponsorship\" )","title":"UpdateSponsorshipPreferencesPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateSubscriptionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6616 6617 6618 6619 6620 6621 6622 6623 6624 6625 6626 6627 6628 6629 class UpdateSubscriptionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"subscribable_id\" , \"state\" , \"client_mutation_id\" ) subscribable_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"subscribableId\" ) state = sgqlc . types . Field ( sgqlc . types . non_null ( SubscriptionState ), graphql_name = \"state\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateSubscriptionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateSubscriptionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21363 21364 21365 21366 21367 21368 21369 21370 21371 class UpdateSubscriptionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"subscribable\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) subscribable = sgqlc . types . Field ( Subscribable , graphql_name = \"subscribable\" )","title":"UpdateSubscriptionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamDiscussionCommentInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6632 6633 6634 6635 6636 6637 6638 6639 6640 6641 6642 class UpdateTeamDiscussionCommentInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"body\" , \"body_version\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) body = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"body\" ) body_version = sgqlc . types . Field ( String , graphql_name = \"bodyVersion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateTeamDiscussionCommentInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamDiscussionCommentPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21374 21375 21376 21377 21378 21379 21380 21381 21382 21383 21384 class UpdateTeamDiscussionCommentPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"team_discussion_comment\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) team_discussion_comment = sgqlc . types . Field ( \"TeamDiscussionComment\" , graphql_name = \"teamDiscussionComment\" )","title":"UpdateTeamDiscussionCommentPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamDiscussionInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6645 6646 6647 6648 6649 6650 6651 6652 6653 6654 6655 6656 6657 6658 6659 6660 6661 6662 6663 6664 class UpdateTeamDiscussionInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"title\" , \"body\" , \"body_version\" , \"pinned\" , \"client_mutation_id\" , ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) title = sgqlc . types . Field ( String , graphql_name = \"title\" ) body = sgqlc . types . Field ( String , graphql_name = \"body\" ) body_version = sgqlc . types . Field ( String , graphql_name = \"bodyVersion\" ) pinned = sgqlc . types . Field ( Boolean , graphql_name = \"pinned\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateTeamDiscussionInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamDiscussionPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21387 21388 21389 21390 21391 21392 21393 21394 21395 class UpdateTeamDiscussionPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"team_discussion\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) team_discussion = sgqlc . types . Field ( \"TeamDiscussion\" , graphql_name = \"teamDiscussion\" )","title":"UpdateTeamDiscussionPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamsRepositoryInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6667 6668 6669 6670 6671 6672 6673 6674 6675 6676 6677 6678 6679 6680 6681 6682 6683 6684 class UpdateTeamsRepositoryInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"team_ids\" , \"permission\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) team_ids = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( ID ))), graphql_name = \"teamIds\" , ) permission = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryPermission ), graphql_name = \"permission\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateTeamsRepositoryInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTeamsRepositoryPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21398 21399 21400 21401 21402 21403 21404 21405 21406 21407 21408 21409 class UpdateTeamsRepositoryPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"repository\" , \"teams\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" ) teams = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( \"Team\" )), graphql_name = \"teams\" )","title":"UpdateTeamsRepositoryPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTopicsInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6687 6688 6689 6690 6691 6692 6693 6694 6695 6696 6697 6698 6699 6700 6701 class UpdateTopicsInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"repository_id\" , \"topic_names\" , \"client_mutation_id\" ) repository_id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"repositoryId\" ) topic_names = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"topicNames\" , ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"UpdateTopicsInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UpdateTopicsPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21412 21413 21414 21415 21416 21417 21418 21419 21420 21421 21422 21423 21424 class UpdateTopicsPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"invalid_topic_names\" , \"repository\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) invalid_topic_names = sgqlc . types . Field ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"invalidTopicNames\" , ) repository = sgqlc . types . Field ( \"Repository\" , graphql_name = \"repository\" )","title":"UpdateTopicsPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.User","text":"Bases: sgqlc . types . Type , Node , Actor , PackageOwner , ProjectOwner , ProjectNextOwner , ProjectV2Owner , ProjectV2Recent , RepositoryDiscussionAuthor , RepositoryDiscussionCommentAuthor , RepositoryOwner , UniformResourceLocatable , ProfileOwner , Sponsorable See source code for more info. Source code in prefect_github/schemas/graphql_schema.pyclass User ( sgqlc . types . Type , Node , Actor , PackageOwner , ProjectOwner , ProjectNextOwner , ProjectV2Owner , ProjectV2Recent , RepositoryDiscussionAuthor , RepositoryDiscussionCommentAuthor , RepositoryOwner , UniformResourceLocatable , ProfileOwner , Sponsorable , ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"bio\" , \"bio_html\" , \"can_receive_organization_emails_when_notifications_restricted\" , \"commit_comments\" , \"company\" , \"company_html\" , \"contributions_collection\" , \"created_at\" , \"database_id\" , \"followers\" , \"following\" , \"gist\" , \"gist_comments\" , \"gists\" , \"hovercard\" , \"interaction_ability\" , \"is_bounty_hunter\" , \"is_campus_expert\" , \"is_developer_program_member\" , \"is_employee\" , \"is_following_viewer\" , \"is_git_hub_star\" , \"is_hireable\" , \"is_site_admin\" , \"is_viewer\" , \"issue_comments\" , \"issues\" , \"organization\" , \"organization_verified_domain_emails\" , \"organizations\" , \"public_keys\" , \"pull_requests\" , \"repositories_contributed_to\" , \"saved_replies\" , \"starred_repositories\" , \"status\" , \"top_repositories\" , \"twitter_username\" , \"updated_at\" , \"viewer_can_follow\" , \"viewer_is_following\" , \"watching\" , ) bio = sgqlc . types . Field ( String , graphql_name = \"bio\" ) bio_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"bioHTML\" ) can_receive_organization_emails_when_notifications_restricted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"canReceiveOrganizationEmailsWhenNotificationsRestricted\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) commit_comments = sgqlc . types . Field ( sgqlc . types . non_null ( CommitCommentConnection ), graphql_name = \"commitComments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) company = sgqlc . types . Field ( String , graphql_name = \"company\" ) company_html = sgqlc . types . Field ( sgqlc . types . non_null ( HTML ), graphql_name = \"companyHTML\" ) contributions_collection = sgqlc . types . Field ( sgqlc . types . non_null ( ContributionsCollection ), graphql_name = \"contributionsCollection\" , args = sgqlc . types . ArgDict ( ( ( \"organization_id\" , sgqlc . types . Arg ( ID , graphql_name = \"organizationID\" , default = None ), ), ( \"from_\" , sgqlc . types . Arg ( DateTime , graphql_name = \"from\" , default = None )), ( \"to\" , sgqlc . types . Arg ( DateTime , graphql_name = \"to\" , default = None )), ) ), ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) followers = sgqlc . types . Field ( sgqlc . types . non_null ( FollowerConnection ), graphql_name = \"followers\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) following = sgqlc . types . Field ( sgqlc . types . non_null ( FollowingConnection ), graphql_name = \"following\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) gist = sgqlc . types . Field ( Gist , graphql_name = \"gist\" , args = sgqlc . types . ArgDict ( ( ( \"name\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"name\" , default = None ), ), ) ), ) gist_comments = sgqlc . types . Field ( sgqlc . types . non_null ( GistCommentConnection ), graphql_name = \"gistComments\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) gists = sgqlc . types . Field ( sgqlc . types . non_null ( GistConnection ), graphql_name = \"gists\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( GistPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( GistOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) hovercard = sgqlc . types . Field ( sgqlc . types . non_null ( Hovercard ), graphql_name = \"hovercard\" , args = sgqlc . types . ArgDict ( ( ( \"primary_subject_id\" , sgqlc . types . Arg ( ID , graphql_name = \"primarySubjectId\" , default = None ), ), ) ), ) interaction_ability = sgqlc . types . Field ( RepositoryInteractionAbility , graphql_name = \"interactionAbility\" ) is_bounty_hunter = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isBountyHunter\" ) is_campus_expert = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isCampusExpert\" ) is_developer_program_member = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isDeveloperProgramMember\" ) is_employee = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isEmployee\" ) is_following_viewer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isFollowingViewer\" ) is_git_hub_star = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isGitHubStar\" ) is_hireable = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isHireable\" ) is_site_admin = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isSiteAdmin\" ) is_viewer = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isViewer\" ) issue_comments = sgqlc . types . Field ( sgqlc . types . non_null ( IssueCommentConnection ), graphql_name = \"issueComments\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueCommentOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) issues = sgqlc . types . Field ( sgqlc . types . non_null ( IssueConnection ), graphql_name = \"issues\" , args = sgqlc . types . ArgDict ( ( ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( IssueState )), graphql_name = \"states\" , default = None , ), ), ( \"filter_by\" , sgqlc . types . Arg ( IssueFilters , graphql_name = \"filterBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) organization = sgqlc . types . Field ( Organization , graphql_name = \"organization\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) organization_verified_domain_emails = sgqlc . types . Field ( sgqlc . types . non_null ( sgqlc . types . list_of ( sgqlc . types . non_null ( String ))), graphql_name = \"organizationVerifiedDomainEmails\" , args = sgqlc . types . ArgDict ( ( ( \"login\" , sgqlc . types . Arg ( sgqlc . types . non_null ( String ), graphql_name = \"login\" , default = None ), ), ) ), ) organizations = sgqlc . types . Field ( sgqlc . types . non_null ( OrganizationConnection ), graphql_name = \"organizations\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) public_keys = sgqlc . types . Field ( sgqlc . types . non_null ( PublicKeyConnection ), graphql_name = \"publicKeys\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pull_requests = sgqlc . types . Field ( sgqlc . types . non_null ( PullRequestConnection ), graphql_name = \"pullRequests\" , args = sgqlc . types . ArgDict ( ( ( \"states\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( PullRequestState )), graphql_name = \"states\" , default = None , ), ), ( \"labels\" , sgqlc . types . Arg ( sgqlc . types . list_of ( sgqlc . types . non_null ( String )), graphql_name = \"labels\" , default = None , ), ), ( \"head_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"headRefName\" , default = None ), ), ( \"base_ref_name\" , sgqlc . types . Arg ( String , graphql_name = \"baseRefName\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( IssueOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) repositories_contributed_to = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"repositoriesContributedTo\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"include_user_repositories\" , sgqlc . types . Arg ( Boolean , graphql_name = \"includeUserRepositories\" , default = None ), ), ( \"contribution_types\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryContributionType ), graphql_name = \"contributionTypes\" , default = None , ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) saved_replies = sgqlc . types . Field ( SavedReplyConnection , graphql_name = \"savedReplies\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( SavedReplyOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"UPDATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) starred_repositories = sgqlc . types . Field ( sgqlc . types . non_null ( StarredRepositoryConnection ), graphql_name = \"starredRepositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"owned_by_viewer\" , sgqlc . types . Arg ( Boolean , graphql_name = \"ownedByViewer\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( StarOrder , graphql_name = \"orderBy\" , default = None ), ), ) ), ) status = sgqlc . types . Field ( \"UserStatus\" , graphql_name = \"status\" ) top_repositories = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"topRepositories\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( sgqlc . types . non_null ( RepositoryOrder ), graphql_name = \"orderBy\" , default = None , ), ), ( \"since\" , sgqlc . types . Arg ( DateTime , graphql_name = \"since\" , default = None ), ), ) ), ) twitter_username = sgqlc . types . Field ( String , graphql_name = \"twitterUsername\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) viewer_can_follow = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanFollow\" ) viewer_is_following = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerIsFollowing\" ) watching = sgqlc . types . Field ( sgqlc . types . non_null ( RepositoryConnection ), graphql_name = \"watching\" , args = sgqlc . types . ArgDict ( ( ( \"privacy\" , sgqlc . types . Arg ( RepositoryPrivacy , graphql_name = \"privacy\" , default = None ), ), ( \"order_by\" , sgqlc . types . Arg ( RepositoryOrder , graphql_name = \"orderBy\" , default = None ), ), ( \"affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"affiliations\" , default = None , ), ), ( \"owner_affiliations\" , sgqlc . types . Arg ( sgqlc . types . list_of ( RepositoryAffiliation ), graphql_name = \"ownerAffiliations\" , default = ( \"OWNER\" , \"COLLABORATOR\" ), ), ), ( \"is_locked\" , sgqlc . types . Arg ( Boolean , graphql_name = \"isLocked\" , default = None ), ), ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), )","title":"User"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserBlockDuration","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2114 2115 2116 2117 2118 2119 2120 class UserBlockDuration ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"ONE_DAY\" , \"ONE_MONTH\" , \"ONE_WEEK\" , \"PERMANENT\" , \"THREE_DAYS\" )","title":"UserBlockDuration"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserBlockedEvent","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32107 32108 32109 32110 32111 32112 32113 32114 32115 32116 32117 32118 32119 32120 32121 class UserBlockedEvent ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"actor\" , \"block_duration\" , \"created_at\" , \"subject\" ) actor = sgqlc . types . Field ( Actor , graphql_name = \"actor\" ) block_duration = sgqlc . types . Field ( sgqlc . types . non_null ( UserBlockDuration ), graphql_name = \"blockDuration\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) subject = sgqlc . types . Field ( User , graphql_name = \"subject\" )","title":"UserBlockedEvent"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21427 21428 21429 21430 21431 21432 21433 21434 21435 21436 21437 21438 21439 21440 21441 class UserConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"User\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"UserConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserContentEdit","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32124 32125 32126 32127 32128 32129 32130 32131 32132 32133 32134 32135 32136 32137 32138 32139 32140 32141 32142 32143 32144 32145 32146 32147 32148 32149 32150 32151 class UserContentEdit ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"deleted_at\" , \"deleted_by\" , \"diff\" , \"edited_at\" , \"editor\" , \"updated_at\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) deleted_at = sgqlc . types . Field ( DateTime , graphql_name = \"deletedAt\" ) deleted_by = sgqlc . types . Field ( Actor , graphql_name = \"deletedBy\" ) diff = sgqlc . types . Field ( String , graphql_name = \"diff\" ) edited_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"editedAt\" ) editor = sgqlc . types . Field ( Actor , graphql_name = \"editor\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"UserContentEdit"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserContentEditConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21444 21445 21446 21447 21448 21449 21450 21451 21452 21453 21454 21455 21456 21457 21458 21459 21460 21461 21462 class UserContentEditConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserContentEditEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserContentEdit\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"UserContentEditConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserContentEditEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21465 21466 21467 21468 21469 21470 21471 21472 21473 class UserContentEditEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"UserContentEdit\" , graphql_name = \"node\" )","title":"UserContentEditEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21476 21477 21478 21479 21480 21481 21482 21483 21484 class UserEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"User\" , graphql_name = \"node\" )","title":"UserEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserEmailMetadata","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21487 21488 21489 21490 21491 21492 21493 21494 21495 21496 class UserEmailMetadata ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"primary\" , \"type\" , \"value\" ) primary = sgqlc . types . Field ( Boolean , graphql_name = \"primary\" ) type = sgqlc . types . Field ( String , graphql_name = \"type\" ) value = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"value\" )","title":"UserEmailMetadata"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatus","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32154 32155 32156 32157 32158 32159 32160 32161 32162 32163 32164 32165 32166 32167 32168 32169 32170 32171 32172 32173 32174 32175 32176 32177 32178 32179 32180 32181 32182 32183 32184 32185 class UserStatus ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"emoji\" , \"emoji_html\" , \"expires_at\" , \"indicates_limited_availability\" , \"message\" , \"organization\" , \"updated_at\" , \"user\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) emoji = sgqlc . types . Field ( String , graphql_name = \"emoji\" ) emoji_html = sgqlc . types . Field ( HTML , graphql_name = \"emojiHTML\" ) expires_at = sgqlc . types . Field ( DateTime , graphql_name = \"expiresAt\" ) indicates_limited_availability = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"indicatesLimitedAvailability\" ) message = sgqlc . types . Field ( String , graphql_name = \"message\" ) organization = sgqlc . types . Field ( Organization , graphql_name = \"organization\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) user = sgqlc . types . Field ( sgqlc . types . non_null ( User ), graphql_name = \"user\" )","title":"UserStatus"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatusConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21499 21500 21501 21502 21503 21504 21505 21506 21507 21508 21509 21510 21511 21512 21513 21514 21515 class UserStatusConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserStatusEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"UserStatus\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"UserStatusConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatusEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21518 21519 21520 21521 21522 21523 21524 21525 21526 class UserStatusEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"UserStatus\" , graphql_name = \"node\" )","title":"UserStatusEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatusOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6704 6705 6706 6707 6708 6709 6710 6711 6712 6713 6714 6715 6716 class UserStatusOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( UserStatusOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"UserStatusOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.UserStatusOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2123 2124 2125 2126 2127 2128 2129 class UserStatusOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"UPDATED_AT\" ,)","title":"UserStatusOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomain","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32188 32189 32190 32191 32192 32193 32194 32195 32196 32197 32198 32199 32200 32201 32202 32203 32204 32205 32206 32207 32208 32209 32210 32211 32212 32213 32214 32215 32216 32217 32218 32219 32220 32221 32222 32223 32224 32225 32226 32227 32228 32229 32230 32231 32232 32233 32234 32235 32236 32237 32238 32239 32240 32241 32242 32243 class VerifiableDomain ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"dns_host_name\" , \"domain\" , \"has_found_host_name\" , \"has_found_verification_token\" , \"is_approved\" , \"is_required_for_policy_enforcement\" , \"is_verified\" , \"owner\" , \"punycode_encoded_domain\" , \"token_expiration_time\" , \"updated_at\" , \"verification_token\" , ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) dns_host_name = sgqlc . types . Field ( URI , graphql_name = \"dnsHostName\" ) domain = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"domain\" ) has_found_host_name = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasFoundHostName\" ) has_found_verification_token = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"hasFoundVerificationToken\" ) is_approved = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isApproved\" ) is_required_for_policy_enforcement = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isRequiredForPolicyEnforcement\" ) is_verified = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"isVerified\" ) owner = sgqlc . types . Field ( sgqlc . types . non_null ( \"VerifiableDomainOwner\" ), graphql_name = \"owner\" ) punycode_encoded_domain = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"punycodeEncodedDomain\" ) token_expiration_time = sgqlc . types . Field ( DateTime , graphql_name = \"tokenExpirationTime\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) verification_token = sgqlc . types . Field ( String , graphql_name = \"verificationToken\" )","title":"VerifiableDomain"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21529 21530 21531 21532 21533 21534 21535 21536 21537 21538 21539 21540 21541 21542 21543 21544 21545 21546 21547 class VerifiableDomainConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"VerifiableDomainEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"VerifiableDomain\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"VerifiableDomainConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21550 21551 21552 21553 21554 21555 21556 21557 21558 class VerifiableDomainEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"VerifiableDomain\" , graphql_name = \"node\" )","title":"VerifiableDomainEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6719 6720 6721 6722 6723 6724 6725 6726 6727 6728 6729 6730 6731 class VerifiableDomainOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( VerifiableDomainOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"VerifiableDomainOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2132 2133 2134 2135 2136 2137 2138 class VerifiableDomainOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" , \"DOMAIN\" )","title":"VerifiableDomainOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifiableDomainOwner","text":"Bases: sgqlc . types . Union See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32918 32919 32920 32921 32922 32923 32924 class VerifiableDomainOwner ( sgqlc . types . Union ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __types__ = ( Enterprise , Organization )","title":"VerifiableDomainOwner"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifyVerifiableDomainInput","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6734 6735 6736 6737 6738 6739 6740 6741 6742 class VerifyVerifiableDomainInput ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"id\" , \"client_mutation_id\" ) id = sgqlc . types . Field ( sgqlc . types . non_null ( ID ), graphql_name = \"id\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" )","title":"VerifyVerifiableDomainInput"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.VerifyVerifiableDomainPayload","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21561 21562 21563 21564 21565 21566 21567 21568 21569 class VerifyVerifiableDomainPayload ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"client_mutation_id\" , \"domain\" ) client_mutation_id = sgqlc . types . Field ( String , graphql_name = \"clientMutationId\" ) domain = sgqlc . types . Field ( \"VerifiableDomain\" , graphql_name = \"domain\" )","title":"VerifyVerifiableDomainPayload"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.ViewerHovercardContext","text":"Bases: sgqlc . types . Type , HovercardContext See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32246 32247 32248 32249 32250 32251 32252 32253 class ViewerHovercardContext ( sgqlc . types . Type , HovercardContext ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"viewer\" ,) viewer = sgqlc . types . Field ( sgqlc . types . non_null ( User ), graphql_name = \"viewer\" )","title":"ViewerHovercardContext"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Votable","text":"Bases: sgqlc . types . Interface See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21572 21573 21574 21575 21576 21577 21578 21579 21580 21581 21582 21583 21584 21585 21586 21587 class Votable ( sgqlc . types . Interface ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"upvote_count\" , \"viewer_can_upvote\" , \"viewer_has_upvoted\" ) upvote_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"upvoteCount\" ) viewer_can_upvote = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerCanUpvote\" ) viewer_has_upvoted = sgqlc . types . Field ( sgqlc . types . non_null ( Boolean ), graphql_name = \"viewerHasUpvoted\" )","title":"Votable"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.Workflow","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32256 32257 32258 32259 32260 32261 32262 32263 32264 32265 32266 32267 32268 32269 32270 32271 32272 32273 32274 32275 32276 32277 32278 32279 32280 32281 32282 32283 32284 32285 32286 32287 32288 32289 32290 32291 32292 32293 class Workflow ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"created_at\" , \"database_id\" , \"name\" , \"runs\" , \"updated_at\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) name = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"name\" ) runs = sgqlc . types . Field ( sgqlc . types . non_null ( WorkflowRunConnection ), graphql_name = \"runs\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ( \"order_by\" , sgqlc . types . Arg ( WorkflowRunOrder , graphql_name = \"orderBy\" , default = { \"field\" : \"CREATED_AT\" , \"direction\" : \"DESC\" }, ), ), ) ), ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" )","title":"Workflow"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRun","text":"Bases: sgqlc . types . Type , Node See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 32296 32297 32298 32299 32300 32301 32302 32303 32304 32305 32306 32307 32308 32309 32310 32311 32312 32313 32314 32315 32316 32317 32318 32319 32320 32321 32322 32323 32324 32325 32326 32327 32328 32329 32330 32331 32332 32333 32334 32335 32336 32337 32338 32339 32340 32341 32342 32343 32344 32345 32346 32347 32348 32349 32350 32351 32352 32353 32354 32355 32356 32357 32358 32359 32360 32361 class WorkflowRun ( sgqlc . types . Type , Node ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"check_suite\" , \"created_at\" , \"database_id\" , \"deployment_reviews\" , \"pending_deployment_requests\" , \"resource_path\" , \"run_number\" , \"updated_at\" , \"url\" , \"workflow\" , ) check_suite = sgqlc . types . Field ( sgqlc . types . non_null ( CheckSuite ), graphql_name = \"checkSuite\" ) created_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"createdAt\" ) database_id = sgqlc . types . Field ( Int , graphql_name = \"databaseId\" ) deployment_reviews = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentReviewConnection ), graphql_name = \"deploymentReviews\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) pending_deployment_requests = sgqlc . types . Field ( sgqlc . types . non_null ( DeploymentRequestConnection ), graphql_name = \"pendingDeploymentRequests\" , args = sgqlc . types . ArgDict ( ( ( \"after\" , sgqlc . types . Arg ( String , graphql_name = \"after\" , default = None )), ( \"before\" , sgqlc . types . Arg ( String , graphql_name = \"before\" , default = None ), ), ( \"first\" , sgqlc . types . Arg ( Int , graphql_name = \"first\" , default = None )), ( \"last\" , sgqlc . types . Arg ( Int , graphql_name = \"last\" , default = None )), ) ), ) resource_path = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"resourcePath\" ) run_number = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"runNumber\" ) updated_at = sgqlc . types . Field ( sgqlc . types . non_null ( DateTime ), graphql_name = \"updatedAt\" ) url = sgqlc . types . Field ( sgqlc . types . non_null ( URI ), graphql_name = \"url\" ) workflow = sgqlc . types . Field ( sgqlc . types . non_null ( Workflow ), graphql_name = \"workflow\" )","title":"WorkflowRun"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRunConnection","text":"Bases: sgqlc . types . relay . Connection See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21590 21591 21592 21593 21594 21595 21596 21597 21598 21599 21600 21601 21602 21603 21604 21605 21606 class WorkflowRunConnection ( sgqlc . types . relay . Connection ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"edges\" , \"nodes\" , \"page_info\" , \"total_count\" ) edges = sgqlc . types . Field ( sgqlc . types . list_of ( \"WorkflowRunEdge\" ), graphql_name = \"edges\" ) nodes = sgqlc . types . Field ( sgqlc . types . list_of ( \"WorkflowRun\" ), graphql_name = \"nodes\" ) page_info = sgqlc . types . Field ( sgqlc . types . non_null ( PageInfo ), graphql_name = \"pageInfo\" ) total_count = sgqlc . types . Field ( sgqlc . types . non_null ( Int ), graphql_name = \"totalCount\" )","title":"WorkflowRunConnection"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRunEdge","text":"Bases: sgqlc . types . Type See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 21609 21610 21611 21612 21613 21614 21615 21616 21617 class WorkflowRunEdge ( sgqlc . types . Type ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"cursor\" , \"node\" ) cursor = sgqlc . types . Field ( sgqlc . types . non_null ( String ), graphql_name = \"cursor\" ) node = sgqlc . types . Field ( \"WorkflowRun\" , graphql_name = \"node\" )","title":"WorkflowRunEdge"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRunOrder","text":"Bases: sgqlc . types . Input See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 6745 6746 6747 6748 6749 6750 6751 6752 6753 6754 6755 6756 6757 class WorkflowRunOrder ( sgqlc . types . Input ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __field_names__ = ( \"field\" , \"direction\" ) field = sgqlc . types . Field ( sgqlc . types . non_null ( WorkflowRunOrderField ), graphql_name = \"field\" ) direction = sgqlc . types . Field ( sgqlc . types . non_null ( OrderDirection ), graphql_name = \"direction\" )","title":"WorkflowRunOrder"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.WorkflowRunOrderField","text":"Bases: sgqlc . types . Enum See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2141 2142 2143 2144 2145 2146 2147 class WorkflowRunOrderField ( sgqlc . types . Enum ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema __choices__ = ( \"CREATED_AT\" ,)","title":"WorkflowRunOrderField"},{"location":"schemas/graphql_schema/#prefect_github.schemas.graphql_schema.X509Certificate","text":"Bases: sgqlc . types . Scalar See source code for more info. Source code in prefect_github/schemas/graphql_schema.py 2150 2151 2152 2153 2154 2155 class X509Certificate ( sgqlc . types . Scalar ): \"\"\" See source code for more info. \"\"\" __schema__ = graphql_schema","title":"X509Certificate"}]}